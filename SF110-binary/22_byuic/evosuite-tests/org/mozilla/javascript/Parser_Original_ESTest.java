/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 02:05:30 GMT 2024
 */

package org.mozilla.javascript;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Decompiler;
import org.mozilla.javascript.DefaultErrorReporter;
import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.Parser;
import org.mozilla.javascript.ScriptOrFnNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_Original_ESTest extends Parser_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReportErrorThrowsRuntimeException() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.reportError("TDp%h2$!V.b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property TDp%h2$!V.b
         //
         verifyException("org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPopScopeThrowsNullPointerException() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.popScope();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddErrorTakingStringThrowsRuntimeException() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Context currentContext = Context.getCurrentContext();
      ErrorReporter arg1 = currentContext.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.addError("error reporter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message resource found for message property error reporter
         //
         verifyException("org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("_NMsJvfHh.(", "_NMsJvfHh.(", (-1368));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1368
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("s?dJ:Nj:T1mgy!_ff", "I0&K", 99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (I0&K#99)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInsideFunction() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      boolean insideFunction = parser.insideFunction();
      assertFalse(insideFunction);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEncodedSourceReturningNonEmptyString() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("uNT6<X;peS", "fv?'", 224);
      assertEquals(224, parse.getLineno());
      assertEquals("fv?'", parse.getSourceName());
      
      String encodedSource = parser.getEncodedSource();
      assertEquals("\u0087'\u0004uNT6\u000E'\u0001XQ\u0001'\u0003peSQ\u0001", encodedSource);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCurrentLineNumber() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      parser.parse("get", ":H&3o7,iy! ", 0);
      parser.getCurrentLineNumber();
      assertEquals("\u0087'\u0003getQ\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateDecompiler() throws Throwable  {
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser((CompilerEnvirons) null, arg1);
      Decompiler createDecompiler = parser.createDecompiler((CompilerEnvirons) null);
      assertEquals(1, Decompiler.INITIAL_INDENT_PROP);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      parser.parse("false", "@ LAi$", 1326);
      assertEquals("\u0087,Q\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("RDxf%C[", "RDxf%C[", (-2646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2646
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithNegative0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("F|[$je#N]&r=lK", "F|[$je#N]&r=lK", (-195));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("J^!{9 ", "J^!{9 ", 893);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing : after property id (J^!{9 #893)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithNegative1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("[qC,", "[qC,", (-89));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException2() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("goto", "goto", (-213));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -213
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithZero() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse(" /= ", "language version", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated regular expression literal
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("/Qh{<~x:pdb!y/!bY", "_NMsJvfHh.(", 2613);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException3() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("@ [i$", "@ [i$", (-1746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1746
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNullAndPositive0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse(" @*b@e+Zb([48%oywd", (String) null, 29);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive2() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("O[yE8.@:XCV^4\"", "O[yE8.@:XCV^4\"", 2087);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing name after .@ (O[yE8.@:XCV^4\"#2087)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalStateException0() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("msg.bad.throw.eol", "msg.bad.throw.eol", (-478));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive3() throws Throwable  {
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("c..", "msg.no.paren.for.ctrl", 39);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing name after . operator (msg.no.paren.for.ctrl#39)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive4() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("nYf(3, ;aQ9*3Aqe{m", "nYf(3, ;aQ9*3Aqe{m", 120);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (nYf(3, ;aQ9*3Aqe{m#120)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive5() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("z:U()S", "set", 947);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (set#947)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive6() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("FXl8R9--jenv[;09", "FXl8R9--jenv[;09", 404);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (FXl8R9--jenv[;09#404)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithNegative2() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      arg0.setXmlAvailable(false);
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("<><7T4#FGD3mCwE=", "msg.destruct.assign.no.init", (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("void ", "XP:iUxw*Y>Rp7", 1036);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive7() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("--", "?", 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (?#85)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive8() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("delete ", "delete ", 404);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (delete #404)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException4() throws Throwable  {
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("6+~ .4`d", "6+~ .4`d", (-1468));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1468
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive9() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("-IxXy5O+!>", "-IxXy5O+!>", 122);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (-IxXy5O+!>#122)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNullAndPositive1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Context enter = Context.enter();
      ErrorReporter arg1 = enter.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("+Ag1ozs'D}Vt$]TJs", (String) null, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated string literal
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive2() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("0%E&++", "K#_@+%8y", 4758);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive3() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("a/{}]u/c,!vtJqY;P/S", "$qM", 85);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive4() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("R-{", "R-{", 104);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndNegative() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("Z<<ED O4hRufFz@G", "Z<<ED O4hRufFz@G", (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithNegative3() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("gv18Yz>=", "gv18Yz>=", (-5428));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive10() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("PAE>rV*b36>*vev", "PAE>rV*b36>*vev", 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal character (PAE>rV*b36>*vev#46)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException5() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("Bfa<=6!r4TUT{{8", "'YGfpGJikZy", (-791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -791
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      parser.parse("factory == null", "factory == null", 65);
      assertEquals("\u0087'\u0007factory\f*Q\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive11() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("v||,rf ct", "U4tc&S(2Py)J\u0001re", 20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (U4tc&S(2Py)J\u0001re#20)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException6() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("l?[]y", ">`\r<0'(x.;/*B;", (-1216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1216
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive12() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("LNp|[mT=hu{\"s:%,", "LNp|[mT=hu{\"s:%,", 1245);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ] after element list (LNp|[mT=hu{\"s:%,#1245)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive13() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("ZMF3_^Px,Z<LRi~", "ZMF3_^Px,Z<LRi~", 126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ; before statement (ZMF3_^Px,Z<LRi~#126)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive14() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("zE}ysL#&{i<>+m", "zE}ysL#&{i<>+m", 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error (zE}ysL#&{i<>+m#103)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddWarning() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("uNT6<X;peS", "d>#sk;7", 7);
      assertEquals("d>#sk;7", parse.getSourceName());
      assertEquals(7, parse.getLineno());
      
      parser.addWarning("msg.no.paren.after.switch", "Ktmi");
      assertEquals("\u0087'\u0004uNT6\u000E'\u0001XQ\u0001'\u0003peSQ\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse2() throws Throwable  {
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, arg1);
      parser.parse("KGP:V6:rV", "KGP:V6:rV", 24);
      assertEquals("\u0087'\u0003KGPf\u0001'\u0002V6f\u0001'\u0002rVQ\u0001", parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive5() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("const", "<QQnrsx6G0-MXbf", 159);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException7() throws Throwable  {
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("with", "with", (-3800));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3800
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive15() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("for ", " ee38HK-Q|U", 1424);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ( after for ( ee38HK-Q|U#1424)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive16() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("default", "IJ3aritOhZ2{7;9}`6", 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not a valid default namespace statement. Syntax is: default xml namespace = EXPRESSION; (IJ3aritOhZ2{7;9}`6#157)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive17() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = DefaultErrorReporter.forEval((ErrorReporter) null);
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("switch", "_NMsJvfHh.(", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SyntaxError: missing ( before switch expression (_NMsJvfHh.(#32)
         //
         verifyException("org.mozilla.javascript.ScriptRuntime", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive18() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("if ", "if ", 152);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ( before condition (if #152)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive19() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("throw ", "throw ", 3420);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of file (throw #3420)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive6() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("return", "return", 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive20() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("break", "break", 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unlabelled break must be inside loop or switch (break#46)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive21() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("{}D\"CFDjGM:Hh_zD1*D", "{}D\"CFDjGM:Hh_zD1*D", 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated string literal ({}D\"CFDjGM:Hh_zD1*D#46)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException8() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("{sjUaI", "TypUEro: ", (-667));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -667
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalArgumentException9() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("aa:{8+xqCIAm`dF!#", "aa:{8+xqCIAm`dF!#", (-1746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1746
         //
         verifyException("org.mozilla.javascript.RhinoException", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNonEmptyStringAndPositive22() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("function", "function", 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing ( before function parameters. (function#32)
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive7() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      arg0.setXmlAvailable(false);
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("_NMsJvfHh.(", "_NMsJvfHh.(", 4617);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsIllegalStateException1() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("ZoqtnpI[qf]", "ZoqtnpI[qf]", (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // FAILED ASSERTION
         //
         verifyException("org.mozilla.javascript.Kit", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse3() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("u\n", "u\n", 1677);
      assertEquals("\u0087'\u0001uQ\u0001", parser.getEncodedSource());
      assertEquals(1677, parse.getEndLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseReturningScriptOrFnNodeWhereHasChildrenIsFalse() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      ScriptOrFnNode parse = parser.parse("\n", "\n", 145);
      assertEquals("\u0087", parser.getEncodedSource());
      assertEquals(145, parse.getEndLineno());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddStrictWarning() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      parser.addStrictWarning("error reporter", "error reporter");
      assertNull(parser.getEncodedSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNullAndPositive2() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.parse("DN^!{m*Wu", (String) null, 1223);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // missing : after property id
         //
         verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithPositive8() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse("while", "while", 722);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEncodedSourceReturningNull() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      String encodedSource = parser.getEncodedSource();
      assertNull(encodedSource);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddErrorTaking2ArgumentsThrowsNullPointerException() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      ErrorReporter arg1 = arg0.getErrorReporter();
      Parser parser = new Parser(arg0, arg1);
      // Undeclared exception!
      try { 
        parser.addError("msg.no.paren.with", "ayuY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseThrowsNullPointerExceptionAndParseWithNegative4() throws Throwable  {
      CompilerEnvirons arg0 = new CompilerEnvirons();
      Parser parser = new Parser(arg0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        parser.parse(";@Rv Iu<K&~e5Tcc?T", ";@Rv Iu<K&~e5Tcc?T", (-1765));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.mozilla.javascript.Parser", e);
      }
  }
}
