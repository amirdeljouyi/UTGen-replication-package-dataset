/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 00:17:24 GMT 2024
 */

package com.yahoo.platform.yui.compressor;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.yahoo.platform.yui.compressor.JavaScriptIdentifier;
import com.yahoo.platform.yui.compressor.ScriptOrFnScope;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScriptOrFnScope_ESTest extends ScriptOrFnScope_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParentScopeReturningNonNull() throws Throwable  {
      // Given a ScriptOrFnScope with a parent scope
      ScriptOrFnScope arg1 = new ScriptOrFnScope(140, (ScriptOrFnScope) null);
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(140, arg1);
      
      // When we call getParentScope()
      ScriptOrFnScope parentScope = scriptOrFnScope.getParentScope();
      
      // Then the parent scope should be the same as the argument passed in the constructor
      assertSame(arg1, parentScope);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdentifierReturningNonNull() throws Throwable  {
      // Given a ScriptOrFnScope object with an identifier "G2Q&jQU"
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(2416, (ScriptOrFnScope) null);
      
      // When the method declareIdentifier is called with the same identifier
      JavaScriptIdentifier declareIdentifier = scriptOrFnScope.declareIdentifier("G2Q&jQU");
      
      // Then the method getIdentifier should return the same identifier
      JavaScriptIdentifier identifier = scriptOrFnScope.getIdentifier("G2Q&jQU");
      assertSame(identifier, declareIdentifier);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBraceNestingReturningPositive() throws Throwable  {
      ScriptOrFnScope script = new ScriptOrFnScope(2456, (ScriptOrFnScope) null);
      int expectedBraceNesting = 2456;
      // Given a script or function scope with a brace nesting level of 2456
      
      int actualBraceNesting = script.getBraceNesting();
      // When the method getBraceNesting() is called
      
      assertEquals(expectedBraceNesting, actualBraceNesting);
      // Then the expected brace nesting level is equal to the actual brace nesting level
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBraceNestingReturningNegative() throws Throwable  {
      // Given: A ScriptOrFnScope with a negative value for the brace nesting level
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(-1, null);
      
      // When: The brace nesting level is retrieved
      int braceNesting = scriptOrFnScope.getBraceNesting();
      
      // Then: The retrieved value should be the same as the original negative value
      assertEquals(-1, braceNesting);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeclareIdentifierWithEmptyString() throws Throwable  {
      // Create two ScriptOrFnScope objects with different values
      ScriptOrFnScope arg1 = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, arg1);
      
      // Declare an identifier in the scope of the second object
      scriptOrFnScope.declareIdentifier("");
      
      // Invoke the munge() method twice on both objects
      scriptOrFnScope.munge();
      arg1.munge();
      
      // Assert that the two objects are not equal (they have different values)
      assertFalse(arg1.equals((Object)scriptOrFnScope));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeclareIdentifier() throws Throwable  {
      ScriptOrFnScope arg = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, arg);
      scriptOrFnScope.declareIdentifier("q"); // Declares a new identifier "q" in the current scope
      arg.munge(); // Mutates the arg variable
      assertFalse(arg.equals((Object) scriptOrFnScope)); // Asserts that the mutated arg variable is not equal to the original scriptOrFnScope object
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesScriptOrFnScope() throws Throwable  {
      // rollbacked to evosuite
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      scriptOrFnScope.preventMunging();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMunge() throws Throwable  {
      // Given two ScriptOrFnScope objects with the same values
      ScriptOrFnScope arg1 = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, arg1);
      
      // When we call preventMunging() on one of them
      scriptOrFnScope.preventMunging();
      
      // Then the objects should not be equal
      assertFalse(scriptOrFnScope.equals((Object)arg1));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIncrementVarCount() throws Throwable  {
      // Given a ScriptOrFnScope instance with an initial var count of 0,
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      
      // When the incrementVarCount method is called,
      int incrementedVarCount = scriptOrFnScope.incrementVarCount();
      
      // Then the var count should be incremented by one and return a value of 1.
      assertEquals(1, incrementedVarCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddHint() throws Throwable  {
      // rollbacked to evosuite
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      scriptOrFnScope.addHint("case", "D/jw\"aTrjn@i#");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParentScopeReturningNull() throws Throwable  {
      // Given: A new ScriptOrFnScope instance with no parent
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      
      // When: Calling getParentScope on the instance
      ScriptOrFnScope parentScope = scriptOrFnScope.getParentScope();
      
      // Then: The method should return null
      assertNull(parentScope);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdentifierReturningNull() throws Throwable  {
      // Given a ScriptOrFnScope object with a valid index but an invalid identifier name
      int index = 0;
      String invalidName = "!/n9";
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(index, null);
      
      // When the getIdentifier method is called with the invalid identifier name
      JavaScriptIdentifier identifier = scriptOrFnScope.getIdentifier(invalidName);
      
      // Then the method should return null
      assertNull(identifier);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBraceNestingReturningZero() throws Throwable  {
      // Given a new ScriptOrFnScope instance with no nested braces
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      
      // When the brace nesting is retrieved
      int braceNesting = scriptOrFnScope.getBraceNesting();
      
      // Then the brace nesting should be initialized to 0
      assertEquals(0, braceNesting);
  }
}
