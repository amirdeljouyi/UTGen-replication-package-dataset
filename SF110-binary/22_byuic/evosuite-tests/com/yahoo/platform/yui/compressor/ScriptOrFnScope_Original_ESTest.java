/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 00:17:25 GMT 2024
 */

package com.yahoo.platform.yui.compressor;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.yahoo.platform.yui.compressor.JavaScriptIdentifier;
import com.yahoo.platform.yui.compressor.ScriptOrFnScope;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScriptOrFnScope_Original_ESTest extends ScriptOrFnScope_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdentifierReturningNonNull() throws Throwable  {
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(2416, (ScriptOrFnScope) null);
      JavaScriptIdentifier declareIdentifier = scriptOrFnScope.declareIdentifier("G2Q&jQU");
      JavaScriptIdentifier identifier = scriptOrFnScope.getIdentifier("G2Q&jQU");
      assertSame(identifier, declareIdentifier);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBraceNestingReturningZero() throws Throwable  {
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      int braceNesting = scriptOrFnScope.getBraceNesting();
      assertEquals(0, braceNesting);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBraceNestingReturningPositive() throws Throwable  {
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(2456, (ScriptOrFnScope) null);
      int braceNesting = scriptOrFnScope.getBraceNesting();
      assertEquals(2456, braceNesting);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeclareIdentifierAndMunge0() throws Throwable  {
      ScriptOrFnScope arg1 = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, arg1);
      scriptOrFnScope.declareIdentifier("");
      scriptOrFnScope.munge();
      scriptOrFnScope.munge();
      assertFalse(scriptOrFnScope.equals((Object)arg1));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testDeclareIdentifierAndMunge1() throws Throwable  {
      ScriptOrFnScope arg1 = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, arg1);
      scriptOrFnScope.declareIdentifier("");
      arg1.munge();
      scriptOrFnScope.munge();
      assertFalse(scriptOrFnScope.equals((Object)arg1));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMungeAndPreventMunging() throws Throwable  {
      ScriptOrFnScope arg1 = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, arg1);
      scriptOrFnScope.preventMunging();
      scriptOrFnScope.munge();
      assertFalse(arg1.equals((Object)scriptOrFnScope));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPreventMunging() throws Throwable  {
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      scriptOrFnScope.preventMunging();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParentScopeReturningNonNull() throws Throwable  {
      ScriptOrFnScope arg1 = new ScriptOrFnScope(140, (ScriptOrFnScope) null);
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(140, arg1);
      ScriptOrFnScope parentScope = scriptOrFnScope.getParentScope();
      assertNotSame(parentScope, scriptOrFnScope);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIncrementVarCount() throws Throwable  {
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      int incrementVarCount = scriptOrFnScope.incrementVarCount();
      assertEquals(1, incrementVarCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddHint() throws Throwable  {
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      scriptOrFnScope.addHint("case", "D/jw\"aTrjn@i#");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParentScopeReturningNull() throws Throwable  {
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      ScriptOrFnScope parentScope = scriptOrFnScope.getParentScope();
      assertNull(parentScope);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdentifierReturningNull() throws Throwable  {
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope(0, (ScriptOrFnScope) null);
      JavaScriptIdentifier identifier = scriptOrFnScope.getIdentifier("!/n9");
      assertNull(identifier);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBraceNestingReturningNegative() throws Throwable  {
      ScriptOrFnScope scriptOrFnScope = new ScriptOrFnScope((-1), (ScriptOrFnScope) null);
      int braceNesting = scriptOrFnScope.getBraceNesting();
      assertEquals((-1), braceNesting);
  }
}
