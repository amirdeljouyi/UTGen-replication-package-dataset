* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: org.mozilla.javascript.Parser
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/22_byuic/evosuite-files/evosuite.properties
* Connecting to master process on port 3546
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 23:22:29.080 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 23:22:29.082 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 23:22:29.083 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 23:22:29.087 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 23:22:29.088 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 23:22:29.089 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.mozilla.javascript.Parser
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2777
* Using seed 1709248945995
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 685 / 2777
[Progress:>                             1%] [Cov:==========>                        29%][Progress:>                             1%] [Cov:==========>                        30%][Progress:>                             2%] [Cov:===========>                       33%][Progress:>                             2%] [Cov:============>                      37%][Progress:>                             3%] [Cov:=============>                     38%][Progress:>                             3%] [Cov:=============>                     38%][Progress:=>                            4%] [Cov:==============>                    40%][Progress:=>                            4%] [Cov:==============>                    41%][Progress:=>                            4%] [Cov:==============>                    42%][Progress:=>                            5%] [Cov:===============>                   43%][Progress:=>                            5%] [Cov:===============>                   44%][Progress:=>                            5%] [Cov:===============>                   44%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:=>                            6%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:===============>                   45%][Progress:==>                           7%] [Cov:================>                  46%][Progress:==>                           8%] [Cov:================>                  46%][Progress:==>                           8%] [Cov:================>                  46%][Progress:==>                           9%] [Cov:================>                  47%][Progress:==>                           9%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          10%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          11%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          12%] [Cov:================>                  47%][Progress:===>                          13%] [Cov:================>                  48%][Progress:===>                          13%] [Cov:================>                  48%][Progress:===>                          13%] [Cov:================>                  48%][Progress:====>                         14%] [Cov:================>                  48%][Progress:====>                         14%] [Cov:================>                  48%][Progress:====>                         14%] [Cov:================>                  48%][Progress:====>                         15%] [Cov:================>                  48%][Progress:====>                         15%] [Cov:================>                  48%][Progress:====>                         16%] [Cov:================>                  48%][Progress:====>                         16%] [Cov:================>                  48%][Progress:====>                         16%] [Cov:================>                  48%][Progress:=====>                        17%] [Cov:================>                  48%][Progress:=====>                        17%] [Cov:================>                  48%][Progress:=====>                        18%] [Cov:================>                  48%][Progress:=====>                        18%] [Cov:================>                  48%][Progress:=====>                        18%] [Cov:================>                  48%][Progress:=====>                        19%] [Cov:================>                  48%][Progress:=====>                        19%] [Cov:================>                  48%][Progress:=====>                        19%] [Cov:================>                  48%][Progress:======>                       20%] [Cov:================>                  48%][Progress:======>                       20%] [Cov:================>                  48%][Progress:======>                       20%] [Cov:================>                  48%][Progress:======>                       21%] [Cov:=================>                 49%][Progress:======>                       21%] [Cov:=================>                 49%][Progress:======>                       21%] [Cov:=================>                 49%][Progress:======>                       22%] [Cov:=================>                 49%][Progress:======>                       22%] [Cov:=================>                 49%][Progress:======>                       22%] [Cov:=================>                 49%][Progress:======>                       23%] [Cov:=================>                 49%][Progress:======>                       23%] [Cov:=================>                 49%][Progress:=======>                      24%] [Cov:=================>                 49%][Progress:=======>                      24%] [Cov:=================>                 50%][Progress:=======>                      24%] [Cov:=================>                 50%][Progress:=======>                      25%] [Cov:=================>                 50%][Progress:=======>                      25%] [Cov:=================>                 50%][Progress:=======>                      26%] [Cov:=================>                 50%][Progress:=======>                      26%] [Cov:=================>                 50%][Progress:=======>                      26%] [Cov:=================>                 50%][Progress:========>                     27%] [Cov:=================>                 50%][Progress:========>                     27%] [Cov:=================>                 50%][Progress:========>                     27%] [Cov:=================>                 50%][Progress:========>                     28%] [Cov:=================>                 50%][Progress:========>                     28%] [Cov:=================>                 50%][Progress:========>                     28%] [Cov:=================>                 50%][Progress:========>                     29%] [Cov:=================>                 50%][Progress:========>                     29%] [Cov:=================>                 50%][Progress:========>                     29%] [Cov:=================>                 50%][Progress:=========>                    30%] [Cov:=================>                 50%][Progress:=========>                    30%] [Cov:=================>                 50%][Progress:=========>                    31%] [Cov:=================>                 50%][Progress:=========>                    31%] [Cov:=================>                 50%][Progress:=========>                    32%] [Cov:=================>                 50%][Progress:=========>                    32%] [Cov:=================>                 50%][Progress:=========>                    32%] [Cov:=================>                 50%][Progress:=========>                    33%] [Cov:=================>                 50%][Progress:=========>                    33%] [Cov:=================>                 50%][Progress:==========>                   34%] [Cov:=================>                 50%][Progress:==========>                   34%] [Cov:=================>                 50%][Progress:==========>                   35%] [Cov:=================>                 50%][Progress:==========>                   35%] [Cov:=================>                 50%][Progress:==========>                   35%] [Cov:=================>                 50%][Progress:==========>                   36%] [Cov:=================>                 50%][Progress:==========>                   36%] [Cov:=================>                 50%][Progress:===========>                  37%] [Cov:=================>                 50%][Progress:===========>                  37%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  38%] [Cov:=================>                 50%][Progress:===========>                  39%] [Cov:=================>                 50%][Progress:===========>                  39%] [Cov:=================>                 50%][Progress:============>                 40%] [Cov:=================>                 50%][Progress:============>                 40%] [Cov:=================>                 50%][Progress:============>                 41%] [Cov:=================>                 50%][Progress:============>                 41%] [Cov:=================>                 50%][Progress:============>                 42%] [Cov:=================>                 50%][Progress:============>                 42%] [Cov:=================>                 50%][Progress:============>                 43%] [Cov:=================>                 50%][Progress:============>                 43%] [Cov:=================>                 50%][Progress:=============>                44%] [Cov:=================>                 50%][Progress:=============>                44%] [Cov:=================>                 50%][Progress:=============>                44%] [Cov:=================>                 50%][Progress:=============>                45%] [Cov:=================>                 50%][Progress:=============>                45%] [Cov:=================>                 50%][Progress:=============>                45%] [Cov:=================>                 50%][Progress:=============>                46%] [Cov:=================>                 50%][Progress:=============>                46%] [Cov:=================>                 50%][Progress:=============>                46%] [Cov:=================>                 50%][Progress:==============>               47%] [Cov:=================>                 50%][Progress:==============>               47%] [Cov:=================>                 50%][Progress:==============>               47%] [Cov:=================>                 50%][Progress:==============>               48%] [Cov:=================>                 50%][Progress:==============>               48%] [Cov:=================>                 50%][Progress:==============>               48%] [Cov:=================>                 50%][Progress:==============>               49%] [Cov:=================>                 50%][Progress:==============>               49%] [Cov:=================>                 50%][Progress:==============>               49%] [Cov:=================>                 50%][Progress:==============>               49%] [Cov:=================>                 50%][Progress:===============>              50%] [Cov:=================>                 50%][Progress:===============>              50%] [Cov:=================>                 50%][Progress:===============>              50%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              51%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              52%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:===============>              53%] [Cov:=================>                 50%][Progress:================>             54%] [Cov:=================>                 50%][Progress:================>             54%] [Cov:=================>                 50%][Progress:================>             54%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             55%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 50%][Progress:================>             56%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            57%] [Cov:=================>                 50%][Progress:=================>            58%] [Cov:=================>                 50%][Progress:=================>            58%] [Cov:=================>                 50%][Progress:=================>            59%] [Cov:=================>                 51%][Progress:=================>            59%] [Cov:=================>                 51%][Progress:=================>            59%] [Cov:=================>                 51%][Progress:=================>            59%] [Cov:=================>                 51%][Progress:==================>           60%] [Cov:=================>                 51%][Progress:==================>           60%] [Cov:=================>                 51%][Progress:==================>           60%] [Cov:=================>                 51%][Progress:==================>           60%] [Cov:=================>                 51%][Progress:==================>           61%] [Cov:=================>                 51%][Progress:==================>           61%] [Cov:=================>                 51%][Progress:==================>           61%] [Cov:=================>                 51%][Progress:==================>           62%] [Cov:=================>                 51%][Progress:==================>           62%] [Cov:=================>                 51%][Progress:==================>           62%] [Cov:=================>                 51%][Progress:==================>           63%] [Cov:=================>                 51%][Progress:==================>           63%] [Cov:=================>                 51%][Progress:==================>           63%] [Cov:=================>                 51%][Progress:===================>          64%] [Cov:=================>                 51%][Progress:===================>          64%] [Cov:=================>                 51%][Progress:===================>          64%] [Cov:=================>                 51%][Progress:===================>          64%] [Cov:=================>                 51%][Progress:===================>          65%] [Cov:=================>                 51%][Progress:===================>          65%] [Cov:=================>                 51%][Progress:===================>          65%] [Cov:=================>                 51%][Progress:===================>          66%] [Cov:=================>                 51%][Progress:===================>          66%] [Cov:=================>                 51%][Progress:===================>          66%] [Cov:=================>                 51%][Progress:===================>          66%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:=================>                 51%][Progress:====================>         67%] [Cov:==================>                52%][Progress:====================>         67%] [Cov:==================>                52%][Progress:====================>         68%] [Cov:==================>                52%][Progress:====================>         68%] [Cov:==================>                52%][Progress:====================>         68%] [Cov:==================>                52%][Progress:====================>         69%] [Cov:==================>                52%][Progress:====================>         69%] [Cov:==================>                52%][Progress:====================>         69%] [Cov:==================>                52%][Progress:=====================>        70%] [Cov:==================>                52%][Progress:=====================>        70%] [Cov:==================>                52%][Progress:=====================>        71%] [Cov:==================>                52%][Progress:=====================>        71%] [Cov:==================>                52%][Progress:=====================>        72%] [Cov:==================>                52%][Progress:=====================>        72%] [Cov:==================>                52%][Progress:=====================>        73%] [Cov:==================>                52%][Progress:=====================>        73%] [Cov:==================>                52%][Progress:=====================>        73%] [Cov:==================>                52%][Progress:======================>       74%] [Cov:==================>                52%][Progress:======================>       74%] [Cov:==================>                52%][Progress:======================>       75%] [Cov:==================>                52%][Progress:======================>       75%] [Cov:==================>                52%][Progress:======================>       76%] [Cov:==================>                52%][Progress:======================>       76%] [Cov:==================>                52%][Progress:=======================>      77%] [Cov:==================>                52%][Progress:=======================>      77%] [Cov:==================>                52%][Progress:=======================>      78%] [Cov:==================>                52%][Progress:=======================>      78%] [Cov:==================>                52%][Progress:=======================>      79%] [Cov:==================>                52%][Progress:=======================>      79%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     81%] [Cov:==================>                52%][Progress:========================>     81%] [Cov:==================>                52%][Progress:========================>     82%] [Cov:==================>                52%][Progress:========================>     82%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:=========================>    84%] [Cov:==================>                53%][Progress:=========================>    84%] [Cov:==================>                53%][Progress:=========================>    85%] [Cov:==================>                53%][Progress:=========================>    85%] [Cov:==================>                53%][Progress:=========================>    86%] [Cov:==================>                53%][Progress:=========================>    86%] [Cov:==================>                53%][Progress:==========================>   87%] [Cov:==================>                53%][Progress:==========================>   87%] [Cov:==================>                53%][Progress:==========================>   87%] [Cov:==================>                53%][Progress:==========================>   88%] [Cov:==================>                53%][Progress:==========================>   88%] [Cov:==================>                53%][Progress:==========================>   89%] [Cov:==================>                53%][Progress:==========================>   89%] [Cov:==================>                53%][Progress:===========================>  90%] [Cov:==================>                53%][Progress:===========================>  90%] [Cov:==================>                53%][Progress:===========================>  90%] [Cov:==================>                53%][Progress:===========================>  90%] [Cov:==================>                53%][Progress:===========================>  91%] [Cov:==================>                53%][Progress:===========================>  91%] [Cov:==================>                53%][Progress:===========================>  92%] [Cov:==================>                53%][Progress:===========================>  92%] [Cov:==================>                53%][Progress:===========================>  92%] [Cov:==================>                53%][Progress:===========================>  93%] [Cov:==================>                53%][Progress:===========================>  93%] [Cov:==================>                53%][Progress:===========================>  93%] [Cov:==================>                53%][Progress:============================> 94%] [Cov:==================>                53%][Progress:============================> 94%] [Cov:==================>                53%][Progress:============================> 94%] [Cov:==================>                53%][Progress:============================> 95%] [Cov:==================>                53%][Progress:============================> 95%] [Cov:==================>                53%][Progress:============================> 95%] [Cov:==================>                53%][Progress:============================> 95%] [Cov:==================>                53%][Progress:============================> 96%] [Cov:==================>                53%][Progress:============================> 96%] [Cov:==================>                53%][Progress:============================> 96%] [Cov:==================>                53%][Progress:=============================>97%] [Cov:==================>                53%][Progress:=============================>97%] [Cov:==================>                53%][Progress:=============================>97%] [Cov:==================>                53%][Progress:=============================>98%] [Cov:==================>                53%][Progress:=============================>98%] [Cov:==================>                53%][Progress:=============================>98%] [Cov:==================>                53%][Progress:=============================>99%] [Cov:==================>                53%][Progress:=============================>99%] [Cov:==================>                53%][Progress:=============================>99%] [Cov:==================>                53%][Progress:==============================100%] [Cov:==================>                53%][Progress:==============================100%] [Cov:==================>                53%][Progress:==============================100%] [Cov:==================>                53%][Progress:==============================100%] [Cov:==================>                53%]
* Search finished after 102s and 273 generations, 99588 statements, best individual has fitness: 1613.0
* Generated before the refinement 71 tests with total length 309
statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse(" 9==}", " 9==}", 2145386496)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse(" 9==}", " 9==}", 2145386496);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: getEncodedSource()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String encodedSource = parser.getEncodedSource()
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.getEncodedSource();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("class MyClass { public static void main(String[] args) { System.out.println(\"Hello World\"); } }", "MyClass.java");
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("class MyClass { public static void main(String[] args) { System.out.println(\"Hello World\"); } }", "MyClass.java"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("class MyClass { public static void main(String[] args) { System.out.println(\"Hello World\"); } }", "MyClass.java") target is: parser method is: parse(java.lang.String,java.lang.String)
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("for ", "for ", (-3143))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("for ", "for ", (-3143));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("-B7UoCFkq<{R1.1W", "", 75)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("-B7UoCFkq<{R1.1W", "", 75);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("This is a test input for the parser", "", 75);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("This is a test input for the parser", "", 75), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("This is a test input for the parser", "", 75) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "This is a test input for the parser";
String string = "";
int _int = 75;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("var ")
statement is: parse(Ljava/io/Reader;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse((Reader) arg0, (String) null, (-3711))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
StringReader stringReader = new StringReader("var ");
parser.parse((Reader) stringReader, (String) null, (-3711));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        StringReader stringReader = new StringReader("var x = 42;");
        parser.parse(((Reader) (stringReader)), ((String) (null)), -3711);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("var x = 42;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse(((Reader) (stringReader)), ((String) (null)), -3711), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse(((Reader) (stringReader)), ((String) (null)), -3711) target is: parser method is: parse(Reader,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/io/Reader;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "var x = 42;";
StringReader stringReader = new StringReader(string);
String string = null;
int _int = null;
parser.parse((Reader) stringReader, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: addStrictWarning(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.addStrictWarning("p^FLQfy4v$cQMC+Du", "p^FLQfy4v$cQMC+Du")
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addStrictWarning("p^FLQfy4v$cQMC+Du", "p^FLQfy4v$cQMC+Du");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.addStrictWarning("A string that contains a valid identifier", "Another string that contains a valid identifier");
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.addStrictWarning("A string that contains a valid identifier", "Another string that contains a valid identifier"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.addStrictWarning("A string that contains a valid identifier", "Another string that contains a valid identifier") target is: parser method is: addStrictWarning(java.lang.String,java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: addStrictWarning(Ljava/lang/String;Ljava/lang/String;)V
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "A string that contains a valid identifier";
String string = "Another string that contains a valid identifier";
parser.addStrictWarning(string, string);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("\n    ", "\n    ", 82)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("\n    ", "\n    ", 82);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", "public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", 82);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", "public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", 82), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", "public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", 82) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}";
String string = "public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}";
int _int = 82;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("!8+HbJbJA<T+Y&l", "!8+HbJbJA<T+Y&l", 106)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("!8+HbJbJA<T+Y&l", "!8+HbJbJA<T+Y&l", 106);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("class MyTestClass {\n" + (((("    public static void main(String[] args) {\n" + "        System.out.println(\"Hello, world!\");\n") + "        int x = 5;\n") + "        double y = Math.PI;\n") + "        char z = \'Z\';\n"));
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("class MyTestClass {\n" + (((("    public static void main(String[] args) {\n" + "        System.out.println(\"Hello, world!\");\n") + "        int x = 5;\n") + "        double y = Math.PI;\n") + "        char z = \'Z\';\n")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("class MyTestClass {\n" + (((("    public static void main(String[] args) {\n" + "        System.out.println(\"Hello, world!\");\n") + "        int x = 5;\n") + "        double y = Math.PI;\n") + "        char z = \'Z\';\n")) target is: parser method is: parse(java.lang.String)
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("(I)V", "(I)V", 56320)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("(I)V", "(I)V", 56320);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        int constantPoolIndex = ConstantPoolIndex.UTF8_SIGNATURE;
        parser.parse("(I)V", "(I)V", constantPoolIndex);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int constantPoolIndex = ConstantPoolIndex.UTF8_SIGNATURE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ConstantPoolIndex.UTF8_SIGNATURE is ConstantPoolIndex
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: parser.parse("(I)V", "(I)V", constantPoolIndex), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("(I)V", "(I)V", constantPoolIndex) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "(I)V";
String string = "(I)V";
int _int = null;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("D.(C)*8M", "D.(C)*8M", 797)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("D.(C)*8M", "D.(C)*8M", 797);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("D.(C)*8M", "D.(C)*8M", 797);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("D.(C)*8M", "D.(C)*8M", 797), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("D.(C)*8M", "D.(C)*8M", 797) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "D.(C)*8M";
String string = "D.(C)*8M";
int _int = 797;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: setXmlAvailable(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: compilerEnvirons.setXmlAvailable(false)
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("@/0", "35m<e8e", 103)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
compilerEnvirons.setXmlAvailable(false);
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("@/0", "35m<e8e", 103);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        compilerEnvirons.setXmlAvailable(false);// This value indicates whether the compiler should support XML-style error messages or not. In this case, we are setting it to false since we are testing a specific scenario where XML is not available.

        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("test_file.txt", "35m<e8e", 103);// This line uses a more descriptive filename and includes the error message and line number in the test data. }}

    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: compilerEnvirons.setXmlAvailable(false)// This value indicates whether the compiler should support XML-style error messages or not. In this case, we are setting it to false since we are testing a specific scenario where XML is not available.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: compilerEnvirons.setXmlAvailable(false)// This value indicates whether the compiler should support XML-style error messages or not. In this case, we are setting it to false since we are testing a specific scenario where XML is not available.
 target is: compilerEnvirons method is: setXmlAvailable(boolean)
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: setXmlAvailable(Z)V
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("test_file.txt", "35m<e8e", 103)// This line uses a more descriptive filename and includes the error message and line number in the test data. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("test_file.txt", "35m<e8e", 103)// This line uses a more descriptive filename and includes the error message and line number in the test data. }}
 target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 3, type org.mozilla.javascript.Parserindex is: 4
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
boolean _boolean = false;
compilerEnvirons.setXmlAvailable(_boolean);
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "test_file.txt";
String string = "35m<e8e";
int _int = 103;
((Parser) defaultErrorReporter).parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("", "", 19)
statement is: pushScope(Lorg/mozilla/javascript/Node;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.pushScope(arg0)
statement is: pushScope(Lorg/mozilla/javascript/Node;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.pushScope(arg0)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
ScriptOrFnNode parse = parser.parse("", "", 19);
parser.pushScope(parse);
parser.pushScope(parse);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        ScriptOrFnNode parse = parser.parse("script.js", "console.log('Hello World!');", 19);
        parser.pushScope(parse);
        parser.pushScope(parse);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ScriptOrFnNode parse = parser.parse("script.js", "console.log('Hello World!');", 19), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("script.js", "console.log('Hello World!');", 19) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: parser.pushScope(parse), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.pushScope(parse) target is: parser method is: pushScope(ScriptOrFnNode)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: pushScope(Lorg/mozilla/javascript/Node;)V
statement is: parser.pushScope(parse), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.pushScope(parse) target is: parser method is: pushScope(ScriptOrFnNode)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: pushScope(Lorg/mozilla/javascript/Node;)V
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "script.js";
String string = "console.log('Hello World!');";
int _int = 19;
ScriptOrFnNode parse = parser.parse(string, string, _int);
parser.pushScope(parse);
parser.pushScope(parse);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: setGeneratingSource(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: compilerEnvirons.setGeneratingSource(false)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("h>SYGeES8.d&4&GFy7p", "h>SYGeES8.d&4&GFy7p", 54)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
compilerEnvirons.setGeneratingSource(false);
parser.parse("h>SYGeES8.d&4&GFy7p", "h>SYGeES8.d&4&GFy7p", 54);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        compilerEnvirons.setGeneratingSource(false);
        parser.parse("This is a sample Java code", "This is a sample Java code", 54);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: compilerEnvirons.setGeneratingSource(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: compilerEnvirons.setGeneratingSource(false) target is: compilerEnvirons method is: setGeneratingSource(boolean)
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: setGeneratingSource(Z)V
statement is: parser.parse("This is a sample Java code", "This is a sample Java code", 54), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("This is a sample Java code", "This is a sample Java code", 54) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
boolean _boolean = false;
compilerEnvirons.setGeneratingSource(_boolean);
String string = "This is a sample Java code";
String string = "This is a sample Java code";
int _int = 54;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("{[4%W`<;8w<ia-f]?", "{[4%W`<;8w<ia-f]?", 88)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("{[4%W`<;8w<ia-f]?", "{[4%W`<;8w<ia-f]?", 88);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("{ bgVAm5QS;zEd", "%T/V92SQ%", 131)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("{ bgVAm5QS;zEd", "%T/V92SQ%", 131);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("{1..kwTev}w(X?qp1", "{1..kwTev}w(X?qp1", (-21))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("{1..kwTev}w(X?qp1", "{1..kwTev}w(X?qp1", (-21));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, (ErrorReporter) null)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("continue", "file@OName", 2)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
parser.parse("continue", "file@OName", 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        Parser parser = new Parser(compilerEnvirons, ((ErrorReporter) (null)));
        parser.parse("continue", "file@OName", 2);
        // Improved test data
        Integer integerValue = 123;// an arbitrary integer value

        Double doubleValue = 123.456;// an arbitrary double value

        String stringValue = "Hello, World!";// a string with special characters

        Character characterValue = 'a';// a single character }}

    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Parser parser = new Parser(compilerEnvirons, ((ErrorReporter) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("continue", "file@OName", 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("continue", "file@OName", 2) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 1, type org.mozilla.javascript.Parserindex is: 1
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: // Improved test data
Integer integerValue = 123// an arbitrary integer value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Double doubleValue = 123.456// an arbitrary double value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello, World!"// a string with special characters
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Character characterValue = 'a'// a single character }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 123
* this is vulnerable: double _double = 123.456
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: char _char = 'a'
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
String string = "continue";
String string = "file@OName";
int _int = 2;
parser.parse(string, string, _int);
int _int = 123;
double _double = 123.456;
String string = "Hello, World!";
char _char = 'a';

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("throw ", "throw ", 240)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("throw ", "throw ", 240);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("throw new IOException(\"File not found\")", "throw ", 240);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("throw new IOException(\"File not found\")", "throw ", 240), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("throw new IOException(\"File not found\")", "throw ", 240) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "throw new IOException(\"File not found\")";
String string = "throw ";
int _int = 240;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "; y&sTXHekCxQD]D";
String string = "; y&sTXHekCxQD]D";
int _int = 44;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getGlobal()Lorg/mozilla/javascript/ContextFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ContextFactory
statement code is: ContextFactory global = ContextFactory.getGlobal()
statement is: org.mozilla.javascript.Context(Lorg/mozilla/javascript/ContextFactory;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Context
statement code is: Context context = new Context(arg0)
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("if ", "h!}1Uec", 1)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("if ", "h!}1Uec", 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        ContextFactory global = ContextFactory.getGlobal();
        Context context = new Context(global);
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (context.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ContextFactory global = ContextFactory.getGlobal(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ContextFactory.getGlobal() target is: ContextFactory method is: getGlobal()
Matched Method is: getGlobal()Lorg/mozilla/javascript/ContextFactory;
statement is: Context context = new Context(global), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (context.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (context.getErrorReporter())) target is: context method is: getErrorReporter()
source statement: org.mozilla.javascript.Context(Lorg/mozilla/javascript/ContextFactory;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Contextindex is: 2
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("switch", "msg.const.redecl", 2608)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("switch", "msg.const.redecl", 2608);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("switch", "msg.const.redecl", 2608);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("switch", "msg.const.redecl", 2608), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("switch", "msg.const.redecl", 2608) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "switch";
String string = "msg.const.redecl";
int _int = 2608;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("while", "Z8yGkL =Y", 84)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("while", "Z8yGkL =Y", 84);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("while", "Z8yGkL = 2 + 3 * 4 - 5 / 6", 84);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("while", "Z8yGkL = 2 + 3 * 4 - 5 / 6", 84), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("while", "Z8yGkL = 2 + 3 * 4 - 5 / 6", 84) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "while";
String string = "Z8yGkL = 2 + 3 * 4 - 5 / 6";
int _int = 84;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("debugger", "debugger", (-1150))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("debugger", "debugger", (-1150));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("debugger", "debugger", -1150);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("debugger", "debugger", -1150), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("debugger", "debugger", -1150) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "debugger";
String string = "debugger";
int _int = null;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 20)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 20);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("\"Hello world!\"", "\"Hello world!\"", 88);
        parser.parse("\"This is a test string\"", "\"This is a test string\"", 20);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("\"Hello world!\"", "\"Hello world!\"", 88), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("\"Hello world!\"", "\"Hello world!\"", 88) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: parser.parse("\"This is a test string\"", "\"This is a test string\"", 20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("\"This is a test string\"", "\"This is a test string\"", 20) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "\"Hello world!\"";
String string = "\"Hello world!\"";
int _int = 88;
parser.parse(string, string, _int);
String string = "\"This is a test string\"";
String string = "\"This is a test string\"";
int _int = 20;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467)
statement is: defineSymbol(IZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.defineSymbol(121, false, "l$o +u|Zr")
statement is: defineSymbol(IZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.defineSymbol(103, false, "l$o +u|Zr")
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467);
parser.defineSymbol(121, false, "l$o +u|Zr");
parser.defineSymbol(103, false, "l$o +u|Zr");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467);
        parser.defineSymbol(121, false, "l$o +u|Zr");
        parser.defineSymbol(103, false, "l$o +u|Zr");
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: parser.defineSymbol(121, false, "l$o +u|Zr"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.defineSymbol(121, false, "l$o +u|Zr") target is: parser method is: defineSymbol(int,boolean,java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: defineSymbol(IZLjava/lang/String;)V
statement is: parser.defineSymbol(103, false, "l$o +u|Zr"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.defineSymbol(103, false, "l$o +u|Zr") target is: parser method is: defineSymbol(int,boolean,java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: defineSymbol(IZLjava/lang/String;)V
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "l$o +u|Zr";
String string = "l$o +u|Zr";
int _int = 2467;
parser.parse(string, string, _int);
int _int = 121;
boolean _boolean = false;
String string = "l$o +u|Zr";
parser.defineSymbol(_int, _boolean, string);
int _int = 103;
boolean _boolean = false;
String string = "l$o +u|Zr";
parser.defineSymbol(_int, _boolean, string);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("aviMjv", "aviMjv", 1796)
statement is: defineSymbol(IZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.defineSymbol(108, false, "bN>Y")
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("aviMjv", "aviMjv", 1796);
parser.defineSymbol(108, false, "bN>Y");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("aBcDeFg", "aBcDeFg", 1796);
        parser.defineSymbol(108, false, "bN>Y");
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("aBcDeFg", "aBcDeFg", 1796), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("aBcDeFg", "aBcDeFg", 1796) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: parser.defineSymbol(108, false, "bN>Y"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.defineSymbol(108, false, "bN>Y") target is: parser method is: defineSymbol(int,boolean,java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: defineSymbol(IZLjava/lang/String;)V
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "aBcDeFg";
String string = "aBcDeFg";
int _int = 1796;
parser.parse(string, string, _int);
int _int = 108;
boolean _boolean = false;
String string = "bN>Y";
parser.defineSymbol(_int, _boolean, string);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("yield ", "yield ", 110)
statement is: defineSymbol(IZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.defineSymbol(152, true, "yield ")
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("yield ", "yield ", 110);
parser.defineSymbol(152, true, "yield ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("20 + 30", "20 + 30", 110);
        parser.defineSymbol(152, true, "20 + 30");
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("20 + 30", "20 + 30", 110), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("20 + 30", "20 + 30", 110) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: parser.defineSymbol(152, true, "20 + 30"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.defineSymbol(152, true, "20 + 30") target is: parser method is: defineSymbol(int,boolean,java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: defineSymbol(IZLjava/lang/String;)V
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "20 + 30";
String string = "20 + 30";
int _int = 110;
parser.parse(string, string, _int);
int _int = 152;
boolean _boolean = true;
String string = "20 + 30";
parser.defineSymbol(_int, _boolean, string);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("", "", 113)
statement is: defineSymbol(IZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.defineSymbol(152, false, "")
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("", "", 113);
parser.defineSymbol(152, false, "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("inputFile.txt", "UTF-8", 113);
        parser.defineSymbol(lineNumber, false, "functionName");
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("inputFile.txt", "UTF-8", 113), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("inputFile.txt", "UTF-8", 113) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: parser.defineSymbol(lineNumber, false, "functionName"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.defineSymbol(lineNumber, false, "functionName") target is: parser method is: defineSymbol(boolean,java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: defineSymbol(IZLjava/lang/String;)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "inputFile.txt";
String string = "UTF-8";
int _int = 113;
parser.parse(string, string, _int);
boolean _boolean = false;
String string = "functionName";
String string = null;
parser.defineSymbol((int) _boolean, (boolean) string, string);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("hmf3Z,Ilb8LQ<SLdlX ", "hmf3Z,Ilb8LQ<SLdlX ", (-1933))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("hmf3Z,Ilb8LQ<SLdlX ", "hmf3Z,Ilb8LQ<SLdlX ", (-1933));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("A complex algorithm for calculating the area of a rectangle", "A complex algorithm for calculating the area of a rectangle", 1000);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("A complex algorithm for calculating the area of a rectangle", "A complex algorithm for calculating the area of a rectangle", 1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("A complex algorithm for calculating the area of a rectangle", "A complex algorithm for calculating the area of a rectangle", 1000) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "A complex algorithm for calculating the area of a rectangle";
String string = "A complex algorithm for calculating the area of a rectangle";
int _int = 1000;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("qg6+_W=Z|R&k", "qg6+_W=Z|R&k", 469)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("qg6+_W=Z|R&k", "qg6+_W=Z|R&k", 469);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("This is a sample input string.", "This is a sample input string.", 469);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("This is a sample input string.", "This is a sample input string.", 469), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("This is a sample input string.", "This is a sample input string.", 469) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "This is a sample input string.";
String string = "This is a sample input string.";
int _int = 469;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", (-2638))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", (-2638));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", -2638);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", -2638), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", -2638) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "iGl&&~I[;\"";
String string = "iGl&&~I[;\"";
int _int = null;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("At^{:h", "At^{:h", 19)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("At^{:h", "At^{:h", 19);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "A0s!=Zn^>QO<";
String string = "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;";
int _int = 54;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("bgu-(fdo4b%,4z", "bgu-(fdo4b%,4z", (-855))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("bgu-(fdo4b%,4z", "bgu-(fdo4b%,4z", (-855));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("<$", "<$", (-6303))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("<$", "<$", (-6303));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("filepath", "sourcecode", 0);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("filepath", "sourcecode", 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("filepath", "sourcecode", 0) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "filepath";
String string = "sourcecode";
int _int = 0;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("+UxHtQ.+B", "+UxHtQ.+B", (-1782))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("+UxHtQ.+B", "+UxHtQ.+B", (-1782));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("+UxHtQ.+B", "+UxHtQ.+B", -1782);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("+UxHtQ.+B", "+UxHtQ.+B", -1782), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("+UxHtQ.+B", "+UxHtQ.+B", -1782) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "+UxHtQ.+B";
String string = "+UxHtQ.+B";
int _int = null;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("typeof", "co?b#EnReaNIJtI", 5973)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("typeof", "co?b#EnReaNIJtI", 5973);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("typeof", "This is a test string for parsing.", 1000);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("typeof", "This is a test string for parsing.", 1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("typeof", "This is a test string for parsing.", 1000) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "typeof";
String string = "This is a test string for parsing.";
int _int = 1000;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("void", "jN+_i[_", 110)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("void", "jN+_i[_", 110);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: setXmlAvailable(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: compilerEnvirons.setXmlAvailable(false)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("<LxZ5wbX78N", "<LxZ5wbX78N", 45)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);
parser.parse("<LxZ5wbX78N", "<LxZ5wbX78N", 45);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        compilerEnvirons.setXmlAvailable(false);
        parser.parse("Java", "Java", 45);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: compilerEnvirons.setXmlAvailable(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: compilerEnvirons.setXmlAvailable(false) target is: compilerEnvirons method is: setXmlAvailable(boolean)
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: setXmlAvailable(Z)V
statement is: parser.parse("Java", "Java", 45), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("Java", "Java", 45) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
boolean _boolean = false;
compilerEnvirons.setXmlAvailable(_boolean);
String string = "Java";
String string = "Java";
int _int = 45;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639);
        // Improved test data:
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("factory.makeContext() returned Context instance associated with thread 1234", "factory.makeContext() returned Context instance associated with thread 1234", 639);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: // Improved test data:
CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("factory.makeContext() returned Context instance associated with thread 1234", "factory.makeContext() returned Context instance associated with thread 1234", 639), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("factory.makeContext() returned Context instance associated with thread 1234", "factory.makeContext() returned Context instance associated with thread 1234", 639) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 9
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "factory.makeContext() returned Context instance already associated with some thread";
String string = "factory.makeContext() returned Context instance already associated with some thread";
int _int = 639;
parser.parse(string, string, _int);
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "factory.makeContext() returned Context instance associated with thread 1234";
String string = "factory.makeContext() returned Context instance associated with thread 1234";
int _int = 639;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("I3(Bp+6RoacqA", "I3(Bp+6RoacqA", 615)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("I3(Bp+6RoacqA", "I3(Bp+6RoacqA", 615);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("I3(Bp+6RoacqA", "I3(Bp+6RoacqA", 615);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("I3(Bp+6RoacqA", "I3(Bp+6RoacqA", 615), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("I3(Bp+6RoacqA", "I3(Bp+6RoacqA", 615) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "I3(Bp+6RoacqA";
String string = "I3(Bp+6RoacqA";
int _int = 615;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("(new ", "(new ", 1992)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("(new ", "(new ", 1992);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("(new String(\"This is a test string\"), (new Integer(42)), 3.14)", "(new ", "(new ", 1992);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("(new String(\"This is a test string\"), (new Integer(42)), 3.14)", "(new ", "(new ", 1992), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("(new String(\"This is a test string\"), (new Integer(42)), 3.14)", "(new ", "(new ", 1992) target is: parser method is: parse(java.lang.String,java.lang.String,java.lang.String,int)
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: setXmlAvailable(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: compilerEnvirons.setXmlAvailable(false)
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("+UxHtQ.+B", "+UxHtQ.+B", 75)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
compilerEnvirons.setXmlAvailable(false);
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("+UxHtQ.+B", "+UxHtQ.+B", 75);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        compilerEnvirons.setXmlAvailable(false);
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("This is a sample input string", "This is a sample input string", 75);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: compilerEnvirons.setXmlAvailable(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: compilerEnvirons.setXmlAvailable(false) target is: compilerEnvirons method is: setXmlAvailable(boolean)
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: setXmlAvailable(Z)V
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("This is a sample input string", "This is a sample input string", 75), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("This is a sample input string", "This is a sample input string", 75) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 3, type org.mozilla.javascript.Parserindex is: 4
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
boolean _boolean = false;
compilerEnvirons.setXmlAvailable(_boolean);
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "This is a sample input string";
String string = "This is a sample input string";
int _int = 75;
((Parser) _void).parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse(" T.*;.iJ$,d{t3N", "msg.destruct.assign.no.init", 39)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse(" T.*;.iJ$,d{t3N", "msg.destruct.assign.no.init", 39);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getGlobal()Lorg/mozilla/javascript/ContextFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ContextFactory
statement code is: ContextFactory global = ContextFactory.getGlobal()
statement is: org.mozilla.javascript.Context(Lorg/mozilla/javascript/ContextFactory;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Context
statement code is: Context context = new Context(arg0)
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("msg.bad.throw.eol", "msg.bad.throw.eol", 130)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("msg.bad.throw.eol", "msg.bad.throw.eol", 130);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        ContextFactory global = ContextFactory.getGlobal();
        Context context = new Context(global);
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (context.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("The quick brown fox jumps over the lazy dog.\n" + "msg.bad.throw.eol", "The quick brown fox jumps over the lazy dog.", 130);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ContextFactory global = ContextFactory.getGlobal(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ContextFactory.getGlobal() target is: ContextFactory method is: getGlobal()
Matched Method is: getGlobal()Lorg/mozilla/javascript/ContextFactory;
statement is: Context context = new Context(global), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (context.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (context.getErrorReporter())) target is: context method is: getErrorReporter()
source statement: org.mozilla.javascript.Context(Lorg/mozilla/javascript/ContextFactory;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Contextindex is: 2
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("The quick brown fox jumps over the lazy dog.\n" + "msg.bad.throw.eol", "The quick brown fox jumps over the lazy dog.", 130), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("The quick brown fox jumps over the lazy dog.\n" + "msg.bad.throw.eol", "The quick brown fox jumps over the lazy dog.", 130) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 4, type org.mozilla.javascript.Parserindex is: 4
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "The quick brown fox jumps over the lazy dog.";
int _int = 130;
int _int = null;
parser.parse(string, (String) _int, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getCurrentContext()Lorg/mozilla/javascript/Context; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.Context
statement code is: Context currentContext = Context.getCurrentContext()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("@.j)~Rq{q", "@.j)~Rq{q", 13)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("@.j)~Rq{q", "@.j)~Rq{q", 13);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        Context currentContext = Context.getCurrentContext();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (currentContext.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("This is a sample string.", "This is a sample string.", 13);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Context currentContext = Context.getCurrentContext(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Context.getCurrentContext() target is: Context method is: getCurrentContext()
Matched Method is: getCurrentContext()Lorg/mozilla/javascript/Context;
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (currentContext.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (currentContext.getErrorReporter())) target is: currentContext method is: getErrorReporter()
source statement: getCurrentContext()Lorg/mozilla/javascript/Context; callee: VariableReference: Statement 1, type org.mozilla.javascript.Contextindex is: 1
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("This is a sample string.", "This is a sample string.", 13), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("This is a sample string.", "This is a sample string.", 13) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 3, type org.mozilla.javascript.Parserindex is: 3
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "This is a sample string.";
String string = "This is a sample string.";
int _int = 13;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("\"Q=KI5^ClM\"", "\"Q=KI5^ClM\"", (-465))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("\"Q=KI5^ClM\"", "\"Q=KI5^ClM\"", (-465));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("\"Q=KI5^ClM\"", "\"Q=KI5^ClM\"", MAX_ERROR_CODE);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("\"Q=KI5^ClM\"", "\"Q=KI5^ClM\"", MAX_ERROR_CODE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("\"Q=KI5^ClM\"", "\"Q=KI5^ClM\"", MAX_ERROR_CODE) target is: parser method is: parse(java.lang.String,java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "\"Q=KI5^ClM\"";
String string = "\"Q=KI5^ClM\"";
int _int = null;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("protected", "protected", 131)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("protected", "protected", 131);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("protected", "protected", 131);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("protected", "protected", 131), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("protected", "protected", 131) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "protected";
String string = "protected";
int _int = 131;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("[]s?\"=`PyKO VIf", "[]s?\"=`PyKO VIf", 82)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("[]s?\"=`PyKO VIf", "[]s?\"=`PyKO VIf", 82);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("This is a sample string literal", "This is a sample integer value", 82);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("This is a sample string literal", "This is a sample integer value", 82), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("This is a sample string literal", "This is a sample integer value", 82) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "This is a sample string literal";
String string = "This is a sample integer value";
int _int = 82;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122);
        // Improved test data:
        String inputString = "s1wtbF&[0)3u";
        int lineNumber = 122;
        // The previous code snippet uses hardcoded values for the input string and line number, which may not be representative of the situation being tested. By using descriptive examples, we can make the test data more informative and useful. }}
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: // Improved test data:
String inputString = "s1wtbF&[0)3u", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int lineNumber = 122, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // The previous code snippet uses hardcoded values for the input string and line number, which may not be representative of the situation being tested. By using descriptive examples, we can make the test data more informative and useful. }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: String string = "s1wtbF&[0)3u"
* this is vulnerable: int _int = 122
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "s1wtbF&[0)3u";
String string = "s1wtbF&[0)3u";
int _int = 122;
parser.parse(string, string, _int);
String string = "s1wtbF&[0)3u";
int _int = 122;

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("J:0Qti6f5MS[", "", 88)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("J:0Qti6f5MS[", "", 88);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("J:0Qti6f5MS[", "A complex mathematical expression involving variables x and y", 88);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("J:0Qti6f5MS[", "A complex mathematical expression involving variables x and y", 88), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("J:0Qti6f5MS[", "A complex mathematical expression involving variables x and y", 88) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "J:0Qti6f5MS[";
String string = "A complex mathematical expression involving variables x and y";
int _int = 88;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("Ljava/lang/Object;I)Ljava/lang/Object;", "IZl\"0& ", (-896))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("Ljava/lang/Object;I)Ljava/lang/Object;", "IZl\"0& ", (-896));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        inputString = "Ljava/lang/Object;I)Ljava/lang/Object;";
        integerValue = 42;
        errorMessage = "Invalid input: Ljava/lang/Object;I)Ljava/lang/Object";
    }
}
statement is: inputString = "Ljava/lang/Object;I)Ljava/lang/Object;", class spoon.support.reflect.code.CtAssignmentImpl
statement is: integerValue = 42, class spoon.support.reflect.code.CtAssignmentImpl
statement is: errorMessage = "Invalid input: Ljava/lang/Object;I)Ljava/lang/Object", class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "~3h?*DvSy";
String string = "~3h?*DvSy";
int _int = 2254;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("new ", "msg.no.paren.parms", 88)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("new ", "msg.no.paren.parms", 88);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("new Foo()", "msg.no.paren.parms", 88);
        // The first parameter is the input string that will be parsed
        String input = "new Foo()";
        // The second parameter is the expected message for a parse error
        String expectedMessage = "msg.no.paren.parms";
        // The third parameter is the line number where the parse error occurred
        int lineNumber = 88;
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("new Foo()", "msg.no.paren.parms", 88), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("new Foo()", "msg.no.paren.parms", 88) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: // The first parameter is the input string that will be parsed
String input = "new Foo()", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // The second parameter is the expected message for a parse error
String expectedMessage = "msg.no.paren.parms", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // The third parameter is the line number where the parse error occurred
int lineNumber = 88, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "new Foo()"
* this is vulnerable: String string = "msg.no.paren.parms"
* this is vulnerable: int _int = 88
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "new Foo()";
String string = "msg.no.paren.parms";
int _int = 88;
parser.parse(string, string, _int);
String string = "new Foo()";
String string = "msg.no.paren.parms";
int _int = 88;

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: createDecompiler(Lorg/mozilla/javascript/CompilerEnvirons;)Lorg/mozilla/javascript/Decompiler; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.Decompiler
statement code is: Decompiler createDecompiler = parser.createDecompiler(arg0)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.createDecompiler(compilerEnvirons);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.createDecompiler(compilerEnvirons);
        // Improved test data:
        int compilerVersion = 14;// Use a more descriptive version number (e.g., 14 for Java SE 14)

        String sourceCode = "public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";
        String decompiledCode = parser.createDecompiler(compilerEnvirons).decompile(sourceCode);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.createDecompiler(compilerEnvirons), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.createDecompiler(compilerEnvirons) target is: parser method is: createDecompiler(CompilerEnvirons)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: createDecompiler(Lorg/mozilla/javascript/CompilerEnvirons;)Lorg/mozilla/javascript/Decompiler;
statement is: // Improved test data:
int compilerVersion = 14// Use a more descriptive version number (e.g., 14 for Java SE 14)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String sourceCode = "public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String decompiledCode = parser.createDecompiler(compilerEnvirons).decompile(sourceCode), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.createDecompiler(compilerEnvirons).decompile(sourceCode) target is: parser.createDecompiler(compilerEnvirons) method is: decompile(java.lang.String)
* this is vulnerable: int _int = 14
* this is vulnerable: String string = "public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }"
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.createDecompiler(compilerEnvirons);
int _int = 14;
String string = "public class MyClass { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }";

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, (ErrorReporter) null)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("l$o +u|Zr", "l$o +u|Zr", 1)
statement is: eof()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean eof = parser.eof()
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
parser.parse("l$o +u|Zr", "l$o +u|Zr", 1);
parser.eof();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        Parser parser = new Parser(compilerEnvirons, ((ErrorReporter) (null)));
        parser.parse("1 + 2", "1 + 2", 1);// using numbers instead of strings for the expression and program name

        parser.eof();
    }
}
statement is: // Improved test data:
CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Parser parser = new Parser(compilerEnvirons, ((ErrorReporter) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("1 + 2", "1 + 2", 1)// using numbers instead of strings for the expression and program name
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("1 + 2", "1 + 2", 1)// using numbers instead of strings for the expression and program name
 target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 1, type org.mozilla.javascript.Parserindex is: 1
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: parser.eof(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.eof() target is: parser method is: eof()
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 1, type org.mozilla.javascript.Parserindex is: 1
Matched Method is: eof()Z
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
String string = "1 + 2";
String string = "1 + 2";
int _int = 1;
parser.parse(string, string, _int);
parser.eof();

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("aviMjv", "aviMjv", 1796)
statement is: getCurrentLineNumber()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int currentLineNumber = parser.getCurrentLineNumber()
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("aviMjv", "aviMjv", 1796);
parser.getCurrentLineNumber();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("sampleScript.java", "sampleScript.java", 100);
        parser.getCurrentLineNumber();
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("sampleScript.java", "sampleScript.java", 100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("sampleScript.java", "sampleScript.java", 100) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: parser.getCurrentLineNumber(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.getCurrentLineNumber() target is: parser method is: getCurrentLineNumber()
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: getCurrentLineNumber()I
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "sampleScript.java";
String string = "sampleScript.java";
int _int = 100;
parser.parse(string, string, _int);
parser.getCurrentLineNumber();

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88)
statement is: getEncodedSource()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String encodedSource = parser.getEncodedSource()
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88);
parser.getEncodedSource();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("A complex string with multiple characters and words", "A complex string with multiple characters and words", 88);
        parser.getEncodedSource();
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("A complex string with multiple characters and words", "A complex string with multiple characters and words", 88), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("A complex string with multiple characters and words", "A complex string with multiple characters and words", 88) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: parser.getEncodedSource(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.getEncodedSource() target is: parser method is: getEncodedSource()
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: getEncodedSource()Ljava/lang/String;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "A complex string with multiple characters and words";
String string = "A complex string with multiple characters and words";
int _int = 88;
parser.parse(string, string, _int);
parser.getEncodedSource();

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: insideFunction()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean insideFunction = parser.insideFunction()
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.insideFunction();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons(new File("path/to/file.js"), "UTF-8", false);
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.insideFunction();
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(new File("path/to/file.js"), "UTF-8", false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V
statement is: parser.insideFunction(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.insideFunction() target is: parser method is: insideFunction()
TestCase is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("null")
statement is: parse(Ljava/io/Reader;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse((Reader) arg0, (String) null, 2726)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("null");
parser.parse((Reader) stringReader, (String) null, 2726);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        StringReader stringReader = new StringReader("\"Hello World!\"");
        parser.parse(((Reader) (stringReader)), ((String) (null)), 2726);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("\"Hello World!\""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse(((Reader) (stringReader)), ((String) (null)), 2726), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse(((Reader) (stringReader)), ((String) (null)), 2726) target is: parser method is: parse(Reader,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/io/Reader;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "\"Hello World!\"";
StringReader stringReader = new StringReader(string);
int _int = 2726;
int _int = null;
parser.parse((Reader) stringReader, (String) _int, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, (ErrorReporter) null)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("N")
statement is: parse(Ljava/io/Reader;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse((Reader) arg0, "l$o +u|Zr", 0)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
StringReader stringReader = new StringReader("N");
parser.parse((Reader) stringReader, "l$o +u|Zr", 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        Parser parser = new Parser(compilerEnvirons, ((ErrorReporter) (null)));
        StringReader stringReader = new StringReader("Y");
        parser.parse(((Reader) (stringReader)), "l$o +u|Zr", 0);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Parser parser = new Parser(compilerEnvirons, ((ErrorReporter) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("Y"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse(((Reader) (stringReader)), "l$o +u|Zr", 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse(((Reader) (stringReader)), "l$o +u|Zr", 0) target is: parser method is: parse(Reader,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 1, type org.mozilla.javascript.Parserindex is: 1
Matched Method is: parse(Ljava/io/Reader;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
String string = "Y";
StringReader stringReader = new StringReader(string);
String string = "l$o +u|Zr";
int _int = 0;
parser.parse((Reader) stringReader, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: java.io.StringReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.StringReader
statement code is: StringReader stringReader = new StringReader("")
statement is: parse(Ljava/io/Reader;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse((Reader) arg0, "", 0)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("");
parser.parse((Reader) stringReader, "", 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World\"); } }");
        parser.parse(((Reader) (stringReader)), "", 0);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World\"); } }"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse(((Reader) (stringReader)), "", 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse(((Reader) (stringReader)), "", 0) target is: parser method is: parse(Reader,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/io/Reader;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World\"); } }";
StringReader stringReader = new StringReader(string);
String string = "";
int _int = 0;
parser.parse((Reader) stringReader, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.mozilla.javascript.Context()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Context
statement code is: Context context = new Context()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("@lzn*mFC", "error reporter", 0)
statement is: addWarning(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.addWarning("msg.bad.namespace", "U'GBp.I")
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context context = new Context();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("@lzn*mFC", "error reporter", 0);
parser.addWarning("msg.bad.namespace", "U'GBp.I");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        Context context = new Context();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (context.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("@lzn*mFC", "error reporter", 0);
        parser.addWarning("msg.bad.namespace", "U'GBp.I");
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Context context = new Context(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (context.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (context.getErrorReporter())) target is: context method is: getErrorReporter()
source statement: org.mozilla.javascript.Context()V callee: VariableReference: Statement 1, type org.mozilla.javascript.Contextindex is: 1
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("@lzn*mFC", "error reporter", 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("@lzn*mFC", "error reporter", 0) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 3, type org.mozilla.javascript.Parserindex is: 3
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: parser.addWarning("msg.bad.namespace", "U'GBp.I"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.addWarning("msg.bad.namespace", "U'GBp.I") target is: parser method is: addWarning(java.lang.String,java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 3, type org.mozilla.javascript.Parserindex is: 3
Matched Method is: addWarning(Ljava/lang/String;Ljava/lang/String;)V
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context context = new Context();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "@lzn*mFC";
String string = "error reporter";
int _int = 0;
parser.parse(string, string, _int);
String string = "msg.bad.namespace";
String string = "U'GBp.I";
parser.addWarning(string, string);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: addError(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.addError("msg.in.after.for.name", "f?=Q`")
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addError("msg.in.after.for.name", "f?=Q`");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.addError("msg.in.after.for.name", "Illegal character in identifier 'f?=Q`'");
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.addError("msg.in.after.for.name", "Illegal character in identifier 'f?=Q`'"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.addError("msg.in.after.for.name", "Illegal character in identifier 'f?=Q`'") target is: parser method is: addError(java.lang.String,java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: addError(Ljava/lang/String;Ljava/lang/String;)V
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "msg.in.after.for.name";
String string = "Illegal character in identifier 'f?=Q`'";
parser.addError(string, string);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40);
        String inputString = "Mi*_f3JK?a4:";
        String expectedOutputString = "The input string is a palindrome.";
        parser.parse(inputString, expectedOutputString, 40);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
statement is: String inputString = "Mi*_f3JK?a4:", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedOutputString = "The input string is a palindrome.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: parser.parse(inputString, expectedOutputString, 40), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse(inputString, expectedOutputString, 40) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "Mi*_f3JK?a4:";
String string = "Mi*_f3JK?a4:";
int _int = 40;
parser.parse(string, string, _int);
String string = "Mi*_f3JK?a4:";
String string = "The input string is a palindrome.";
int _int = 40;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: setXmlAvailable(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: compilerEnvirons.setXmlAvailable(false)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("msg.no.bracket.arg", "K40[|h7\"?x{vd#v9,", 126)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);
parser.parse("msg.no.bracket.arg", "K40[|h7\"?x{vd#v9,", 126);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        compilerEnvirons.setXmlAvailable(false);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: compilerEnvirons.setXmlAvailable(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: compilerEnvirons.setXmlAvailable(false) target is: compilerEnvirons method is: setXmlAvailable(boolean)
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: setXmlAvailable(Z)V
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
boolean _boolean = false;
compilerEnvirons.setXmlAvailable(_boolean);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("UiLW+LD[gQ+Vu rix", "UiLW+LD[gQ+Vu rix", 65536)
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("UiLW+LD[gQ+Vu rix", "UiLW+LD[gQ+Vu rix", 65536);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("x+y*z^2", "x+y*z^2", 65536);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("x+y*z^2", "x+y*z^2", 65536), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("x+y*z^2", "x+y*z^2", 65536) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "x+y*z^2";
String string = "x+y*z^2";
int _int = 65536;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: org.evosuite.testcase.statements.FieldStatement@35127c92 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.ScriptOrFnNode
statement code is: ScriptOrFnNode parse = parser.parse("/DJFmr:!o/8I,z[y&", "", (-1))
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("/DJFmr:!o/8I,z[y&", "", (-1));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
        Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
        parser.parse("Hello, World!", "", -1);
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DefaultErrorReporter.instance is DefaultErrorReporter
CtField is: static org.mozilla.javascript.DefaultErrorReporter org.mozilla.javascript.DefaultErrorReporter.instance DefaultErrorReporter instance
statement is: Parser parser = new Parser(compilerEnvirons, defaultErrorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.parse("Hello, World!", "", -1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.parse("Hello, World!", "", -1) target is: parser method is: parse(java.lang.String,java.lang.String,int)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: parse(Ljava/lang/String;Ljava/lang/String;I)Lorg/mozilla/javascript/ScriptOrFnNode;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "Hello, World!";
String string = "";
int _int = null;
parser.parse(string, string, _int);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getCurrentContext()Lorg/mozilla/javascript/Context; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.Context
statement code is: Context currentContext = Context.getCurrentContext()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: addError(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.addError("language version")
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addError("language version");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        Context currentContext = Context.getCurrentContext();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (currentContext.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.addError("Invalid language version '99'");
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Context currentContext = Context.getCurrentContext(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Context.getCurrentContext() target is: Context method is: getCurrentContext()
Matched Method is: getCurrentContext()Lorg/mozilla/javascript/Context;
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (currentContext.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (currentContext.getErrorReporter())) target is: currentContext method is: getErrorReporter()
source statement: getCurrentContext()Lorg/mozilla/javascript/Context; callee: VariableReference: Statement 1, type org.mozilla.javascript.Contextindex is: 1
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.addError("Invalid language version '99'"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.addError("Invalid language version '99'") target is: parser method is: addError(java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 3, type org.mozilla.javascript.Parserindex is: 3
Matched Method is: addError(Ljava/lang/String;)V
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
String string = "Invalid language version '99'";
parser.addError(string);

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter()
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: popScope()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parser.popScope()
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.popScope();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        Parser parser = new Parser(compilerEnvirons, errorReporter);
        parser.popScope();
        // Improved test data:
        compilerEnvirons = new CompilerEnvirons("Java");// Using a more descriptive value for the "language" parameter.

        errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter()));
        parser = new Parser(compilerEnvirons, errorReporter);
        parser.popScope();
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())) target is: compilerEnvirons method is: getErrorReporter()
source statement: org.mozilla.javascript.CompilerEnvirons()V callee: VariableReference: Statement 0, type org.mozilla.javascript.CompilerEnvironsindex is: 0
Matched Method is: getErrorReporter()Lorg/mozilla/javascript/ErrorReporter;
statement is: Parser parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.popScope(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.popScope() target is: parser method is: popScope()
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: popScope()V
statement is: // Improved test data:
compilerEnvirons = new CompilerEnvirons("Java")// Using a more descriptive value for the "language" parameter.
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: errorReporter = ((DefaultErrorReporter) (compilerEnvirons.getErrorReporter())), class spoon.support.reflect.code.CtAssignmentImpl
statement is: parser = new Parser(compilerEnvirons, errorReporter), class spoon.support.reflect.code.CtAssignmentImpl
statement is: parser.popScope(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.popScope() target is: parser method is: popScope()
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 2
Matched Method is: popScope()V
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.popScope();
parser.popScope();

statement is: org.mozilla.javascript.CompilerEnvirons()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.CompilerEnvirons
statement code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons()
statement is: forEval(Lorg/mozilla/javascript/ErrorReporter;)Lorg/mozilla/javascript/ErrorReporter; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.mozilla.javascript.DefaultErrorReporter
statement code is: DefaultErrorReporter forEval = (DefaultErrorReporter)DefaultErrorReporter.forEval((ErrorReporter) null)
statement is: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.mozilla.javascript.Parser
statement code is: Parser parser = new Parser(arg0, arg1)
statement is: reportError(Ljava/lang/String;)Ljava/lang/RuntimeException; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.RuntimeException
statement code is: RuntimeException reportError = parser.reportError("")
test data is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter forEval = (DefaultErrorReporter)DefaultErrorReporter.forEval((ErrorReporter) null);
Parser parser = new Parser(compilerEnvirons, forEval);
parser.reportError("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
        DefaultErrorReporter forEval = ((DefaultErrorReporter) (DefaultErrorReporter.forEval(((ErrorReporter) (null)))));
        Parser parser = new Parser(compilerEnvirons, forEval);
        parser.reportError("The quick brown fox jumps over the lazy dog");
    }
}
statement is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultErrorReporter forEval = ((DefaultErrorReporter) (DefaultErrorReporter.forEval(((ErrorReporter) (null))))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((DefaultErrorReporter) (DefaultErrorReporter.forEval(((ErrorReporter) (null))))) target is: DefaultErrorReporter method is: forEval(ErrorReporter)
Matched Method is: forEval(Lorg/mozilla/javascript/ErrorReporter;)Lorg/mozilla/javascript/ErrorReporter;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: Parser parser = new Parser(compilerEnvirons, forEval), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parser.reportError("The quick brown fox jumps over the lazy dog"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parser.reportError("The quick brown fox jumps over the lazy dog") target is: parser method is: reportError(java.lang.String)
source statement: org.mozilla.javascript.Parser(Lorg/mozilla/javascript/CompilerEnvirons;Lorg/mozilla/javascript/ErrorReporter;)V callee: VariableReference: Statement 2, type org.mozilla.javascript.Parserindex is: 3
Matched Method is: reportError(Ljava/lang/String;)Ljava/lang/RuntimeException;
TestCase is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ErrorReporter errorReporter = null;
DefaultErrorReporter forEval = (DefaultErrorReporter)DefaultErrorReporter.forEval(errorReporter);
Parser parser = new Parser(compilerEnvirons, forEval);
String string = "The quick brown fox jumps over the lazy dog";
((Parser) forEval).reportError(string);

* test suite isTestSuite: 140
Test 0: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse(" 9==}", " 9==}", 2145386496);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 1: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.getEncodedSource();
Test 2: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("for ", "for ", (-3143));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 3: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("-B7UoCFkq<{R1.1W", "", 75);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
StringReader stringReader = new StringReader("var ");
// Undeclared exception!
try { 
  parser.parse((Reader) stringReader, (String) null, (-3711));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addStrictWarning("p^FLQfy4v$cQMC+Du", "p^FLQfy4v$cQMC+Du");
Test 6: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("\n    ", "\n    ", 82);
Test 7: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("!8+HbJbJA<T+Y&l", "!8+HbJbJA<T+Y&l", 106);
Test 8: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("(I)V", "(I)V", 56320);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 9: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("D.(C)*8M", "D.(C)*8M", 797);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 10: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
compilerEnvirons.setXmlAvailable(false);
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("@/0", "35m<e8e", 103);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 11: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
ScriptOrFnNode parse = parser.parse("", "", 19);
parser.pushScope(parse);
// Undeclared exception!
try { 
  parser.pushScope(parse);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 12: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
compilerEnvirons.setGeneratingSource(false);
parser.parse("h>SYGeES8.d&4&GFy7p", "h>SYGeES8.d&4&GFy7p", 54);
Test 13: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("{[4%W`<;8w<ia-f]?", "{[4%W`<;8w<ia-f]?", 88);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("{ bgVAm5QS;zEd", "%T/V92SQ%", 131);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 15: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("{1..kwTev}w(X?qp1", "{1..kwTev}w(X?qp1", (-21));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
// Undeclared exception!
try { 
  parser.parse("continue", "file@OName", 2);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 17: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("throw ", "throw ", 240);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 19: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("if ", "h!}1Uec", 1);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 20: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("switch", "msg.const.redecl", 2608);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("while", "Z8yGkL =Y", 84);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 22: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("debugger", "debugger", (-1150));
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 23: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 20);
Test 24: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467);
parser.defineSymbol(121, false, "l$o +u|Zr");
// Undeclared exception!
try { 
  parser.defineSymbol(103, false, "l$o +u|Zr");
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 25: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("aviMjv", "aviMjv", 1796);
parser.defineSymbol(108, false, "bN>Y");
Test 26: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("yield ", "yield ", 110);
parser.defineSymbol(152, true, "yield ");
Test 27: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("", "", 113);
parser.defineSymbol(152, false, "");
Test 28: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("hmf3Z,Ilb8LQ<SLdlX ", "hmf3Z,Ilb8LQ<SLdlX ", (-1933));
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 29: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("qg6+_W=Z|R&k", "qg6+_W=Z|R&k", 469);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 30: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", (-2638));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 31: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("At^{:h", "At^{:h", 19);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 32: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 33: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("bgu-(fdo4b%,4z", "bgu-(fdo4b%,4z", (-855));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 34: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("<$", "<$", (-6303));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 35: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("+UxHtQ.+B", "+UxHtQ.+B", (-1782));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 36: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("typeof", "co?b#EnReaNIJtI", 5973);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 37: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("void", "jN+_i[_", 110);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 38: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);
// Undeclared exception!
try { 
  parser.parse("<LxZ5wbX78N", "<LxZ5wbX78N", 45);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 39: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 40: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("I3(Bp+6RoacqA", "I3(Bp+6RoacqA", 615);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 41: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("(new ", "(new ", 1992);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 42: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
compilerEnvirons.setXmlAvailable(false);
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("+UxHtQ.+B", "+UxHtQ.+B", 75);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 43: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse(" T.*;.iJ$,d{t3N", "msg.destruct.assign.no.init", 39);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 44: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("msg.bad.throw.eol", "msg.bad.throw.eol", 130);
Test 45: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("@.j)~Rq{q", "@.j)~Rq{q", 13);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 46: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("\"Q=KI5^ClM\"", "\"Q=KI5^ClM\"", (-465));
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 47: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("protected", "protected", 131);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 48: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("[]s?\"=`PyKO VIf", "[]s?\"=`PyKO VIf", 82);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 49: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 50: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("J:0Qti6f5MS[", "", 88);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 51: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("Ljava/lang/Object;I)Ljava/lang/Object;", "IZl\"0& ", (-896));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 52: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 53: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("new ", "msg.no.paren.parms", 88);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 54: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.createDecompiler(compilerEnvirons);
Test 55: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
parser.parse("l$o +u|Zr", "l$o +u|Zr", 1);
parser.eof();
Test 56: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("aviMjv", "aviMjv", 1796);
parser.getCurrentLineNumber();
Test 57: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88);
parser.getEncodedSource();
Test 58: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.insideFunction();
Test 59: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("null");
parser.parse((Reader) stringReader, (String) null, 2726);
Test 60: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
StringReader stringReader = new StringReader("N");
parser.parse((Reader) stringReader, "l$o +u|Zr", 0);
Test 61: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("");
parser.parse((Reader) stringReader, "", 0);
Test 62: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context context = new Context();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("@lzn*mFC", "error reporter", 0);
parser.addWarning("msg.bad.namespace", "U'GBp.I");
Test 63: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.addError("msg.in.after.for.name", "f?=Q`");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.mozilla.javascript.Parser", e);
}

Test 64: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 65: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);
parser.parse("msg.no.bracket.arg", "K40[|h7\"?x{vd#v9,", 126);
Test 66: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("UiLW+LD[gQ+Vu rix", "UiLW+LD[gQ+Vu rix", 65536);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 67: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("/DJFmr:!o/8I,z[y&", "", (-1));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 68: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.addError("language version");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // no message resource found for message property language version
   //
   verifyException("org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider", e);
}

Test 69: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.popScope();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.mozilla.javascript.Parser", e);
}

Test 70: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter forEval = (DefaultErrorReporter)DefaultErrorReporter.forEval((ErrorReporter) null);
Parser parser = new Parser(compilerEnvirons, forEval);
// Undeclared exception!
try { 
  parser.reportError("");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // no message resource found for message property 
   //
   verifyException("org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider", e);
}

Test 71: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 72: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

Test 73: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 74: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("This is a test input for the parser", "", 75);

Test 75: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
StringReader stringReader = new StringReader("var x = 42;");
parser.parse((Reader) stringReader, (String) null, (int) (Integer) null);

Test 76: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addStrictWarning("A string that contains a valid identifier", "Another string that contains a valid identifier");

Test 77: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", "public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", 82);

Test 78: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 79: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("(I)V", "(I)V", (int) (Integer) null);

Test 80: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("D.(C)*8M", "D.(C)*8M", 797);

Test 81: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
compilerEnvirons.setXmlAvailable(false);
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
((Parser) defaultErrorReporter).parse("test_file.txt", "35m<e8e", 103);

Test 82: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
ScriptOrFnNode parse = parser.parse("script.js", "console.log('Hello World!');", 19);
parser.pushScope(parse);
parser.pushScope(parse);

Test 83: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
compilerEnvirons.setGeneratingSource(false);
parser.parse("This is a sample Java code", "This is a sample Java code", 54);

Test 84: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 85: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

Test 86: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

Test 87: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
parser.parse("continue", "file@OName", 2);

Test 88: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("throw new IOException(\"File not found\")", "throw ", 240);

Test 89: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44);

Test 90: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

Test 91: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("switch", "msg.const.redecl", 2608);

Test 92: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("while", "Z8yGkL = 2 + 3 * 4 - 5 / 6", 84);

Test 93: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("debugger", "debugger", (int) (Integer) null);

Test 94: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("\"Hello world!\"", "\"Hello world!\"", 88);
parser.parse("\"This is a test string\"", "\"This is a test string\"", 20);

Test 95: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467);
parser.defineSymbol(121, false, "l$o +u|Zr");
parser.defineSymbol(103, false, "l$o +u|Zr");

Test 96: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("aBcDeFg", "aBcDeFg", 1796);
parser.defineSymbol(108, false, "bN>Y");

Test 97: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("20 + 30", "20 + 30", 110);
parser.defineSymbol(152, true, "20 + 30");

Test 98: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("inputFile.txt", "UTF-8", 113);
parser.defineSymbol((int) false, (boolean) "functionName", (String) null);

Test 99: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("A complex algorithm for calculating the area of a rectangle", "A complex algorithm for calculating the area of a rectangle", 1000);

Test 100: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("This is a sample input string.", "This is a sample input string.", 469);

Test 101: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", (int) (Integer) null);

Test 102: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 103: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54);

Test 104: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("filepath", "sourcecode", 0);

Test 105: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("+UxHtQ.+B", "+UxHtQ.+B", (int) (Integer) null);

Test 106: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("typeof", "This is a test string for parsing.", 1000);

Test 107: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 108: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);
parser.parse("Java", "Java", 45);

Test 109: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639);
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "factory.makeContext() returned Context instance associated with thread 1234";
String string = "factory.makeContext() returned Context instance associated with thread 1234";
int _int = 639;
parser.parse(string, string, _int);

Test 110: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("I3(Bp+6RoacqA", "I3(Bp+6RoacqA", 615);

Test 111: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 112: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
compilerEnvirons.setXmlAvailable(false);
Parser parser = new Parser(compilerEnvirons, errorReporter);
((Parser)null).parse("This is a sample input string", "This is a sample input string", 75);

Test 113: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

Test 114: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("The quick brown fox jumps over the lazy dog.", (String) 130, (int) (Integer) null);

Test 115: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("This is a sample string.", "This is a sample string.", 13);

Test 116: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("\"Q=KI5^ClM\"", "\"Q=KI5^ClM\"", (int) (Integer) null);

Test 117: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("protected", "protected", 131);

Test 118: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("This is a sample string literal", "This is a sample integer value", 82);

Test 119: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122);

Test 120: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("J:0Qti6f5MS[", "A complex mathematical expression involving variables x and y", 88);

Test 121: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254);

Test 122: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("new Foo()", "msg.no.paren.parms", 88);

Test 123: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.createDecompiler(compilerEnvirons);

Test 124: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
parser.parse("1 + 2", "1 + 2", 1);
parser.eof();

Test 125: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("sampleScript.java", "sampleScript.java", 100);
parser.getCurrentLineNumber();

Test 126: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("A complex string with multiple characters and words", "A complex string with multiple characters and words", 88);
parser.getEncodedSource();

Test 127: 
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;

Test 128: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("\"Hello World!\"");
parser.parse((Reader) stringReader, (String) 2726, (int) (Integer) null);

Test 129: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
StringReader stringReader = new StringReader("Y");
parser.parse((Reader) stringReader, "l$o +u|Zr", 0);

Test 130: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World\"); } }");
parser.parse((Reader) stringReader, "", 0);

Test 131: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context context = new Context();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("@lzn*mFC", "error reporter", 0);
parser.addWarning("msg.bad.namespace", "U'GBp.I");

Test 132: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addError("msg.in.after.for.name", "Illegal character in identifier 'f?=Q`'");

Test 133: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40);
String string = "Mi*_f3JK?a4:";
String string = "The input string is a palindrome.";
int _int = 40;
parser.parse(string, string, _int);

Test 134: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);

Test 135: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("x+y*z^2", "x+y*z^2", 65536);

Test 136: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("Hello, World!", "", (int) (Integer) null);

Test 137: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addError("Invalid language version '99'");

Test 138: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.popScope();
parser.popScope();

Test 139: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter forEval = (DefaultErrorReporter)DefaultErrorReporter.forEval((ErrorReporter) null);
Parser parser = new Parser(compilerEnvirons, forEval);
((Parser) forEval).reportError("The quick brown fox jumps over the lazy dog");


* Generated after the refinement and before minimization 140 tests with total length 606
* test suite isTestSuite: 140
Test 0: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse(" 9==}", " 9==}", 2145386496);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 1: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.getEncodedSource();
Test 2: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("for ", "for ", (-3143));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 3: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("-B7UoCFkq<{R1.1W", "", 75);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
StringReader stringReader = new StringReader("var ");
// Undeclared exception!
try { 
  parser.parse((Reader) stringReader, (String) null, (-3711));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addStrictWarning("p^FLQfy4v$cQMC+Du", "p^FLQfy4v$cQMC+Du");
Test 6: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("\n    ", "\n    ", 82);
Test 7: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("!8+HbJbJA<T+Y&l", "!8+HbJbJA<T+Y&l", 106);
Test 8: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("(I)V", "(I)V", 56320);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 9: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("D.(C)*8M", "D.(C)*8M", 797);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 10: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
compilerEnvirons.setXmlAvailable(false);
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("@/0", "35m<e8e", 103);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 11: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
ScriptOrFnNode parse = parser.parse("", "", 19);
parser.pushScope(parse);
// Undeclared exception!
try { 
  parser.pushScope(parse);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 12: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
compilerEnvirons.setGeneratingSource(false);
parser.parse("h>SYGeES8.d&4&GFy7p", "h>SYGeES8.d&4&GFy7p", 54);
Test 13: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("{[4%W`<;8w<ia-f]?", "{[4%W`<;8w<ia-f]?", 88);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("{ bgVAm5QS;zEd", "%T/V92SQ%", 131);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 15: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("{1..kwTev}w(X?qp1", "{1..kwTev}w(X?qp1", (-21));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
// Undeclared exception!
try { 
  parser.parse("continue", "file@OName", 2);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 17: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("throw ", "throw ", 240);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 19: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("if ", "h!}1Uec", 1);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 20: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("switch", "msg.const.redecl", 2608);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("while", "Z8yGkL =Y", 84);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 22: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("debugger", "debugger", (-1150));
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 23: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 20);
Test 24: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467);
parser.defineSymbol(121, false, "l$o +u|Zr");
// Undeclared exception!
try { 
  parser.defineSymbol(103, false, "l$o +u|Zr");
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 25: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("aviMjv", "aviMjv", 1796);
parser.defineSymbol(108, false, "bN>Y");
Test 26: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("yield ", "yield ", 110);
parser.defineSymbol(152, true, "yield ");
Test 27: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("", "", 113);
parser.defineSymbol(152, false, "");
Test 28: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("hmf3Z,Ilb8LQ<SLdlX ", "hmf3Z,Ilb8LQ<SLdlX ", (-1933));
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 29: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("qg6+_W=Z|R&k", "qg6+_W=Z|R&k", 469);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 30: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", (-2638));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 31: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("At^{:h", "At^{:h", 19);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 32: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 33: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("bgu-(fdo4b%,4z", "bgu-(fdo4b%,4z", (-855));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 34: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("<$", "<$", (-6303));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 35: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("+UxHtQ.+B", "+UxHtQ.+B", (-1782));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 36: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("typeof", "co?b#EnReaNIJtI", 5973);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 37: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("void", "jN+_i[_", 110);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 38: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);
// Undeclared exception!
try { 
  parser.parse("<LxZ5wbX78N", "<LxZ5wbX78N", 45);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 39: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 40: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("I3(Bp+6RoacqA", "I3(Bp+6RoacqA", 615);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 41: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("(new ", "(new ", 1992);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 42: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
compilerEnvirons.setXmlAvailable(false);
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("+UxHtQ.+B", "+UxHtQ.+B", 75);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 43: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse(" T.*;.iJ$,d{t3N", "msg.destruct.assign.no.init", 39);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 44: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("msg.bad.throw.eol", "msg.bad.throw.eol", 130);
Test 45: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("@.j)~Rq{q", "@.j)~Rq{q", 13);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 46: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("\"Q=KI5^ClM\"", "\"Q=KI5^ClM\"", (-465));
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 47: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("protected", "protected", 131);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 48: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("[]s?\"=`PyKO VIf", "[]s?\"=`PyKO VIf", 82);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 49: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 50: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("J:0Qti6f5MS[", "", 88);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 51: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("Ljava/lang/Object;I)Ljava/lang/Object;", "IZl\"0& ", (-896));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 52: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 53: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("new ", "msg.no.paren.parms", 88);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 54: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.createDecompiler(compilerEnvirons);
Test 55: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
parser.parse("l$o +u|Zr", "l$o +u|Zr", 1);
parser.eof();
Test 56: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("aviMjv", "aviMjv", 1796);
parser.getCurrentLineNumber();
Test 57: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88);
parser.getEncodedSource();
Test 58: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.insideFunction();
Test 59: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("null");
parser.parse((Reader) stringReader, (String) null, 2726);
Test 60: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
StringReader stringReader = new StringReader("N");
parser.parse((Reader) stringReader, "l$o +u|Zr", 0);
Test 61: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("");
parser.parse((Reader) stringReader, "", 0);
Test 62: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context context = new Context();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("@lzn*mFC", "error reporter", 0);
parser.addWarning("msg.bad.namespace", "U'GBp.I");
Test 63: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.addError("msg.in.after.for.name", "f?=Q`");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.mozilla.javascript.Parser", e);
}

Test 64: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 65: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);
parser.parse("msg.no.bracket.arg", "K40[|h7\"?x{vd#v9,", 126);
Test 66: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("UiLW+LD[gQ+Vu rix", "UiLW+LD[gQ+Vu rix", 65536);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 67: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("/DJFmr:!o/8I,z[y&", "", (-1));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 68: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.addError("language version");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // no message resource found for message property language version
   //
   verifyException("org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider", e);
}

Test 69: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.popScope();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.mozilla.javascript.Parser", e);
}

Test 70: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter forEval = (DefaultErrorReporter)DefaultErrorReporter.forEval((ErrorReporter) null);
Parser parser = new Parser(compilerEnvirons, forEval);
// Undeclared exception!
try { 
  parser.reportError("");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // no message resource found for message property 
   //
   verifyException("org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider", e);
}

Test 71: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 72: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

Test 73: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 74: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("This is a test input for the parser", "", 75);

Test 75: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
StringReader stringReader = new StringReader("var x = 42;");
parser.parse((Reader) stringReader, (String) null, (int) (Integer) null);

Test 76: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addStrictWarning("A string that contains a valid identifier", "Another string that contains a valid identifier");

Test 77: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", "public class TestClass {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}", 82);

Test 78: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 79: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("(I)V", "(I)V", (int) (Integer) null);

Test 80: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("D.(C)*8M", "D.(C)*8M", 797);

Test 81: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
compilerEnvirons.setXmlAvailable(false);
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
((Parser) defaultErrorReporter).parse("test_file.txt", "35m<e8e", 103);

Test 82: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
ScriptOrFnNode parse = parser.parse("script.js", "console.log('Hello World!');", 19);
parser.pushScope(parse);
parser.pushScope(parse);

Test 83: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
compilerEnvirons.setGeneratingSource(false);
parser.parse("This is a sample Java code", "This is a sample Java code", 54);

Test 84: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 85: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

Test 86: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

Test 87: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
parser.parse("continue", "file@OName", 2);

Test 88: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("throw new IOException(\"File not found\")", "throw ", 240);

Test 89: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44);

Test 90: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

Test 91: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("switch", "msg.const.redecl", 2608);

Test 92: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("while", "Z8yGkL = 2 + 3 * 4 - 5 / 6", 84);

Test 93: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("debugger", "debugger", (int) (Integer) null);

Test 94: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("\"Hello world!\"", "\"Hello world!\"", 88);
parser.parse("\"This is a test string\"", "\"This is a test string\"", 20);

Test 95: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467);
parser.defineSymbol(121, false, "l$o +u|Zr");
parser.defineSymbol(103, false, "l$o +u|Zr");

Test 96: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("aBcDeFg", "aBcDeFg", 1796);
parser.defineSymbol(108, false, "bN>Y");

Test 97: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("20 + 30", "20 + 30", 110);
parser.defineSymbol(152, true, "20 + 30");

Test 98: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("inputFile.txt", "UTF-8", 113);
parser.defineSymbol((int) false, (boolean) "functionName", (String) null);

Test 99: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("A complex algorithm for calculating the area of a rectangle", "A complex algorithm for calculating the area of a rectangle", 1000);

Test 100: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("This is a sample input string.", "This is a sample input string.", 469);

Test 101: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", (int) (Integer) null);

Test 102: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 103: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54);

Test 104: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("filepath", "sourcecode", 0);

Test 105: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("+UxHtQ.+B", "+UxHtQ.+B", (int) (Integer) null);

Test 106: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("typeof", "This is a test string for parsing.", 1000);

Test 107: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 108: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);
parser.parse("Java", "Java", 45);

Test 109: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639);
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
String string = "factory.makeContext() returned Context instance associated with thread 1234";
String string = "factory.makeContext() returned Context instance associated with thread 1234";
int _int = 639;
parser.parse(string, string, _int);

Test 110: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("I3(Bp+6RoacqA", "I3(Bp+6RoacqA", 615);

Test 111: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);

Test 112: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
compilerEnvirons.setXmlAvailable(false);
Parser parser = new Parser(compilerEnvirons, errorReporter);
((Parser)null).parse("This is a sample input string", "This is a sample input string", 75);

Test 113: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);

Test 114: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("The quick brown fox jumps over the lazy dog.", (String) 130, (int) (Integer) null);

Test 115: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("This is a sample string.", "This is a sample string.", 13);

Test 116: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("\"Q=KI5^ClM\"", "\"Q=KI5^ClM\"", (int) (Integer) null);

Test 117: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("protected", "protected", 131);

Test 118: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("This is a sample string literal", "This is a sample integer value", 82);

Test 119: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122);

Test 120: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("J:0Qti6f5MS[", "A complex mathematical expression involving variables x and y", 88);

Test 121: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254);

Test 122: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("new Foo()", "msg.no.paren.parms", 88);

Test 123: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.createDecompiler(compilerEnvirons);

Test 124: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
parser.parse("1 + 2", "1 + 2", 1);
parser.eof();

Test 125: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("sampleScript.java", "sampleScript.java", 100);
parser.getCurrentLineNumber();

Test 126: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("A complex string with multiple characters and words", "A complex string with multiple characters and words", 88);
parser.getEncodedSource();

Test 127: 
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;

Test 128: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("\"Hello World!\"");
parser.parse((Reader) stringReader, (String) 2726, (int) (Integer) null);

Test 129: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
StringReader stringReader = new StringReader("Y");
parser.parse((Reader) stringReader, "l$o +u|Zr", 0);

Test 130: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World\"); } }");
parser.parse((Reader) stringReader, "", 0);

Test 131: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context context = new Context();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("@lzn*mFC", "error reporter", 0);
parser.addWarning("msg.bad.namespace", "U'GBp.I");

Test 132: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addError("msg.in.after.for.name", "Illegal character in identifier 'f?=Q`'");

Test 133: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40);
String string = "Mi*_f3JK?a4:";
String string = "The input string is a palindrome.";
int _int = 40;
parser.parse(string, string, _int);

Test 134: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);

Test 135: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("x+y*z^2", "x+y*z^2", 65536);

Test 136: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("Hello, World!", "", (int) (Integer) null);

Test 137: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addError("Invalid language version '99'");

Test 138: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.popScope();
parser.popScope();

Test 139: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter forEval = (DefaultErrorReporter)DefaultErrorReporter.forEval((ErrorReporter) null);
Parser parser = new Parser(compilerEnvirons, forEval);
((Parser) forEval).reportError("The quick brown fox jumps over the lazy dog");


* Minimizing test suite
* test suite isTestSuite: 69
Test 0: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 1: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.addError("msg.in.after.for.name", "Illegal character in identifier 'f?=Q`'");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.mozilla.javascript.Parser", e);
}

Test 2: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.getEncodedSource();
Test 3: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("while", "Z8yGkL = 2 + 3 * 4 - 5 / 6", 84);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 4: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("-B7UoCFkq<{R1.1W", "", 75);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("public class TestClass { public static void main(String[] args) { System.out.println(\"Hello World\"); } }");
// Undeclared exception!
try { 
  parser.parse((Reader) stringReader, "", 0);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 6: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.addStrictWarning("A string that contains a valid identifier", "Another string that contains a valid identifier");
Test 7: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("\n    ", "\n    ", 82);
Test 8: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 9: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context context = new Context();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("@lzn*mFC", "error reporter", 0);
parser.addWarning("msg.bad.namespace", "U'GBp.I");
Test 10: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
compilerEnvirons.setXmlAvailable(false);
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("@/0", "35m<e8e", 103);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 11: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
ScriptOrFnNode parse = parser.parse("script.js", "console.log('Hello World!');", 19);
parser.pushScope(parse);
// Undeclared exception!
try { 
  parser.pushScope(parse);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 12: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
compilerEnvirons.setGeneratingSource(false);
parser.parse("h>SYGeES8.d&4&GFy7p", "h>SYGeES8.d&4&GFy7p", 54);
Test 13: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("{[4%W`<;8w<ia-f]?", "{[4%W`<;8w<ia-f]?", 88);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("{ bgVAm5QS;zEd", "%T/V92SQ%", 131);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 15: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("{1..kwTev}w(X?qp1", "{1..kwTev}w(X?qp1", (-21));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
// Undeclared exception!
try { 
  parser.parse("continue", "file@OName", 2);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 17: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("throw new IOException(\"File not found\")", "throw ", 240);
Test 18: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 19: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("if ", "h!}1Uec", 1);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 20: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("switch", "msg.const.redecl", 2608);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("for ", "for ", (-3143));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 22: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
StringReader stringReader = new StringReader("var ");
// Undeclared exception!
try { 
  parser.parse((Reader) stringReader, (String) null, (-3711));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 23: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("debugger", "debugger", (-1150));
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 24: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("J:0Qti6f5MS[", "A complex mathematical expression involving variables x and y", 88);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 25: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 20);
Test 26: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("aBcDeFg", "aBcDeFg", 1796);
parser.defineSymbol(108, false, "bN>Y");
Test 27: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467);
parser.defineSymbol(121, false, "l$o +u|Zr");
// Undeclared exception!
try { 
  parser.defineSymbol(103, false, "l$o +u|Zr");
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 28: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("20 + 30", "20 + 30", 110);
parser.defineSymbol(152, true, "20 + 30");
Test 29: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("", "", 113);
parser.defineSymbol(152, false, "");
Test 30: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("hmf3Z,Ilb8LQ<SLdlX ", "hmf3Z,Ilb8LQ<SLdlX ", (-1933));
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}

Test 31: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("qg6+_W=Z|R&k", "qg6+_W=Z|R&k", 469);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 32: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", (-2638));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 33: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("x+y*z^2", "x+y*z^2", 65536);
Test 34: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse(" 9==}", " 9==}", 2145386496);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 35: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 36: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("bgu-(fdo4b%,4z", "bgu-(fdo4b%,4z", (-855));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 37: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("Ljava/lang/Object;I)Ljava/lang/Object;", "IZl\"0& ", (-896));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 38: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("<$", "<$", (-6303));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 39: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("+UxHtQ.+B", "+UxHtQ.+B", (-1782));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 40: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("!8+HbJbJA<T+Y&l", "!8+HbJbJA<T+Y&l", 106);
Test 41: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("typeof", "This is a test string for parsing.", 1000);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 42: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("void", "jN+_i[_", 110);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 43: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);
// Undeclared exception!
try { 
  parser.parse("<LxZ5wbX78N", "<LxZ5wbX78N", 45);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 44: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("D.(C)*8M", "D.(C)*8M", 797);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 45: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
compilerEnvirons.setXmlAvailable(false);
parser.parse("msg.no.bracket.arg", "K40[|h7\"?x{vd#v9,", 126);
Test 46: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse(" T.*;.iJ$,d{t3N", "msg.destruct.assign.no.init", 39);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 47: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
ContextFactory global = ContextFactory.getGlobal();
Context context = new Context(global);
DefaultErrorReporter errorReporter = (DefaultErrorReporter)context.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("msg.bad.throw.eol", "msg.bad.throw.eol", 130);
Test 48: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("@.j)~Rq{q", "@.j)~Rq{q", 13);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 49: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("/DJFmr:!o/8I,z[y&", "", (-1));
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 50: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("null");
parser.parse((Reader) stringReader, (String) null, 2726);
Test 51: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("[]s?\"=`PyKO VIf", "[]s?\"=`PyKO VIf", 82);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 52: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 53: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("At^{:h", "At^{:h", 19);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 54: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 55: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.parse("new ", "msg.no.paren.parms", 88);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 56: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("(new ", "(new ", 1992);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 57: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.createDecompiler(compilerEnvirons);
Test 58: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
parser.parse("1 + 2", "1 + 2", 1);
parser.eof();
Test 59: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
parser.parse("aviMjv", "aviMjv", 1796);
parser.getCurrentLineNumber();
Test 60: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88);
parser.getEncodedSource();
Test 61: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
parser.insideFunction();
Test 62: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Parser parser = new Parser(compilerEnvirons, (ErrorReporter) null);
StringReader stringReader = new StringReader("N");
parser.parse((Reader) stringReader, "l$o +u|Zr", 0);
Test 63: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
StringReader stringReader = new StringReader("");
parser.parse((Reader) stringReader, "", 0);
Test 64: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("UiLW+LD[gQ+Vu rix", "UiLW+LD[gQ+Vu rix", 65536);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 65: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter defaultErrorReporter = DefaultErrorReporter.instance;
Parser parser = new Parser(compilerEnvirons, defaultErrorReporter);
// Undeclared exception!
try { 
  parser.parse("(I)V", "(I)V", 56320);
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 66: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context currentContext = Context.getCurrentContext();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)currentContext.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.addError("Invalid language version '99'");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // no message resource found for message property Invalid language version '99'
   //
   verifyException("org.mozilla.javascript.ScriptRuntime$DefaultMessageProvider", e);
}

Test 67: 
CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
DefaultErrorReporter errorReporter = (DefaultErrorReporter)compilerEnvirons.getErrorReporter();
Parser parser = new Parser(compilerEnvirons, errorReporter);
// Undeclared exception!
try { 
  parser.popScope();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.mozilla.javascript.Parser", e);
}

Test 68: 
DefaultErrorReporter forEval = (DefaultErrorReporter)DefaultErrorReporter.forEval((ErrorReporter) null);
// Undeclared exception!
try { 
  ((Parser) forEval).reportError("The quick brown fox jumps over the lazy dog");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 43%
* Total number of goals: 735
* Number of covered goals: 316
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 42%
* Total number of goals: 1211
* Number of covered goals: 514
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 42%
* Total number of goals: 80
* Number of covered goals: 34
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 16
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 42%
* Total number of goals: 735
* Number of covered goals: 308
* Generated 69 tests with total length 299
* Resulting test suite's coverage: 54% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("factory.makeContext() returned Context instance already associated with some thread", "factory.makeContext() returned Context instance already associated with some thread", 639);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ; before statement (factory.makeContext() returned Context instance already associated with some thread#639)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: parseScriptWithSyntaxErrorThrowsRuntimeException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.addError("msg.in.after.for.name", "Illegal character in identifier 'f?=Q`'");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.mozilla.javascript.Parser", e);
}


** It was a parseable test case! 
refined test name is: testInvalidIdentifierthrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
String encodedSource = parser.getEncodedSource();
assertNull(encodedSource);


** It was a parseable test case! 
refined test name is: testParserInitializationWithDefaultErrorReporter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("while", "Z8yGkL = 2 + 3 * 4 - 5 / 6", 84);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ( before condition (Z8yGkL = 2 + 3 * 4 - 5 / 6#84)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParserThrowsRuntimeExceptionForInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("-B7UoCFkq<{R1.1W", "", 75);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing : after property id (#75)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParseInvalidInputString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
parser.addStrictWarning("A string that contains a valid identifier", "Another string that contains a valid identifier");
assertNull(parser.getEncodedSource());


** It was a parseable test case! 
refined test name is: testCreateParserObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
ScriptOrFnNode parse = parser.parse("\n    ", "\n    ", 82);
assertEquals("\u0087", parser.getEncodedSource());
assertEquals(83, parse.getEndLineno());


** It was a parseable test case! 
refined test name is: testParseScriptOrFnNode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("Mi*_f3JK?a4:", "Mi*_f3JK?a4:", 40);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // Unexpected end of file (Mi*_f3JK?a4:#40)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testInvalidCharacterInInputStream
* Compiling Tests
refined test name is: testParsethrowsExceptionOnInvalidCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
Context context = new Context();
ErrorReporter arg1 = context.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
ScriptOrFnNode parse = parser.parse("@lzn*mFC", "error reporter", 0);
assertEquals("error reporter", parse.getSourceName());

parser.addWarning("msg.bad.namespace", "U'GBp.I");
assertEquals("\u0087\u0092'\u0003lzn\u0017'\u0003mFCQ\u0001", parser.getEncodedSource());


** It was a parseable test case! 
refined test name is: testParserInitializationAndParsing
* Compiling Tests
refined test name is: testParserAddsWarningWithSpecifiedArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
arg0.setXmlAvailable(false);
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("@/0", "35m<e8e", 103);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // XML runtime not available (35m<e8e#103)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParserSyntaxError
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
arg0.setGeneratingSource(false);
ScriptOrFnNode parse = parser.parse("h>SYGeES8.d&4&GFy7p", "h>SYGeES8.d&4&GFy7p", 54);
assertEquals(54, parse.getLineno());
assertEquals(32, parse.getEncodedSourceEnd());


** It was a parseable test case! 
refined test name is: testParseScriptOrFnNodeWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("{[4%W`<;8w<ia-f]?", "{[4%W`<;8w<ia-f]?", 88);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // illegal character ({[4%W`<;8w<ia-f]?#88)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParseInvalidCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("{ bgVAm5QS;zEd", "%T/V92SQ%", 131);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing } in compound statement (%T/V92SQ%#131)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParseMalformedInputThrowsRuntimeException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("{1..kwTev}w(X?qp1", "{1..kwTev}w(X?qp1", (-21));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // -21
   //
   verifyException("org.mozilla.javascript.RhinoException", e);
}


** It was a parseable test case! 
refined test name is: testUndeclaredException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
Parser parser = new Parser(arg0, (ErrorReporter) null);
// Undeclared exception!
try { 
  parser.parse("continue", "file@OName", 2);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.mozilla.javascript.Parser", e);
}


** It was a parseable test case! 
refined test name is: testContinueStatementWithInvalidFileName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
ScriptOrFnNode parse = parser.parse("throw new IOException(\"File not found\")", "throw ", 240);
assertEquals("\u00872\u001E'\u000BIOExceptionV)\u000EFile not foundWQ\u0001", parser.getEncodedSource());
assertEquals(240, parse.getEndLineno());


** It was a parseable test case! 
refined test name is: testParseThrowStatement
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("; y&sTXHekCxQD]D", "; y&sTXHekCxQD]D", 44);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ; before statement (; y&sTXHekCxQD]D#44)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParseInvalidInputLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("switch", "msg.const.redecl", 2608);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ( before switch expression (msg.const.redecl#2608)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParserThrowsRuntimeExceptionOnInvalidSyntax
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("for ", "for ", (-3143));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // -3143
   //
   verifyException("org.mozilla.javascript.RhinoException", e);
}


** It was a parseable test case! 
refined test name is: testParseForStatementWithInvalidInitializer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("debugger", "debugger", (-1150));
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}


** It was a parseable test case! 
refined test name is: testParserParseWithDebuggerString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("J:0Qti6f5MS[", "A complex mathematical expression involving variables x and y", 88);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ; before statement (A complex mathematical expression involving variables x and y#88)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParseComplexMathExpressionWithVariables
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88);
ScriptOrFnNode parse = parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 20);
assertEquals("\u0087'\bBRtKOE8ef\u0001'\u0002XEQ\u0001", parser.getEncodedSource());
assertEquals(20, parse.getEndLineno());


** It was a parseable test case! 
refined test name is: testParseScriptOrFnNodeWithCorrectEndLineNumber
* Compiling Tests
refined test name is: testParseScriptOrFunctionNode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
parser.parse("aBcDeFg", "aBcDeFg", 1796);
parser.defineSymbol(108, false, "bN>Y");
assertEquals("\u0087'\u0007aBcDeFgQ\u0001", parser.getEncodedSource());


** It was a parseable test case! 
refined test name is: testParserParseAndDefineSymbolWithEscapeCharacters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
parser.parse("l$o +u|Zr", "l$o +u|Zr", 2467);
parser.defineSymbol(121, false, "l$o +u|Zr");
// Undeclared exception!
try { 
  parser.defineSymbol(103, false, "l$o +u|Zr");
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}


** It was a parseable test case! 
refined test name is: testParseWithUndefinedSymbol
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
parser.parse("20 + 30", "20 + 30", 110);
parser.defineSymbol(152, true, "20 + 30");
assertEquals("\u0087(S\u0014\u0015(S\u001EQ\u0001", parser.getEncodedSource());


** It was a parseable test case! 
refined test name is: testParserCreateAndParse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
ScriptOrFnNode parse = parser.parse("", "", 113);
assertEquals(113, parse.getBaseLineno());

parser.defineSymbol(152, false, "");
assertEquals("\u0087", parser.getEncodedSource());


** It was a parseable test case! 
refined test name is: testParserWithSymbolDefinition
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("hmf3Z,Ilb8LQ<SLdlX ", "hmf3Z,Ilb8LQ<SLdlX ", (-1933));
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // FAILED ASSERTION
   //
   verifyException("org.mozilla.javascript.Kit", e);
}


** It was a parseable test case! 
refined test name is: testParseThrowsExceptionWhenNegativeArgumentPassed
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("qg6+_W=Z|R&k", "qg6+_W=Z|R&k", 469);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // Invalid assignment left-hand side. (qg6+_W=Z|R&k#469)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testInvalidAssignmentExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("iGl&&~I[;\"", "iGl&&~I[;\"", (-2638));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // -2638
   //
   verifyException("org.mozilla.javascript.RhinoException", e);
}


** It was a parseable test case! 
refined test name is: testParserParseWithIllegalArgumentException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
parser.parse("x+y*z^2", "x+y*z^2", 65536);
assertEquals("\u0087'\u0001x\u0015'\u0001y\u0017'\u0001z\n(S\u0002Q\u0001", parser.getEncodedSource());


** It was a parseable test case! 
refined test name is: testParserEncodeSource
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse(" 9==}", " 9==}", 2145386496);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // syntax error ( 9==}#2145386496)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParserThrowsSyntaxErrorOnInvalidInput
* Compiling Tests
refined test name is: testParserWithSyntaxError
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("A0s!=Zn^>QO<", "(Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;", 54);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // syntax error ((Lorg/mozilla/javascript/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;#54)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParserThrowsSyntaxErrorOnInvalidSourceCode
* Compiling Tests
refined test name is: testInvalidSourceCodeThrowsSyntaxError
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("bgu-(fdo4b%,4z", "bgu-(fdo4b%,4z", (-855));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // -855
   //
   verifyException("org.mozilla.javascript.RhinoException", e);
}


** It was a parseable test case! 
refined test name is: testParseValidExpression
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("Ljava/lang/Object;I)Ljava/lang/Object;", "IZl\"0& ", (-896));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // -896
   //
   verifyException("org.mozilla.javascript.RhinoException", e);
}


** It was a parseable test case! 
refined test name is: testInvalidTypeDescriptor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("<$", "<$", (-6303));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // -6303
   //
   verifyException("org.mozilla.javascript.RhinoException", e);
}


** It was a parseable test case! 
refined test name is: testParserWithInvalidInputString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("+UxHtQ.+B", "+UxHtQ.+B", (-1782));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // -1782
   //
   verifyException("org.mozilla.javascript.RhinoException", e);
}


** It was a parseable test case! 
refined test name is: testParseWithInvalidStartIndex
* Compiling Tests
refined test name is: testParseWithInvalidStartIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
parser.parse("!8+HbJbJA<T+Y&l", "!8+HbJbJA<T+Y&l", 106);
assertEquals("\u0087\u001A(S\b\u0015'\u0006HbJbJA\u000E'\u0001T\u0015'\u0001Y\u000B'\u0001lQ\u0001", parser.getEncodedSource());


** It was a parseable test case! 
refined test name is: testParser
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("typeof", "This is a test string for parsing.", 1000);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // Unexpected end of file (This is a test string for parsing.#1000)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testUnexpectedEndOfFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("void", "jN+_i[_", 110);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // Unexpected end of file (jN+_i[_#110)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testInvalidSyntax
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
arg0.setXmlAvailable(false);
// Undeclared exception!
try { 
  parser.parse("<LxZ5wbX78N", "<LxZ5wbX78N", 45);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // syntax error (<LxZ5wbX78N#45)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParseThrowsSyntaxErrorForInvalidInput
* Compiling Tests
refined test name is: parseInvalidInputShouldThrowException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("D.(C)*8M", "D.(C)*8M", 797);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // illegal character (D.(C)*8M#797)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testIllegalCharacterInInputString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
arg0.setXmlAvailable(false);
parser.parse("msg.no.bracket.arg", "K40[|h7\"?x{vd#v9,", 126);
assertEquals("\u0087'\u0003msgk'\u0002nok'\u0007bracketk'\u0003argQ\u0001", parser.getEncodedSource());


** It was a parseable test case! 
refined test name is: testParseSourceWithBracketsAndQuotes
source code formatter error: 34:112: error: illegal start of type testCode is: /*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Feb 29 23:34:38 GMT 2024
 */

package org.mozilla.javascript;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.Parser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Parser_94_tmp__ESTest extends Parser_94_tmp__ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseSourceWithBracketsAndQuotes() throws Throwable  {
      // Given
      CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
      ErrorReporter errorReporter = compilerEnvirons.getErrorReporter();
      Parser parser = new Parser(compilerEnvirons, errorReporter);
      
      // When
      parser.parse("msg.no.bracket.arg", "K40[|h7\"?x{vd#v9,", 126);
      
      // Then
      assertEquals("\u0087'\u0003msgk'\u0002nok'\u0007bracketk'\u0003argQ\u0001", parser.getEncodedSource());});
  }
}

* Compiling Tests
refined test name is: testParseNoBracketArgument
source code formatter error: 34:112: error: illegal start of type testCode is: /*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Feb 29 23:34:45 GMT 2024
 */

package org.mozilla.javascript;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.Parser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class Parser_95_tmp__ESTest extends Parser_95_tmp__ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseNoBracketArgument() throws Throwable  {
      // Given
      CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
      ErrorReporter errorReporter = compilerEnvirons.getErrorReporter();
      Parser parser = new Parser(compilerEnvirons, errorReporter);
      
      // When
      parser.parse("msg.no.bracket.arg", "K40[|h7\"?x{vd#v9,", 126);
      
      // Then
      assertEquals("\u0087'\u0003msgk'\u0002nok'\u0007bracketk'\u0003argQ\u0001", parser.getEncodedSource());});
  }
}

* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse(" T.*;.iJ$,d{t3N", "msg.destruct.assign.no.init", 39);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // syntax error (msg.destruct.assign.no.init#39)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParseStringWithSyntaxErrors
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context.getCurrentContext();

** It was a parseable test case! 
refined test name is: testGetCurrentContextReturnsCompilerEnvironsObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("/DJFmr:!o/8I,z[y&", "", (-1));
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ; before statement
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParserThrowsExceptionOnInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("[]s?\"=`PyKO VIf", "[]s?\"=`PyKO VIf", 82);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ; before statement ([]s?\"=`PyKO VIf#82)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: parseValidInputShouldNotThrowException
* Compiling Tests
refined test name is: testParserThrowsExceptionForInvalidCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("s1wtbF&[0)3u", "s1wtbF&[0)3u", 122);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ] after element list (s1wtbF&[0)3u#122)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: parseInvalidInputThrowsRuntimeException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("At^{:h", "At^{:h", 19);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // invalid property id (At^{:h#19)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParseWithInvalidCharacter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("~3h?*DvSy", "~3h?*DvSy", 2254);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ; before statement (~3h?*DvSy#2254)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("new ", "msg.no.paren.parms", 88);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // Unexpected end of file (msg.no.paren.parms#88)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testUnexpectedEndOfFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("(new ", "(new ", 1992);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // Unexpected end of file ((new #1992)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: TestParseInputStringWithInvalidToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
Decompiler createDecompiler = parser.createDecompiler(arg0);
assertEquals(1, Decompiler.INITIAL_INDENT_PROP);


** It was a parseable test case! 
refined test name is: testCreateDecompilerWithInitialIndent
* Compiling Tests
refined test name is: testCreateDecompilerWithInitialIndentSetCorrectly
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
Parser parser = new Parser(arg0, (ErrorReporter) null);
ScriptOrFnNode parse = parser.parse("1 + 2", "1 + 2", 1);
assertEquals(1, parse.getEndLineno());

boolean eof = parser.eof();
assertEquals("\u0087(S\u0001\u0015(S\u0002Q\u0001", parser.getEncodedSource());
assertTrue(eof);


** It was a parseable test case! 
refined test name is: testParserParse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
parser.parse("aviMjv", "aviMjv", 1796);
int currentLineNumber = parser.getCurrentLineNumber();
assertEquals(1796, currentLineNumber);
assertEquals("\u0087'\u0006aviMjvQ\u0001", parser.getEncodedSource());


** It was a parseable test case! 
refined test name is: testParserWithValidInputString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
ScriptOrFnNode parse = parser.parse("BRtKOE8e:XE", "BRtKOE8e:XE", 88);
assertEquals(88, parse.getBaseLineno());

String encodedSource = parser.getEncodedSource();
assertEquals("\u0087'\bBRtKOE8ef\u0001'\u0002XEQ\u0001", encodedSource);


** It was a parseable test case! 
refined test name is: TestParseScriptWithBaseLineNumberAndEncodedSource
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
boolean insideFunction = parser.insideFunction();
assertFalse(insideFunction);


** It was a parseable test case! 
refined test name is: testParserInsideFunctionshouldReturnFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("UiLW+LD[gQ+Vu rix", "UiLW+LD[gQ+Vu rix", 65536);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ] in index expression (UiLW+LD[gQ+Vu rix#65536)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testInvalidExpressionThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
DefaultErrorReporter arg1 = DefaultErrorReporter.instance;
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.parse("(I)V", "(I)V", 56320);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // missing ; before statement ((I)V#56320)
   //
   verifyException("org.mozilla.javascript.DefaultErrorReporter", e);
}


** It was a parseable test case! 
refined test name is: testParserThrowsRuntimeExceptionForInvalidSyntax
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons compilerEnvirons = new CompilerEnvirons();
Context.getCurrentContext();

** It was a parseable test case! 
refined test name is: testCompilerEnvironsCreation
* Compiling Tests
refined test name is: testInitializeAndGetCurrentContext
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: CompilerEnvirons arg0 = new CompilerEnvirons();
ErrorReporter arg1 = arg0.getErrorReporter();
Parser parser = new Parser(arg0, arg1);
// Undeclared exception!
try { 
  parser.popScope();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.mozilla.javascript.Parser", e);
}


** It was a parseable test case! 
refined test name is: testPopScopeThrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:17.728 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:17.761 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:17.867 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:17.869 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:17.968 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:17.970 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:18.073 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:18.074 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:18.177 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:18.179 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:18.269 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:18.271 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:18.365 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:18.367 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:18.472 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:18.475 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:18.572 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:18.573 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:18.665 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:18.666 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:18.781 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:18.783 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:18.902 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:18.907 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:19.032 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:19.034 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:19.166 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:19.168 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:19.279 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:19.281 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:19.411 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:19.414 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:19.535 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:19.546 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:19.660 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:19.663 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:19.770 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:19.773 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:19.897 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:19.904 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:20.023 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:20.025 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:20.160 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:20.162 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:20.276 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:20.278 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:20.398 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:20.400 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:20.534 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:20.536 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:20.656 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:20.658 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:20.803 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:20.805 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:20.942 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:20.944 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:21.071 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:21.073 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:21.205 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:21.207 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:21.331 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:21.333 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:21.456 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:21.458 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:21.581 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:21.584 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:21.712 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:21.714 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:21.833 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:21.835 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:21.952 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:21.954 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:22.080 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:22.082 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:22.193 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:22.195 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:22.309 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:22.311 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:22.435 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:22.442 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:22.787 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:22.789 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:22.879 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:22.881 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:22.964 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:22.966 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.030 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.032 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:23.099 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:23.100 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:23.163 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.164 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:23.233 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.234 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:23.299 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.300 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:23.364 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.365 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.423 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:23.424 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
[MASTER] 23:38:23.492 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:23.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:23.576 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:23.578 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.677 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:23.679 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.772 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:23.773 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.866 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:23.868 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:23.939 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:23.940 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:24.029 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:24.030 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:24.119 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:24.121 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 23:38:24.189 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:24.191 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 23:38:24.274 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:24.276 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 21 called: 2 to improve: false
** Write a test suite: 30 called: 3 to improve: false
** Write a test suite: 31 called: 4 to improve: false
** Write a test suite: 35 called: 5 to improve: false
** Write a test suite: 39 called: 6 to improve: false
** Write a test suite: 41 called: 7 to improve: false
** Write a test suite: 45 called: 8 to improve: false
** Write a test suite: 51 called: 9 to improve: false
** Write a test suite: 58 called: 10 to improve: false
[MASTER] 23:38:25.294 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:25.295 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 14 called: 2 to improve: false
** Write a test suite: 18 called: 3 to improve: false
** Write a test suite: 20 called: 4 to improve: false
** Write a test suite: 24 called: 5 to improve: false
** Write a test suite: 28 called: 6 to improve: false
** Write a test suite: 29 called: 7 to improve: false
** Write a test suite: 38 called: 8 to improve: false
** Write a test suite: 51 called: 9 to improve: false
** Write a test suite: 52 called: 10 to improve: false
[MASTER] 23:38:26.367 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar5519197359691496271.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 23:38:26.368 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5519197359691496271.jar
* Writing tests to file
* Writing JUnit test case 'Parser_ESTest' to evosuite-tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 14 called: 2 to improve: false
** Write a test suite: 17 called: 3 to improve: false
** Write a test suite: 19 called: 4 to improve: false
** Write a test suite: 23 called: 5 to improve: false
** Write a test suite: 27 called: 6 to improve: false
** Write a test suite: 28 called: 7 to improve: false
** Write a test suite: 37 called: 8 to improve: false
** Write a test suite: 50 called: 9 to improve: false
** Write a test suite: 51 called: 10 to improve: false
* Done!

* Computation finished
