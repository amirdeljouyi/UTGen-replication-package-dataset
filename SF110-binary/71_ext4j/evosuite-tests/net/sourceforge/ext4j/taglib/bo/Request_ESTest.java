/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 03:44:09 GMT 2024
 */

package net.sourceforge.ext4j.taglib.bo;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.servlet.http.HttpServletRequest;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import net.sourceforge.ext4j.taglib.bo.Request;
import net.sourceforge.ext4j.taglib.bo.RequestParam;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Request_ESTest extends Request_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBaseURLReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      // Given a request object with no web request
      Request request = new Request();
      
      // When the request is parsed as a web request
      request.parse("Q|n");
      
      // Then the request is identified as a web request
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveParamReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      // Arrange
      Request request = new Request((HttpServletRequest) null, false);
      
      // Act
      IRequest removeParam = request.removeParam("file:/}g!<i?yJe-0@5nu}z{k=&=g;%[xy");
      
      // Assert
      assertFalse(request.isWebRequest());
      assertTrue(removeParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWebRequestReturningFalse() throws Throwable  {
      // Given a new Request object
      Request request = new Request();
      
      // When we call the isWebRequest method on this object
      boolean webRequest = request.isWebRequest();
      
      // Then we expect the method to return false
      assertFalse(webRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2StringsReturningEmptyString() throws Throwable  {
      // Given a Request object with a web service flag set to false
      Request request = new Request(false);
      
      // When the value of the "key" parameter is ";hWSP&R$" and the default value is ""
      String value = request.getValue(";hWSP&R$", "");
      
      // Then the returned value should be an empty string
      assertEquals("", value);
      
      // And the web service flag of the Request object should be false
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryStringReturningEmptyString() throws Throwable  {
      // Given
      Request request = new Request((HttpServletRequest) null, false);
      
      // When
      String queryString = request.getQueryString();
      
      // Then
      assertNull(queryString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsReturningRequestParamWhereGetTotalValuesIsZero() throws Throwable  {
      // Given a Request object and a valid parameter name
      Request request = new Request("null?3");
      String paramName = "null?3";
      
      // When setting a parameter on the Request object
      RequestParam arg0 = new RequestParam(paramName);
      IRequest setParam = request.setParam(arg0);
      
      // Then the base URL of the Request object should be set to null
      assertEquals("null", setParam.getBaseURL());
      
      // And the parameter value for the given name should not be null
      RequestParam param = setParam.getParam(paramName, true);
      assertNotNull(param);
      
      // And the request is marked as a web request
      assertTrue(setParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingStringReturningRequestParamWhereGetTotalValuesIsZero() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request("zh", false);
      RequestParam arg0 = new RequestParam("K`x");
      request.setParam(arg0);
      RequestParam param = request.getParam("K`x");
      assertNotNull(param);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingString() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request();
      request.setParam("n", "n");
      RequestParam param = request.getParam("n");
      assertFalse(request.isWebRequest());
      assertNotNull(param);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningEmptyString() throws Throwable  {
      // No Comments were added
      Request request = new Request("\" as an integer.", false);
      request.setHashValue("");
      request.getHashValue();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningNull() throws Throwable  {
      // Given: A Request object is created with a null HttpServletRequest and false as its web request flag
      Request request = new Request((HttpServletRequest) null, false);
      
      // When: The getBaseURL() method is called on the Request object
      String baseURL = request.getBaseURL();
      
      // Then: The isWebRequest() method should return false, indicating that the Request is not a web request
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningEmptyString() throws Throwable  {
      // No Comments were added
      Request request = new Request();
      assertFalse(request.isWebRequest());
      
      request.parse("?='J&=Adding+param+\"");
      request.getBaseURL();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloneReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      // Given a Request object with a base URL and a web request flag
      Request request = new Request("", true);
      request.setBaseURL("file:/");
      
      // When the clone method is called on the original Request object
      IRequest clone = request.clone();
      
      // Then the cloned Request object should have the same base URL and web request flag as the original Request object
      assertEquals(request.getBaseURL(), clone.getBaseURL());
      assertEquals(request.isWebRequest(), clone.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningNull() throws Throwable  {
      // Given
      Request request = new Request();
      
      // When
      boolean isWebRequest = request.isWebRequest();
      
      // Then
      assertFalse(isWebRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningNonEmptyString() throws Throwable  {
      // Given a Request object with a null HttpServletRequest and isWebRequest set to false
      Request request = new Request((HttpServletRequest) null, false);
      
      // When the URLEncode method is called on the request object with "3:" as an argument
      String URLEncode = request.URLEncode("3:");
      
      // Then the returned value should be "3:" (the same as the input)
      assertEquals("3:", URLEncode);
      
      // And the isWebRequest method should return false (since we passed a null HttpServletRequest)
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningEmptyString() throws Throwable  {
      // Create a new request object with an empty string for the URL and false as the flag indicating whether it is a web request.
      Request request = new Request(" ", false);
      
      // Use the URLEncode method of the request object to encode an empty string.
      String encodedURL = request.URLEncode("");
      
      // Assert that the returned value is an empty string, which means it has not been encoded.
      assertTrue(request.isWebRequest()); // Check if the request is a web request.
      assertEquals("", encodedURL); // Compare the expected and actual values of the encoded URL.
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningNonEmptyString() throws Throwable  {
      // Given a Request object and its associated data
      Request request = new Request();
      String URLDecode = request.URLDecode("%3D");
      
      // When the isWebRequest() method is called on the Request object
      boolean isWebRequest = request.isWebRequest();
      
      // Then we expect the returned value to be false, as the Request object does not represent a web request
      assertFalse(isWebRequest);
      
      // And we expect the URLDecoded string to equal "="
      assertEquals("=", URLDecode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningEmptyString() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request("");
      String URLDecode = request.URLDecode("");
      assertTrue(request.isWebRequest());
      assertEquals("", URLDecode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningEmptyString() throws Throwable  {
      // Given a request object with a URL
      Request request = new Request("https://www.example.com");
      
      // When the toString method is called on the request
      String string = request.toString();
      
      // Then the output should be the URL of the request
      assertEquals("https://www.example.com", string);
      
      // And the request should be a web request
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2ArgumentsReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      // Given a request object with parameters
      Request request = new Request("A#");
      request.setParam("A#", "log4j.properties");
      
      // When we get the parameter by name
      RequestParam param = request.getParam("~k[!hA0T-@tH", true);
      
      // Then it should be null
      assertNull(param);
      
      // And the request should be a web request
      assertTrue(request.isWebRequest());
      
      // And the base URL should be "A"
      assertEquals("A", request.getBaseURL());
      
      // And the hash value should be empty
      assertEquals("", request.getHashValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsReturningRequestParamWhereGetTotalValuesIsPositive() throws Throwable  {
      // Given a Request object with a hash value of "A#"
      Request request = new Request("A#");
      
      // When adding a parameter to the request with the name "A#" and value "A#"
      IRequest addParam = request.addParam("A#", "A#");
      
      // Then the returned IRequest should have a hash value of ""
      assertEquals("", addParam.getHashValue());
      
      // And the base URL of the request should be "A"
      assertEquals("A", addParam.getBaseURL());
      
      // And the parameter with the name "A#" and value "A#" should be present in the request
      RequestParam param = addParam.getParam("A#", true);
      assertNotNull(param);
      
      // And the returned IRequest should indicate that it is a web request
      assertTrue(addParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParams() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request();
      request.getParams();
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningNonEmptyString() throws Throwable  {
      // Given a Request object with language "zh" and isWebRequest set to false
      Request request = new Request("zh", false);
      
      // When the base URL is retrieved using getBaseURL() method
      String baseUrl = request.getBaseURL();
      
      // Then the base URL should be null, as it is not a web request
      assertNull(baseUrl);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningNull() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request("", true);
      request.getHashValue();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningNull() throws Throwable  {
      // Given a Request object with a URL containing special characters
      Request request = new Request("A`#");
      
      // When the URL is decoded using the URLDecode method
      request.URLDecode((String) null);
      
      // Then the base URL and hash value are extracted correctly
      assertEquals("A`", request.getBaseURL());
      assertEquals("", request.getHashValue());
      
      // And the request is determined to be a web request
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse() throws Throwable  {
      // No Comments were added
      Request request = new Request((HttpServletRequest) null, true);
      assertFalse(request.isWebRequest());
      
      request.parse("#9}J?C/N\"ayp9t.");
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingString0() throws Throwable  {
      // Given a Request object with a valid URL
      Request request = new Request("https://www.example.com");
      
      // When the getHashValue method is called on the Request object
      String hashValue = request.getHashValue();
      
      // Then the hash value should be an empty string
      assertEquals("", hashValue);
      
      // Given a Request object with a valid URL that includes a query parameter
      Request request2 = new Request("https://www.example.com?param=value");
      
      // When the isWebRequest method is called on the Request object
      boolean isWebRequest = request2.isWebRequest();
      
      // Then the web request should be true
      assertTrue(isWebRequest);
      
      // Given a Request object with a valid URL that includes a fragment parameter
      Request request3 = new Request("https://www.example.com#fragment");
      
      // When the getBaseURL method is called on the Request object
      String baseURL = request3.getBaseURL();
      
      // Then the base URL should be "https://www.example.com"
      assertEquals("https://www.example.com", baseURL);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingString1() throws Throwable  {
      // Given a Request object with a valid base URL
      Request request = new Request("https://www.example.com");
      
      // When the isWebRequest method is called on the Request object
      boolean isWebRequest = request.isWebRequest();
      
      // Then the isWebRequest method should return true
      assertTrue(isWebRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNull() throws Throwable  {
      // Given: A new Request object with a null HttpServletRequest and parsing flag set to false
      Request request = new Request((HttpServletRequest) null, false);
      
      // When: The parse method is called on the request object with a null String
      request.parse((String) null);
      
      // Then: The request object is not marked as a web request
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request("%L!l\"1'~p#");
      IRequest arg0 = request.clone();
      boolean equals = request.equals(arg0);
      assertEquals("", request.getHashValue());
      assertFalse(equals);
      assertTrue(arg0.isWebRequest());
      assertEquals("%L!l\"1'~p", arg0.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHashValue() throws Throwable  {
      // Given a Request object with a hash value set to "uyd"
      Request request = new Request((HttpServletRequest) null, false);
      request.setHashValue("uyd");
      
      // When the clone method is called on the Request object
      Request arg0 = (Request) request.clone();
      
      // Then the cloned object should have the same hash value as the original object
      assertEquals(request.getHashValue(), arg0.getHashValue());
      
      // When the equals method is called on the cloned object with the original object as an argument
      boolean result = arg0.equals(request);
      
      // Then the equality check should return true, indicating that the two objects are equal
      assertTrue(result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      // No Comments were added
      Request arg0 = new Request("%L!l\"1'~p#");
      boolean equals = arg0.equals(arg0);
      assertEquals("%L!l\"1'~p", arg0.getBaseURL());
      assertTrue(arg0.isWebRequest());
      assertTrue(equals);
      assertEquals("", arg0.getHashValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndAddParam() throws Throwable  {
      // Given a request with a parameter "A#"
      Request originalRequest = new Request("A#");
      IRequest addParam = originalRequest.addParam("A#", "A#");
      
      // When the request is cloned
      IRequest clone = addParam.clone();
      
      // Then the clone should be equal to the original request
      assertTrue(clone.equals(originalRequest));
      
      // And the clone should have the same hash value as the original request
      assertEquals("=A%23", clone.getHashValue());
      
      // And the clone should have the same base URL as the original request
      assertEquals("A", clone.getBaseURL());
      
      // And the addParam method should return a new instance of IRequest
      assertNotSame(addParam, originalRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetBaseURLReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      // No Comments were added
      Request request = new Request();
      request.setBaseURL("'XG68CU3EZgx}xEVZb");
      Request arg0 = new Request("'XG68CU3EZgx}xEVZb");
      assertTrue(arg0.equals((Object)request));
      
      request.setParam("vcr@w&~]", "\" options.");
      boolean equals = request.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsEquals() throws Throwable  {
      // Given two Request objects with the same base URL and web request flag set to true
      Request request1 = new Request("null?3");
      Request request2 = new Request("null?3");
      
      // When we call the equals method on the first object with the second object as an argument
      boolean result = request1.equals(request2);
      
      // Then we expect the method to return true, since both objects have the same base URL and web request flag set to true
      assertTrue(result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingBooleanAndCallsEquals() throws Throwable  {
      // Given a Request object that is not a web request
      Request request = new Request(false);
      
      // When we clone the Request object
      IRequest arg0 = request.clone();
      
      // Then we expect the cloned Request object to be different from the original one
      assertFalse(request.equals(arg0));
      
      // And we expect the cloned Request object to be a web request, while the original Request object is not
      assertFalse(request.isWebRequest());
      assertTrue(arg0.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTaking2Arguments() throws Throwable  {
      // Given two Request objects, one with a web request flag and the other without
      Request request = new Request("zh", false);
      Request arg0 = new Request(true);
      
      // When we call the equals method on the first object with the second object as an argument
      boolean equals = request.equals(arg0);
      
      // Then we expect that the result of the equals method is false, since the web request flag is different
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsThrowsNullPointerException() throws Throwable  {
      Request request = new Request(false);
      // Given a valid Request object
      
      try {
      request.equals(request);
      // When the equals method is called on the same object
      
      // Then no NullPointerException should be thrown
      } catch (NullPointerException e) {
      fail("Expecting exception: NullPointerException");}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHashValueReturningRequestWhereIsWebRequestIsFalse() throws Throwable  {
      // Given a Request object that has not been marked as a web request
      Request request = new Request((HttpServletRequest) null, false);
      
      // When we set the hash value of the request to "uyd"
      Request setHashValue = request.setHashValue("uyd");
      
      // Then the isWebRequest method should return false
      assertFalse(setHashValue.isWebRequest());
      
      // And the toString method should return "null#uyd"
      assertEquals("null#uyd", setHashValue.toString());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryStringReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request();
      request.setParam("", "'J");
      request.addParam("", "Adding param \"");
      String queryString = request.getQueryString();
      assertFalse(request.isWebRequest());
      assertEquals("?='J&=Adding+param+\"", queryString);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTakingRequestParamWithNull() throws Throwable  {
      // Given
      Request request = new Request();
      
      // When
      IRequest setParam = request.setParam((RequestParam) null);
      
      // Then
      assertFalse(setParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveParam0() throws Throwable  {
      // Given a Request object with a parameter "iP+"
      Request request = new Request((HttpServletRequest) null, false);
      request.setParam("iP+", "iP+");
      
      // When the parameter is removed from the Request object
      IRequest removeParam = request.removeParam("iP+");
      
      // Then the resulting Request object should not be a web request
      assertFalse(removeParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveParam1() throws Throwable  {
      // Given a request with a parameter "iP+[" and its value "iP+["
      Request request = new Request((HttpServletRequest) null, false);
      IRequest setParam = request.setParam("iP+[", "iP+[");
      
      // When the parameter is removed with the removeParam method
      IRequest removeParam = setParam.removeParam("file:/}g!<i?yJe-0@5nu}z{k=&=g;%[xy");
      
      // Then the result should be a request without any parameters
      assertFalse(removeParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1ReturningPositive() throws Throwable  {
      // Given: A request object with a non-existent parameter "p"
      Request request = new Request();
      RequestParam arg0 = new RequestParam("p");
      request.setParam(arg0);
      
      // When: We call getValue method with the non-existent param
      int value = request.getValue("p", 4);
      
      // Then: The returned value should be the default value passed as the second argument (4)
      assertEquals(4, value);
      
      // And: The isWebRequest method should return false
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1AndCreatesRequestTakingBooleanAndSetParamTaking2Arguments() throws Throwable  {
      // Given a request with a parameter "]4" set to null
      Request request = new Request(false);
      request.setParam("]4", "null");
      
      // When the value of the parameter is retrieved using getValue method
      int value = request.getValue("]4", (-43));
      
      // Then the value should be equal to the default value (-43) and the isWebRequest method should return false
      assertEquals((-43), value);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1ReturningZero() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request("");
      int value = request.getValue("z$Rt<}", 0);
      assertEquals(0, value);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1AndCreatesRequestTakingStringAndAddParam() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request("A#");
      request.addParam("A#", "A#");
      int value = request.getValue("]<Pdx/huXUybW$IP", (-2512));
      assertTrue(request.isWebRequest());
      assertEquals("A", request.getBaseURL());
      assertEquals((-2512), value);
      assertEquals("", request.getHashValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTakingRequestParam() throws Throwable  {
      // Create a new Request object with a query parameter "full?u"
      Request request = new Request("full?u");
      
      // Add a query parameter to the request object
      RequestParam arg0 = new RequestParam("full?u");
      request.setParam(arg0);
      
      // Get the value of the query parameter from the request object
      String value = request.getValue("full?u", "full?u");
      
      // Verify that the request is a web request and that the base URL is "full"
      assertTrue(request.isWebRequest());
      assertEquals("full", request.getBaseURL());
      
      // Verify that the value of the query parameter is equal to "full?u"
      assertEquals("full?u", value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2Strings() throws Throwable  {
      // Given a request object with the base URL "full" and a query parameter "u" with value "full?u"
      Request request = new Request("full");
      request.addParam("u", "full?u");
      
      // When we call getValue with the parameter name "u" and the default value "full?u"
      String value = request.getValue("u", "full?u");
      
      // Then we should get the value of the query parameter "u" which is "full?u"
      assertEquals("full?u", value);
      
      // And the base URL of the request should still be "full"
      assertEquals("full", request.getBaseURL());
      
      // And the request should be a web request (since it has a query parameter)
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2StringsReturningNull() throws Throwable  {
      // Setup
      Request request = new Request("='", true);
      
      // Execute
      String value = request.getValue(null, null);
      
      // Verify
      assertNull(value);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2ArgumentsWithEmptyString() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request("file:/%3D", true);
      request.setParam("", "BV>?pL.uiqxb#");
      String value = request.getValue("6pf", "V");
      assertFalse(request.isWebRequest());
      assertEquals("V", value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsWithNull() throws Throwable  {
      // rollbacked to evosuite
      Request request = new Request();
      request.getParam((String) null, false);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCleanEmptyParams() throws Throwable  {
      // Given a request with some parameters
      Request request = new Request("file:/%3D", true);
      request.setParam("", "BV>?pL.uiqxb#");
      
      // When we clean the empty parameters
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      
      // Then the request is not a web request
      assertFalse(cleanEmptyParams.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddParamWithNull() throws Throwable  {
      // Given: A request with a single parameter, "null?3" set to null
      Request request = new Request();
      request.addParam("null?3", (String) null);
      
      // When: The request is cleaned for empty parameters
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      
      // Then: The resulting request should not be a web request
      assertFalse(cleanEmptyParams.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCleanEmptyParamsReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      // Given a Request with a base URL and parameters
      Request request = new Request("^pg?1 8u{}");
      
      // When the request is parsed and cleaned for empty parameters
      request.parse("^pg?1 8u{}");
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      
      // Then the resulting Request should have a base URL of "^pg" and no parameters
      assertTrue(request.isWebRequest());
      assertEquals("^pg", cleanEmptyParams.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTakingRequestParamReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      // Given a Request object with a param named "file:/=(9=5"
      Request request = new Request();
      RequestParam arg0 = new RequestParam("file:/=(9=5");
      request.setParam(arg0);
      
      // When the cleanEmptyParams method is called on the Request object
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      
      // Then the isWebRequest method should return false
      assertFalse(cleanEmptyParams.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWebRequestReturningTrue() throws Throwable  {
      // Given a new Request object with a non-empty string as its URL
      Request request = new Request("http://example.com", true);
      
      // When the isWebRequest method is called on this Request object
      boolean webRequest = request.isWebRequest();
      
      // Then the method should return true, indicating that this is a web request
      assertTrue(webRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBaseURLReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      // Given a Request object that has not been modified from its default state
      Request request = new Request();
      
      // When the toBaseURL() method is called on the Request object
      IRequest baseURL = request.toBaseURL();
      
      // Then the resulting IRequest should be a web request, since it has not been modified
      assertFalse(baseURL.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningNonEmptyString() throws Throwable  {
      // Given a Request object with a base URL "A`#" and no hash value
      Request request = new Request("A`#");
      assertEquals("", request.getHashValue());
      
      // When setting the hash value to "]oYw4-m&95"
      request.setHashValue("]oYw4-m&95");
      
      // Then the resulting Request object should have the correct base URL and hash value
      assertEquals("A`", request.getBaseURL());
      assertEquals("]oYw4-m&95", request.getHashValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingStringReturningNull() throws Throwable  {
      // Given a request object with a parameter named "name"
      Request request = new Request();
      request.getParam("name");
      
      // When the isWebRequest method is called on this request object
      boolean isWebRequest = request.isWebRequest();
      
      // Then the return value should be false
      assertFalse(isWebRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingHttpServletRequestAndCallsHashCode() throws Throwable  {
      // Given: A new Request object is created with a null HttpServletRequest parameter
      Request request = new Request((HttpServletRequest) null);
      
      // When: The hashCode method is called on the request object
      request.hashCode();
      
      // Then: The isWebRequest method should return false, as the request is not a web request
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsReturningNull() throws Throwable  {
      // Given a request object with a parameter "as an integer."
      Request request = new Request(false);
      
      // When the isWebRequest method is called with the parameter as an integer.
      boolean isWebRequest = request.isWebRequest();
      
      // Then the result should be false, indicating that the request is not a web request.
      assertFalse(isWebRequest);
  }
}
