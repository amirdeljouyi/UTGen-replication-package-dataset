/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 03:44:11 GMT 2024
 */

package net.sourceforge.ext4j.taglib.bo;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.servlet.http.HttpServletRequest;
import net.sourceforge.ext4j.taglib.bo.IRequest;
import net.sourceforge.ext4j.taglib.bo.Request;
import net.sourceforge.ext4j.taglib.bo.RequestParam;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Request_Original_ESTest extends Request_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBaseURLReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      Request request = new Request();
      assertFalse(request.isWebRequest());
      
      request.parse("Q|n");
      request.toBaseURL();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWebRequestReturningFalse() throws Throwable  {
      Request request = new Request();
      boolean webRequest = request.isWebRequest();
      assertFalse(webRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2StringsReturningEmptyString() throws Throwable  {
      Request request = new Request(false);
      String value = request.getValue(";hWSP&R$", "");
      assertEquals("", value);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryStringReturningEmptyString() throws Throwable  {
      Request request = new Request((HttpServletRequest) null, false);
      request.getQueryString();
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsReturningRequestParamWhereGetTotalValuesIsZero() throws Throwable  {
      Request request = new Request("null?3");
      RequestParam arg0 = new RequestParam("null?3");
      request.setParam(arg0);
      RequestParam param = request.getParam("null?3", true);
      assertNotNull(param);
      assertTrue(request.isWebRequest());
      assertEquals("null", request.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingStringReturningRequestParamWhereGetTotalValuesIsZero() throws Throwable  {
      Request request = new Request("zh", false);
      RequestParam arg0 = new RequestParam("K`x");
      request.setParam(arg0);
      RequestParam param = request.getParam("K`x");
      assertNotNull(param);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingString() throws Throwable  {
      Request request = new Request();
      request.setParam("n", "n");
      RequestParam param = request.getParam("n");
      assertFalse(request.isWebRequest());
      assertNotNull(param);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningEmptyString() throws Throwable  {
      Request request = new Request("\" as an integer.", false);
      request.setHashValue("");
      request.getHashValue();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningNull() throws Throwable  {
      Request request = new Request((HttpServletRequest) null, false);
      request.getBaseURL();
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningNull() throws Throwable  {
      Request request = new Request();
      request.URLEncode((String) null);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningNonEmptyString() throws Throwable  {
      Request request = new Request((HttpServletRequest) null, false);
      String URLEncode = request.URLEncode("3:");
      assertEquals("3:", URLEncode);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLEncodeReturningEmptyString() throws Throwable  {
      Request request = new Request(" ", false);
      String URLEncode = request.URLEncode("");
      assertEquals("", URLEncode);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningNonEmptyString() throws Throwable  {
      Request request = new Request();
      String URLDecode = request.URLDecode("%3D");
      assertFalse(request.isWebRequest());
      assertEquals("=", URLDecode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningEmptyString() throws Throwable  {
      Request request = new Request("");
      String URLDecode = request.URLDecode("");
      assertEquals("", URLDecode);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningEmptyString() throws Throwable  {
      Request request = new Request("");
      String string = request.toString();
      assertTrue(request.isWebRequest());
      assertEquals("", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsReturningRequestParamWhereGetTotalValuesIsPositive() throws Throwable  {
      Request request = new Request("A#");
      IRequest addParam = request.addParam("A#", "A#");
      RequestParam param = addParam.getParam("A#", true);
      assertNotNull(param);
      assertEquals("", addParam.getHashValue());
      assertTrue(addParam.isWebRequest());
      assertEquals("A", addParam.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsWithNull() throws Throwable  {
      Request request = new Request();
      request.getParam((String) null, false);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningNonEmptyString() throws Throwable  {
      Request request = new Request("zh", false);
      request.getBaseURL();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testURLDecodeReturningNull() throws Throwable  {
      Request request = new Request("A`#");
      request.URLDecode((String) null);
      assertEquals("A`", request.getBaseURL());
      assertEquals("", request.getHashValue());
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParse() throws Throwable  {
      Request request = new Request((HttpServletRequest) null, true);
      assertFalse(request.isWebRequest());
      
      request.parse("#9}J?C/N\"ayp9t.");
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBaseURLReturningEmptyString() throws Throwable  {
      Request request = new Request();
      assertFalse(request.isWebRequest());
      
      request.parse("?='J&=Adding+param+\"");
      request.getBaseURL();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingString0() throws Throwable  {
      Request request = new Request("ul?");
      assertTrue(request.isWebRequest());
      assertEquals("ul", request.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testParseWithNull() throws Throwable  {
      Request request = new Request((HttpServletRequest) null, false);
      request.parse((String) null);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      Request request = new Request("%L!l\"1'~p#");
      IRequest arg0 = request.clone();
      boolean equals = request.equals(arg0);
      assertEquals("%L!l\"1'~p", arg0.getBaseURL());
      assertFalse(equals);
      assertEquals("", request.getHashValue());
      assertTrue(arg0.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHashValue() throws Throwable  {
      Request request = new Request((HttpServletRequest) null, false);
      Request arg0 = (Request)request.clone();
      arg0.setHashValue("uyd");
      Request clone = (Request)arg0.clone();
      // Undeclared exception!
      try { 
        clone.equals(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndAddParam() throws Throwable  {
      Request arg0 = new Request("A#");
      IRequest addParam = arg0.addParam("A#", "A#");
      IRequest clone = addParam.clone();
      boolean equals = clone.equals(arg0);
      assertTrue(clone.isWebRequest());
      assertEquals("A", clone.getBaseURL());
      assertEquals("A", addParam.getBaseURL());
      assertEquals("=A%23", clone.getHashValue());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      Request arg0 = new Request("A#");
      arg0.addParam("A#", "A#");
      boolean equals = arg0.equals(arg0);
      assertTrue(arg0.isWebRequest());
      assertTrue(equals);
      assertEquals("A", arg0.getBaseURL());
      assertEquals("", arg0.getHashValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetBaseURLReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      Request request = new Request();
      request.setBaseURL("'XG68CU3EZgx}xEVZb");
      Request arg0 = new Request("'XG68CU3EZgx}xEVZb");
      assertTrue(arg0.equals((Object)request));
      
      request.setParam("vcr@w&~]", "\" options.");
      boolean equals = request.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingStringAndCallsEquals() throws Throwable  {
      Request arg0 = new Request("nulll?3");
      Request request = new Request("null?3");
      boolean equals = request.equals(arg0);
      assertEquals("null", request.getBaseURL());
      assertTrue(request.isWebRequest());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingBooleanAndCallsEquals() throws Throwable  {
      Request request = new Request(false);
      IRequest arg0 = request.clone();
      boolean equals = request.equals(arg0);
      assertTrue(arg0.isWebRequest());
      assertFalse(equals);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTaking2Arguments() throws Throwable  {
      Request request = new Request("zh", false);
      Request arg0 = new Request(true);
      boolean equals = request.equals(arg0);
      assertFalse(arg0.isWebRequest());
      assertFalse(equals);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsThrowsNullPointerException() throws Throwable  {
      Request arg0 = new Request(false);
      // Undeclared exception!
      try { 
        arg0.equals(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetHashValueReturningRequestWhereIsWebRequestIsFalse() throws Throwable  {
      Request request = new Request((HttpServletRequest) null, false);
      Request setHashValue = request.setHashValue("?iP+[=iP+[");
      String string = setHashValue.toString();
      assertEquals("null#?iP+[=iP+[", string);
      assertFalse(setHashValue.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQueryStringReturningNonEmptyString() throws Throwable  {
      Request request = new Request();
      request.setParam("", "'J");
      request.addParam("", "Adding param \"");
      String queryString = request.getQueryString();
      assertEquals("?='J&=Adding+param+\"", queryString);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTakingRequestParamWithNull() throws Throwable  {
      Request request = new Request();
      IRequest setParam = request.setParam((RequestParam) null);
      assertFalse(setParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveParam0() throws Throwable  {
      Request request = new Request((HttpServletRequest) null, false);
      request.setParam("iP+[", "iP+[");
      IRequest removeParam = request.removeParam("iP+[");
      assertFalse(removeParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveParam1() throws Throwable  {
      Request request = new Request((HttpServletRequest) null, false);
      request.setParam("iP+[", "iP+[");
      IRequest removeParam = request.removeParam("file:/}g!<i?yJe-0@5nu}z{k=&=g;%[xy");
      assertFalse(removeParam.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveParamReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      Request request = new Request("A`#");
      IRequest removeParam = request.removeParam("A`#");
      assertEquals("A`", removeParam.getBaseURL());
      assertTrue(removeParam.isWebRequest());
      assertEquals("", removeParam.getHashValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1ReturningPositive() throws Throwable  {
      Request request = new Request();
      RequestParam arg0 = new RequestParam("p");
      request.setParam(arg0);
      int value = request.getValue("p", 4);
      assertEquals(4, value);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1AndCreatesRequestTakingBooleanAndSetParamTaking2Arguments() throws Throwable  {
      Request request = new Request(false);
      request.setParam("]4", "null");
      int value = request.getValue("]4", (-43));
      assertEquals((-43), value);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1ReturningZero() throws Throwable  {
      Request request = new Request("");
      int value = request.getValue("z$Rt<}", 0);
      assertEquals(0, value);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking1And1AndCreatesRequestTakingStringAndAddParam() throws Throwable  {
      Request request = new Request("A#");
      request.addParam("A#", "A#");
      int value = request.getValue("]<Pdx/huXUybW$IP", (-2512));
      assertEquals("", request.getHashValue());
      assertEquals("A", request.getBaseURL());
      assertEquals((-2512), value);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTakingRequestParam() throws Throwable  {
      Request request = new Request("full?u");
      RequestParam arg0 = new RequestParam("full?u");
      request.setParam(arg0);
      String value = request.getValue("full?u", "full?u");
      assertTrue(request.isWebRequest());
      assertEquals("full?u", value);
      assertEquals("full", request.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2Strings() throws Throwable  {
      Request request = new Request("full?u");
      request.addParam("full?u", "full?u");
      String value = request.getValue("full?u", "full?u");
      assertEquals("full?u", value);
      assertEquals("full", request.getBaseURL());
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValueTaking2StringsReturningNull() throws Throwable  {
      Request request = new Request("='", true);
      String value = request.getValue("1PEUv!", (String) null);
      assertNull(value);
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2ArgumentsWithEmptyString() throws Throwable  {
      Request request = new Request("file:/%3D", true);
      request.setParam("", "BV>?pL.uiqxb#");
      String value = request.getValue("6pf", "V");
      assertEquals("V", value);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTaking2ArgumentsReturningNull() throws Throwable  {
      Request request = new Request(false);
      request.getParam("\" as an integer.", false);
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCleanEmptyParams() throws Throwable  {
      Request request = new Request("file:/%3D", true);
      request.setParam("", "BV>?pL.uiqxb#");
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      assertFalse(cleanEmptyParams.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddParamWithNull() throws Throwable  {
      Request request = new Request();
      request.addParam("null?3", (String) null);
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      assertFalse(cleanEmptyParams.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCleanEmptyParamsReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      Request request = new Request("^pg?1 8u{");
      request.parse("^pg?1 8u{");
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      assertEquals("^pg", cleanEmptyParams.getBaseURL());
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTakingRequestParamReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      Request request = new Request();
      RequestParam arg0 = new RequestParam("file:/=(9=5");
      request.setParam(arg0);
      IRequest cleanEmptyParams = request.cleanEmptyParams();
      assertFalse(cleanEmptyParams.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testIsWebRequestReturningTrue() throws Throwable  {
      Request request = new Request("", true);
      boolean webRequest = request.isWebRequest();
      assertTrue(webRequest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloneReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      Request request = new Request("", true);
      request.setBaseURL("file:/ ");
      IRequest clone = request.clone();
      assertTrue(request.isWebRequest());
      assertFalse(clone.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToBaseURLReturningIRequestWhereIsWebRequestIsFalse() throws Throwable  {
      Request request = new Request("file:/%3D", true);
      IRequest baseURL = request.toBaseURL();
      assertFalse(baseURL.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetParamTaking2ArgumentsReturningIRequestWhereIsWebRequestIsTrue() throws Throwable  {
      Request request = new Request("A#");
      IRequest setParam = request.setParam("A#", "log4j.properties");
      RequestParam param = setParam.getParam("~k[!hA0T-@tH", true);
      assertEquals("A", setParam.getBaseURL());
      assertNull(param);
      assertTrue(setParam.isWebRequest());
      assertEquals("", setParam.getHashValue());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningNull() throws Throwable  {
      Request request = new Request("", true);
      request.getHashValue();
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetHashValueReturningNonEmptyString() throws Throwable  {
      Request request = new Request("A`#");
      assertEquals("", request.getHashValue());
      
      Request setHashValue = request.setHashValue("]oYw4-m&95");
      setHashValue.getHashValue();
      assertEquals("A`", request.getBaseURL());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParams() throws Throwable  {
      Request request = new Request();
      request.getParams();
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingHttpServletRequestAndCallsHashCode() throws Throwable  {
      Request request = new Request((HttpServletRequest) null);
      request.hashCode();
      assertFalse(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesRequestTakingString1() throws Throwable  {
      Request request = new Request("f:fee:/lilf+:d?=#");
      assertEquals("", request.getHashValue());
      assertEquals("f:fee:/lilf+:d", request.getBaseURL());
      assertTrue(request.isWebRequest());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetParamTakingStringReturningNull() throws Throwable  {
      Request request = new Request(false);
      request.getParam((String) null);
      assertFalse(request.isWebRequest());
  }
}
