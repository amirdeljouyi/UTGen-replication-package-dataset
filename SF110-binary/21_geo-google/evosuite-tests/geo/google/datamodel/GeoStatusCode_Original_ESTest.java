/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 23:57:01 GMT 2024
 */

package geo.google.datamodel;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import geo.google.datamodel.GeoStatusCode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeoStatusCode_Original_ESTest extends GeoStatusCode_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValuesReturningNonEmptyArray() throws Throwable  {
      GeoStatusCode[] values = GeoStatusCode.values();
      assertEquals(10, values.length);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueOfReturningGeoStatusCodeWhereGetCodeIsPositive() throws Throwable  {
      GeoStatusCode valueOf = GeoStatusCode.valueOf("G_GEO_MISSING_QUERY");
      assertEquals(GeoStatusCode.G_GEO_MISSING_QUERY, valueOf);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueOfReturningGeoStatusCodeWhereGetCodeIsNegative() throws Throwable  {
      GeoStatusCode valueOf = GeoStatusCode.valueOf("G_GEO_UNKOWN_STATUS");
      assertEquals("Uknown Status", valueOf.getDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningPositive() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(601);
      int code = statusCode.getCode();
      assertEquals(601, code);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCodeReturningGeoStatusCodeWhereGetCodeIsNegative() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(1021);
      assertEquals(GeoStatusCode.G_GEO_UNKOWN_STATUS, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCodeReturningGeoStatusCodeWhereGetCodeIsPositive() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(620);
      assertEquals(GeoStatusCode.G_GEO_TOO_MANY_QUERIES, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCodeWithPositive() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(610);
      assertEquals(GeoStatusCode.G_GEO_BAD_KEY, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode0() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(604);
      assertEquals(GeoStatusCode.G_GEO_UNKNOWN_DIRECTIONS, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode1() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(603);
      assertEquals(GeoStatusCode.G_GEO_UNAVAILABLE_ADDRESS, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode2() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(602);
      assertEquals(GeoStatusCode.G_GEO_UNKNOWN_ADDRESS, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode3() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(500);
      assertEquals(GeoStatusCode.G_GEO_SERVER_ERROR, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode4() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(400);
      assertEquals(GeoStatusCode.G_GEO_BAD_REQUEST, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode5() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(200);
      assertEquals(GeoStatusCode.G_GEO_SUCCESS, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningNegative() throws Throwable  {
      GeoStatusCode geoStatusCode = GeoStatusCode.G_GEO_UNKOWN_STATUS;
      int code = geoStatusCode.getCode();
      assertEquals((-1), code);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeName() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(601);
      String codeName = statusCode.getCodeName();
      assertEquals("G_GEO_MISSING_QUERY", codeName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDescription() throws Throwable  {
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(601);
      String description = statusCode.getDescription();
      assertEquals("The HTTP q parameter was either missing or had no value. For geocoding requests, this means that an empty address was specified as input. For directions requests, this means that no query was specified in the input. (Since 2.81)", description);
  }
}
