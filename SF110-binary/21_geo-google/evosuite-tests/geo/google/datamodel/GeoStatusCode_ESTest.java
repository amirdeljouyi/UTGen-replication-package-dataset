/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 23:57:01 GMT 2024
 */

package geo.google.datamodel;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import geo.google.datamodel.GeoStatusCode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GeoStatusCode_ESTest extends GeoStatusCode_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValuesReturningNonEmptyArray() throws Throwable  {
      // Given a list of all possible GeoStatusCode values
      GeoStatusCode[] values = GeoStatusCode.values();
      
      // When the length of the list is calculated
      int actualLength = values.length;
      
      // Then the length should be 10
      assertEquals(10, actualLength);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueOfReturningGeoStatusCodeWhereGetCodeIsPositive() throws Throwable  {
      // Given: A GeoStatusCode object with the value "G_GEO_MISSING_QUERY"
      GeoStatusCode valueOf = GeoStatusCode.valueOf("G_GEO_MISSING_QUERY");
      
      // When: We call the getCode() method on the object
      int code = valueOf.getCode();
      
      // Then: The returned code should be 601
      assertEquals(601, code);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValueOfReturningGeoStatusCodeWhereGetCodeIsNegative() throws Throwable  {
      // Arrange
      GeoStatusCode expected = GeoStatusCode.G_GEO_UNKOWN_STATUS;
      
      // Act
      GeoStatusCode actual = GeoStatusCode.valueOf("G_GEO_UNKOWN_STATUS");
      
      // Assert
      assertEquals(expected, actual);
      assertEquals("Uknown Status", actual.getDescription());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningPositive() throws Throwable  {
      // Given a GeoStatusCode with a value of 601
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(601);
      
      // When the getCode method is called on this status code
      int code = statusCode.getCode();
      
      // Then the returned code should be equal to the original value of 601
      assertEquals(601, code);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCodeReturningGeoStatusCodeWhereGetCodeIsNegative() throws Throwable  {
      // No Comments were added
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(404);
      assertEquals(GeoStatusCode.G_GEO_UNKOWN_STATUS, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCodeReturningGeoStatusCodeWhereGetCodeIsPositive() throws Throwable  {
      // No Comments were added
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(620);
      assertEquals(GeoStatusCode.G_GEO_TOO_MANY_QUERIES, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCodeWithPositive() throws Throwable  {
      // No Comments were added
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(610);
      assertEquals(GeoStatusCode.G_GEO_BAD_KEY, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode0() throws Throwable  {
      // Given: The test data includes a geographical status code of 604
      // When: We call the getStatusCode() method with parameter 604
      // Then: We expect to receive the G_GEO_UNKNOWN_DIRECTIONS status code
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(604);
      assertEquals(GeoStatusCode.G_GEO_UNKNOWN_DIRECTIONS, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode1() throws Throwable  {
      // Test that the correct GeoStatusCode is returned for a given address
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(603);
      assertEquals(GeoStatusCode.G_GEO_UNAVAILABLE_ADDRESS, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode2() throws Throwable  {
      // Test that the correct GeoStatusCode is returned for a given address code
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(602);
      assertEquals(GeoStatusCode.G_GEO_UNKNOWN_ADDRESS, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode3() throws Throwable  {
      // Test that the getStatusCode method returns the correct GeoStatusCode object for a given HTTP status code.
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(500);
      assertEquals(GeoStatusCode.G_GEO_SERVER_ERROR, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode4() throws Throwable  {
      // Test that the correct GeoStatusCode is returned for a given HTTP status code
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(400);
      assertEquals(GeoStatusCode.G_GEO_BAD_REQUEST, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStatusCode5() throws Throwable  {
      // Given a GeoStatusCode with the value 200
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(200);
      
      // When we call getStatusCode on this object
      
      // Then we expect the result to be G_GEO_SUCCESS, which is a constant indicating a successful geolocation
      assertEquals(GeoStatusCode.G_GEO_SUCCESS, statusCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeReturningNegative() throws Throwable  {
      // Given a GeoStatusCode object with an unknown status
      GeoStatusCode geoStatusCode = GeoStatusCode.G_GEO_UNKOWN_STATUS;
      
      // When we get the code of the status
      int code = geoStatusCode.getCode();
      
      // Then we expect the code to be -1
      assertEquals((-1), code);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCodeName() throws Throwable  {
      // Given a GeoStatusCode with an ID of 601
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(601);
      
      // When we call getCodeName() on this code
      String codeName = statusCode.getCodeName();
      
      // Then the code name should be "G_GEO_MISSING_QUERY"
      assertEquals("G_GEO_MISSING_QUERY", codeName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDescription() throws Throwable  {
      // Given a GeoStatusCode object with a status code of 601
      GeoStatusCode statusCode = GeoStatusCode.getStatusCode(601);
      
      // When the getDescription method is called on the GeoStatusCode object
      String description = statusCode.getDescription();
      
      // Then the correct description is returned
      assertEquals("The HTTP q parameter was either missing or had no value. For geocoding requests, this means that an empty address was specified as input. For directions requests, this means that no query was specified in the input. (Since 2.81)", description);
  }
}
