/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 21:04:37 GMT 2024
 */

package org.exolab.jms.net.socket;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.exolab.jms.net.socket.SocketRequestInfo;
import org.exolab.jms.net.uri.URI;
import org.exolab.jms.net.util.Properties;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SocketRequestInfo_Original_ESTest extends SocketRequestInfo_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateSocketRequestInfoTakingURIThrowsException() throws Throwable  {
      URI arg0 = new URI("bindAll", "bindAll", "bindAll", "bindAll", "bindAll");
      SocketRequestInfo socketRequestInfo = null;
      try {
        socketRequestInfo = new SocketRequestInfo(arg0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.net.socket.SocketRequestInfo", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeURIThrowsException() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      socketRequestInfo.setAlternativeHost("&");
      try { 
        socketRequestInfo.getAlternativeURI();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.net.socket.SocketRequestInfo", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConnectionRequestQueueSizeReturningZero() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      
      socketRequestInfo.setConnectionRequestQueueSize(0);
      int connectionRequestQueueSize = socketRequestInfo.getConnectionRequestQueueSize();
      assertEquals(0, connectionRequestQueueSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetBindAll() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      assertTrue(socketRequestInfo.getBindAll());
      
      socketRequestInfo.setBindAll(false);
      boolean bindAll = socketRequestInfo.getBindAll();
      assertFalse(bindAll);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeURIReturningURIWhereGetPortIsNegative() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      socketRequestInfo.setAlternativeHost("true");
      URI alternativeURI = socketRequestInfo.getAlternativeURI();
      assertNotNull(alternativeURI);
      assertTrue(socketRequestInfo.getBindAll());
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeHostReturningNonEmptyString() throws Throwable  {
      URI arg0 = new URI();
      Properties arg1 = new Properties((Map) null, "");
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0, arg1);
      socketRequestInfo.setAlternativeHost("Fragment can only be set for a generic URI!");
      socketRequestInfo.getAlternativeHost();
      assertTrue(socketRequestInfo.getBindAll());
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeHostReturningEmptyString() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      socketRequestInfo.setAlternativeHost("");
      socketRequestInfo.getAlternativeHost();
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      assertTrue(socketRequestInfo.getBindAll());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      boolean equals = socketRequestInfo.equals((Object) null, (Object) null);
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      assertTrue(socketRequestInfo.getBindAll());
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBindAllReturningTrue() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      boolean bindAll = socketRequestInfo.getBindAll();
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      assertTrue(bindAll);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testExportThrowsNullPointerException() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      socketRequestInfo.setAlternativeHost("Nmna\"lQ2Hby0&");
      // Undeclared exception!
      try { 
        socketRequestInfo.export((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.exolab.jms.net.socket.SocketRequestInfo", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeURIReturningURIWhereGetPortIsPositive() throws Throwable  {
      URI arg0 = new URI("org.exolab.jms.net.connector.URIRequestInfo", "", "org.exolab.jms.net.orb.provider.uri", 1272, "org.exolab.jms.net.orb.provider.uri", "", "");
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      socketRequestInfo.setAlternativeHost("alt");
      URI alternativeURI = socketRequestInfo.getAlternativeURI();
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      assertNotNull(alternativeURI);
      assertTrue(socketRequestInfo.getBindAll());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeURIReturningNull() throws Throwable  {
      URI arg0 = new URI("org.exolab.jms.net.connector.URIRequestInfo", "", "org.exolab.jms.net.orb.provider.uri", 1272, "org.exolab.jms.net.orb.provider.uri", "", "");
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      URI alternativeURI = socketRequestInfo.getAlternativeURI();
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      assertNull(alternativeURI);
      assertTrue(socketRequestInfo.getBindAll());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConnectionRequestQueueSizeReturningNegative() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      socketRequestInfo.setConnectionRequestQueueSize((-1779));
      int connectionRequestQueueSize = socketRequestInfo.getConnectionRequestQueueSize();
      assertEquals((-1779), connectionRequestQueueSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAlternativeHostReturningNull() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      socketRequestInfo.getAlternativeHost();
      assertTrue(socketRequestInfo.getBindAll());
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      URI arg0 = new URI();
      Properties arg1 = new Properties("org.exolab.jms.net.orb.provider.uri");
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0, arg1);
      boolean equals = socketRequestInfo.equals((Object) null, (Object) "org.exolab.jms.net.orb.provider.uri");
      assertTrue(socketRequestInfo.getBindAll());
      assertEquals(50, socketRequestInfo.getConnectionRequestQueueSize());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConnectionRequestQueueSizeReturningPositive() throws Throwable  {
      URI arg0 = new URI();
      SocketRequestInfo socketRequestInfo = new SocketRequestInfo(arg0);
      int connectionRequestQueueSize = socketRequestInfo.getConnectionRequestQueueSize();
      assertEquals(50, connectionRequestQueueSize);
      assertTrue(socketRequestInfo.getBindAll());
  }
}
