* EvoSuite 1.2.0
* WARNING - Generating JUnit 5 tests with the option to use a separate classloader will result in not runnable tests. Set either -Dtest_format=JUNIT4 or -Duse_separate_classloader=false
* Going to generate test cases for class: org.exolab.jms.net.connector.DefaultConnectionPool
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-ES-res/66_openjms/evosuite-files/evosuite.properties
* Connecting to master process on port 14214
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 11:13:20.324 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 11:13:20.326 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 11:13:20.327 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 11:13:20.356 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 11:13:20.359 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 11:13:20.360 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 11:13:20.586 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 11:13:21.448 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 11:13:21.453 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 11:13:21.453 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 11:13:22.246 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 11:13:22.247 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 11:13:22.249 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 11:13:22.249 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 11:13:22.250 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 11:13:22.251 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 11:13:22.578 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 11:13:23.056 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.exolab.jms.net.connector.DefaultConnectionPool
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 442
* Using seed 1709809998702
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 179 / 442
[MASTER] 11:13:23.732 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:>                             0%] [Cov:===>                               9%][Progress:=>                            6%] [Cov:======>                            18%][Progress:=>                            6%] [Cov:======>                            18%][Progress:=>                            6%] [Cov:========>                          23%][Progress:=>                            6%] [Cov:==========>                        30%][Progress:=>                            6%] [Cov:===========>                       33%][Progress:==>                           7%] [Cov:============>                      36%][Progress:==>                           7%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:=============>                     38%][Progress:===>                          10%] [Cov:==============>                    40%][Progress:=====>                        18%] [Cov:==============>                    40%][Progress:=====>                        19%] [Cov:==============>                    40%][Progress:======>                       22%] [Cov:==============>                    40%][Progress:========>                     27%] [Cov:==============>                    41%][Progress:========>                     27%] [Cov:==============>                    41%][Progress:=========>                    30%] [Cov:==============>                    41%][Progress:=========>                    31%] [Cov:==============>                    41%][Progress:=========>                    31%] [Cov:==============>                    41%][Progress:=========>                    31%] [Cov:==============>                    41%][Progress:==========>                   34%] [Cov:==============>                    41%][Progress:==========>                   34%] [Cov:==============>                    41%][Progress:===========>                  37%] [Cov:==============>                    41%][Progress:===========>                  37%] [Cov:==============>                    41%][Progress:===========>                  37%] [Cov:==============>                    41%][Progress:===========>                  37%] [Cov:==============>                    41%][Progress:===========>                  38%] [Cov:==============>                    41%][Progress:===========>                  38%] [Cov:==============>                    41%][Progress:===========>                  38%] [Cov:==============>                    41%][Progress:===========>                  38%] [Cov:==============>                    41%][Progress:=============>                44%] [Cov:==============>                    41%][Progress:=============>                44%] [Cov:==============>                    41%][Progress:=============>                44%] [Cov:==============>                    41%][Progress:===============>              53%] [Cov:==============>                    41%][Progress:================>             56%] [Cov:==============>                    41%][Progress:================>             56%] [Cov:==============>                    41%][Progress:==================>           61%] [Cov:==============>                    41%][Progress:===================>          64%] [Cov:==============>                    41%][Progress:===================>          64%] [Cov:==============>                    41%][Progress:===================>          64%] [Cov:==============>                    41%][Progress:===================>          64%] [Cov:==============>                    41%][Progress:===================>          65%] [Cov:==============>                    41%][Progress:===================>          65%] [Cov:==============>                    41%][Progress:===================>          65%] [Cov:==============>                    41%][Progress:===================>          65%] [Cov:==============>                    41%][Progress:====================>         68%] [Cov:==============>                    41%][Progress:=====================>        73%] [Cov:==============>                    41%][Progress:=====================>        73%] [Cov:==============>                    41%][Progress:=====================>        73%] [Cov:==============>                    41%][Progress:=======================>      77%] [Cov:==============>                    41%][Progress:=======================>      77%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     83%] [Cov:==============>                    41%][Progress:=========================>    84%] [Cov:==============>                    41%][Progress:=========================>    84%] [Cov:==============>                    41%][Progress:=========================>    84%] [Cov:==============>                    41%][Progress:=============================>99%] [Cov:==============>                    41%][Progress:=============================>99%] [Cov:==============>                    41%][Progress:==============================100%] [Cov:==============>                    41%]
* Search finished after 103s and 60 generations, 40106 statements, best individual has fitness: 281.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 29%
* Total number of goals: 99
* Number of covered goals: 29
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 40%
* Total number of goals: 214
* Number of covered goals: 86
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 25%
* Total number of goals: 12
* Number of covered goals: 3
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 89%
* Total number of goals: 18
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 29%
* Total number of goals: 99
* Number of covered goals: 29
* Generated 18 tests with total length 128
* Resulting test suite's coverage: 41% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'DefaultConnectionPool_ESTest' to evosuite-tests
* Done!

* Computation finished
