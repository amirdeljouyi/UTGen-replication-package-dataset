* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.exolab.jms.net.connector.DefaultConnectionPool
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/66_openjms/evosuite-files/evosuite.properties
* Connecting to master process on port 17614
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 20:20:47.550 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 20:20:47.551 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 20:20:47.566 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 20:20:47.608 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 20:20:47.612 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 20:20:47.613 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 20:20:47.949 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.sql.SQLType
[MASTER] 20:20:49.209 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 20:20:49.215 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 20:20:49.215 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 20:20:50.493 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 20:20:50.494 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 20:20:50.496 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 20:20:50.497 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 20:20:50.499 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 20:20:50.500 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 20:20:51.256 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 20:20:52.016 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class org.exolab.jms.net.connector.DefaultConnectionPool
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 442
* Using seed 1710274844252
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 179 / 442
[MASTER] 20:20:53.266 [logback-1] WARN  TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[Progress:>                             0%] [Cov:>                                  2%][Progress:>                             1%] [Cov:=>                                 5%][Progress:=>                            4%] [Cov:==>                                6%][Progress:=>                            4%] [Cov:===>                               11%][Progress:=>                            4%] [Cov:======>                            19%][Progress:=>                            4%] [Cov:==========>                        30%][Progress:=>                            5%] [Cov:==========>                        30%][Progress:=>                            5%] [Cov:===========>                       32%][Progress:=>                            5%] [Cov:===========>                       34%][Progress:=>                            5%] [Cov:===========>                       34%][Progress:=>                            5%] [Cov:============>                      36%][Progress:=>                            6%] [Cov:=============>                     39%][Progress:==>                           7%] [Cov:=============>                     39%][Progress:==>                           7%] [Cov:=============>                     39%][Progress:==>                           8%] [Cov:=============>                     39%][Progress:==>                           9%] [Cov:==============>                    41%][Progress:==>                           9%] [Cov:==============>                    41%][Progress:==>                           9%] [Cov:==============>                    41%][Progress:===>                          10%] [Cov:==============>                    41%][Progress:===>                          10%] [Cov:==============>                    41%][Progress:===>                          10%] [Cov:==============>                    41%][Progress:===>                          10%] [Cov:==============>                    41%][Progress:===>                          10%] [Cov:==============>                    41%][Progress:===>                          10%] [Cov:==============>                    41%][Progress:===>                          12%] [Cov:==============>                    41%][Progress:===>                          12%] [Cov:==============>                    41%][Progress:===>                          12%] [Cov:==============>                    41%][Progress:====>                         14%] [Cov:==============>                    41%][Progress:====>                         14%] [Cov:==============>                    41%][Progress:====>                         14%] [Cov:===============>                   43%][Progress:====>                         14%] [Cov:===============>                   43%][Progress:====>                         14%] [Cov:===============>                   43%][Progress:====>                         14%] [Cov:===============>                   43%][Progress:====>                         14%] [Cov:===============>                   43%][Progress:=====>                        17%] [Cov:===============>                   43%][Progress:=====>                        17%] [Cov:===============>                   43%][Progress:=====>                        17%] [Cov:===============>                   43%][Progress:=====>                        17%] [Cov:===============>                   43%][Progress:=====>                        17%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       20%] [Cov:===============>                   43%][Progress:======>                       21%] [Cov:===============>                   43%][Progress:======>                       21%] [Cov:===============>                   43%][Progress:======>                       21%] [Cov:===============>                   43%][Progress:======>                       21%] [Cov:===============>                   43%][Progress:======>                       21%] [Cov:===============>                   43%][Progress:======>                       21%] [Cov:===============>                   43%][Progress:======>                       21%] [Cov:===============>                   43%][Progress:======>                       23%] [Cov:===============>                   43%][Progress:======>                       23%] [Cov:===============>                   43%][Progress:======>                       23%] [Cov:===============>                   43%][Progress:======>                       23%] [Cov:===============>                   43%][Progress:======>                       23%] [Cov:===============>                   43%][Progress:======>                       23%] [Cov:===============>                   43%][Progress:=======>                      25%] [Cov:===============>                   43%][Progress:=======>                      25%] [Cov:===============>                   43%][Progress:=======>                      25%] [Cov:===============>                   43%][Progress:=======>                      25%] [Cov:===============>                   43%][Progress:=======>                      25%] [Cov:===============>                   43%][Progress:========>                     27%] [Cov:===============>                   43%][Progress:========>                     27%] [Cov:===============>                   43%][Progress:========>                     29%] [Cov:===============>                   43%][Progress:========>                     29%] [Cov:===============>                   43%][Progress:========>                     29%] [Cov:===============>                   43%][Progress:========>                     29%] [Cov:===============>                   43%][Progress:=========>                    31%] [Cov:===============>                   43%][Progress:=========>                    33%] [Cov:===============>                   43%][Progress:=========>                    33%] [Cov:===============>                   43%][Progress:=========>                    33%] [Cov:===============>                   43%][Progress:=========>                    33%] [Cov:===============>                   43%][Progress:=========>                    33%] [Cov:===============>                   43%][Progress:=========>                    33%] [Cov:===============>                   43%][Progress:=========>                    33%] [Cov:===============>                   43%][Progress:==========>                   35%] [Cov:===============>                   43%][Progress:==========>                   35%] [Cov:===============>                   43%][Progress:===========>                  37%] [Cov:===============>                   43%][Progress:===========>                  38%] [Cov:===============>                   43%][Progress:===========>                  38%] [Cov:===============>                   43%][Progress:===========>                  38%] [Cov:===============>                   43%][Progress:===========>                  38%] [Cov:===============>                   43%][Progress:===========>                  38%] [Cov:===============>                   43%][Progress:===========>                  39%] [Cov:===============>                   43%][Progress:============>                 41%] [Cov:===============>                   43%][Progress:============>                 41%] [Cov:===============>                   43%][Progress:============>                 41%] [Cov:===============>                   43%][Progress:============>                 41%] [Cov:===============>                   43%][Progress:=============>                44%] [Cov:===============>                   43%][Progress:=============>                44%] [Cov:===============>                   43%][Progress:=============>                44%] [Cov:===============>                   43%][Progress:=============>                44%] [Cov:===============>                   43%][Progress:=============>                44%] [Cov:===============>                   43%][Progress:=============>                44%] [Cov:===============>                   43%][Progress:=============>                44%] [Cov:===============>                   43%][Progress:=============>                44%] [Cov:===============>                   43%][Progress:=============>                44%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                45%] [Cov:===============>                   43%][Progress:=============>                46%] [Cov:===============>                   43%][Progress:=============>                46%] [Cov:===============>                   43%][Progress:=============>                46%] [Cov:===============>                   43%][Progress:=============>                46%] [Cov:===============>                   43%][Progress:==============>               49%] [Cov:===============>                   43%][Progress:==============>               49%] [Cov:===============>                   43%][Progress:==============>               49%] [Cov:===============>                   43%][Progress:==============>               49%] [Cov:===============>                   43%][Progress:==============>               49%] [Cov:===============>                   43%][Progress:==============>               49%] [Cov:===============>                   43%][Progress:===============>              52%] [Cov:===============>                   43%][Progress:===============>              52%] [Cov:===============>                   43%][Progress:===============>              52%] [Cov:===============>                   43%][Progress:================>             54%] [Cov:===============>                   43%][Progress:================>             54%] [Cov:===============>                   43%][Progress:================>             54%] [Cov:===============>                   43%][Progress:================>             54%] [Cov:===============>                   43%][Progress:================>             54%] [Cov:===============>                   43%][Progress:================>             54%] [Cov:===============>                   43%][Progress:================>             56%] [Cov:===============>                   43%][Progress:=================>            57%] [Cov:===============>                   43%][Progress:=================>            57%] [Cov:===============>                   43%][Progress:=================>            57%] [Cov:===============>                   43%][Progress:=================>            59%] [Cov:===============>                   43%][Progress:=================>            59%] [Cov:===============>                   43%][Progress:=================>            59%] [Cov:===============>                   43%][Progress:==================>           62%] [Cov:===============>                   43%][Progress:==================>           62%] [Cov:===============>                   43%][Progress:==================>           62%] [Cov:===============>                   43%][Progress:==================>           62%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:==================>           63%] [Cov:===============>                   43%][Progress:===================>          64%] [Cov:===============>                   43%][Progress:===================>          64%] [Cov:===============>                   43%][Progress:===================>          64%] [Cov:===============>                   43%][Progress:===================>          64%] [Cov:===============>                   43%][Progress:===================>          64%] [Cov:===============>                   43%][Progress:===================>          64%] [Cov:===============>                   43%][Progress:===================>          64%] [Cov:===============>                   43%][Progress:===================>          64%] [Cov:===============>                   43%][Progress:===================>          65%] [Cov:===============>                   43%][Progress:===================>          65%] [Cov:===============>                   43%][Progress:===================>          65%] [Cov:===============>                   43%][Progress:===================>          65%] [Cov:===============>                   43%][Progress:===================>          65%] [Cov:===============>                   43%][Progress:===================>          65%] [Cov:===============>                   43%][Progress:===================>          65%] [Cov:===============>                   43%][Progress:===================>          65%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:===================>          66%] [Cov:===============>                   43%][Progress:====================>         67%] [Cov:===============>                   43%][Progress:====================>         67%] [Cov:===============>                   43%][Progress:====================>         67%] [Cov:===============>                   43%][Progress:====================>         67%] [Cov:===============>                   43%][Progress:====================>         67%] [Cov:===============>                   43%][Progress:====================>         67%] [Cov:===============>                   43%][Progress:====================>         67%] [Cov:===============>                   43%][Progress:=====================>        70%] [Cov:===============>                   43%][Progress:=====================>        70%] [Cov:===============>                   43%][Progress:=====================>        70%] [Cov:===============>                   43%][Progress:=====================>        70%] [Cov:===============>                   43%][Progress:=====================>        70%] [Cov:===============>                   43%][Progress:=====================>        70%] [Cov:===============>                   43%][Progress:=====================>        70%] [Cov:===============>                   43%][Progress:=====================>        70%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        71%] [Cov:===============>                   43%][Progress:=====================>        72%] [Cov:===============>                   43%][Progress:=====================>        72%] [Cov:===============>                   43%][Progress:=====================>        72%] [Cov:===============>                   43%][Progress:=====================>        72%] [Cov:===============>                   43%][Progress:=====================>        72%] [Cov:===============>                   43%][Progress:=====================>        72%] [Cov:===============>                   43%][Progress:=====================>        72%] [Cov:===============>                   43%][Progress:======================>       75%] [Cov:===============>                   43%][Progress:======================>       75%] [Cov:===============>                   43%][Progress:======================>       75%] [Cov:===============>                   43%][Progress:======================>       75%] [Cov:===============>                   43%][Progress:=======================>      77%] [Cov:===============>                   43%][Progress:=======================>      77%] [Cov:===============>                   43%][Progress:=======================>      79%] [Cov:===============>                   43%][Progress:=======================>      79%] [Cov:===============>                   43%][Progress:========================>     80%] [Cov:===============>                   43%][Progress:========================>     80%] [Cov:===============>                   43%][Progress:========================>     80%] [Cov:===============>                   43%][Progress:========================>     82%] [Cov:===============>                   43%][Progress:========================>     82%] [Cov:===============>                   43%][Progress:========================>     82%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    84%] [Cov:===============>                   43%][Progress:=========================>    85%] [Cov:===============>                   43%][Progress:=========================>    85%] [Cov:===============>                   43%][Progress:=========================>    85%] [Cov:===============>                   43%][Progress:=========================>    85%] [Cov:===============>                   43%][Progress:==========================>   87%] [Cov:===============>                   43%][Progress:==========================>   87%] [Cov:===============>                   43%][Progress:===========================>  90%] [Cov:===============>                   43%][Progress:===========================>  90%] [Cov:===============>                   43%][Progress:===========================>  92%] [Cov:===============>                   43%][Progress:===========================>  92%] [Cov:===============>                   43%][Progress:===========================>  92%] [Cov:===============>                   43%][Progress:===========================>  92%] [Cov:===============>                   43%][Progress:===========================>  92%] [Cov:===============>                   43%][Progress:===========================>  93%] [Cov:===============>                   43%][Progress:============================> 94%] [Cov:===============>                   43%][Progress:============================> 94%] [Cov:===============>                   43%][Progress:============================> 96%] [Cov:===============>                   43%][Progress:============================> 96%] [Cov:===============>                   43%][Progress:============================> 96%] [Cov:===============>                   43%][Progress:============================> 96%] [Cov:===============>                   43%][Progress:============================> 96%] [Cov:===============>                   43%][Progress:============================> 96%] [Cov:===============>                   43%][Progress:============================> 96%] [Cov:===============>                   43%][Progress:============================> 96%] [Cov:===============>                   43%][Progress:=============================>98%] [Cov:===============>                   43%][Progress:==============================100%] [Cov:===============>                   43%]
* Search finished after 201s and 270 generations, 129252 statements, best individual has fitness: 273.0
* Generated before the refinement 18 tests with total length 125
statement is: org.exolab.jms.net.rmi.RMIManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.rmi.RMIManagedConnectionFactory
statement code is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory()
statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.ContextInvocationHandler(Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ContextInvocationHandler
statement code is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(arg0, arg1, (ManagedConnection) null)
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.Object, javax.management.remote.JMXPrincipal>
statement code is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>()
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: getManagedConnectionAcceptorListener()Lorg/exolab/jms/net/connector/ManagedConnectionAcceptorListener; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool managedConnectionAcceptorListener = (DefaultConnectionPool)defaultConnectionPool.getManagedConnectionAcceptorListener()
test data is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.getManagedConnectionAcceptorListener();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null)));
        ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, ((ManagedConnection) (null)));
        HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
        defaultConnectionPool.getManagedConnectionAcceptorListener();
    }
}
statement is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: rMIManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))) target is: rMIManagedConnectionFactory method is: createConnectionFactory(ConnectionManager)
source statement: org.exolab.jms.net.rmi.RMIManagedConnectionFactory()V callee: VariableReference: Statement 0, type org.exolab.jms.net.rmi.RMIManagedConnectionFactoryindex is: 0
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, ((ManagedConnection) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.getManagedConnectionAcceptorListener(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.getManagedConnectionAcceptorListener() target is: defaultConnectionPool method is: getManagedConnectionAcceptorListener()
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 5, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 6
Matched Method is: getManagedConnectionAcceptorListener()Lorg/exolab/jms/net/connector/ManagedConnectionAcceptorListener;
TestCase is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory(connectionManager);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) hashMap).getManagedConnectionAcceptorListener();

statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.Object, javax.management.remote.JMXPrincipal>
statement code is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>()
statement is: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPSManagedConnectionFactory
statement code is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.ContextInvocationHandler(Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ContextInvocationHandler
statement code is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(arg0, arg1, (ManagedConnection) null)
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: accepted(Lorg/exolab/jms/net/connector/ManagedConnectionAcceptor;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: defaultConnectionPool.accepted((ManagedConnectionAcceptor) null, (ManagedConnection) null)
test data is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.accepted((ManagedConnectionAcceptor) null, (ManagedConnection) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        HashMap<Object, JMXPrincipal> hashMap = new HashMap<>();// use diamond operator to specify the type parameter

        TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
        ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(null);
        ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, null);
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
        defaultConnectionPool.accepted(((ManagedConnectionAcceptor) (null)), ((ManagedConnection) (null)));
    }
}
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<>()// use diamond operator to specify the type parameter
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: tCPSManagedConnectionFactory.createConnectionFactory(null) target is: tCPSManagedConnectionFactory method is: createConnectionFactory(<unknown>)
source statement: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V callee: VariableReference: Statement 2, type org.exolab.jms.net.tcp.TCPSManagedConnectionFactoryindex is: 2
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.accepted(((ManagedConnectionAcceptor) (null)), ((ManagedConnection) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.accepted(((ManagedConnectionAcceptor) (null)), ((ManagedConnection) (null))) target is: defaultConnectionPool method is: accepted(ManagedConnectionAcceptor,ManagedConnection)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 5, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 6
Matched Method is: accepted(Lorg/exolab/jms/net/connector/ManagedConnectionAcceptor;Lorg/exolab/jms/net/connector/ManagedConnection;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(connectionManager);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionAcceptor managedConnectionAcceptor = null;
ManagedConnection managedConnection = null;
((DefaultConnectionPool) contextInvocationHandler).accepted(managedConnectionAcceptor, managedConnection);

statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.Object, javax.management.remote.JMXPrincipal>
statement code is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>()
statement is: org.exolab.jms.net.tcp.TCPManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPManagedConnectionFactory
statement code is: TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: org.exolab.jms.net.connector.MulticastCallerListener()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.MulticastCallerListener
statement code is: MulticastCallerListener multicastCallerListener = new MulticastCallerListener()
statement is: setCallerListener(Lorg/exolab/jms/net/connector/CallerListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: defaultConnectionPool.setCallerListener(arg0)
test data is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
MulticastCallerListener multicastCallerListener = new MulticastCallerListener();
defaultConnectionPool.setCallerListener(multicastCallerListener);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
        TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
        // Use a more descriptive value for the ConnectionManager argument of createConnectionFactory method
        ConnectionManager connectionManager = mock(ConnectionManager.class);
        ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory(connectionManager);
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
        MulticastCallerListener multicastCallerListener = new MulticastCallerListener();
        defaultConnectionPool.setCallerListener(multicastCallerListener);
    }
}
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Use a more descriptive value for the ConnectionManager argument of createConnectionFactory method
ConnectionManager connectionManager = mock(ConnectionManager.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(ConnectionManager.class) target is:  method is: mock(java.lang.Class)
target name is: InvocationHandler argument is: ConnectionManager.class
statement is: ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory(connectionManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: tCPManagedConnectionFactory.createConnectionFactory(connectionManager) target is: tCPManagedConnectionFactory method is: createConnectionFactory(ConnectionManager)
source statement: org.exolab.jms.net.tcp.TCPManagedConnectionFactory()V callee: VariableReference: Statement 2, type org.exolab.jms.net.tcp.TCPManagedConnectionFactoryindex is: 2
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MulticastCallerListener multicastCallerListener = new MulticastCallerListener(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.setCallerListener(multicastCallerListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.setCallerListener(multicastCallerListener) target is: defaultConnectionPool method is: setCallerListener(MulticastCallerListener)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 4, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 5
Matched Method is: setCallerListener(Lorg/exolab/jms/net/connector/CallerListener;)V
TestCase is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory(connectionManager);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
MulticastCallerListener multicastCallerListener = new MulticastCallerListener();
((DefaultConnectionPool) createConnectionFactory).setCallerListener(multicastCallerListener);

statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: javax.management.remote.JMXPrincipal(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.management.remote.JMXPrincipal
statement code is: JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.pool.")
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<org.exolab.jms.net.connector.ManagedConnectionHandle, javax.management.remote.JMXPrincipal>
statement code is: HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>()
statement is: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPSManagedConnectionFactory
statement code is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: createManagedConnection(Ljava/security/Principal;Lorg/exolab/jms/net/connector/ConnectionRequestInfo;)Lorg/exolab/jms/net/connector/ManagedConnection; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ManagedConnection
statement code is: ManagedConnection createManagedConnection = defaultConnectionPool.createManagedConnection(arg0, (ConnectionRequestInfo) null)
test data is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.pool.");
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.createManagedConnection(jMXPrincipal, (ConnectionRequestInfo) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.pool.");
        HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
        TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
        // Improved code: Using more descriptive examples for the test data
        ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory("connectionManager1");
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
        defaultConnectionPool.createManagedConnection(jMXPrincipal, "connectionRequestInfo1");
    }
}
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.pool."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved code: Using more descriptive examples for the test data
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory("connectionManager1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: tCPSManagedConnectionFactory.createConnectionFactory("connectionManager1") target is: tCPSManagedConnectionFactory method is: createConnectionFactory(java.lang.String)
source statement: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V callee: VariableReference: Statement 3, type org.exolab.jms.net.tcp.TCPSManagedConnectionFactoryindex is: 4
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.createManagedConnection(jMXPrincipal, "connectionRequestInfo1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.createManagedConnection(jMXPrincipal, "connectionRequestInfo1") target is: defaultConnectionPool method is: createManagedConnection(JMXPrincipal,java.lang.String)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 5, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 7
Matched Method is: createManagedConnection(Ljava/security/Principal;Lorg/exolab/jms/net/connector/ConnectionRequestInfo;)Lorg/exolab/jms/net/connector/ManagedConnection;
TestCase is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
String string = "org.exolab.jms.net.pool.";
JMXPrincipal jMXPrincipal = new JMXPrincipal(string);
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
String string = "connectionManager1";
ConnectionFactory createConnectionFactory = ((TCPSManagedConnectionFactory) hashMap).createConnectionFactory((ConnectionManager) string);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
String string = "connectionRequestInfo1";
((DefaultConnectionPool) string).createManagedConnection(jMXPrincipal, (ConnectionRequestInfo) string);

statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.Object, javax.management.remote.JMXPrincipal>
statement code is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>()
statement is: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPSManagedConnectionFactory
statement code is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.ContextInvocationHandler(Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ContextInvocationHandler
statement code is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(arg0, arg1, (ManagedConnection) null)
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: matchManagedConnectionAcceptors(Lorg/exolab/jms/net/connector/ConnectionRequestInfo;)Lorg/exolab/jms/net/connector/ManagedConnectionAcceptor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ManagedConnectionAcceptor
statement code is: ManagedConnectionAcceptor matchManagedConnectionAcceptors = defaultConnectionPool.matchManagedConnectionAcceptors((ConnectionRequestInfo) null)
test data is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.matchManagedConnectionAcceptors((ConnectionRequestInfo) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
        TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
        // Create a realistic ConnectionFactory object with a null connection manager
        ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(null);
        // Create a realistic ContextInvocationHandler object with a null managed connection and a realistic ConnectionRequestInfo object
        ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, null);
        // Create a realistic DefaultConnectionPool object with a realistic TCPSManagedConnectionFactory object, a realistic ContextInvocationHandler object, and a null ManagedConnection object
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
        // Call the matchManagedConnectionAcceptors method on the DefaultConnectionPool object with a null ConnectionRequestInfo object
        defaultConnectionPool.matchManagedConnectionAcceptors(null);
    }
}
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create a realistic ConnectionFactory object with a null connection manager
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: tCPSManagedConnectionFactory.createConnectionFactory(null) target is: tCPSManagedConnectionFactory method is: createConnectionFactory(<unknown>)
source statement: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V callee: VariableReference: Statement 2, type org.exolab.jms.net.tcp.TCPSManagedConnectionFactoryindex is: 2
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Create a realistic ContextInvocationHandler object with a null managed connection and a realistic ConnectionRequestInfo object
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create a realistic DefaultConnectionPool object with a realistic TCPSManagedConnectionFactory object, a realistic ContextInvocationHandler object, and a null ManagedConnection object
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Call the matchManagedConnectionAcceptors method on the DefaultConnectionPool object with a null ConnectionRequestInfo object
defaultConnectionPool.matchManagedConnectionAcceptors(null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Call the matchManagedConnectionAcceptors method on the DefaultConnectionPool object with a null ConnectionRequestInfo object
defaultConnectionPool.matchManagedConnectionAcceptors(null) target is: defaultConnectionPool method is: matchManagedConnectionAcceptors(<unknown>)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 5, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 6
Matched Method is: matchManagedConnectionAcceptors(Lorg/exolab/jms/net/connector/ConnectionRequestInfo;)Lorg/exolab/jms/net/connector/ManagedConnectionAcceptor;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(connectionManager);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ConnectionRequestInfo connectionRequestInfo = null;
((DefaultConnectionPool) contextInvocationHandler).matchManagedConnectionAcceptors(connectionRequestInfo);

statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool((ManagedConnectionFactory) null, (InvocationHandler) null, (ConnectionFactory) null, (Map) null)
test data is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool((ManagedConnectionFactory) null, (InvocationHandler) null, (ConnectionFactory) null, (Map) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(new MyManagedConnectionFactory(), new MyInvocationHandler(), new MyConnectionFactory(), myProperties());
    }
}
statement is: // Improved test data:
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(new MyManagedConnectionFactory(), new MyInvocationHandler(), new MyConnectionFactory(), myProperties()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool((ManagedConnectionFactory) null, (InvocationHandler) null, (ConnectionFactory) null, (Map) null);

statement is: org.exolab.jms.net.tcp.TCPManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPManagedConnectionFactory
statement code is: TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<org.exolab.jms.net.connector.ManagedConnectionHandle, javax.management.remote.JMXPrincipal>
statement code is: HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>()
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, (InvocationHandler) null, (ConnectionFactory) null, arg3)
test data is: TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, (InvocationHandler) null, (ConnectionFactory) null, hashMap);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
        HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, ((InvocationHandler) (null)), ((ConnectionFactory) (null)), hashMap);
        // Add some realistic test data
        hashMap.put(new ManagedConnectionHandle("localhost", 1234), new JMXPrincipal("admin"));
    }
}
statement is: TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, ((InvocationHandler) (null)), ((ConnectionFactory) (null)), hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Add some realistic test data
hashMap.put(new ManagedConnectionHandle("localhost", 1234), new JMXPrincipal("admin")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add some realistic test data
hashMap.put(new ManagedConnectionHandle("localhost", 1234), new JMXPrincipal("admin")) target is: hashMap method is: put(ManagedConnectionHandle,JMXPrincipal)
TestCase is: TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, hashMap, (ConnectionFactory) null, hashMap);

statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<org.exolab.jms.net.connector.ManagedConnectionHandle, javax.management.remote.JMXPrincipal>
statement code is: HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>()
statement is: org.exolab.jms.net.http.HTTPManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.http.HTTPManagedConnectionFactory
statement code is: HTTPManagedConnectionFactory hTTPManagedConnectionFactory = new HTTPManagedConnectionFactory()
statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: org.exolab.jms.net.connector.ContextInvocationHandler(Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ContextInvocationHandler
statement code is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(arg0, (ConnectionFactory) null, (ManagedConnection) null)
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, (ConnectionFactory) null, arg3)
test data is: HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
HTTPManagedConnectionFactory hTTPManagedConnectionFactory = new HTTPManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, (ConnectionFactory) null, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPManagedConnectionFactory, contextInvocationHandler, (ConnectionFactory) null, hashMap);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<>();
        HTTPManagedConnectionFactory hTTPManagedConnectionFactory = new HTTPManagedConnectionFactory();
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, ((ConnectionFactory) (null)), ((ManagedConnection) (null)));
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPManagedConnectionFactory, contextInvocationHandler, ((ConnectionFactory) (null)), hashMap);
    }
}
statement is: // Improved test data
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HTTPManagedConnectionFactory hTTPManagedConnectionFactory = new HTTPManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, ((ConnectionFactory) (null)), ((ManagedConnection) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPManagedConnectionFactory, contextInvocationHandler, ((ConnectionFactory) (null)), hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
HTTPManagedConnectionFactory hTTPManagedConnectionFactory = new HTTPManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, (ConnectionFactory) null, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPManagedConnectionFactory, contextInvocationHandler, hashMap, hashMap);

statement is: org.exolab.jms.net.rmi.RMIManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.rmi.RMIManagedConnectionFactory
statement code is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory()
statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.ContextInvocationHandler(Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ContextInvocationHandler
statement code is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(arg0, arg1, (ManagedConnection) null)
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.Object, javax.management.remote.JMXPrincipal>
statement code is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>()
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: javax.management.remote.JMXPrincipal(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.management.remote.JMXPrincipal
statement code is: JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.connector.DefaultConnectionPool$DeadReaper")
statement is: org.exolab.jms.net.uri.URI()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.uri.URI
statement code is: URI uRI = new URI()
statement is: org.exolab.jms.net.connector.URIRequestInfo(Lorg/exolab/jms/net/uri/URI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.URIRequestInfo
statement code is: URIRequestInfo uRIRequestInfo = new URIRequestInfo(arg0)
statement is: matchManagedConnections(Ljava/security/Principal;Lorg/exolab/jms/net/connector/ConnectionRequestInfo;)Lorg/exolab/jms/net/connector/ManagedConnection; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ManagedConnection
statement code is: ManagedConnection matchManagedConnections = defaultConnectionPool.matchManagedConnections(arg0, arg1)
test data is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.connector.DefaultConnectionPool$DeadReaper");
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
defaultConnectionPool.matchManagedConnections(jMXPrincipal, uRIRequestInfo);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Create a new JMX principal with a unique name
        JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.connector.DefaultConnectionPool$DeadReaper");
        // Create a new URI object with a specific scheme and hostname
        URI uRI = new URI("http", "example.com", null, null, null);
        // Create a new URIRequestInfo object based on the URI object
        URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
        // Create a new DefaultConnectionPool object with the JMX principal and URI request information
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(jMXPrincipal, uRIRequestInfo);
        // Match managed connections based on the JMX principal and URI request information
        defaultConnectionPool.matchManagedConnections(jMXPrincipal, uRIRequestInfo);
    }
}
statement is: // Create a new JMX principal with a unique name
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.connector.DefaultConnectionPool$DeadReaper"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create a new URI object with a specific scheme and hostname
URI uRI = new URI("http", "example.com", null, null, null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Create a new URIRequestInfo object based on the URI object
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.exolab.jms.net.connector.URIRequestInfo(Lorg/exolab/jms/net/uri/URI;)V
statement is: // Create a new DefaultConnectionPool object with the JMX principal and URI request information
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(jMXPrincipal, uRIRequestInfo), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Match managed connections based on the JMX principal and URI request information
defaultConnectionPool.matchManagedConnections(jMXPrincipal, uRIRequestInfo), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Match managed connections based on the JMX principal and URI request information
defaultConnectionPool.matchManagedConnections(jMXPrincipal, uRIRequestInfo) target is: defaultConnectionPool method is: matchManagedConnections(JMXPrincipal,URIRequestInfo)
TestCase is: String string = "org.exolab.jms.net.connector.DefaultConnectionPool$DeadReaper";
JMXPrincipal jMXPrincipal = new JMXPrincipal(string);

statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.Object, javax.management.remote.JMXPrincipal>
statement code is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>()
statement is: org.exolab.jms.net.tcp.TCPManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPManagedConnectionFactory
statement code is: TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: closed(Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: defaultConnectionPool.closed((ManagedConnection) null)
test data is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.closed((ManagedConnection) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
        TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
        ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null)));
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
        defaultConnectionPool.closed(((ManagedConnection) (null)));
    }
}
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: tCPManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))) target is: tCPManagedConnectionFactory method is: createConnectionFactory(ConnectionManager)
source statement: org.exolab.jms.net.tcp.TCPManagedConnectionFactory()V callee: VariableReference: Statement 2, type org.exolab.jms.net.tcp.TCPManagedConnectionFactoryindex is: 2
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.closed(((ManagedConnection) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.closed(((ManagedConnection) (null))) target is: defaultConnectionPool method is: closed(ManagedConnection)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 4, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 5
Matched Method is: closed(Lorg/exolab/jms/net/connector/ManagedConnection;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory(connectionManager);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
ManagedConnection managedConnection = null;
((DefaultConnectionPool) createConnectionFactory).closed(managedConnection);

statement is: org.exolab.jms.net.rmi.RMIManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.rmi.RMIManagedConnectionFactory
statement code is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory()
statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.ContextInvocationHandler(Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ContextInvocationHandler
statement code is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(arg0, arg1, (ManagedConnection) null)
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.Object, javax.management.remote.JMXPrincipal>
statement code is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>()
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: org.exolab.jms.net.connector.ManagedConnectionHandle(Lorg/exolab/jms/net/connector/DefaultConnectionPool;Lorg/exolab/jms/net/connector/ManagedConnection;Lorg/exolab/jms/net/connector/ConnectionFactory;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ManagedConnectionHandle
statement code is: ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(arg0, (ManagedConnection) null, arg2)
statement is: error(Lorg/exolab/jms/net/connector/ManagedConnection;Ljava/lang/Throwable;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: defaultConnectionPool.error((ManagedConnection) arg0, (Throwable) null)
test data is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) null, createConnectionFactory);
defaultConnectionPool.error((ManagedConnection) managedConnectionHandle, (Throwable) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null)));
        ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, ((ManagedConnection) (null)));
        HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
        ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, ((ManagedConnection) (null)), createConnectionFactory);
        defaultConnectionPool.error(((ManagedConnection) (managedConnectionHandle)), new SQLException("Simulated error", "08S01"));
    }
}
statement is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: rMIManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))) target is: rMIManagedConnectionFactory method is: createConnectionFactory(ConnectionManager)
source statement: org.exolab.jms.net.rmi.RMIManagedConnectionFactory()V callee: VariableReference: Statement 0, type org.exolab.jms.net.rmi.RMIManagedConnectionFactoryindex is: 0
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, ((ManagedConnection) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, ((ManagedConnection) (null)), createConnectionFactory), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.error(((ManagedConnection) (managedConnectionHandle)), new SQLException("Simulated error", "08S01")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.error(((ManagedConnection) (managedConnectionHandle)), new SQLException("Simulated error", "08S01")) target is: defaultConnectionPool method is: error(ManagedConnection,SQLException)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 5, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 6
Matched Method is: error(Lorg/exolab/jms/net/connector/ManagedConnection;Ljava/lang/Throwable;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory(connectionManager);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) createConnectionFactory, (ConnectionFactory) connectionManager);
Throwable throwable = null;
((DefaultConnectionPool) hashMap).error((ManagedConnection) managedConnectionHandle, throwable);

statement is: org.exolab.jms.net.rmi.RMIManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.rmi.RMIManagedConnectionFactory
statement code is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory()
statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.ContextInvocationHandler(Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ContextInvocationHandler
statement code is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(arg0, arg1, (ManagedConnection) null)
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.Object, javax.management.remote.JMXPrincipal>
statement code is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>()
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: pinged(Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: defaultConnectionPool.pinged((ManagedConnection) null)
test data is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.pinged((ManagedConnection) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null)));
        ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, ((ManagedConnection) (null)));
        HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
        defaultConnectionPool.pinged(((ManagedConnection) (null)));
    }
}
statement is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: rMIManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))) target is: rMIManagedConnectionFactory method is: createConnectionFactory(ConnectionManager)
source statement: org.exolab.jms.net.rmi.RMIManagedConnectionFactory()V callee: VariableReference: Statement 0, type org.exolab.jms.net.rmi.RMIManagedConnectionFactoryindex is: 0
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, ((ManagedConnection) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.pinged(((ManagedConnection) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.pinged(((ManagedConnection) (null))) target is: defaultConnectionPool method is: pinged(ManagedConnection)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 5, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 6
Matched Method is: pinged(Lorg/exolab/jms/net/connector/ManagedConnection;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory(connectionManager);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnection managedConnection = null;
((DefaultConnectionPool) hashMap).pinged(managedConnection);

statement is: org.exolab.jms.net.http.HTTPSManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.http.HTTPSManagedConnectionFactory
statement code is: HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory = new HTTPSManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = hTTPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.apache.derby.iapi.services.io.FormatableHashtable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.derby.iapi.services.io.FormatableHashtable
statement code is: FormatableHashtable formatableHashtable = new FormatableHashtable()
statement is: org.exolab.jms.net.connector.ContextInvocationHandler(Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ContextInvocationHandler
statement code is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler((InvocationHandler) null, arg1, (ManagedConnection) null)
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: close()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: defaultConnectionPool.close()
test data is: HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory = new HTTPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = hTTPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
FormatableHashtable formatableHashtable = new FormatableHashtable();
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler((InvocationHandler) null, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, formatableHashtable);
defaultConnectionPool.close();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory = new HTTPSManagedConnectionFactory();
        ConnectionFactory createConnectionFactory = hTTPSManagedConnectionFactory.createConnectionFactory("https://www.example.com");
        FormatableHashtable formatableHashtable = new FormatableHashtable();
        ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler("user", "password", createConnectionFactory, ((ManagedConnection) (null)));
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, formatableHashtable);
        defaultConnectionPool.close();
    }
}
statement is: HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory = new HTTPSManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConnectionFactory createConnectionFactory = hTTPSManagedConnectionFactory.createConnectionFactory("https://www.example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: hTTPSManagedConnectionFactory.createConnectionFactory("https://www.example.com") target is: hTTPSManagedConnectionFactory method is: createConnectionFactory(java.lang.String)
source statement: org.exolab.jms.net.http.HTTPSManagedConnectionFactory()V callee: VariableReference: Statement 0, type org.exolab.jms.net.http.HTTPSManagedConnectionFactoryindex is: 0
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
statement is: FormatableHashtable formatableHashtable = new FormatableHashtable(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler("user", "password", createConnectionFactory, ((ManagedConnection) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, formatableHashtable), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.close(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.close() target is: defaultConnectionPool method is: close()
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 4, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 4
Matched Method is: close()V
TestCase is: HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory = new HTTPSManagedConnectionFactory();
String string = "https://www.example.com";
ConnectionFactory createConnectionFactory = hTTPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) string);
FormatableHashtable formatableHashtable = new FormatableHashtable();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPSManagedConnectionFactory, (InvocationHandler) createConnectionFactory, (ConnectionFactory) formatableHashtable, (Map) createConnectionFactory);
defaultConnectionPool.close();

statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.Object, javax.management.remote.JMXPrincipal>
statement code is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>()
statement is: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPSManagedConnectionFactory
statement code is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.ContextInvocationHandler(Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ContextInvocationHandler
statement code is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(arg0, arg1, (ManagedConnection) null)
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: org.exolab.jms.net.connector.ManagedConnectionHandle(Lorg/exolab/jms/net/connector/DefaultConnectionPool;Lorg/exolab/jms/net/connector/ManagedConnection;Lorg/exolab/jms/net/connector/ConnectionFactory;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ManagedConnectionHandle
statement code is: ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(arg0, (ManagedConnection) null, arg2)
statement is: idle(Lorg/exolab/jms/net/connector/ManagedConnectionHandle;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: defaultConnectionPool.idle(arg0)
test data is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) null, createConnectionFactory);
defaultConnectionPool.idle(managedConnectionHandle);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
        TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
        ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null)));
        ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, ((ManagedConnection) (null)));
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
        ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, ((ManagedConnection) (null)), createConnectionFactory);
        defaultConnectionPool.idle(managedConnectionHandle);
    }
}
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: tCPSManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))) target is: tCPSManagedConnectionFactory method is: createConnectionFactory(ConnectionManager)
source statement: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V callee: VariableReference: Statement 2, type org.exolab.jms.net.tcp.TCPSManagedConnectionFactoryindex is: 2
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, ((ManagedConnection) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, ((ManagedConnection) (null)), createConnectionFactory), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.idle(managedConnectionHandle), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.idle(managedConnectionHandle) target is: defaultConnectionPool method is: idle(ManagedConnectionHandle)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 5, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 6
Matched Method is: idle(Lorg/exolab/jms/net/connector/ManagedConnectionHandle;)V
TestCase is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(connectionManager);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) createConnectionFactory, (ConnectionFactory) connectionManager);
((DefaultConnectionPool) contextInvocationHandler).idle(managedConnectionHandle);

statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.Object, javax.management.remote.JMXPrincipal>
statement code is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>()
statement is: org.exolab.jms.net.tcp.TCPManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPManagedConnectionFactory
statement code is: TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: add(Lorg/exolab/jms/net/connector/ManagedConnection;Z)Lorg/exolab/jms/net/connector/ManagedConnection; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ManagedConnection
statement code is: ManagedConnection add = defaultConnectionPool.add((ManagedConnection) null, false)
test data is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.add((ManagedConnection) null, false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        HashMap<Object, JMXPrincipal> hashMap = new HashMap<>();
        TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
        ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null)));
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
        defaultConnectionPool.add(mock(ManagedConnection.class), false);
    }
}
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: HashMap<Object, JMXPrincipal> hashMap = new HashMap<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: tCPManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))) target is: tCPManagedConnectionFactory method is: createConnectionFactory(ConnectionManager)
source statement: org.exolab.jms.net.tcp.TCPManagedConnectionFactory()V callee: VariableReference: Statement 2, type org.exolab.jms.net.tcp.TCPManagedConnectionFactoryindex is: 2
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.add(mock(ManagedConnection.class), false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.add(mock(ManagedConnection.class), false) target is: defaultConnectionPool method is: add(boolean)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 4, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 5
Matched Method is: add(Lorg/exolab/jms/net/connector/ManagedConnection;Z)Lorg/exolab/jms/net/connector/ManagedConnection;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory(connectionManager);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
boolean _boolean = false;
boolean _boolean = null;
((DefaultConnectionPool) createConnectionFactory).add((ManagedConnection) _boolean, _boolean);

statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPSManagedConnectionFactory
statement code is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.config.Configuration()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.config.Configuration
statement code is: Configuration configuration = new Configuration()
statement is: org.exolab.jms.persistence.DatabaseService(Lorg/exolab/jms/config/Configuration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.persistence.DatabaseService
statement code is: DatabaseService databaseService = new DatabaseService(arg0)
statement is: org.exolab.jms.authentication.UserManager(Lorg/exolab/jms/config/Configuration;Lorg/exolab/jms/persistence/DatabaseService;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.authentication.UserManager
statement code is: UserManager userManager = new UserManager(arg0, arg1)
statement is: org.exolab.jms.net.uri.URI()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.uri.URI
statement code is: URI uRI = new URI()
statement is: org.exolab.jms.net.connector.URIRequestInfo(Lorg/exolab/jms/net/uri/URI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.URIRequestInfo
statement code is: URIRequestInfo uRIRequestInfo = new URIRequestInfo(arg0)
statement is: org.exolab.jms.net.vm.VMManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.vm.VMManagedConnectionFactory
statement code is: VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory()
statement is: java.util.Hashtable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Hashtable<java.lang.Object, java.lang.Object>
statement code is: Hashtable<Object, Object> hashtable = new Hashtable<Object, Object>()
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: org.exolab.jms.authentication.AuthenticationMgr(Lorg/exolab/jms/authentication/UserManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.authentication.AuthenticationMgr
statement code is: AuthenticationMgr authenticationMgr = new AuthenticationMgr(arg0)
statement is: createManagedConnectionAcceptor(Lorg/exolab/jms/net/connector/Authenticator;Lorg/exolab/jms/net/connector/ConnectionRequestInfo;)Lorg/exolab/jms/net/connector/ManagedConnectionAcceptor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ManagedConnectionAcceptor
statement code is: ManagedConnectionAcceptor createManagedConnectionAcceptor = defaultConnectionPool.createManagedConnectionAcceptor(arg0, arg1)
test data is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
Configuration configuration = new Configuration();
DatabaseService databaseService = new DatabaseService(configuration);
UserManager userManager = new UserManager(configuration, databaseService);
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
Hashtable<Object, Object> hashtable = new Hashtable<Object, Object>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(vMManagedConnectionFactory, invocationHandler, createConnectionFactory, hashtable);
AuthenticationMgr authenticationMgr = new AuthenticationMgr(userManager);
defaultConnectionPool.createManagedConnectionAcceptor(authenticationMgr, uRIRequestInfo);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
        ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory("connectionManager");
        Configuration configuration = new Configuration();
        DatabaseService databaseService = new DatabaseService(configuration);
        UserManager userManager = new UserManager(configuration, databaseService);
        URI uRI = new URI("https://www.example.com/api/v1");
        URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
        VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
        Hashtable<Object, Object> hashtable = new Hashtable<>();
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(vMManagedConnectionFactory, invocationHandler, createConnectionFactory, hashtable);
        AuthenticationMgr authenticationMgr = new AuthenticationMgr(userManager);
        defaultConnectionPool.createManagedConnectionAcceptor(authenticationMgr, uRIRequestInfo);
    }
}
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory("connectionManager"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: tCPSManagedConnectionFactory.createConnectionFactory("connectionManager") target is: tCPSManagedConnectionFactory method is: createConnectionFactory(java.lang.String)
source statement: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V callee: VariableReference: Statement 1, type org.exolab.jms.net.tcp.TCPSManagedConnectionFactoryindex is: 1
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
statement is: Configuration configuration = new Configuration(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DatabaseService databaseService = new DatabaseService(configuration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserManager userManager = new UserManager(configuration, databaseService), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: URI uRI = new URI("https://www.example.com/api/v1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Hashtable<Object, Object> hashtable = new Hashtable<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(vMManagedConnectionFactory, invocationHandler, createConnectionFactory, hashtable), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AuthenticationMgr authenticationMgr = new AuthenticationMgr(userManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.createManagedConnectionAcceptor(authenticationMgr, uRIRequestInfo), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.createManagedConnectionAcceptor(authenticationMgr, uRIRequestInfo) target is: defaultConnectionPool method is: createManagedConnectionAcceptor(AuthenticationMgr,URIRequestInfo)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 10, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 10
Matched Method is: createManagedConnectionAcceptor(Lorg/exolab/jms/net/connector/Authenticator;Lorg/exolab/jms/net/connector/ConnectionRequestInfo;)Lorg/exolab/jms/net/connector/ManagedConnectionAcceptor;
TestCase is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
String string = "connectionManager";
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) string);
Configuration configuration = new Configuration();
DatabaseService databaseService = new DatabaseService(configuration);
UserManager userManager = new UserManager(configuration, databaseService);
URIRequestInfo uRIRequestInfo = new URIRequestInfo((URI) userManager);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
Hashtable<Object, Object> hashtable = new Hashtable<Object, Object>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(vMManagedConnectionFactory, invocationHandler, createConnectionFactory, hashtable);
AuthenticationMgr authenticationMgr = new AuthenticationMgr(userManager);
defaultConnectionPool.createManagedConnectionAcceptor(authenticationMgr, uRIRequestInfo);

statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPSManagedConnectionFactory
statement code is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: java.lang.InterruptedException()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.InterruptedException
statement code is: InterruptedException interruptedException = new InterruptedException()
statement is: org.apache.derby.iapi.services.io.FormatableHashtable()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.apache.derby.iapi.services.io.FormatableHashtable
statement code is: FormatableHashtable formatableHashtable = new FormatableHashtable()
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3)
statement is: org.exolab.jms.net.vm.VMManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.vm.VMManagedConnectionFactory
statement code is: VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory()
statement is: org.exolab.jms.net.uri.URI()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.uri.URI
statement code is: URI uRI = new URI()
statement is: org.exolab.jms.net.connector.URIRequestInfo(Lorg/exolab/jms/net/uri/URI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.URIRequestInfo
statement code is: URIRequestInfo uRIRequestInfo = new URIRequestInfo(arg0)
statement is: createManagedConnectionAcceptor(Lorg/exolab/jms/net/connector/Authenticator;Lorg/exolab/jms/net/connector/ConnectionRequestInfo;)Lorg/exolab/jms/net/connector/ManagedConnectionAcceptor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ManagedConnectionAcceptor
statement code is: ManagedConnectionAcceptor createManagedConnectionAcceptor = vMManagedConnectionFactory.createManagedConnectionAcceptor((Authenticator) null, arg1)
statement is: error(Lorg/exolab/jms/net/connector/ManagedConnectionAcceptor;Ljava/lang/Throwable;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: defaultConnectionPool.error(arg0, (Throwable) arg1)
test data is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
InterruptedException interruptedException = new InterruptedException();
FormatableHashtable formatableHashtable = new FormatableHashtable();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, formatableHashtable);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
ManagedConnectionAcceptor createManagedConnectionAcceptor = vMManagedConnectionFactory.createManagedConnectionAcceptor((Authenticator) null, uRIRequestInfo);
defaultConnectionPool.error(createManagedConnectionAcceptor, (Throwable) interruptedException);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
        ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null)));
        InterruptedException interruptedException = new InterruptedException("Testing error handling");
        FormatableHashtable formatableHashtable = new FormatableHashtable();
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, formatableHashtable);
        VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
        URI uRI = new URI("http://example.com");
        URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
        ManagedConnectionAcceptor createManagedConnectionAcceptor = vMManagedConnectionFactory.createManagedConnectionAcceptor(((Authenticator) (null)), uRIRequestInfo);
        defaultConnectionPool.error(createManagedConnectionAcceptor, ((Throwable) (interruptedException)));
    }
}
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: tCPSManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))) target is: tCPSManagedConnectionFactory method is: createConnectionFactory(ConnectionManager)
source statement: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V callee: VariableReference: Statement 1, type org.exolab.jms.net.tcp.TCPSManagedConnectionFactoryindex is: 1
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: InterruptedException interruptedException = new InterruptedException("Testing error handling"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FormatableHashtable formatableHashtable = new FormatableHashtable(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, formatableHashtable), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: URI uRI = new URI("http://example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: org.exolab.jms.net.connector.URIRequestInfo(Lorg/exolab/jms/net/uri/URI;)V
statement is: ManagedConnectionAcceptor createManagedConnectionAcceptor = vMManagedConnectionFactory.createManagedConnectionAcceptor(((Authenticator) (null)), uRIRequestInfo), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: vMManagedConnectionFactory.createManagedConnectionAcceptor(((Authenticator) (null)), uRIRequestInfo) target is: vMManagedConnectionFactory method is: createManagedConnectionAcceptor(Authenticator,URIRequestInfo)
source statement: org.exolab.jms.net.vm.VMManagedConnectionFactory()V callee: VariableReference: Statement 6, type org.exolab.jms.net.vm.VMManagedConnectionFactoryindex is: 6
Matched Method is: createManagedConnectionAcceptor(Lorg/exolab/jms/net/connector/Authenticator;Lorg/exolab/jms/net/connector/ConnectionRequestInfo;)Lorg/exolab/jms/net/connector/ManagedConnectionAcceptor;
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: defaultConnectionPool.error(createManagedConnectionAcceptor, ((Throwable) (interruptedException))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.error(createManagedConnectionAcceptor, ((Throwable) (interruptedException))) target is: defaultConnectionPool method is: error(ManagedConnectionAcceptor,java.lang.Throwable)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 5, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 5
Matched Method is: error(Lorg/exolab/jms/net/connector/ManagedConnectionAcceptor;Ljava/lang/Throwable;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(connectionManager);
FormatableHashtable formatableHashtable = new FormatableHashtable();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, formatableHashtable);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
Authenticator authenticator = null;
URIRequestInfo uRIRequestInfo = null;
ManagedConnectionAcceptor createManagedConnectionAcceptor = vMManagedConnectionFactory.createManagedConnectionAcceptor(authenticator, uRIRequestInfo);
InterruptedException interruptedException = null;
defaultConnectionPool.error(createManagedConnectionAcceptor, (Throwable) interruptedException);

statement is: mock(interface org.exolab.jms.net.connector.InvocationHandler) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.exolab.jms.net.connector.InvocationHandler
statement code is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer())
statement is: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.tcp.TCPSManagedConnectionFactory
statement code is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory()
statement is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.exolab.jms.net.connector.ConnectionFactory
statement code is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null)
statement is: org.exolab.jms.net.connector.ContextInvocationHandler(Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.ContextInvocationHandler
statement code is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(arg0, arg1, (ManagedConnection) null)
statement is: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.exolab.jms.net.connector.DefaultConnectionPool
statement code is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, (Map) null)
statement is: remove(Lorg/exolab/jms/net/connector/ManagedConnection;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: defaultConnectionPool.remove((ManagedConnection) null)
test data is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, (Map) null);
defaultConnectionPool.remove((ManagedConnection) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
        TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
        ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null)));
        ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, ((ManagedConnection) (null)));
        DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, ((Map) (null)));
        defaultConnectionPool.remove(((ManagedConnection) (null)));
    }
}
statement is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(InvocationHandler.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: InvocationHandler argument is: InvocationHandler.class
Matched Method is: mock(interface org.exolab.jms.net.connector.InvocationHandler)
statement is: TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: tCPSManagedConnectionFactory.createConnectionFactory(((ConnectionManager) (null))) target is: tCPSManagedConnectionFactory method is: createConnectionFactory(ConnectionManager)
source statement: org.exolab.jms.net.tcp.TCPSManagedConnectionFactory()V callee: VariableReference: Statement 1, type org.exolab.jms.net.tcp.TCPSManagedConnectionFactoryindex is: 1
Matched Method is: createConnectionFactory(Lorg/exolab/jms/net/connector/ConnectionManager;)Lorg/exolab/jms/net/connector/ConnectionFactory;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, ((ManagedConnection) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, ((Map) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultConnectionPool.remove(((ManagedConnection) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultConnectionPool.remove(((ManagedConnection) (null))) target is: defaultConnectionPool method is: remove(ManagedConnection)
source statement: org.exolab.jms.net.connector.DefaultConnectionPool(Lorg/exolab/jms/net/connector/ManagedConnectionFactory;Lorg/exolab/jms/net/connector/InvocationHandler;Lorg/exolab/jms/net/connector/ConnectionFactory;Ljava/util/Map;)V callee: VariableReference: Statement 4, type org.exolab.jms.net.connector.DefaultConnectionPoolindex is: 5
Matched Method is: remove(Lorg/exolab/jms/net/connector/ManagedConnection;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionManager connectionManager = null;
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory(connectionManager);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, (Map) null);
ManagedConnection managedConnection = null;
((DefaultConnectionPool) contextInvocationHandler).remove(managedConnection);

* test suite isTestSuite: 36
Test 0: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.getManagedConnectionAcceptorListener();
Test 1: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
// Undeclared exception!
try { 
  defaultConnectionPool.accepted((ManagedConnectionAcceptor) null, (ManagedConnection) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 2: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
MulticastCallerListener multicastCallerListener = new MulticastCallerListener();
defaultConnectionPool.setCallerListener(multicastCallerListener);
Test 3: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.pool.");
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
try { 
  defaultConnectionPool.createManagedConnection(jMXPrincipal, (ConnectionRequestInfo) null);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Argument 'info' must be of type org.exolab.jms.net.tcp.TCPSRequestInfo
   //
   verifyException("org.exolab.jms.net.tcp.TCPSManagedConnectionFactory", e);
}

Test 4: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.matchManagedConnectionAcceptors((ConnectionRequestInfo) null);
Test 5: 
DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool((ManagedConnectionFactory) null, (InvocationHandler) null, (ConnectionFactory) null, (Map) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'factory' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 6: 
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, (InvocationHandler) null, (ConnectionFactory) null, hashMap);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'handler' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 7: 
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
HTTPManagedConnectionFactory hTTPManagedConnectionFactory = new HTTPManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, (ConnectionFactory) null, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool(hTTPManagedConnectionFactory, contextInvocationHandler, (ConnectionFactory) null, hashMap);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'resolver' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 8: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.connector.DefaultConnectionPool$DeadReaper");
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
defaultConnectionPool.matchManagedConnections(jMXPrincipal, uRIRequestInfo);
Test 9: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.closed((ManagedConnection) null);
Test 10: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) null, createConnectionFactory);
defaultConnectionPool.error((ManagedConnection) managedConnectionHandle, (Throwable) null);
Test 11: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.pinged((ManagedConnection) null);
Test 12: 
HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory = new HTTPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = hTTPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
FormatableHashtable formatableHashtable = new FormatableHashtable();
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler((InvocationHandler) null, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, formatableHashtable);
defaultConnectionPool.close();
Test 13: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) null, createConnectionFactory);
defaultConnectionPool.idle(managedConnectionHandle);
Test 14: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
// Undeclared exception!
try { 
  defaultConnectionPool.add((ManagedConnection) null, false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 15: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
Configuration configuration = new Configuration();
DatabaseService databaseService = new DatabaseService(configuration);
UserManager userManager = new UserManager(configuration, databaseService);
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
Hashtable<Object, Object> hashtable = new Hashtable<Object, Object>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(vMManagedConnectionFactory, invocationHandler, createConnectionFactory, hashtable);
AuthenticationMgr authenticationMgr = new AuthenticationMgr(userManager);
defaultConnectionPool.createManagedConnectionAcceptor(authenticationMgr, uRIRequestInfo);
Test 16: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
InterruptedException interruptedException = new InterruptedException();
FormatableHashtable formatableHashtable = new FormatableHashtable();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, formatableHashtable);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
ManagedConnectionAcceptor createManagedConnectionAcceptor = vMManagedConnectionFactory.createManagedConnectionAcceptor((Authenticator) null, uRIRequestInfo);
defaultConnectionPool.error(createManagedConnectionAcceptor, (Throwable) interruptedException);
Test 17: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, (Map) null);
defaultConnectionPool.remove((ManagedConnection) null);
Test 18: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) hashMap).getManagedConnectionAcceptorListener();

Test 19: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) contextInvocationHandler).accepted((ManagedConnectionAcceptor) null, (ManagedConnection) null);

Test 20: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
MulticastCallerListener multicastCallerListener = new MulticastCallerListener();
((DefaultConnectionPool) createConnectionFactory).setCallerListener(multicastCallerListener);

Test 21: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.pool.");
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
String string = "connectionManager1";
ConnectionFactory createConnectionFactory = ((TCPSManagedConnectionFactory) hashMap).createConnectionFactory((ConnectionManager) "connectionManager1");
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
String string = "connectionRequestInfo1";
((DefaultConnectionPool) string).createManagedConnection(jMXPrincipal, (ConnectionRequestInfo) string);

Test 22: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) contextInvocationHandler).matchManagedConnectionAcceptors((ConnectionRequestInfo) null);

Test 23: 
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool((ManagedConnectionFactory) null, (InvocationHandler) null, (ConnectionFactory) null, (Map) null);

Test 24: 
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, hashMap, (ConnectionFactory) null, hashMap);

Test 25: 
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
HTTPManagedConnectionFactory hTTPManagedConnectionFactory = new HTTPManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, (ConnectionFactory) null, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPManagedConnectionFactory, contextInvocationHandler, hashMap, hashMap);

Test 26: 
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.connector.DefaultConnectionPool$DeadReaper");

Test 27: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) createConnectionFactory).closed((ManagedConnection) null);

Test 28: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) createConnectionFactory, (ConnectionFactory) null);
Throwable throwable = null;
((DefaultConnectionPool) hashMap).error((ManagedConnection) managedConnectionHandle, throwable);

Test 29: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) hashMap).pinged((ManagedConnection) null);

Test 30: 
HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory = new HTTPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = hTTPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) "https://www.example.com");
FormatableHashtable formatableHashtable = new FormatableHashtable();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPSManagedConnectionFactory, (InvocationHandler) createConnectionFactory, (ConnectionFactory) formatableHashtable, (Map) createConnectionFactory);
defaultConnectionPool.close();

Test 31: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) createConnectionFactory, (ConnectionFactory) null);
((DefaultConnectionPool) contextInvocationHandler).idle(managedConnectionHandle);

Test 32: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) createConnectionFactory).add((ManagedConnection) false, (boolean) (Boolean) null);

Test 33: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) "connectionManager");
Configuration configuration = new Configuration();
DatabaseService databaseService = new DatabaseService(configuration);
UserManager userManager = new UserManager(configuration, databaseService);
URIRequestInfo uRIRequestInfo = new URIRequestInfo((URI) userManager);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
Hashtable<Object, Object> hashtable = new Hashtable<Object, Object>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(vMManagedConnectionFactory, invocationHandler, createConnectionFactory, hashtable);
AuthenticationMgr authenticationMgr = new AuthenticationMgr(userManager);
defaultConnectionPool.createManagedConnectionAcceptor(authenticationMgr, uRIRequestInfo);

Test 34: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
FormatableHashtable formatableHashtable = new FormatableHashtable();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, formatableHashtable);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
ManagedConnectionAcceptor createManagedConnectionAcceptor = vMManagedConnectionFactory.createManagedConnectionAcceptor((Authenticator) null, (ConnectionRequestInfo) null);
InterruptedException interruptedException = null;
defaultConnectionPool.error(createManagedConnectionAcceptor, (Throwable) interruptedException);

Test 35: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, (Map) null);
((DefaultConnectionPool) contextInvocationHandler).remove((ManagedConnection) null);


* Generated after the refinement and before minimization 36 tests with total length 240
* test suite isTestSuite: 36
Test 0: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.getManagedConnectionAcceptorListener();
Test 1: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
// Undeclared exception!
try { 
  defaultConnectionPool.accepted((ManagedConnectionAcceptor) null, (ManagedConnection) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 2: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
MulticastCallerListener multicastCallerListener = new MulticastCallerListener();
defaultConnectionPool.setCallerListener(multicastCallerListener);
Test 3: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.pool.");
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
try { 
  defaultConnectionPool.createManagedConnection(jMXPrincipal, (ConnectionRequestInfo) null);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Argument 'info' must be of type org.exolab.jms.net.tcp.TCPSRequestInfo
   //
   verifyException("org.exolab.jms.net.tcp.TCPSManagedConnectionFactory", e);
}

Test 4: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.matchManagedConnectionAcceptors((ConnectionRequestInfo) null);
Test 5: 
DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool((ManagedConnectionFactory) null, (InvocationHandler) null, (ConnectionFactory) null, (Map) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'factory' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 6: 
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, (InvocationHandler) null, (ConnectionFactory) null, hashMap);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'handler' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 7: 
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
HTTPManagedConnectionFactory hTTPManagedConnectionFactory = new HTTPManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, (ConnectionFactory) null, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool(hTTPManagedConnectionFactory, contextInvocationHandler, (ConnectionFactory) null, hashMap);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'resolver' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 8: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.connector.DefaultConnectionPool$DeadReaper");
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
defaultConnectionPool.matchManagedConnections(jMXPrincipal, uRIRequestInfo);
Test 9: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.closed((ManagedConnection) null);
Test 10: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) null, createConnectionFactory);
defaultConnectionPool.error((ManagedConnection) managedConnectionHandle, (Throwable) null);
Test 11: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.pinged((ManagedConnection) null);
Test 12: 
HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory = new HTTPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = hTTPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
FormatableHashtable formatableHashtable = new FormatableHashtable();
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler((InvocationHandler) null, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, formatableHashtable);
defaultConnectionPool.close();
Test 13: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) null, createConnectionFactory);
defaultConnectionPool.idle(managedConnectionHandle);
Test 14: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
// Undeclared exception!
try { 
  defaultConnectionPool.add((ManagedConnection) null, false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 15: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
Configuration configuration = new Configuration();
DatabaseService databaseService = new DatabaseService(configuration);
UserManager userManager = new UserManager(configuration, databaseService);
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
Hashtable<Object, Object> hashtable = new Hashtable<Object, Object>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(vMManagedConnectionFactory, invocationHandler, createConnectionFactory, hashtable);
AuthenticationMgr authenticationMgr = new AuthenticationMgr(userManager);
defaultConnectionPool.createManagedConnectionAcceptor(authenticationMgr, uRIRequestInfo);
Test 16: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
InterruptedException interruptedException = new InterruptedException();
FormatableHashtable formatableHashtable = new FormatableHashtable();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, formatableHashtable);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
ManagedConnectionAcceptor createManagedConnectionAcceptor = vMManagedConnectionFactory.createManagedConnectionAcceptor((Authenticator) null, uRIRequestInfo);
defaultConnectionPool.error(createManagedConnectionAcceptor, (Throwable) interruptedException);
Test 17: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, (Map) null);
defaultConnectionPool.remove((ManagedConnection) null);
Test 18: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) hashMap).getManagedConnectionAcceptorListener();

Test 19: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) contextInvocationHandler).accepted((ManagedConnectionAcceptor) null, (ManagedConnection) null);

Test 20: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
MulticastCallerListener multicastCallerListener = new MulticastCallerListener();
((DefaultConnectionPool) createConnectionFactory).setCallerListener(multicastCallerListener);

Test 21: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.pool.");
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
String string = "connectionManager1";
ConnectionFactory createConnectionFactory = ((TCPSManagedConnectionFactory) hashMap).createConnectionFactory((ConnectionManager) "connectionManager1");
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
String string = "connectionRequestInfo1";
((DefaultConnectionPool) string).createManagedConnection(jMXPrincipal, (ConnectionRequestInfo) string);

Test 22: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) contextInvocationHandler).matchManagedConnectionAcceptors((ConnectionRequestInfo) null);

Test 23: 
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool((ManagedConnectionFactory) null, (InvocationHandler) null, (ConnectionFactory) null, (Map) null);

Test 24: 
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, hashMap, (ConnectionFactory) null, hashMap);

Test 25: 
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
HTTPManagedConnectionFactory hTTPManagedConnectionFactory = new HTTPManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, (ConnectionFactory) null, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPManagedConnectionFactory, contextInvocationHandler, hashMap, hashMap);

Test 26: 
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.connector.DefaultConnectionPool$DeadReaper");

Test 27: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) createConnectionFactory).closed((ManagedConnection) null);

Test 28: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) createConnectionFactory, (ConnectionFactory) null);
Throwable throwable = null;
((DefaultConnectionPool) hashMap).error((ManagedConnection) managedConnectionHandle, throwable);

Test 29: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) hashMap).pinged((ManagedConnection) null);

Test 30: 
HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory = new HTTPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = hTTPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) "https://www.example.com");
FormatableHashtable formatableHashtable = new FormatableHashtable();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPSManagedConnectionFactory, (InvocationHandler) createConnectionFactory, (ConnectionFactory) formatableHashtable, (Map) createConnectionFactory);
defaultConnectionPool.close();

Test 31: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) createConnectionFactory, (ConnectionFactory) null);
((DefaultConnectionPool) contextInvocationHandler).idle(managedConnectionHandle);

Test 32: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
((DefaultConnectionPool) createConnectionFactory).add((ManagedConnection) false, (boolean) (Boolean) null);

Test 33: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) "connectionManager");
Configuration configuration = new Configuration();
DatabaseService databaseService = new DatabaseService(configuration);
UserManager userManager = new UserManager(configuration, databaseService);
URIRequestInfo uRIRequestInfo = new URIRequestInfo((URI) userManager);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
Hashtable<Object, Object> hashtable = new Hashtable<Object, Object>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(vMManagedConnectionFactory, invocationHandler, createConnectionFactory, hashtable);
AuthenticationMgr authenticationMgr = new AuthenticationMgr(userManager);
defaultConnectionPool.createManagedConnectionAcceptor(authenticationMgr, uRIRequestInfo);

Test 34: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
FormatableHashtable formatableHashtable = new FormatableHashtable();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, formatableHashtable);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
ManagedConnectionAcceptor createManagedConnectionAcceptor = vMManagedConnectionFactory.createManagedConnectionAcceptor((Authenticator) null, (ConnectionRequestInfo) null);
InterruptedException interruptedException = null;
defaultConnectionPool.error(createManagedConnectionAcceptor, (Throwable) interruptedException);

Test 35: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, (Map) null);
((DefaultConnectionPool) contextInvocationHandler).remove((ManagedConnection) null);


* Minimizing test suite
* test suite isTestSuite: 18
Test 0: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.getManagedConnectionAcceptorListener();
Test 1: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
// Undeclared exception!
try { 
  defaultConnectionPool.accepted((ManagedConnectionAcceptor) null, (ManagedConnection) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 2: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
MulticastCallerListener multicastCallerListener = new MulticastCallerListener();
defaultConnectionPool.setCallerListener(multicastCallerListener);
Test 3: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.pool.");
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
try { 
  defaultConnectionPool.createManagedConnection(jMXPrincipal, (ConnectionRequestInfo) null);
  fail("Expecting exception: Exception");

} catch(Exception e) {
   //
   // Argument 'info' must be of type org.exolab.jms.net.tcp.TCPSRequestInfo
   //
   verifyException("org.exolab.jms.net.tcp.TCPSManagedConnectionFactory", e);
}

Test 4: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
Configuration configuration = new Configuration();
DatabaseService databaseService = new DatabaseService(configuration);
UserManager userManager = new UserManager(configuration, databaseService);
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
Hashtable<Object, Object> hashtable = new Hashtable<Object, Object>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(vMManagedConnectionFactory, invocationHandler, createConnectionFactory, hashtable);
AuthenticationMgr authenticationMgr = new AuthenticationMgr(userManager);
defaultConnectionPool.createManagedConnectionAcceptor(authenticationMgr, uRIRequestInfo);
Test 5: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.matchManagedConnectionAcceptors((ConnectionRequestInfo) null);
Test 6: 
DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool((ManagedConnectionFactory) null, (InvocationHandler) null, (ConnectionFactory) null, (Map) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'factory' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 7: 
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, (InvocationHandler) null, (ConnectionFactory) null, hashMap);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'handler' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 8: 
HashMap<ManagedConnectionHandle, JMXPrincipal> hashMap = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
HTTPManagedConnectionFactory hTTPManagedConnectionFactory = new HTTPManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, (ConnectionFactory) null, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool(hTTPManagedConnectionFactory, contextInvocationHandler, (ConnectionFactory) null, hashMap);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'resolver' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 9: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
JMXPrincipal jMXPrincipal = new JMXPrincipal("org.exolab.jms.net.connector.DefaultConnectionPool$DeadReaper");
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
defaultConnectionPool.matchManagedConnections(jMXPrincipal, uRIRequestInfo);
Test 10: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.closed((ManagedConnection) null);
Test 11: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) null, createConnectionFactory);
defaultConnectionPool.error((ManagedConnection) managedConnectionHandle, (Throwable) null);
Test 12: 
RMIManagedConnectionFactory rMIManagedConnectionFactory = new RMIManagedConnectionFactory();
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
ConnectionFactory createConnectionFactory = rMIManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(rMIManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
defaultConnectionPool.pinged((ManagedConnection) null);
Test 13: 
HTTPSManagedConnectionFactory hTTPSManagedConnectionFactory = new HTTPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = hTTPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
FormatableHashtable formatableHashtable = new FormatableHashtable();
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler((InvocationHandler) null, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(hTTPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, formatableHashtable);
defaultConnectionPool.close();
Test 14: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, contextInvocationHandler, createConnectionFactory, hashMap);
ManagedConnectionHandle managedConnectionHandle = new ManagedConnectionHandle(defaultConnectionPool, (ManagedConnection) null, createConnectionFactory);
defaultConnectionPool.idle(managedConnectionHandle);
Test 15: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> hashMap = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory tCPManagedConnectionFactory = new TCPManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPManagedConnectionFactory, invocationHandler, createConnectionFactory, hashMap);
// Undeclared exception!
try { 
  defaultConnectionPool.add((ManagedConnection) null, false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}

Test 16: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
InterruptedException interruptedException = new InterruptedException();
FormatableHashtable formatableHashtable = new FormatableHashtable();
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(tCPSManagedConnectionFactory, invocationHandler, createConnectionFactory, formatableHashtable);
VMManagedConnectionFactory vMManagedConnectionFactory = new VMManagedConnectionFactory();
URI uRI = new URI();
URIRequestInfo uRIRequestInfo = new URIRequestInfo(uRI);
ManagedConnectionAcceptor createManagedConnectionAcceptor = vMManagedConnectionFactory.createManagedConnectionAcceptor((Authenticator) null, uRIRequestInfo);
defaultConnectionPool.error(createManagedConnectionAcceptor, (Throwable) interruptedException);
Test 17: 
InvocationHandler invocationHandler = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
TCPSManagedConnectionFactory tCPSManagedConnectionFactory = new TCPSManagedConnectionFactory();
ConnectionFactory createConnectionFactory = tCPSManagedConnectionFactory.createConnectionFactory((ConnectionManager) null);
ContextInvocationHandler contextInvocationHandler = new ContextInvocationHandler(invocationHandler, createConnectionFactory, (ManagedConnection) null);
// Undeclared exception!
try { 
  ((DefaultConnectionPool) contextInvocationHandler).remove((ManagedConnection) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 29%
* Total number of goals: 99
* Number of covered goals: 29
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 43%
* Total number of goals: 214
* Number of covered goals: 93
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 12
* Number of covered goals: 4
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 89%
* Total number of goals: 18
* Number of covered goals: 16
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 29%
* Total number of goals: 99
* Number of covered goals: 29
* Generated 18 tests with total length 124
* Resulting test suite's coverage: 44% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool((ManagedConnectionFactory) null, (InvocationHandler) null, (ConnectionFactory) null, (Map) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'factory' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}


** It was a parseable test case! 
refined test name is: testConstructorWithNullFactory
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TCPManagedConnectionFactory arg0 = new TCPManagedConnectionFactory();
HashMap<ManagedConnectionHandle, JMXPrincipal> arg3 = new HashMap<ManagedConnectionHandle, JMXPrincipal>();
DefaultConnectionPool defaultConnectionPool = null;
try {
  defaultConnectionPool = new DefaultConnectionPool(arg0, (InvocationHandler) null, (ConnectionFactory) null, arg3);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Argument 'handler' is null
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}


** It was a parseable test case! 
refined test name is: testInvalidHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: InvocationHandler arg1 = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> arg3 = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory arg0 = new TCPManagedConnectionFactory();
ConnectionFactory arg2 = arg0.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3);
defaultConnectionPool.closed((ManagedConnection) null);

** It was a parseable test case! 
refined test name is: testManagedConnectionFactoryAndPoolCreation
* Compiling Tests
refined test name is: testTCPManagedConnectionFactory
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HTTPSManagedConnectionFactory arg0 = new HTTPSManagedConnectionFactory();
ConnectionFactory arg2 = arg0.createConnectionFactory((ConnectionManager) null);
FormatableHashtable arg3 = new FormatableHashtable();
ContextInvocationHandler arg1 = new ContextInvocationHandler((InvocationHandler) null, arg2, (ManagedConnection) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3);
defaultConnectionPool.close();

** It was a parseable test case! 
refined test name is: testCloseDefaultConnectionPool
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: InvocationHandler arg1 = mock(InvocationHandler.class, new ViolatedAssumptionAnswer());
HashMap<Object, JMXPrincipal> arg3 = new HashMap<Object, JMXPrincipal>();
TCPManagedConnectionFactory arg0 = new TCPManagedConnectionFactory();
ConnectionFactory arg2 = arg0.createConnectionFactory((ConnectionManager) null);
DefaultConnectionPool defaultConnectionPool = new DefaultConnectionPool(arg0, arg1, arg2, arg3);
// Undeclared exception!
try { 
  defaultConnectionPool.add((ManagedConnection) null, false);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.exolab.jms.net.connector.DefaultConnectionPool", e);
}


** It was a parseable test case! 
refined test name is: testAddingNullManagedConnectionThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:36:40.186 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar4945055093404886540.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:36:40.210 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4945055093404886540.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:36:40.381 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar4945055093404886540.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:36:40.382 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4945055093404886540.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:36:40.543 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar4945055093404886540.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:36:40.547 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4945055093404886540.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:36:40.625 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar4945055093404886540.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:36:40.626 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4945055093404886540.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:36:40.750 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar4945055093404886540.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:36:40.752 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4945055093404886540.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
[MASTER] 20:36:41.122 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar4945055093404886540.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:36:41.123 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4945055093404886540.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
[MASTER] 20:36:41.351 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar4945055093404886540.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:36:41.352 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4945055093404886540.jar
[MASTER] 20:36:41.687 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
[MASTER] 20:36:41.896 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Computation finished
