/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 18:27:02 GMT 2024
 */

package net.sf.sugar.fspath;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.io.File;
import java.net.URI;
import java.util.Date;
import net.sf.sugar.fspath.FSPathResult;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FSPathResult_Original_ESTest extends FSPathResult_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningNull() throws Throwable  {
      File arg0 = MockFile.createTempFile(".t5.xSigP", "NM6Dj>V`x");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      URI uRI = fSPathResult.getURI();
      assertNull(uRI);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningURIWhereIsAbsoluteIsFalse() throws Throwable  {
      URI arg0 = MockURI.URI((String) null, (String) null, (String) null, (String) null);
      FSPathResult fSPathResult = new FSPathResult(arg0);
      URI uRI = fSPathResult.getURI();
      assertEquals((-1), uRI.getPort());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningURIWhereIsOpaqueIsTrue() throws Throwable  {
      URI arg0 = MockURI.URI("net.sf.sugar.fspath.FSPathResult", "", (String) null, 376, "", "", "");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      URI uRI = fSPathResult.getURI();
      assertEquals((-1), uRI.getPort());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringReturningNull() throws Throwable  {
      Double arg0 = new Double((-1129.0));
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.getString();
      assertNull(string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringReturningNonEmptyString() throws Throwable  {
      FSPathResult fSPathResult = new FSPathResult("^811%M9G6jh^IEQ:");
      String string = fSPathResult.getString();
      assertEquals("^811%M9G6jh^IEQ:", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningNull() throws Throwable  {
      URI arg0 = MockURI.URI((String) null, (String) null, (String) null, (String) null);
      FSPathResult fSPathResult = new FSPathResult(arg0);
      File file = fSPathResult.getFile();
      assertNull(file);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereIsAbsoluteIsTrue() throws Throwable  {
      System.setCurrentTimeMillis((-39L));
      File arg0 = MockFile.createTempFile("<A Oj^=n@s-(!7C]a", "<A Oj^=n@s-(!7C]a");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      File file = fSPathResult.getFile();
      assertTrue(file.canRead());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereLastModifiedIsZero() throws Throwable  {
      MockFile arg0 = new MockFile((String) null, "pWNj");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      File file = fSPathResult.getFile();
      assertEquals(0L, file.getTotalSpace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNonNull() throws Throwable  {
      MockDate arg0 = new MockDate();
      FSPathResult fSPathResult = new FSPathResult(arg0);
      Date date = fSPathResult.getDate();
      assertSame(date, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingURI() throws Throwable  {
      URI arg0 = MockURI.aFileURI;
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      assertEquals("file:///tmp/foo.bar", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningNonEmptyString() throws Throwable  {
      Boolean arg0 = Boolean.FALSE;
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      assertEquals("false", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingDouble() throws Throwable  {
      Double arg0 = new Double(616.2350011863235);
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      assertEquals("616.2350011863235", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringReturningEmptyString() throws Throwable  {
      FSPathResult fSPathResult = new FSPathResult("");
      String string = fSPathResult.toString();
      assertEquals("", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingFile() throws Throwable  {
      File arg0 = MockFile.createTempFile(".t5.xSigP", "NM6Dj>V`x");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      assertEquals("/tmp/.t5.xSigP0NM6Dj>V`x", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingBoolean() throws Throwable  {
      FSPathResult fSPathResult = new FSPathResult((Boolean) null);
      String string = fSPathResult.toString();
      assertNotNull(string);
      assertEquals("FSPathResult : empty", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFileReturningFileWhereLastModifiedIsPositive() throws Throwable  {
      MockFile arg0 = new MockFile("");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      File file = fSPathResult.getFile();
      assertSame(arg0, file);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesFSPathResultTakingDate() throws Throwable  {
      MockDate arg0 = new MockDate();
      FSPathResult fSPathResult = new FSPathResult(arg0);
      String string = fSPathResult.toString();
      assertNotNull(string);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStringReturningEmptyString() throws Throwable  {
      FSPathResult fSPathResult = new FSPathResult("");
      String string = fSPathResult.getString();
      assertEquals("", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNull() throws Throwable  {
      FSPathResult fSPathResult = new FSPathResult("");
      Date date = fSPathResult.getDate();
      assertNull(date);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetURIReturningURIWhereGetPortIsPositive() throws Throwable  {
      URI arg0 = MockURI.URI("net.sf.sugar.fspath.FSPathResult", "", "net.sf.sugar.fspath.FSPathResult", 376, "", "", "");
      FSPathResult fSPathResult = new FSPathResult(arg0);
      URI uRI = fSPathResult.getURI();
      assertEquals("", uRI.getRawFragment());
  }
}
