* EvoSuite 1.2.0
* WARNING - Generating JUnit 5 tests with the option to use a separate classloader will result in not runnable tests. Set either -Dtest_format=JUNIT4 or -Duse_separate_classloader=false
* Going to generate test cases for class: net.sf.sugar.fspath.cli.FSPathExplorer
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-ES-res/60_sugar/evosuite-files/evosuite.properties
* Connecting to master process on port 12876
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 10:57:39.480 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 10:57:39.480 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 10:57:39.481 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 10:57:39.482 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 10:57:39.484 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 10:57:39.485 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 10:57:39.486 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 10:57:39.490 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 10:57:39.492 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 10:57:39.522 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 10:57:39.523 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 10:57:39.524 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 10:57:39.534 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 10:57:39.538 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 10:57:39.539 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class net.sf.sugar.fspath.cli.FSPathExplorer
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 184
* Using seed 1709809058417
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 51 / 184
[Progress:>                             0%] [Cov:=======================>           67%][Progress:>                             1%] [Cov:=========================>         74%][Progress:>                             2%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:===>                          11%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:=====>                        17%] [Cov:==========================>        75%][Progress:=====>                        18%] [Cov:==========================>        75%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:============================>      80%][Progress:====================>         69%] [Cov:============================>      80%][Progress:=====================>        71%] [Cov:============================>      80%][Progress:=====================>        72%] [Cov:============================>      80%][Progress:======================>       74%] [Cov:============================>      80%][Progress:=======================>      79%] [Cov:============================>      80%][Progress:========================>     81%] [Cov:============================>      80%][Progress:========================>     82%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%]
* Search finished after 102s and 36 generations, 13919 statements, best individual has fitness: 55.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 65%
* Total number of goals: 51
* Number of covered goals: 33
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 75%
* Total number of goals: 75
* Number of covered goals: 56
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 65%
* Total number of goals: 51
* Number of covered goals: 33
* Generated 9 tests with total length 39
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
* Writing tests to file
* Writing JUnit test case 'FSPathExplorer_ESTest' to evosuite-tests
* Done!

* Computation finished
