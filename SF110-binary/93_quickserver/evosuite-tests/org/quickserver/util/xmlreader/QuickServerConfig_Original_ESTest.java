/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 16:16:57 GMT 2024
 */

package org.quickserver.util.xmlreader;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.QuickServer;
import org.quickserver.util.xmlreader.AccessConstraintConfig;
import org.quickserver.util.xmlreader.ApplicationConfiguration;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.InitServerHooks;
import org.quickserver.util.xmlreader.QSAdminServerConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;
import org.quickserver.util.xmlreader.ServerHooks;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuickServerConfig_Original_ESTest extends QuickServerConfig_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSecurityManagerClassReturningNonEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setSecurityManagerClass("</max-auth-try>\n");
      String securityManagerClass = quickServerConfig.getSecurityManagerClass();
      assertNotNull(securityManagerClass);
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSecurityManagerClassReturningEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setSecurityManagerClass("");
      String securityManagerClass = quickServerConfig.getSecurityManagerClass();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
      assertNotNull(securityManagerClass);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQSAdminServerConfigReturningQSAdminServerConfigWhereGetTimeoutIsZero() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      QSAdminServerConfig arg0 = new QSAdminServerConfig();
      arg0.setTimeout(0);
      quickServerConfig.setQSAdminServerConfig(arg0);
      quickServerConfig.getQSAdminServerConfig();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQSAdminServerConfigReturningQSAdminServerConfigWhereGetTimeoutIsNegative() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      QSAdminServerConfig arg0 = new QSAdminServerConfig();
      arg0.setTimeout((-16));
      quickServerConfig.setQSAdminServerConfig(arg0);
      quickServerConfig.getQSAdminServerConfig();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQSAdminServerConfigReturningQSAdminServerConfigWhereGetCommunicationLoggingIsTrue() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      QSAdminServerConfig arg0 = new QSAdminServerConfig();
      arg0.setCommunicationLogging(true);
      quickServerConfig.setQSAdminServerConfig(arg0);
      quickServerConfig.getQSAdminServerConfig();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitServerHooksReturningInitServerHooksWhereIsEmptyIsTrue() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      InitServerHooks arg0 = new InitServerHooks();
      quickServerConfig.setInitServerHooks(arg0);
      quickServerConfig.getInitServerHooks();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDBObjectPoolConfigReturningNonNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      DBObjectPoolConfig arg0 = new DBObjectPoolConfig();
      quickServerConfig.setDBObjectPoolConfig(arg0);
      quickServerConfig.getDBObjectPoolConfig();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConfigFileReturningNonEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setConfigFile("2&>f?NJ4!.mK");
      quickServerConfig.getConfigFile();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationJarPathReturningNonEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setApplicationJarPath("BO4t/WvL4");
      quickServerConfig.getApplicationJarPath();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationJarPathReturningEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setApplicationJarPath("");
      quickServerConfig.getApplicationJarPath();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationConfigurationReturningApplicationConfigurationWhereIsEmptyIsTrue() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      ApplicationConfiguration arg0 = new ApplicationConfiguration();
      quickServerConfig.setApplicationConfiguration(arg0);
      quickServerConfig.getApplicationConfiguration();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationConfigurationReturningApplicationConfigurationWhereIsEmptyIsFalse() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      ApplicationConfiguration arg0 = new ApplicationConfiguration();
      Object arg1 = new Object();
      arg0.put((Object) null, arg1);
      quickServerConfig.setApplicationConfiguration(arg0);
      quickServerConfig.getApplicationConfiguration();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetQSAdminServerConfigReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getQSAdminServerConfig();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationConfigurationReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getApplicationConfiguration();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDBObjectPoolConfigReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getDBObjectPoolConfig();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetApplicationJarPathReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getApplicationJarPath();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitServerHooksReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getInitServerHooks();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSecurityManagerClassReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getSecurityManagerClass();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      QuickServer quickServer = new QuickServer("|NO\"1coxo");
      ServerHooks arg0 = quickServer.getServerHooks();
      quickServerConfig.setServerHooks(arg0);
      quickServerConfig.toXML("");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNonEmptyString0() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      AccessConstraintConfig arg0 = new AccessConstraintConfig();
      quickServerConfig.setAccessConstraintConfig(arg0);
      quickServerConfig.toXML("S4_y}2|Tx{9");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNull0() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setConsoleLoggingFormatter("Mx?~/");
      quickServerConfig.toXML((String) null);
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNonEmptyString1() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientExtendedEventHandler("</quickserver>\n");
      quickServerConfig.toXML("bTJKf.kD/iRqJS");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNonEmptyString2() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      Data arg0 = new Data();
      quickServerConfig.setClientData((ClientData) arg0);
      quickServerConfig.toXML("}D5y3L?l!MZSe[P");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNonEmptyString3() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setAuthenticator("SOhKem95Pz8 c.&");
      quickServerConfig.toXML("S4_y}2|Tx{9");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNonEmptyString4() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientWriteHandler("k.Y4YlJpi]_C[CN_");
      quickServerConfig.toXML("Can't send Binary :DataType.OUT is not in DataMode.BINARY");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNull1() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientBinaryHandler("=n#M[C");
      quickServerConfig.toXML((String) null);
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNull2() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientObjectHandler("\t<port>");
      quickServerConfig.toXML((String) null);
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNonEmptyString5() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      CommandHandler arg0 = new CommandHandler();
      quickServerConfig.setClientCommandHandler((ClientCommandHandler) arg0);
      quickServerConfig.toXML("Can't send Binary :DataType.OUT is not in DataMode.BINARY");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNonEmptyString6() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setClientEventHandler("[");
      quickServerConfig.toXML("|5FuW");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNonEmptyString7() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setBindAddr("f ");
      quickServerConfig.toXML("\t<authenticator>");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToXMLWithNonEmptyString8() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setServerBanner("K/`jXK?sX(SZ^mg@f");
      quickServerConfig.toXML("K/`jXK?sX(SZ^mg@f");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSecurityManagerClass() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setSecurityManagerClass("1$JuNpa4");
      quickServerConfig.toXML("");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSecurityManagerClassWithNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setSecurityManagerClass((String) null);
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetApplicationConfiguration() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      ApplicationConfiguration arg0 = new ApplicationConfiguration();
      quickServerConfig.setApplicationConfiguration(arg0);
      quickServerConfig.toXML((String) null);
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDBObjectPoolConfig() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      DBObjectPoolConfig arg0 = new DBObjectPoolConfig();
      quickServerConfig.setDBObjectPoolConfig(arg0);
      quickServerConfig.toXML("K/`jXK?sX(SZ^mg@f");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConfigFileReturningNull() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.getConfigFile();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetQSAdminServerConfig() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      QSAdminServerConfig arg0 = new QSAdminServerConfig();
      quickServerConfig.setQSAdminServerConfig(arg0);
      quickServerConfig.toXML("*?!q:qX");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInitServerHooks() throws Throwable  {
      QuickServer quickServer = new QuickServer("\t<max-connection-msg>");
      QuickServerConfig config = quickServer.getConfig();
      InitServerHooks arg0 = new InitServerHooks();
      config.setInitServerHooks(arg0);
      config.toXML(",pIFnUpz\"");
      assertEquals("QuickServer v2.0.0 RC1", config.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetConfigFileReturningEmptyString() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setConfigFile("");
      quickServerConfig.getConfigFile();
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetApplicationJarPath() throws Throwable  {
      QuickServerConfig quickServerConfig = new QuickServerConfig();
      quickServerConfig.setApplicationJarPath("");
      quickServerConfig.toXML("bTJKf.kD/iRqJS");
      assertEquals("QuickServer v2.0.0 RC1", quickServerConfig.getName());
  }
}
