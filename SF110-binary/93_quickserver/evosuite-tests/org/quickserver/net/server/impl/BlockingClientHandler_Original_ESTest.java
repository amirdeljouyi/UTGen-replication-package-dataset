/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 10:00:42 GMT 2024
 */

package org.quickserver.net.server.impl;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.nio.channels.SelectionKey;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.DataMode;
import org.quickserver.net.server.DataType;
import org.quickserver.net.server.impl.BlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BlockingClientHandler_Original_ESTest extends BlockingClientHandler_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClean() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
      blockingClientHandler.clean();
      assertEquals("<ClientHandler-Pool#-2353-ID:13>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDataMode() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
      DataType arg1 = DataType.OUT;
      blockingClientHandler.setDataMode((DataMode) null, arg1);
      assertEquals("<ClientHandler-Pool#-2353-ID:9>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRun() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
      blockingClientHandler.run();
      assertEquals("<ClientHandler-Pool#-2353-ID:5>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesBlockingClientHandlerTakingNoArguments0() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      CommandHandler arg0 = new CommandHandler();
      PipedInputStream pipedInputStream = new PipedInputStream();
      blockingClientHandler.in = (InputStream) pipedInputStream;
      blockingClientHandler.setClientEventHandler(arg0);
      blockingClientHandler.connection = true;
      blockingClientHandler.closeConnection();
      assertEquals("<ClientHandler-Pool#-1-ID:75>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesBlockingClientHandlerTakingNoArguments1() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      CommandHandler arg0 = new CommandHandler();
      blockingClientHandler.setClientEventHandler(arg0);
      blockingClientHandler.connection = true;
      blockingClientHandler.closeConnection();
      assertEquals("<ClientHandler-Pool#-1-ID:62>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesBlockingClientHandlerTakingNoArguments2() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      blockingClientHandler.closeConnection();
      assertEquals("<ClientHandler-Pool#-1-ID:53>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInputStream() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      PipedInputStream arg0 = new PipedInputStream();
      DataMode dataMode = DataMode.BINARY;
      blockingClientHandler.dataModeIN = dataMode;
      blockingClientHandler.setInputStream(arg0);
      assertEquals("<ClientHandler-Pool#-1-ID:48>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInputStreamWithNull() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      blockingClientHandler.setInputStream((InputStream) null);
      assertEquals("<ClientHandler-Pool#-1-ID:17>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateInputOutputStreamsThrowsNullPointerException() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      // Undeclared exception!
      try { 
        blockingClientHandler.updateInputOutputStreams();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckReturnClientHandler() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      boolean checkReturnClientHandler = blockingClientHandler.checkReturnClientHandler();
      assertTrue(checkReturnClientHandler);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSocketChannelThrowsIllegalStateException() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      // Undeclared exception!
      try { 
        blockingClientHandler.setSocketChannel((SocketChannel) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't set in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBlockingMode() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
      boolean blockingMode = blockingClientHandler.getBlockingMode();
      assertTrue(blockingMode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSelectionKeyThrowsIllegalStateException() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-453));
      // Undeclared exception!
      try { 
        blockingClientHandler.setSelectionKey((SelectionKey) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't set in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReturnClientHandler() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      blockingClientHandler.returnClientHandler();
      assertEquals((-1), blockingClientHandler.getInstanceCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetClientWriteHandlerThrowsIllegalStateException() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
      // Undeclared exception!
      try { 
        blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't register in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBufferedReader() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
      BufferedReader bufferedReader = blockingClientHandler.getBufferedReader();
      assertNull(bufferedReader);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRegisterForWriteThrowsIllegalStateException() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
      // Undeclared exception!
      try { 
        blockingClientHandler.registerForWrite();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't register in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSocketChannelThrowsIllegalStateException() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      // Undeclared exception!
      try { 
        blockingClientHandler.getSocketChannel();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFinalize() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      blockingClientHandler.finalize();
      assertEquals("<ClientHandler-Pool#-1-ID:3>", blockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectionKeyThrowsIllegalStateException() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
      // Undeclared exception!
      try { 
        blockingClientHandler.getSelectionKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRegisterForReadThrowsIllegalStateException() throws Throwable  {
      BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
      // Undeclared exception!
      try { 
        blockingClientHandler.registerForRead();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't register in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }
}
