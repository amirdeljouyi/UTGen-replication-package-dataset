/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 11:15:40 GMT 2024
 */

package org.quickserver.net.server.impl;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.nio.channels.SelectionKey;
import java.nio.channels.SocketChannel;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.DataMode;
import org.quickserver.net.server.DataType;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NonBlockingClientHandler_Original_ESTest extends NonBlockingClientHandler_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testWaitTillFullyWrittenThrowsNullPointerException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.waitTillFullyWritten();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdateInputOutputStreamsThrowsIllegalArgumentException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536);
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.updateInputOutputStreams();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRegisterWriteThrowsNullPointerException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.registerWrite();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRegisterForReadThrowsNullPointerException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.registerForRead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThreadAccessCountReturningNegative() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.returnThread();
      int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount();
      assertEquals("<ClientHandler-Pool#-1-ID:537>", nonBlockingClientHandler.getName());
      assertEquals((-1), threadAccessCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSelectionKeyThrowsNullPointerException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1521);
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.getSelectionKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClean0() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.clean();
      assertEquals("<ClientHandler-Pool#-1-ID:511>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRegisterForWriteThrowsIllegalStateException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.registerForWrite();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // ClientWriteHandler has not been set!
         //
         verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDataMode0() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      DataType arg1 = DataType.OUT;
      Logger global = Logger.getGlobal();
      nonBlockingClientHandler.appLogger = global;
      DataMode arg0 = DataMode.BYTE;
      nonBlockingClientHandler.setDataMode(arg0, arg1);
      assertEquals("<ClientHandler-Pool#-1-ID:469>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDataModeThrowsNullPointerException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      DataType arg1 = DataType.OUT;
      Logger global = Logger.getGlobal();
      nonBlockingClientHandler.appLogger = global;
      DataMode arg0 = DataMode.OBJECT;
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.setDataMode(arg0, arg1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDataMode1() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      DataType arg1 = DataType.OUT;
      Logger global = Logger.getGlobal();
      nonBlockingClientHandler.appLogger = global;
      QuickServer quickServer = new QuickServer();
      DataMode arg0 = quickServer.getDefaultDataMode(arg1);
      nonBlockingClientHandler.setDataMode(arg0, arg1);
      assertEquals("<ClientHandler-Pool#-1-ID:420>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDataMode2() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      DataType arg1 = DataType.OUT;
      Logger global = Logger.getGlobal();
      nonBlockingClientHandler.appLogger = global;
      DataMode arg0 = DataMode.BINARY;
      nonBlockingClientHandler.setDataMode(arg0, arg1);
      assertEquals("<ClientHandler-Pool#-1-ID:400>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDataModeWithNull() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-1));
      DataType arg1 = DataType.OUT;
      nonBlockingClientHandler.setDataMode((DataMode) null, arg1);
      assertEquals("<ClientHandler-Pool#-1-ID:392>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReturnClientHandler() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.returnThread();
      nonBlockingClientHandler.returnClientHandler();
      assertEquals((-1), nonBlockingClientHandler.getThreadAccessCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckReturnClientHandler() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.checkReturnClientHandler();
      boolean checkReturnClientHandler = nonBlockingClientHandler.checkReturnClientHandler();
      assertEquals("<ClientHandler-Pool#-1-ID:297>", nonBlockingClientHandler.getName());
      assertFalse(checkReturnClientHandler);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesNonBlockingClientHandlerTakingInt() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
      nonBlockingClientHandler.run();
      assertEquals("<ClientHandler-Pool#5-ID:1>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRun() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      ClientEvent arg0 = ClientEvent.RUN_BLOCKING;
      nonBlockingClientHandler.addEvent(arg0);
      nonBlockingClientHandler.run();
      assertTrue(nonBlockingClientHandler.getWillClean());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloseIfSSLOutboundDoneThrowsIllegalStateException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.closeIfSSLOutboundDone();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Client is not in secure mode!
         //
         verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloseIfSSLOutboundDoneThrowsNullPointerException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.setSecure(true);
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.closeIfSSLOutboundDone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloseConnection() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.closeConnection();
      assertEquals("<ClientHandler-Pool#-1-ID:175>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCloseConnectionThrowsNullPointerException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.connection = true;
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInputStreamWithNull() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      DataMode dataMode = DataMode.BYTE;
      nonBlockingClientHandler.dataModeIN = dataMode;
      nonBlockingClientHandler.setInputStream((InputStream) null);
      assertEquals("<ClientHandler-Pool#-1-ID:138>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInputStream() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      DataMode dataMode = DataMode.STRING;
      nonBlockingClientHandler.dataModeIN = dataMode;
      PipedInputStream arg0 = new PipedInputStream();
      nonBlockingClientHandler.setInputStream(arg0);
      assertEquals("<ClientHandler-Pool#-1-ID:131>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClean1() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.threadAccessCount = 53;
      nonBlockingClientHandler.clean();
      assertEquals(0, nonBlockingClientHandler.getThreadAccessCount());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxThreadAccessCountThrowsIllegalArgumentException() throws Throwable  {
      // Undeclared exception!
      try { 
        NonBlockingClientHandler.setMaxThreadAccessCount((-974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value should be >=3 or -1
         //
         verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxThreadAccessCount() throws Throwable  {
      NonBlockingClientHandler.setMaxThreadAccessCount((-1));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxThreadAccessCountWithPositive() throws Throwable  {
      NonBlockingClientHandler.setMaxThreadAccessCount(1485);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSocketChannel() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-1));
      nonBlockingClientHandler.getSocketChannel();
      assertEquals("<ClientHandler-Pool#-1-ID:88>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSelectionKey() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
      assertEquals("<ClientHandler-Pool#-1-ID:82>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBufferedReaderThrowsIllegalStateException() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      // Undeclared exception!
      try { 
        nonBlockingClientHandler.getBufferedReader();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Access to BufferedReader in not allowed in Non-Blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetWakeupSelectorAfterRegisterWrite() throws Throwable  {
      NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetThreadAccessCountReturningZero() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount();
      assertEquals("<ClientHandler-Pool#-1-ID:63>", nonBlockingClientHandler.getName());
      assertEquals(0, threadAccessCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetBlockingMode() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      boolean blockingMode = nonBlockingClientHandler.getBlockingMode();
      assertEquals("<ClientHandler-Pool#-1-ID:57>", nonBlockingClientHandler.getName());
      assertFalse(blockingMode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetWakeupSelectorAfterRegisterRead() throws Throwable  {
      NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetClientWriteHandler() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
      assertEquals("<ClientHandler-Pool#-1-ID:51>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSocketChannel() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-1));
      nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
      assertEquals("<ClientHandler-Pool#-1-ID:46>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWakeupSelectorAfterRegisterWrite() throws Throwable  {
      boolean wakeupSelectorAfterRegisterWrite = NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
      assertTrue(wakeupSelectorAfterRegisterWrite);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitialHandshakeStatus() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      boolean initialHandshakeStatus = nonBlockingClientHandler.getInitialHandshakeStatus();
      assertEquals("<ClientHandler-Pool#-1-ID:31>", nonBlockingClientHandler.getName());
      assertFalse(initialHandshakeStatus);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFinalize() throws Throwable  {
      NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
      nonBlockingClientHandler.finalize();
      assertEquals("<ClientHandler-Pool#-1-ID:1>", nonBlockingClientHandler.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWakeupSelectorAfterRegisterRead() throws Throwable  {
      boolean wakeupSelectorAfterRegisterRead = NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
      assertTrue(wakeupSelectorAfterRegisterRead);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxThreadAccessCount() throws Throwable  {
      int maxThreadAccessCount = NonBlockingClientHandler.getMaxThreadAccessCount();
      assertEquals(5, maxThreadAccessCount);
  }
}
