* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.client.monitoring.HostMonitoringService
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 13994
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:33:50.841 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:33:50.885 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:33:50.900 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:33:50.984 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:33:50.988 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 00:33:50.994 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 00:33:50.997 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 00:33:51.011 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 00:33:51.014 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 00:33:51.016 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 00:33:51.018 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 00:33:51.024 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 00:33:51.038 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 00:33:51.160 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:33:51.163 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.client.monitoring.HostMonitoringService
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 324
* Using seed 1710462826086
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 112 / 324
[Progress:>                             1%] [Cov:=======================>           67%][MASTER] 00:33:54.606 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.quickserver.net.client.monitoring.HostMonitoringService.monitor(ZLjava/lang/String;)V: I224 Branch 15 IF_ICMPEQ L135 - false
[MASTER] 00:33:54.609 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.quickserver.net.client.monitoring.HostMonitoringService.monitor(ZLjava/lang/String;)V: I208 Branch 13 IFNULL L132 - true
[Progress:>                             1%] [Cov:=======================>           67%][Progress:>                             2%] [Cov:========================>          71%][Progress:>                             2%] [Cov:========================>          71%][Progress:>                             2%] [Cov:========================>          71%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:=========================>         72%][Progress:>                             3%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:=========================>         73%][MASTER] 00:33:59.786 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.quickserver.net.client.monitoring.HostMonitoringService.monitor(ZLjava/lang/String;)V: Line 158
[MASTER] 00:33:59.792 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.quickserver.net.client.monitoring.HostMonitoringService.monitor(ZLjava/lang/String;)V: I421 Branch 23 IFNULL L184 - false
[MASTER] 00:33:59.879 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.quickserver.net.client.monitoring.HostMonitoringService.monitor(ZLjava/lang/String;)V: I355 Branch 20 IFNULL L167 - true
[Progress:=>                            4%] [Cov:============================>      80%][Progress:=>                            4%] [Cov:============================>      80%][Progress:=>                            4%] [Cov:============================>      80%][Progress:=>                            4%] [Cov:============================>      80%][Progress:=>                            4%] [Cov:============================>      80%][Progress:=>                            4%] [Cov:=============================>     83%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    88%][Progress:=>                            5%] [Cov:==============================>    88%][Progress:=>                            6%] [Cov:==============================>    88%][Progress:=>                            6%] [Cov:==============================>    88%][Progress:=>                            6%] [Cov:==============================>    88%][Progress:=>                            6%] [Cov:==============================>    88%][Progress:=>                            6%] [Cov:==============================>    88%][Progress:=>                            6%] [Cov:==============================>    88%][Progress:=>                            6%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         14%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         15%] [Cov:===============================>   89%][Progress:====>                         16%] [Cov:===============================>   89%][Progress:====>                         16%] [Cov:===============================>   89%][Progress:====>                         16%] [Cov:===============================>   89%][Progress:====>                         16%] [Cov:===============================>   89%][Progress:====>                         16%] [Cov:===============================>   89%][Progress:====>                         16%] [Cov:===============================>   89%][Progress:====>                         16%] [Cov:===============================>   89%][Progress:====>                         16%] [Cov:===============================>   89%][Progress:=====>                        17%] [Cov:===============================>   89%][Progress:=====>                        17%] [Cov:===============================>   89%][Progress:=====>                        17%] [Cov:===============================>   89%][Progress:=====>                        17%] [Cov:===============================>   89%][Progress:=====>                        17%] [Cov:===============================>   89%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:======>                       20%] [Cov:===============================>   90%][Progress:======>                       20%] [Cov:===============================>   90%][Progress:======>                       20%] [Cov:===============================>   90%][Progress:======>                       20%] [Cov:===============================>   90%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][MASTER] 00:35:11.100 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:============>                 43%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                44%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                45%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:=============>                46%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               47%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               48%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:==============>               49%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              50%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              51%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              52%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:===============>              53%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             54%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             55%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:================>             56%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            57%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            58%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:=================>            59%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           60%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           61%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           62%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:==================>           63%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          64%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          65%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:===================>          66%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         67%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         68%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:====================>         69%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        70%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        71%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        72%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:=====================>        73%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       74%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][MASTER] 00:36:36.486 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%]
* Search finished after 202s and 966 generations, 439641 statements, best individual has fitness: 26.0
* Generated before the refinement 22 tests with total length 123
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
test data is: HostMonitoringService.monitor(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor(true);
    }
}
statement is: HostMonitoringService.monitor(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
TestCase is: boolean _boolean = true;
HostMonitoringService.monitor(_boolean);

statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
test data is: HostMonitoringService.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.getSize(new Host("example.com", 80, "HTTP"));
    }
}
statement is: HostMonitoringService.getSize(new Host("example.com", 80, "HTTP")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.getSize(new Host("example.com", 80, "HTTP")) target is: HostMonitoringService method is: getSize(Host)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService("192.168.0.1", "my-host");
        HostMonitoringService.add(hostMonitoringService);
        HostMonitoringService.add(hostMonitoringService);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService("192.168.0.1", "my-host"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostMonitoringService) target is: HostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostMonitoringService) target is: HostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);

statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove((HostMonitoringService) null)
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove((HostMonitoringService) null)
test data is: HostMonitoringService.monitor(true);
HostMonitoringService.remove((HostMonitoringService) null);
HostMonitoringService.remove((HostMonitoringService) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor(true);
        HostMonitoringService.remove(((HostMonitoringService) ("A")));
        HostMonitoringService.remove(((HostMonitoringService) ("B")));
        HostMonitoringService.remove(((HostMonitoringService) (null)));
        HostMonitoringService.remove(((HostMonitoringService) ("C")));
        HostMonitoringService.remove(((HostMonitoringService) ("D")));
    }
}
statement is: HostMonitoringService.monitor(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
statement is: HostMonitoringService.remove(((HostMonitoringService) ("A"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.remove(((HostMonitoringService) ("A"))) target is: HostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
statement is: HostMonitoringService.remove(((HostMonitoringService) ("B"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.remove(((HostMonitoringService) ("B"))) target is: HostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
statement is: HostMonitoringService.remove(((HostMonitoringService) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.remove(((HostMonitoringService) (null))) target is: HostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.remove(((HostMonitoringService) ("C"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.remove(((HostMonitoringService) ("C"))) target is: HostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
statement is: HostMonitoringService.remove(((HostMonitoringService) ("D"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.remove(((HostMonitoringService) ("D"))) target is: HostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
TestCase is: boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
String string = "A";
HostMonitoringService.remove((HostMonitoringService) string);
String string = "B";
HostMonitoringService.remove((HostMonitoringService) string);
String string = null;
HostMonitoringService.remove((HostMonitoringService) string);
String string = "C";
HostMonitoringService.remove((HostMonitoringService) string);
String string = "D";
HostMonitoringService.remove((HostMonitoringService) string);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner((HostStateListener) null)
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner((HostStateListener) null)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.addHostStateListner((HostStateListener) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.addHostStateListener(((HostStateListener) (null)));
        hostMonitoringService.addHostStateListener(((HostStateListener) (null)));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.addHostStateListener(((HostStateListener) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListener(((HostStateListener) (null))) target is: hostMonitoringService method is: addHostStateListener(HostStateListener)
statement is: hostMonitoringService.addHostStateListener(((HostStateListener) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListener(((HostStateListener) (null))) target is: hostMonitoringService method is: addHostStateListener(HostStateListener)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private final List<String> hosts;

    public  HostMonitoringService(List<String> hosts) {
        this.hosts = hosts;
    }

    public LocalDateTime getNextCheckOn() {
        return LocalDateTime.of(2023, 4, 15, 10, 30);
    }
}
statement is: this.hosts = hosts, class spoon.support.reflect.code.CtAssignmentImpl
statement is: return LocalDateTime.of(2023, 4, 15, 10, 30), class spoon.support.reflect.code.CtReturnImpl
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getIntervalInSec();
        // Test data
        int intervalInSec = 30;
        String hostName = "example.com";
        boolean isConnected = true;
        // Expected output
        assertEquals(intervalInSec, hostMonitoringService.getIntervalInSec());
        assertEquals(hostName, hostMonitoringService.getHostName());
        assertTrue(isConnected == hostMonitoringService.isConnected());
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getIntervalInSec()I
statement is: // Test data
int intervalInSec = 30, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostName = "example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isConnected = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Expected output
assertEquals(intervalInSec, hostMonitoringService.getIntervalInSec()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Expected output
assertEquals(intervalInSec, hostMonitoringService.getIntervalInSec()) target is:  method is: assertEquals(int,<unknown>)
statement is: assertEquals(hostName, hostMonitoringService.getHostName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(hostName, hostMonitoringService.getHostName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertTrue(isConnected == hostMonitoringService.isConnected()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(isConnected == hostMonitoringService.isConnected()) target is:  method is: assertTrue(<unknown>)
* this is vulnerable: int _int = 30
* this is vulnerable: String string = "example.com"
* this is vulnerable: boolean _boolean = true
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();
int _int = 30;
String string = "example.com";
boolean _boolean = true;

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getHostList();
        // Improved test data
        int[] hostIds = new int[]{ 1, 2, 3, 4, 5 };
        String[] hostNames = new String[]{ "HostA", "HostB", "HostC", "HostD", "HostE" };
        Map<Integer, String> hostIdNameMap = new HashMap<>();
        for (int i = 0; i < hostIds.length; i++) {
            hostIdNameMap.put(hostIds[i], hostNames[i]);
        }
        hostMonitoringService.setHostIdNameMap(hostIdNameMap);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getHostList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostList() target is: hostMonitoringService method is: getHostList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getHostList()Lorg/quickserver/net/client/HostList;
statement is: // Improved test data
int[] hostIds = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] hostNames = new String[]{ "HostA", "HostB", "HostC", "HostD", "HostE" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: Map<Integer, String> hostIdNameMap = new HashMap<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: for (int i = 0; i < hostIds.length; i++) {
    hostIdNameMap.put(hostIds[i], hostNames[i]);
}, class spoon.support.reflect.code.CtForImpl
statement is: hostMonitoringService.setHostIdNameMap(hostIdNameMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostIdNameMap(hostIdNameMap) target is: hostMonitoringService method is: setHostIdNameMap(Map)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date lastCheckedOn = hostMonitoringService.getLastCheckedOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        // Improved test data: using a more descriptive value for lastCheckedOn
        hostMonitoringService.getLastCheckedOn(LocalDateTime.of(2019, 4, 1, 10, 30));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data: using a more descriptive value for lastCheckedOn
hostMonitoringService.getLastCheckedOn(LocalDateTime.of(2019, 4, 1, 10, 30)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data: using a more descriptive value for lastCheckedOn
hostMonitoringService.getLastCheckedOn(LocalDateTime.of(2019, 4, 1, 10, 30)) target is: hostMonitoringService method is: getLastCheckedOn()
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();

statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, (String) null)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, (String) null)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, "*N&we")
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, (String) null)
statement is: setCurrentTimeMillis(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: System.setCurrentTimeMillis(0L)
statement is: setCurrentTimeMillis(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: System.setCurrentTimeMillis(0L)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom(6)
statement is: setCurrentTimeMillis(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: System.setCurrentTimeMillis(6)
statement is: setCurrentTimeMillis(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: System.setCurrentTimeMillis(6)
statement is: setCurrentTimeMillis(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: System.setCurrentTimeMillis(259L)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService.monitor(true, (String) null);
HostMonitoringService.monitor(true, (String) null);
HostMonitoringService.monitor(false, "*N&we");
HostMonitoringService.monitor(false, (String) null);
System.setCurrentTimeMillis(0L);
System.setCurrentTimeMillis(0L);
HostMonitoringService.getSize();
Random.setNextRandom(6);
System.setCurrentTimeMillis(6);
System.setCurrentTimeMillis(6);
System.setCurrentTimeMillis(259L);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        HostMonitoringService.monitor(true, "Server1");
        HostMonitoringService.monitor(true, "Server2");
        HostMonitoringService.monitor(false, "*N&we");
        HostMonitoringService.monitor(false, "Server3");
        System.setCurrentTimeMillis(0L);
        System.setCurrentTimeMillis(1598467200000L);// 2020-08-20T00:00:00Z

        HostMonitoringService.getSize();
        Random.setNextRandom(3);
        System.setCurrentTimeMillis(3);
        System.setCurrentTimeMillis(6);
        System.setCurrentTimeMillis(259L);
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getListnersList();
    }
}
statement is: // Improved test data
HostMonitoringService.monitor(true, "Server1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
HostMonitoringService.monitor(true, "Server1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: HostMonitoringService.monitor(true, "Server2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "Server2") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: HostMonitoringService.monitor(false, "*N&we"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "*N&we") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: HostMonitoringService.monitor(false, "Server3"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "Server3") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: System.setCurrentTimeMillis(0L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.setCurrentTimeMillis(0L) target is: System method is: setCurrentTimeMillis(long)
Matched Method is: setCurrentTimeMillis(J)V
statement is: System.setCurrentTimeMillis(1598467200000L)// 2020-08-20T00:00:00Z
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.setCurrentTimeMillis(1598467200000L)// 2020-08-20T00:00:00Z
 target is: System method is: setCurrentTimeMillis(long)
Matched Method is: setCurrentTimeMillis(J)V
statement is: HostMonitoringService.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.getSize() target is: HostMonitoringService method is: getSize()
Matched Method is: getSize()I
statement is: Random.setNextRandom(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(3) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
statement is: System.setCurrentTimeMillis(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.setCurrentTimeMillis(3) target is: System method is: setCurrentTimeMillis(int)
Matched Method is: setCurrentTimeMillis(J)V
statement is: System.setCurrentTimeMillis(6), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.setCurrentTimeMillis(6) target is: System method is: setCurrentTimeMillis(int)
Matched Method is: setCurrentTimeMillis(J)V
statement is: System.setCurrentTimeMillis(259L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.setCurrentTimeMillis(259L) target is: System method is: setCurrentTimeMillis(long)
Matched Method is: setCurrentTimeMillis(J)V
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 11, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 25
Matched Method is: getListnersList()Ljava/util/List;
TestCase is: boolean _boolean = true;
String string = "Server1";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = true;
String string = "Server2";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = false;
String string = "*N&we";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = false;
String string = "Server3";
HostMonitoringService.monitor(_boolean, string);
long _long = 0L;
System.setCurrentTimeMillis(_long);
long _long = 1598467200000L;
System.setCurrentTimeMillis(_long);
HostMonitoringService.getSize();
int _int = 3;
Random.setNextRandom(_int);
int _int = 3;
System.setCurrentTimeMillis(_int);
int _int = 6;
System.setCurrentTimeMillis(_int);
long _long = 259L;
System.setCurrentTimeMillis(_long);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
((HostMonitoringService) _void).getListnersList();

statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"")
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("*=+$FTSW,X;*M0/\"")
statement is: org.quickserver.net.client.monitoring.impl.SocketMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.SocketMonitor
statement code is: SocketMonitor socketMonitor = new SocketMonitor()
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: addDefault(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.addDefault(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, 6158, (List) arg3)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, (String) null)
test data is: HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"");
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("*=+$FTSW,X;*M0/\"");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, 6158, (List) linkedList);
HostMonitoringService.monitor(false, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostList hostList = new HostList("192.168.0.1", "example.com");
        SocketMonitor socketMonitor = new SocketMonitor();
        Host host = new Host("192.168.0.1", "example.com");
        hostList.addDefault(host);
        LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
        HostMonitoringService.add(hostList, ((HostMonitor) (socketMonitor)), 6158, ((List) (linkedList)));
        HostMonitoringService.monitor(false, ((String) (null)));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostList hostList = new HostList("192.168.0.1", "example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SocketMonitor socketMonitor = new SocketMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host("192.168.0.1", "example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.addDefault(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addDefault(host) target is: hostList method is: addDefault(Host)
statement is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (socketMonitor)), 6158, ((List) (linkedList))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (socketMonitor)), 6158, ((List) (linkedList))) target is: HostMonitoringService method is: add(HostList,HostMonitor,int,List)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: HostMonitoringService.monitor(false, ((String) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, ((String) (null))) target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
int _int = 6158;
LinkedList<HostMonitoringService> linkedList = null;
HostMonitoringService.add((HostList) socketMonitor, (HostMonitor) _int, linkedList, (List) linkedList);
boolean _boolean = false;
String string = null;
HostMonitoringService.monitor(_boolean, string);

statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"")
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("")
statement is: org.quickserver.net.client.monitoring.impl.SocketMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.SocketMonitor
statement code is: SocketMonitor socketMonitor = new SocketMonitor()
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, (-47), (List) arg3)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: Iterator<HostMonitoringService> iterator = linkedList.iterator()
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: org.quickserver.net.client.monitoring.impl.HttpMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.HttpMonitor
statement code is: HttpMonitor httpMonitor = new HttpMonitor()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, 2158, (List) arg3)
statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(";new status:")
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, (String) null)
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: clear()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.clear()
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.monitoring.impl.HttpMonitor
statement code is: HttpMonitor hostMonitor = (HttpMonitor)hostMonitoringService.getHostMonitor()
statement is: org.quickserver.net.client.monitoring.impl.UDPMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.UDPMonitor
statement code is: UDPMonitor uDPMonitor = new UDPMonitor()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, 6158, (List) arg3)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
test data is: HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"");
HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, (-47), (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
linkedList.iterator();
hostMonitoringService.setListnersList(linkedList);
HttpMonitor httpMonitor = new HttpMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, 2158, (List) linkedList);
HostMonitoringService.monitor(";new status:");
HostMonitoringService.monitor(true, (String) null);
hostMonitoringService.setHostMonitor(httpMonitor);
HostMonitoringService.clear();
hostMonitoringService.getHostMonitor();
UDPMonitor uDPMonitor = new UDPMonitor();
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, 6158, (List) linkedList);
HostMonitoringService.getSize();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
HostMonitoringService.monitor(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Carefully
        review the;
        snippet.@Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your improved;
    }
}
statement is: @Carefully
review the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("un")
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList(arg0)
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("un");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostList hostList = new HostList("un");
        hostMonitoringService.setHostList(hostList);
        // Add some additional hosts to the list
        hostList.addHost("host1", "192.168.1.100");
        hostList.addHost("host2", "192.168.1.101");
        hostList.addHost("host3", "192.168.1.102");
        // Set the host status to online for all hosts
        for (Host host : hostList) {
            host.setStatus(ONLINE);
        }
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostList hostList = new HostList("un"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostList(hostList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostList(hostList) target is: hostMonitoringService method is: setHostList(HostList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostList(Lorg/quickserver/net/client/HostList;)V
statement is: // Add some additional hosts to the list
hostList.addHost("host1", "192.168.1.100"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add some additional hosts to the list
hostList.addHost("host1", "192.168.1.100") target is: hostList method is: addHost(java.lang.String,java.lang.String)
statement is: hostList.addHost("host2", "192.168.1.101"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addHost("host2", "192.168.1.101") target is: hostList method is: addHost(java.lang.String,java.lang.String)
statement is: hostList.addHost("host3", "192.168.1.102"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addHost("host3", "192.168.1.102") target is: hostList method is: addHost(java.lang.String,java.lang.String)
statement is: // Set the host status to online for all hosts
for (Host host : hostList) {
    host.setStatus(ONLINE);
}, class spoon.support.reflect.code.CtForEachImpl
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "un";
HostList hostList = new HostList(string);
hostMonitoringService.setHostList(hostList);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec((-5))
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-5));
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setIntervalInSec(10);// 10 seconds

        hostMonitoringService.getIntervalInSec();
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setIntervalInSec(30);// 30 seconds

        hostMonitoringService.getIntervalInSec();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setIntervalInSec(10)// 10 seconds
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(10)// 10 seconds
 target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getIntervalInSec()I
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setIntervalInSec(30)// 30 seconds
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(30)// 30 seconds
 target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 4
Matched Method is: setIntervalInSec(I)V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 4
Matched Method is: getIntervalInSec()I
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 10;
hostMonitoringService.setIntervalInSec(_int);
hostMonitoringService.getIntervalInSec();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 30;
hostMonitoringService.setIntervalInSec(_int);
hostMonitoringService.getIntervalInSec();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec(1)
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(1);
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setIntervalInSec(60);// Changed to a more descriptive value, 60 seconds instead of 1 second

        hostMonitoringService.getIntervalInSec();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setIntervalInSec(60)// Changed to a more descriptive value, 60 seconds instead of 1 second
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(60)// Changed to a more descriptive value, 60 seconds instead of 1 second
 target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getIntervalInSec()I
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 60;
hostMonitoringService.setIntervalInSec(_int);
hostMonitoringService.getIntervalInSec();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: setLastCheckedOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setLastCheckedOn(arg0)
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate lastCheckedOn = (MockDate)hostMonitoringService.getLastCheckedOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate();
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        MockDate mockDate = new MockDate("2023-03-14T13:37:42Z");
        hostMonitoringService.setLastCheckedOn(mockDate);
        hostMonitoringService.getLastCheckedOn();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockDate mockDate = new MockDate("2023-03-14T13:37:42Z"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setLastCheckedOn(mockDate), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setLastCheckedOn(mockDate) target is: hostMonitoringService method is: setLastCheckedOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setLastCheckedOn(Ljava/util/Date;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.getLastCheckedOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getLastCheckedOn() target is: hostMonitoringService method is: getLastCheckedOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getLastCheckedOn()Ljava/util/Date;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = null;
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: mock(interface org.quickserver.net.client.monitoring.HostStateListener) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.quickserver.net.client.monitoring.HostStateListener
statement code is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer())
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner(arg0)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListener);
        hostMonitoringService.getListnersList();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListener) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
        hostMonitoringService.setListnersList(linkedList);
        hostMonitoringService.getListnersList();
        // Improved test data
        int[] intArray = new int[]{ 1, 2, 3 };
        double[] doubleArray = new double[]{ 1.0, 2.0, 3.0 };
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        char[] charArray = new char[]{ 'a', 'b', 'c' };
        linkedList.add(new HostMonitoringService("host1", intArray, doubleArray, stringArray, charArray));
        linkedList.add(new HostMonitoringService("host2", intArray, doubleArray, stringArray, charArray));
        linkedList.add(new HostMonitoringService("host3", intArray, doubleArray, stringArray, charArray));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setListnersList(linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setListnersList(linkedList) target is: hostMonitoringService method is: setListnersList(LinkedList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setListnersList(Ljava/util/List;)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
statement is: // Improved test data
int[] intArray = new int[]{ 1, 2, 3 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] doubleArray = new double[]{ 1.0, 2.0, 3.0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] charArray = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: linkedList.add(new HostMonitoringService("host1", intArray, doubleArray, stringArray, charArray)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(new HostMonitoringService("host1", intArray, doubleArray, stringArray, charArray)) target is: linkedList method is: add(HostMonitoringService)
statement is: linkedList.add(new HostMonitoringService("host2", intArray, doubleArray, stringArray, charArray)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(new HostMonitoringService("host2", intArray, doubleArray, stringArray, charArray)) target is: linkedList method is: add(HostMonitoringService)
statement is: linkedList.add(new HostMonitoringService("host3", intArray, doubleArray, stringArray, charArray)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(new HostMonitoringService("host3", intArray, doubleArray, stringArray, charArray)) target is: linkedList method is: add(HostMonitoringService)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(2662L)
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setNextCheckOn(arg0)
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate nextCheckOn = (MockDate)hostMonitoringService.getNextCheckOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(2662L);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        MockDate mockDate = new MockDate(1609459200L);// Saturday, 1st of January 2021

        hostMonitoringService.setNextCheckOn(mockDate);
        hostMonitoringService.getNextCheckOn();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockDate mockDate = new MockDate(1609459200L)// Saturday, 1st of January 2021
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setNextCheckOn(mockDate), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setNextCheckOn(mockDate) target is: hostMonitoringService method is: setNextCheckOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getNextCheckOn()Ljava/util/Date;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
long _long = 1609459200L;
MockDate mockDate = new MockDate(_long);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor("")
test data is: HostMonitoringService.monitor("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor("Server1");
        HostMonitoringService.monitor("Server2");
        HostMonitoringService.monitor("Server3");
    }
}
statement is: HostMonitoringService.monitor("Server1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("Server1") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Ljava/lang/String;)V
statement is: HostMonitoringService.monitor("Server2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("Server2") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Ljava/lang/String;)V
statement is: HostMonitoringService.monitor("Server3"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("Server3") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Ljava/lang/String;)V
TestCase is: String string = "Server1";
HostMonitoringService.monitor(string);
String string = "Server2";
HostMonitoringService.monitor(string);
String string = "Server3";
HostMonitoringService.monitor(string);

statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("(")
statement is: org.quickserver.net.client.monitoring.impl.SocketMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.SocketMonitor
statement code is: SocketMonitor socketMonitor = new SocketMonitor()
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: setStatus(C)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setStatus('M')
statement is: addDefault(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.addDefault(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add(arg0)
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, (-47), (List) arg3)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: org.quickserver.net.client.monitoring.impl.HttpMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.HttpMonitor
statement code is: HttpMonitor httpMonitor = new HttpMonitor()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add(arg0)
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, 65, (List) arg3)
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
test data is: HostList hostList = new HostList("(");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
host.setStatus('M');
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
linkedList.add(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, (-47), (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
linkedList.add(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, 65, (List) linkedList);
HostMonitoringService.monitor(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostList hostList = new HostList("my-host");
        SocketMonitor socketMonitor = new SocketMonitor();
        Host host = new Host();
        host.setStatus('M');
        hostList.addDefault(host);
        LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
        HostMonitoringService hostMonitoringService = new HostMonitoringService("my-service", socketMonitor, -47);
        linkedList.add(hostMonitoringService);
        HostMonitoringService.add(hostList, ((HostMonitor) (socketMonitor)), -47, ((List) (linkedList)));
        LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
        HttpMonitor httpMonitor = new HttpMonitor();
        HostMonitoringService hostMonitoringService = new HostMonitoringService("my-service", httpMonitor, 65);
        linkedList.add(hostMonitoringService);
        HostMonitoringService.add(hostList, ((HostMonitor) (socketMonitor)), 65, ((List) (linkedList)));
        HostMonitoringService.monitor(true);
    }
}
statement is: HostList hostList = new HostList("my-host"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SocketMonitor socketMonitor = new SocketMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: host.setStatus('M'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setStatus('M') target is: host method is: setStatus(char)
source statement: org.quickserver.net.client.Host()V callee: VariableReference: Statement 2, type org.quickserver.net.client.Hostindex is: 3
Matched Method is: setStatus(C)V
statement is: hostList.addDefault(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addDefault(host) target is: hostList method is: addDefault(Host)
source statement: org.quickserver.net.client.HostList(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.quickserver.net.client.HostListindex is: 1
Matched Method is: addDefault(Lorg/quickserver/net/client/Host;)V
statement is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService("my-service", socketMonitor, -47), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(hostMonitoringService) target is: linkedList method is: add(HostMonitoringService)
source statement: java.util.LinkedList()V callee: VariableReference: Statement 5, type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>index is: 7
Matched Method is: add(Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (socketMonitor)), -47, ((List) (linkedList))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (socketMonitor)), -47, ((List) (linkedList))) target is: HostMonitoringService method is: add(HostList,HostMonitor,int,List)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HttpMonitor httpMonitor = new HttpMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService("my-service", httpMonitor, 65), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(hostMonitoringService) target is: linkedList method is: add(HostMonitoringService)
source statement: java.util.LinkedList()V callee: VariableReference: Statement 5, type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>index is: 12
Matched Method is: add(Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (socketMonitor)), 65, ((List) (linkedList))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (socketMonitor)), 65, ((List) (linkedList))) target is: HostMonitoringService method is: add(HostList,HostMonitor,int,List)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
statement is: HostMonitoringService.monitor(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
TestCase is: String string = "my-host";
HostList hostList = new HostList(string);
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
char _char = 'M';
((Host) socketMonitor).setStatus(_char);
((HostList) string).addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService hostMonitoringService = null;
((LinkedList) _void).add(hostMonitoringService);
LinkedList<HostMonitoringService> linkedList = null;
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, linkedList, (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = null;
((LinkedList) _void).add(hostMonitoringService);
int _int = 65;
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, _int, (List) linkedList);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("(")
statement is: org.quickserver.net.client.monitoring.impl.SocketMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.SocketMonitor
statement code is: SocketMonitor socketMonitor = new SocketMonitor()
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: setStatus(C)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setStatus('S')
statement is: addDefault(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.addDefault(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: org.quickserver.net.client.monitoring.impl.PingMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor pingMonitor = new PingMonitor()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, 1028, (List) arg3)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: org.quickserver.net.client.monitoring.impl.HttpMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.HttpMonitor
statement code is: HttpMonitor httpMonitor = new HttpMonitor()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.quickserver.net.client.monitoring.HostMonitor
statement code is: HostMonitor hostMonitor = hostMonitoringService.getHostMonitor()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) null, 1028, (List) arg3)
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("(");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
host.setStatus('S');
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
PingMonitor pingMonitor = new PingMonitor();
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, 1028, (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
HostMonitoringService.add(hostList, (HostMonitor) null, 1028, (List) linkedList);
HostMonitoringService.monitor(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostList hostList = new HostList("www.example1.com", "8.8.8.8", 1024);
        SocketMonitor socketMonitor = new SocketMonitor();
        Host host = new Host("www.example2.com", "192.168.0.1", 1025, 'S');
        hostList.addDefault(host);
        LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
        PingMonitor pingMonitor = new PingMonitor();
        HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), 1028, ((List) (linkedList)));
        LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
        HttpMonitor httpMonitor = new HttpMonitor();
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getHostMonitor();
        HostMonitoringService.add(hostList, ((HostMonitor) (null)), 1028, ((List) (linkedList)));
        HostMonitoringService.monitor(false);
    }
}
statement is: // Improved test data
HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostList hostList = new HostList("www.example1.com", "8.8.8.8", 1024), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SocketMonitor socketMonitor = new SocketMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host("www.example2.com", "192.168.0.1", 1025, 'S'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.addDefault(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addDefault(host) target is: hostList method is: addDefault(Host)
statement is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PingMonitor pingMonitor = new PingMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), 1028, ((List) (linkedList))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), 1028, ((List) (linkedList))) target is: HostMonitoringService method is: add(HostList,HostMonitor,int,List)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HttpMonitor httpMonitor = new HttpMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getHostMonitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostMonitor() target is: hostMonitoringService method is: getHostMonitor()
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (null)), 1028, ((List) (linkedList))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (null)), 1028, ((List) (linkedList))) target is: HostMonitoringService method is: add(HostList,HostMonitor,int,List)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: HostMonitoringService.monitor(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
PingMonitor pingMonitor = new PingMonitor();
int _int = 1028;
LinkedList<HostMonitoringService> linkedList = null;
HostMonitoringService.add((HostList) pingMonitor, (HostMonitor) _int, linkedList, (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 1028;
LinkedList<HostMonitoringService> linkedList = null;
LinkedList<HostMonitoringService> linkedList = null;
HostMonitoringService.add((HostList) _int, linkedList, linkedList, (List) linkedList);
boolean _boolean = false;
HostMonitoringService.monitor(_boolean);

* test suite isTestSuite: 41
Test 0: 
HostMonitoringService.monitor(false);
Test 1: 
HostMonitoringService.getSize();
Test 2: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 3: 
HostMonitoringService.monitor(true);
HostMonitoringService.remove((HostMonitoringService) null);
HostMonitoringService.remove((HostMonitoringService) null);
Test 4: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.addHostStateListner((HostStateListener) null);
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
Test 6: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();
Test 7: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 8: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
Test 9: 
HostMonitoringService.monitor(true, (String) null);
HostMonitoringService.monitor(true, (String) null);
HostMonitoringService.monitor(false, "*N&we");
HostMonitoringService.monitor(false, (String) null);
System.setCurrentTimeMillis(0L);
System.setCurrentTimeMillis(0L);
HostMonitoringService.getSize();
Random.setNextRandom(6);
System.setCurrentTimeMillis(6);
System.setCurrentTimeMillis(6);
System.setCurrentTimeMillis(259L);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
Test 10: 
HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"");
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("*=+$FTSW,X;*M0/\"");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, 6158, (List) linkedList);
HostMonitoringService.monitor(false, (String) null);
Test 11: 
HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"");
HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, (-47), (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
linkedList.iterator();
hostMonitoringService.setListnersList(linkedList);
HttpMonitor httpMonitor = new HttpMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, 2158, (List) linkedList);
HostMonitoringService.monitor(";new status:");
HostMonitoringService.monitor(true, (String) null);
hostMonitoringService.setHostMonitor(httpMonitor);
HostMonitoringService.clear();
hostMonitoringService.getHostMonitor();
UDPMonitor uDPMonitor = new UDPMonitor();
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, 6158, (List) linkedList);
HostMonitoringService.getSize();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
HostMonitoringService.monitor(false);
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("un");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-5));
hostMonitoringService.getIntervalInSec();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(1);
hostMonitoringService.getIntervalInSec();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate();
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 18: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(2662L);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 19: 
HostMonitoringService.monitor("");
Test 20: 
HostList hostList = new HostList("(");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
host.setStatus('M');
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
linkedList.add(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, (-47), (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
linkedList.add(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, 65, (List) linkedList);
HostMonitoringService.monitor(true);
Test 21: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("(");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
host.setStatus('S');
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
PingMonitor pingMonitor = new PingMonitor();
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, 1028, (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
HostMonitoringService.add(hostList, (HostMonitor) null, 1028, (List) linkedList);
HostMonitoringService.monitor(false);
Test 22: 
HostMonitoringService.monitor(true);

Test 23: 
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);

Test 24: 
HostMonitoringService.monitor(true);
HostMonitoringService.remove((HostMonitoringService) "A");
String string = "B";
HostMonitoringService.remove((HostMonitoringService) string);
String string = null;
HostMonitoringService.remove((HostMonitoringService) string);
String string = "C";
HostMonitoringService.remove((HostMonitoringService) string);
String string = "D";
HostMonitoringService.remove((HostMonitoringService) string);

Test 25: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 26: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();

Test 27: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

Test 28: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 29: 
HostMonitoringService.monitor(true, "Server1");
HostMonitoringService.monitor(true, "Server2");
HostMonitoringService.monitor(false, "*N&we");
HostMonitoringService.monitor(false, "Server3");
System.setCurrentTimeMillis(0L);
System.setCurrentTimeMillis(1598467200000L);
HostMonitoringService.getSize();
Random.setNextRandom(3);
System.setCurrentTimeMillis(3);
System.setCurrentTimeMillis(6);
System.setCurrentTimeMillis(259L);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
((HostMonitoringService)null).getListnersList();

Test 30: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.add((HostList) socketMonitor, (HostMonitor) 6158, linkedList, (List) null);
boolean _boolean = false;
String string = null;
HostMonitoringService.monitor(_boolean, string);

Test 31: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("un");
hostMonitoringService.setHostList(hostList);

Test 32: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(10);
hostMonitoringService.getIntervalInSec();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(30);
hostMonitoringService.getIntervalInSec();

Test 33: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(60);
hostMonitoringService.getIntervalInSec();

Test 34: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setLastCheckedOn((Date) null);
hostMonitoringService.getLastCheckedOn();

Test 35: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

Test 36: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

Test 37: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(1609459200L);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

Test 38: 
HostMonitoringService.monitor("Server1");
HostMonitoringService.monitor("Server2");
HostMonitoringService.monitor("Server3");

Test 39: 
String string = "my-host";
HostList hostList = new HostList("my-host");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
((Host) socketMonitor).setStatus('M');
((HostList) string).addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService hostMonitoringService = null;
((LinkedList) _void).add(hostMonitoringService);
LinkedList<HostMonitoringService> linkedList = null;
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, linkedList, (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = null;
((LinkedList) _void).add(hostMonitoringService);
int _int = 65;
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, _int, (List) linkedList);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);

Test 40: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
PingMonitor pingMonitor = new PingMonitor();
HostMonitoringService.add((HostList) pingMonitor, (HostMonitor) 1028, linkedList, (List) null);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 1028;
LinkedList<HostMonitoringService> linkedList = null;
LinkedList<HostMonitoringService> linkedList = null;
HostMonitoringService.add((HostList) _int, linkedList, linkedList, (List) linkedList);
boolean _boolean = false;
HostMonitoringService.monitor(_boolean);


* Generated after the refinement and before minimization 41 tests with total length 225
* test suite isTestSuite: 41
Test 0: 
HostMonitoringService.monitor(false);
Test 1: 
HostMonitoringService.getSize();
Test 2: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 3: 
HostMonitoringService.monitor(true);
HostMonitoringService.remove((HostMonitoringService) null);
HostMonitoringService.remove((HostMonitoringService) null);
Test 4: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.addHostStateListner((HostStateListener) null);
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
Test 6: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();
Test 7: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 8: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
Test 9: 
HostMonitoringService.monitor(true, (String) null);
HostMonitoringService.monitor(true, (String) null);
HostMonitoringService.monitor(false, "*N&we");
HostMonitoringService.monitor(false, (String) null);
System.setCurrentTimeMillis(0L);
System.setCurrentTimeMillis(0L);
HostMonitoringService.getSize();
Random.setNextRandom(6);
System.setCurrentTimeMillis(6);
System.setCurrentTimeMillis(6);
System.setCurrentTimeMillis(259L);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
Test 10: 
HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"");
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("*=+$FTSW,X;*M0/\"");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, 6158, (List) linkedList);
HostMonitoringService.monitor(false, (String) null);
Test 11: 
HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"");
HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, (-47), (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
linkedList.iterator();
hostMonitoringService.setListnersList(linkedList);
HttpMonitor httpMonitor = new HttpMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, 2158, (List) linkedList);
HostMonitoringService.monitor(";new status:");
HostMonitoringService.monitor(true, (String) null);
hostMonitoringService.setHostMonitor(httpMonitor);
HostMonitoringService.clear();
hostMonitoringService.getHostMonitor();
UDPMonitor uDPMonitor = new UDPMonitor();
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, 6158, (List) linkedList);
HostMonitoringService.getSize();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
HostMonitoringService.monitor(false);
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("un");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-5));
hostMonitoringService.getIntervalInSec();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(1);
hostMonitoringService.getIntervalInSec();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate();
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 18: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(2662L);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 19: 
HostMonitoringService.monitor("");
Test 20: 
HostList hostList = new HostList("(");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
host.setStatus('M');
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
linkedList.add(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, (-47), (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
linkedList.add(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, 65, (List) linkedList);
HostMonitoringService.monitor(true);
Test 21: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("(");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
host.setStatus('S');
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
PingMonitor pingMonitor = new PingMonitor();
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, 1028, (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
HostMonitoringService.add(hostList, (HostMonitor) null, 1028, (List) linkedList);
HostMonitoringService.monitor(false);
Test 22: 
HostMonitoringService.monitor(true);

Test 23: 
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);

Test 24: 
HostMonitoringService.monitor(true);
HostMonitoringService.remove((HostMonitoringService) "A");
String string = "B";
HostMonitoringService.remove((HostMonitoringService) string);
String string = null;
HostMonitoringService.remove((HostMonitoringService) string);
String string = "C";
HostMonitoringService.remove((HostMonitoringService) string);
String string = "D";
HostMonitoringService.remove((HostMonitoringService) string);

Test 25: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 26: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();

Test 27: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

Test 28: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 29: 
HostMonitoringService.monitor(true, "Server1");
HostMonitoringService.monitor(true, "Server2");
HostMonitoringService.monitor(false, "*N&we");
HostMonitoringService.monitor(false, "Server3");
System.setCurrentTimeMillis(0L);
System.setCurrentTimeMillis(1598467200000L);
HostMonitoringService.getSize();
Random.setNextRandom(3);
System.setCurrentTimeMillis(3);
System.setCurrentTimeMillis(6);
System.setCurrentTimeMillis(259L);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
((HostMonitoringService)null).getListnersList();

Test 30: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.add((HostList) socketMonitor, (HostMonitor) 6158, linkedList, (List) null);
boolean _boolean = false;
String string = null;
HostMonitoringService.monitor(_boolean, string);

Test 31: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("un");
hostMonitoringService.setHostList(hostList);

Test 32: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(10);
hostMonitoringService.getIntervalInSec();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(30);
hostMonitoringService.getIntervalInSec();

Test 33: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(60);
hostMonitoringService.getIntervalInSec();

Test 34: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setLastCheckedOn((Date) null);
hostMonitoringService.getLastCheckedOn();

Test 35: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

Test 36: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

Test 37: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(1609459200L);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

Test 38: 
HostMonitoringService.monitor("Server1");
HostMonitoringService.monitor("Server2");
HostMonitoringService.monitor("Server3");

Test 39: 
String string = "my-host";
HostList hostList = new HostList("my-host");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
((Host) socketMonitor).setStatus('M');
((HostList) string).addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService hostMonitoringService = null;
((LinkedList) _void).add(hostMonitoringService);
LinkedList<HostMonitoringService> linkedList = null;
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, linkedList, (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = null;
((LinkedList) _void).add(hostMonitoringService);
int _int = 65;
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, _int, (List) linkedList);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);

Test 40: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
PingMonitor pingMonitor = new PingMonitor();
HostMonitoringService.add((HostList) pingMonitor, (HostMonitor) 1028, linkedList, (List) null);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 1028;
LinkedList<HostMonitoringService> linkedList = null;
LinkedList<HostMonitoringService> linkedList = null;
HostMonitoringService.add((HostList) _int, linkedList, linkedList, (List) linkedList);
boolean _boolean = false;
HostMonitoringService.monitor(_boolean);


* Minimizing test suite
* test suite isTestSuite: 19
Test 0: 
HostMonitoringService.monitor(true);
HostMonitoringService.remove((HostMonitoringService) null);
HostMonitoringService.remove((HostMonitoringService) null);
Test 1: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("un");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 2: 
HostMonitoringService.remove((HostMonitoringService) null);
Test 3: 
HostMonitoringService.add((HostMonitoringService) null);
Test 4: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.addHostStateListner((HostStateListener) null);
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
Test 6: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();
Test 7: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 8: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
Test 9: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(1609459200L);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 10: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 11: 
HostMonitoringService.monitor(true, "Server1");
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-5));
hostMonitoringService.getIntervalInSec();
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(1);
hostMonitoringService.getIntervalInSec();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate();
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 16: 
HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"");
HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, (-47), (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
linkedList.iterator();
hostMonitoringService.setListnersList(linkedList);
HttpMonitor httpMonitor = new HttpMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostList, (HostMonitor) socketMonitor, 2158, (List) linkedList);
HostMonitoringService.monitor(";new status:");
HostMonitoringService.monitor(true, (String) null);
hostMonitoringService.setHostMonitor(httpMonitor);
HostMonitoringService.clear();
hostMonitoringService.getHostMonitor();
UDPMonitor uDPMonitor = new UDPMonitor();
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, 6158, (List) linkedList);
HostMonitoringService.getSize();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
HostMonitoringService.monitor(false);
Test 17: 
HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"");
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("*=+$FTSW,X;*M0/\"");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.monitor(false, (String) null);
Test 18: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("(");
SocketMonitor socketMonitor = new SocketMonitor();
Host host = new Host();
host.setStatus('S');
hostList.addDefault(host);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
PingMonitor pingMonitor = new PingMonitor();
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, 1028, (List) linkedList);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HttpMonitor httpMonitor = new HttpMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
HostMonitoringService.monitor(false);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 74
* Number of covered goals: 61
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 85%
* Total number of goals: 131
* Number of covered goals: 112
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 22
* Number of covered goals: 18
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 74
* Number of covered goals: 61
* Generated 19 tests with total length 90
* Resulting test suite's coverage: 93% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 93%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor(true);
HostMonitoringService.remove((HostMonitoringService) null);
boolean remove = HostMonitoringService.remove((HostMonitoringService) null);
assertFalse(remove);


** It was a parseable test case! 
refined test name is: testRemoveNullObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList arg0 = new HostList("un");
hostMonitoringService.setHostList(arg0);
HostList hostList = hostMonitoringService.getHostList();
assertEquals("un", hostList.getName());


** It was a parseable test case! 
refined test name is: testSetAndGetHostList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean remove = HostMonitoringService.remove((HostMonitoringService) null);
assertFalse(remove);


** It was a parseable test case! 
refined test name is: testRemoveNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.add((HostMonitoringService) null);

** It was a parseable test case! 
refined test name is: testAddNullHostMonitoringService
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.addHostStateListner((HostStateListener) null);
assertEquals(0, hostMonitoringService.getIntervalInSec());


** It was a parseable test case! 
refined test name is: testAddMultipleListeners
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
Date nextCheckOn = hostMonitoringService.getNextCheckOn();
assertNull(nextCheckOn);


** It was a parseable test case! 
refined test name is: testGetNextCheckOnNoHostsPresentReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int intervalInSec = hostMonitoringService.getIntervalInSec();
assertEquals(0, intervalInSec);


** It was a parseable test case! 
refined test name is: testGetDefaultIntervalReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = hostMonitoringService.getHostList();
assertNull(hostList);


** It was a parseable test case! 
refined test name is: testGetHostListReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
Date lastCheckedOn = hostMonitoringService.getLastCheckedOn();
assertNull(lastCheckedOn);


** It was a parseable test case! 
refined test name is: testGetLastCheckedOnReturnsNullWhenNoData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate arg0 = new MockDate(1609459200L);
hostMonitoringService.setNextCheckOn(arg0);
Date nextCheckOn = hostMonitoringService.getNextCheckOn();
assertSame(nextCheckOn, arg0);


** It was a parseable test case! 
refined test name is: testSetNextCheckOnUpdatesNextCheckOnDate
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> arg0 = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(arg0);
List listnersList = hostMonitoringService.getListnersList();
assertEquals(0, listnersList.size());


** It was a parseable test case! 
refined test name is: testSetListenersListWithEmptyList
* Compiling Tests
refined test name is: testSetListenersListWithEmptyList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor(true, "Server1");

** It was a parseable test case! 
refined test name is: testMonitorServerSuccess
* Compiling Tests
refined test name is: testMonitoringService
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-5));
int intervalInSec = hostMonitoringService.getIntervalInSec();
assertEquals((-5), intervalInSec);


** It was a parseable test case! 
refined test name is: testSetInvalidIntervalValueShouldSetToDefault
* Compiling Tests
refined test name is: testInvalidIntervalValueIsSetToDefault
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(1);
int intervalInSec = hostMonitoringService.getIntervalInSec();
assertEquals(1, intervalInSec);


** It was a parseable test case! 
refined test name is: testGetIntervalInSec
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate arg0 = new MockDate();
hostMonitoringService.setLastCheckedOn(arg0);
Date lastCheckedOn = hostMonitoringService.getLastCheckedOn();
assertEquals("Fri Feb 14 20:21:21 GMT 2014", lastCheckedOn.toString());


** It was a parseable test case! 
refined test name is: testSetAndGetLastCheckedOn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener arg0 = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(arg0).toString();
hostMonitoringService.addHostStateListner(arg0);
List listnersList = hostMonitoringService.getListnersList();
assertFalse(listnersList.isEmpty());


** It was a parseable test case! 
refined test name is: testAddHostStateListenerWithNonEmptyListenerList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor("*=+$FTSW,X;*M0/\"");
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("*=+$FTSW,X;*M0/\"");
SocketMonitor socketMonitor = new SocketMonitor();
Host arg0 = new Host();
hostList.addDefault(arg0);
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
HostMonitoringService.monitor(false, (String) null);

** It was a parseable test case! 
refined test name is: testMonitorHostListWithDefaultHost
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:30.292 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:30.325 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:30.409 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:30.411 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:30.487 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:30.488 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:30.564 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:30.565 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:30.793 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:30.799 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:30.951 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:30.956 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:31.160 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:31.184 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:31.364 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:31.375 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:31.523 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:31.531 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:31.641 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:31.649 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:39:31.812 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:31.815 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 02:39:32.019 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:32.020 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 02:39:32.204 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:32.206 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
[MASTER] 02:39:32.409 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:32.412 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
* Compiling Tests
[MASTER] 02:39:32.536 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:32.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:32.803 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:32.804 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 02:39:32.992 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:32.993 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 10 called: 0 to improve: false
** Write a test suite: 11 called: 1 to improve: false
** Write a test suite: 12 called: 2 to improve: false
[MASTER] 02:39:33.567 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:33.568 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 4 called: 0 to improve: false
** Write a test suite: 5 called: 1 to improve: false
** Write a test suite: 6 called: 2 to improve: false
[MASTER] 02:39:33.893 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4685076267895766935.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 02:39:33.894 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4685076267895766935.jar
[MASTER] 02:39:34.313 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
[MASTER] 02:39:50.906 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Computation finished
