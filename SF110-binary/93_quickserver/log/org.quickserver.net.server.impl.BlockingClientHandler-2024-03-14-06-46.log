* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.server.impl.BlockingClientHandler
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 19423
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:46:52.072 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.net.SocketOption
[MASTER] 06:46:52.106 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:46:52.108 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:46:52.127 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Supplier
[MASTER] 06:46:52.156 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:46:52.242 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 06:46:52.243 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 06:46:52.246 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 06:46:52.247 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 06:46:52.248 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 06:46:52.249 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 06:46:52.251 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 06:46:52.253 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 06:46:52.254 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 06:46:52.296 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:46:52.316 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:46:52.318 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.server.impl.BlockingClientHandler
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 845
* Using seed 1710398807274
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 114 / 845
[MASTER] 06:46:53.207 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[Progress:>                             0%] [Cov:========>                          25%][Progress:=>                            6%] [Cov:=========>                         27%][Progress:==>                           7%] [Cov:=========>                         27%][Progress:===>                          10%] [Cov:=========>                         27%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:==========>                        29%][Progress:======>                       20%] [Cov:==========>                        29%][Progress:======>                       20%] [Cov:==========>                        29%][Progress:======>                       21%] [Cov:==========>                        29%][Progress:======>                       21%] [Cov:==========>                        29%][Progress:======>                       21%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:=======>                      26%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     27%] [Cov:==========>                        29%][Progress:========>                     28%] [Cov:==========>                        29%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  38%] [Cov:===========>                       32%][Progress:===========>                  38%] [Cov:===========>                       32%][Progress:===========>                  38%] [Cov:===========>                       32%][Progress:===========>                  38%] [Cov:===========>                       32%][Progress:===========>                  38%] [Cov:===========>                       32%][Progress:===========>                  38%] [Cov:===========>                       32%][Progress:===========>                  39%] [Cov:===========>                       32%][Progress:===========>                  39%] [Cov:===========>                       32%][Progress:===========>                  39%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:================>             55%] [Cov:===========>                       32%][Progress:================>             55%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:====================>         69%] [Cov:===========>                       32%][Progress:======================>       74%] [Cov:===========>                       32%][Progress:========================>     80%] [Cov:===========>                       32%][Progress:=========================>    85%] [Cov:===========>                       32%][Progress:=========================>    85%] [Cov:===========>                       32%][Progress:=========================>    85%] [Cov:===========>                       32%][Progress:===========================>  90%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>97%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%]
* Search finished after 102s and 150 generations, 36133 statements, best individual has fitness: 662.0
* Generated before the refinement 26 tests with total length 78
statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1392)
statement is: org.evosuite.testcase.statements.FieldStatement@93df0ae6 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.ClientEvent
statement code is: ClientEvent clientEvent = ClientEvent.MAX_CON_BLOCKING
statement is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.addEvent(arg0)
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.run()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1392);
ClientEvent clientEvent = ClientEvent.MAX_CON_BLOCKING;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1392);
        ClientEvent clientEvent = ClientEvent.MAX_CON_BLOCKING;
        blockingClientHandler.addEvent(clientEvent);
        blockingClientHandler.run();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1392), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientEvent clientEvent = ClientEvent.MAX_CON_BLOCKING, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ClientEvent.MAX_CON_BLOCKING is ClientEvent
CtField is: public static org.quickserver.net.server.ClientEvent org.quickserver.net.server.ClientEvent.MAX_CON_BLOCKING ClientEvent MAX_CON_BLOCKING
statement is: blockingClientHandler.addEvent(clientEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.addEvent(clientEvent) target is: blockingClientHandler method is: addEvent(ClientEvent)
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V
statement is: blockingClientHandler.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.run() target is: blockingClientHandler method is: run()
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: run()V
TestCase is: int _int = 1392;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
ClientEvent clientEvent = ClientEvent.MAX_CON_BLOCKING;
((BasicClientHandler) _int).addEvent(clientEvent);
((BlockingClientHandler) _int).run();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getSelectionKey()Ljava/nio/channels/SelectionKey; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SelectionKey
statement code is: SelectionKey selectionKey = blockingClientHandler.getSelectionKey()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSelectionKey();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.getSelectionKey();
        // Improved test data
        int selectionKey = 12345;
        blockingClientHandler.setSelectionKey(selectionKey);
        assertEquals(blockingClientHandler.getSelectionKey(), selectionKey);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getSelectionKey(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getSelectionKey() target is: blockingClientHandler method is: getSelectionKey()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: getSelectionKey()Ljava/nio/channels/SelectionKey;
statement is: // Improved test data
int selectionKey = 12345, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: blockingClientHandler.setSelectionKey(selectionKey), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSelectionKey(selectionKey) target is: blockingClientHandler method is: setSelectionKey(int)
statement is: assertEquals(blockingClientHandler.getSelectionKey(), selectionKey), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(blockingClientHandler.getSelectionKey(), selectionKey) target is:  method is: assertEquals(<unknown>,int)
* this is vulnerable: int _int = 12345
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSelectionKey();
int _int = 12345;

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0)
statement is: finalize()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.finalize()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.finalize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1048576);
        blockingClientHandler.finalize();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1048576), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.finalize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.finalize() target is: blockingClientHandler method is: finalize()
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: finalize()V
TestCase is: int _int = 1048576;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
((BlockingClientHandler) _int).finalize();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getSocketChannel()Ljava/nio/channels/SocketChannel; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SocketChannel
statement code is: SocketChannel socketChannel = blockingClientHandler.getSocketChannel()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSocketChannel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int port = 80;
        String hostname = "localhost";
        InetSocketAddress serverAddress = new InetSocketAddress(hostname, port);
        blockingClientHandler.connect(serverAddress);
        // Connect to a remote server on port 80 and verify the connection was successful }}
    }
}
statement is: int port = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostname = "localhost", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: InetSocketAddress serverAddress = new InetSocketAddress(hostname, port), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.connect(serverAddress), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.connect(serverAddress) target is: blockingClientHandler method is: connect(InetSocketAddress)
statement is: // Connect to a remote server on port 80 and verify the connection was successful }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: int _int = 80
* this is vulnerable: String string = "localhost"
TestCase is: int _int = 80;
String string = "localhost";

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: registerForWrite()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.registerForWrite()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.registerForWrite();

* Computation finished
