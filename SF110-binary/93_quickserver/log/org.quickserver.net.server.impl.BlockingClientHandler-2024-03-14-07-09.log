* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.server.impl.BlockingClientHandler
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 8115
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 07:09:37.183 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.net.SocketOption
[MASTER] 07:09:37.206 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 07:09:37.208 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 07:09:37.229 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Supplier
[MASTER] 07:09:37.261 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 07:09:37.388 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 07:09:37.389 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 07:09:37.391 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 07:09:37.391 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 07:09:37.392 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 07:09:37.392 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 07:09:37.393 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 07:09:37.395 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 07:09:37.396 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 07:09:37.431 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 07:09:37.456 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 07:09:37.462 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.server.impl.BlockingClientHandler
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
[Progress:>                             0%] [Cov:>                                  0%]* Total number of test goals for DYNAMOSA: 845
* Using seed 1710400172371
* Starting evolution
* Initial Number of Goals in DynaMOSA = 114 / 845
[Progress:>                             3%] [Cov:=========>                         27%][Progress:>                             3%] [Cov:=========>                         27%][Progress:=>                            4%] [Cov:=========>                         28%][MASTER] 07:09:46.405 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:==========>                        29%][Progress:====>                         14%] [Cov:==========>                        29%][Progress:====>                         14%] [Cov:==========>                        29%][Progress:====>                         14%] [Cov:==========>                        29%][Progress:====>                         14%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         15%] [Cov:==========>                        29%][Progress:====>                         16%] [Cov:==========>                        29%][Progress:====>                         16%] [Cov:==========>                        29%][Progress:=====>                        17%] [Cov:==========>                        29%][Progress:=====>                        17%] [Cov:==========>                        29%][Progress:=====>                        17%] [Cov:==========>                        29%][Progress:=====>                        17%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        19%] [Cov:==========>                        29%][Progress:=====>                        19%] [Cov:==========>                        29%][Progress:=====>                        19%] [Cov:==========>                        29%][Progress:=====>                        19%] [Cov:==========>                        29%][Progress:=====>                        19%] [Cov:==========>                        29%][Progress:=====>                        19%] [Cov:==========>                        29%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:==========>                        30%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       32%][Progress:======>                       20%] [Cov:===========>                       34%][Progress:======>                       20%] [Cov:===========>                       34%][Progress:======>                       20%] [Cov:===========>                       34%][Progress:======>                       20%] [Cov:===========>                       34%][Progress:======>                       21%] [Cov:===========>                       34%][Progress:======>                       21%] [Cov:===========>                       34%][Progress:======>                       21%] [Cov:===========>                       34%][Progress:======>                       21%] [Cov:===========>                       34%][Progress:======>                       21%] [Cov:============>                      36%][Progress:======>                       21%] [Cov:============>                      36%][Progress:======>                       21%] [Cov:============>                      36%][Progress:======>                       22%] [Cov:============>                      36%][Progress:======>                       22%] [Cov:============>                      36%][Progress:======>                       22%] [Cov:============>                      36%][Progress:======>                       22%] [Cov:============>                      36%][Progress:======>                       22%] [Cov:============>                      36%][Progress:======>                       23%] [Cov:============>                      36%][Progress:======>                       23%] [Cov:============>                      36%][Progress:======>                       23%] [Cov:============>                      37%][Progress:======>                       23%] [Cov:============>                      37%][Progress:======>                       23%] [Cov:============>                      37%][Progress:======>                       23%] [Cov:============>                      37%][Progress:======>                       23%] [Cov:============>                      37%][Progress:======>                       23%] [Cov:============>                      37%][Progress:=======>                      24%] [Cov:============>                      37%][Progress:=======>                      24%] [Cov:============>                      37%][Progress:=======>                      24%] [Cov:============>                      37%][Progress:=======>                      24%] [Cov:============>                      37%][Progress:=======>                      24%] [Cov:============>                      37%][Progress:=======>                      24%] [Cov:============>                      37%][Progress:=======>                      24%] [Cov:============>                      37%][Progress:=======>                      24%] [Cov:============>                      37%][Progress:=======>                      25%] [Cov:============>                      37%][Progress:=======>                      25%] [Cov:============>                      37%][Progress:=======>                      25%] [Cov:============>                      37%][Progress:=======>                      25%] [Cov:============>                      37%][Progress:=======>                      25%] [Cov:============>                      37%][Progress:=======>                      26%] [Cov:============>                      37%][Progress:=======>                      26%] [Cov:============>                      37%][Progress:=======>                      26%] [Cov:============>                      37%][Progress:=======>                      26%] [Cov:============>                      37%][Progress:=======>                      26%] [Cov:============>                      37%][Progress:=======>                      26%] [Cov:============>                      37%][Progress:========>                     27%] [Cov:============>                      37%][Progress:========>                     27%] [Cov:============>                      37%][Progress:========>                     27%] [Cov:============>                      37%][Progress:========>                     27%] [Cov:============>                      37%][Progress:========>                     27%] [Cov:============>                      37%][Progress:========>                     27%] [Cov:============>                      37%][Progress:========>                     28%] [Cov:============>                      37%][Progress:========>                     28%] [Cov:============>                      37%][Progress:========>                     28%] [Cov:============>                      37%][Progress:========>                     28%] [Cov:============>                      37%][Progress:========>                     28%] [Cov:============>                      37%][Progress:========>                     28%] [Cov:============>                      37%][Progress:========>                     28%] [Cov:============>                      37%][Progress:========>                     29%] [Cov:============>                      37%][Progress:========>                     29%] [Cov:============>                      37%][Progress:========>                     29%] [Cov:============>                      37%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:========>                     29%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    30%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     38%][Progress:=========>                    31%] [Cov:=============>                     39%][Progress:=========>                    31%] [Cov:=============>                     39%][Progress:=========>                    32%] [Cov:=============>                     39%][Progress:=========>                    32%] [Cov:=============>                     39%][Progress:=========>                    32%] [Cov:=============>                     39%][Progress:=========>                    32%] [Cov:=============>                     39%][Progress:=========>                    32%] [Cov:=============>                     39%][Progress:=========>                    32%] [Cov:=============>                     39%][Progress:=========>                    33%] [Cov:=============>                     39%][Progress:=========>                    33%] [Cov:=============>                     39%][Progress:=========>                    33%] [Cov:=============>                     39%][Progress:=========>                    33%] [Cov:=============>                     39%][Progress:=========>                    33%] [Cov:=============>                     39%][Progress:==========>                   34%] [Cov:=============>                     39%][Progress:==========>                   34%] [Cov:=============>                     39%][Progress:==========>                   34%] [Cov:=============>                     39%][Progress:==========>                   34%] [Cov:=============>                     39%][Progress:==========>                   34%] [Cov:=============>                     39%][Progress:==========>                   34%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   35%] [Cov:=============>                     39%][Progress:==========>                   36%] [Cov:=============>                     39%][Progress:==========>                   36%] [Cov:=============>                     39%][Progress:==========>                   36%] [Cov:=============>                     39%][Progress:==========>                   36%] [Cov:=============>                     39%][Progress:==========>                   36%] [Cov:=============>                     39%][Progress:==========>                   36%] [Cov:=============>                     39%][Progress:===========>                  37%] [Cov:=============>                     39%][Progress:===========>                  37%] [Cov:=============>                     39%][Progress:===========>                  37%] [Cov:=============>                     39%][Progress:===========>                  37%] [Cov:=============>                     39%][Progress:===========>                  37%] [Cov:=============>                     39%][Progress:===========>                  37%] [Cov:=============>                     39%][Progress:===========>                  37%] [Cov:=============>                     39%][Progress:===========>                  38%] [Cov:=============>                     39%][Progress:===========>                  38%] [Cov:=============>                     39%][Progress:===========>                  38%] [Cov:=============>                     39%][Progress:===========>                  38%] [Cov:=============>                     39%][Progress:===========>                  38%] [Cov:=============>                     39%][Progress:===========>                  38%] [Cov:=============>                     39%][Progress:===========>                  38%] [Cov:=============>                     39%][Progress:===========>                  39%] [Cov:=============>                     39%][Progress:===========>                  39%] [Cov:=============>                     39%][Progress:===========>                  39%] [Cov:=============>                     39%][Progress:===========>                  39%] [Cov:=============>                     39%][Progress:===========>                  39%] [Cov:=============>                     39%][Progress:===========>                  39%] [Cov:=============>                     39%][Progress:===========>                  39%] [Cov:=============>                     39%][Progress:===========>                  39%] [Cov:=============>                     39%][Progress:============>                 40%] [Cov:=============>                     39%][Progress:============>                 40%] [Cov:=============>                     39%][Progress:============>                 40%] [Cov:=============>                     39%][Progress:============>                 40%] [Cov:=============>                     39%][Progress:============>                 41%] [Cov:=============>                     39%][Progress:============>                 41%] [Cov:=============>                     39%][Progress:============>                 41%] [Cov:=============>                     39%][Progress:============>                 41%] [Cov:=============>                     39%][Progress:============>                 41%] [Cov:=============>                     39%][Progress:============>                 41%] [Cov:=============>                     39%][Progress:============>                 42%] [Cov:=============>                     39%][Progress:============>                 42%] [Cov:=============>                     39%][Progress:============>                 42%] [Cov:=============>                     39%][Progress:============>                 42%] [Cov:=============>                     39%][Progress:============>                 42%] [Cov:=============>                     39%][Progress:============>                 42%] [Cov:=============>                     39%][Progress:============>                 43%] [Cov:=============>                     39%][Progress:============>                 43%] [Cov:=============>                     39%][Progress:============>                 43%] [Cov:=============>                     39%][Progress:============>                 43%] [Cov:=============>                     39%][Progress:============>                 43%] [Cov:=============>                     39%][Progress:============>                 43%] [Cov:=============>                     39%][Progress:=============>                44%] [Cov:=============>                     39%][Progress:=============>                46%] [Cov:=============>                     39%][Progress:==============>               47%] [Cov:=============>                     39%][Progress:==============>               47%] [Cov:=============>                     39%][Progress:==============>               47%] [Cov:=============>                     39%][Progress:==============>               47%] [Cov:=============>                     39%][Progress:==============>               47%] [Cov:=============>                     39%][Progress:==============>               48%] [Cov:=============>                     39%][Progress:==============>               48%] [Cov:=============>                     39%][Progress:==============>               48%] [Cov:=============>                     39%][Progress:==============>               48%] [Cov:=============>                     39%][Progress:==============>               48%] [Cov:=============>                     39%][Progress:==============>               48%] [Cov:=============>                     39%][Progress:==============>               49%] [Cov:=============>                     39%][Progress:==============>               49%] [Cov:=============>                     39%][Progress:==============>               49%] [Cov:=============>                     39%][Progress:==============>               49%] [Cov:=============>                     39%][Progress:==============>               49%] [Cov:=============>                     39%][Progress:==============>               49%] [Cov:=============>                     39%][Progress:==============>               49%] [Cov:=============>                     39%][Progress:===============>              50%] [Cov:=============>                     39%][Progress:===============>              50%] [Cov:=============>                     39%][Progress:===============>              50%] [Cov:=============>                     39%][Progress:===============>              50%] [Cov:=============>                     39%][Progress:===============>              50%] [Cov:=============>                     39%][Progress:===============>              51%] [Cov:=============>                     39%][Progress:===============>              51%] [Cov:=============>                     39%][Progress:===============>              51%] [Cov:=============>                     39%][Progress:===============>              51%] [Cov:=============>                     39%][Progress:===============>              51%] [Cov:=============>                     39%][Progress:===============>              51%] [Cov:=============>                     39%][Progress:===============>              51%] [Cov:=============>                     39%][Progress:===============>              51%] [Cov:=============>                     39%][Progress:===============>              51%] [Cov:=============>                     39%][Progress:===============>              52%] [Cov:=============>                     39%][Progress:===============>              52%] [Cov:=============>                     39%][Progress:===============>              52%] [Cov:=============>                     39%][Progress:===============>              52%] [Cov:=============>                     39%][Progress:===============>              52%] [Cov:=============>                     39%][Progress:===============>              52%] [Cov:=============>                     39%][Progress:===============>              52%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:===============>              53%] [Cov:=============>                     39%][Progress:================>             54%] [Cov:=============>                     39%][Progress:================>             54%] [Cov:=============>                     39%][Progress:================>             54%] [Cov:=============>                     39%][Progress:================>             54%] [Cov:=============>                     39%][Progress:================>             54%] [Cov:=============>                     39%][Progress:================>             54%] [Cov:=============>                     39%][Progress:================>             55%] [Cov:=============>                     39%][Progress:================>             55%] [Cov:=============>                     39%][Progress:================>             55%] [Cov:=============>                     39%][Progress:================>             55%] [Cov:=============>                     39%][Progress:================>             55%] [Cov:=============>                     39%][Progress:================>             56%] [Cov:=============>                     39%][Progress:================>             56%] [Cov:=============>                     39%][Progress:================>             56%] [Cov:=============>                     39%][Progress:================>             56%] [Cov:=============>                     39%][Progress:================>             56%] [Cov:=============>                     39%][Progress:=================>            57%] [Cov:=============>                     39%][Progress:=================>            57%] [Cov:=============>                     39%][Progress:=================>            57%] [Cov:=============>                     39%][Progress:==================>           60%] [Cov:=============>                     39%][Progress:==================>           60%] [Cov:=============>                     39%][Progress:==================>           60%] [Cov:==============>                    40%][Progress:==================>           60%] [Cov:==============>                    40%][Progress:==================>           61%] [Cov:==============>                    40%][Progress:==================>           61%] [Cov:==============>                    40%][Progress:==================>           61%] [Cov:==============>                    40%][Progress:==================>           61%] [Cov:==============>                    40%][Progress:==================>           61%] [Cov:==============>                    40%][Progress:==================>           61%] [Cov:==============>                    40%][Progress:==================>           61%] [Cov:==============>                    40%][Progress:==================>           62%] [Cov:==============>                    40%][Progress:==================>           62%] [Cov:==============>                    40%][Progress:==================>           62%] [Cov:==============>                    40%][Progress:==================>           62%] [Cov:==============>                    40%][Progress:==================>           62%] [Cov:==============>                    40%][Progress:==================>           62%] [Cov:==============>                    40%][Progress:==================>           62%] [Cov:==============>                    40%][Progress:==================>           63%] [Cov:==============>                    40%][Progress:==================>           63%] [Cov:==============>                    40%][Progress:==================>           63%] [Cov:==============>                    40%][Progress:==================>           63%] [Cov:==============>                    40%][Progress:==================>           63%] [Cov:==============>                    40%][Progress:==================>           63%] [Cov:==============>                    40%][Progress:==================>           63%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          64%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          65%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    40%][Progress:===================>          66%] [Cov:==============>                    40%][Progress:====================>         67%] [Cov:==============>                    40%][Progress:====================>         67%] [Cov:==============>                    40%][Progress:====================>         67%] [Cov:==============>                    40%][Progress:====================>         67%] [Cov:==============>                    40%][Progress:====================>         67%] [Cov:==============>                    40%][Progress:====================>         67%] [Cov:==============>                    40%][Progress:====================>         67%] [Cov:==============>                    40%][Progress:====================>         68%] [Cov:==============>                    40%][Progress:====================>         68%] [Cov:==============>                    41%][Progress:====================>         68%] [Cov:==============>                    41%][Progress:====================>         68%] [Cov:==============>                    41%][Progress:=====================>        71%] [Cov:==============>                    41%][Progress:=====================>        71%] [Cov:==============>                    41%][Progress:=====================>        71%] [Cov:==============>                    41%][Progress:=====================>        72%] [Cov:==============>                    41%][Progress:=====================>        72%] [Cov:==============>                    41%][Progress:=====================>        72%] [Cov:==============>                    41%][Progress:=====================>        72%] [Cov:==============>                    41%][Progress:=====================>        73%] [Cov:==============>                    41%][Progress:=====================>        73%] [Cov:==============>                    41%][Progress:=====================>        73%] [Cov:==============>                    41%][Progress:======================>       74%] [Cov:==============>                    41%][Progress:======================>       74%] [Cov:==============>                    41%][Progress:======================>       74%] [Cov:==============>                    41%][Progress:======================>       74%] [Cov:==============>                    41%][Progress:======================>       75%] [Cov:==============>                    41%][Progress:======================>       75%] [Cov:==============>                    41%][Progress:======================>       75%] [Cov:==============>                    41%][Progress:======================>       75%] [Cov:==============>                    41%][Progress:======================>       75%] [Cov:==============>                    41%][Progress:======================>       76%] [Cov:==============>                    41%][Progress:======================>       76%] [Cov:==============>                    41%][Progress:======================>       76%] [Cov:==============>                    41%][Progress:======================>       76%] [Cov:==============>                    41%][Progress:======================>       76%] [Cov:==============>                    41%][Progress:======================>       76%] [Cov:==============>                    41%][Progress:=======================>      77%] [Cov:==============>                    41%][Progress:=======================>      77%] [Cov:==============>                    41%][Progress:=======================>      77%] [Cov:==============>                    41%][Progress:=======================>      77%] [Cov:==============>                    41%][Progress:=======================>      77%] [Cov:==============>                    41%][Progress:=======================>      77%] [Cov:==============>                    41%][Progress:=======================>      78%] [Cov:==============>                    41%][Progress:=======================>      78%] [Cov:==============>                    41%][Progress:=======================>      78%] [Cov:==============>                    41%][Progress:=======================>      78%] [Cov:==============>                    41%][Progress:=======================>      79%] [Cov:==============>                    41%][Progress:=======================>      79%] [Cov:==============>                    41%][Progress:=======================>      79%] [Cov:==============>                    41%][Progress:=======================>      79%] [Cov:==============>                    41%][Progress:=======================>      79%] [Cov:==============>                    41%][Progress:=======================>      79%] [Cov:==============>                    41%][Progress:=======================>      79%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     80%] [Cov:==============>                    41%][Progress:========================>     83%] [Cov:==============>                    41%][Progress:========================>     83%] [Cov:==============>                    41%][Progress:========================>     83%] [Cov:==============>                    41%][Progress:========================>     83%] [Cov:==============>                    41%][Progress:=========================>    84%] [Cov:==============>                    41%][Progress:=========================>    84%] [Cov:==============>                    41%][Progress:=========================>    84%] [Cov:==============>                    41%][Progress:=========================>    84%] [Cov:==============>                    41%][Progress:=========================>    84%] [Cov:==============>                    41%][Progress:=========================>    84%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    85%] [Cov:==============>                    41%][Progress:=========================>    86%] [Cov:==============>                    41%][Progress:=========================>    86%] [Cov:==============>                    41%][Progress:=========================>    86%] [Cov:==============>                    41%][Progress:=========================>    86%] [Cov:==============>                    41%][Progress:=========================>    86%] [Cov:==============>                    41%][Progress:=========================>    86%] [Cov:==============>                    41%][Progress:==========================>   88%] [Cov:==============>                    41%][Progress:==========================>   88%] [Cov:==============>                    41%][Progress:==========================>   88%] [Cov:==============>                    41%][Progress:==========================>   88%] [Cov:==============>                    41%][Progress:==========================>   88%] [Cov:==============>                    41%][Progress:==========================>   89%] [Cov:==============>                    41%][Progress:===========================>  91%] [Cov:==============>                    41%][Progress:===========================>  91%] [Cov:==============>                    41%][Progress:===========================>  92%] [Cov:==============>                    41%][Progress:===========================>  92%] [Cov:==============>                    41%][Progress:===========================>  92%] [Cov:==============>                    41%][Progress:===========================>  92%] [Cov:==============>                    41%][Progress:============================> 95%] [Cov:==============>                    41%][Progress:============================> 95%] [Cov:==============>                    41%][Progress:============================> 95%] [Cov:==============>                    41%][Progress:============================> 95%] [Cov:==============>                    41%][Progress:============================> 95%] [Cov:==============>                    41%][Progress:============================> 95%] [Cov:==============>                    41%][Progress:============================> 95%] [Cov:==============>                    41%][Progress:============================> 95%] [Cov:==============>                    41%][Progress:============================> 95%] [Cov:==============>                    41%][Progress:============================> 95%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:============================> 96%] [Cov:==============>                    41%][Progress:=============================>97%] [Cov:==============>                    41%][Progress:=============================>97%] [Cov:==============>                    41%][Progress:=============================>97%] [Cov:==============>                    41%][Progress:=============================>97%] [Cov:==============>                    41%][Progress:=============================>97%] [Cov:==============>                    41%][Progress:=============================>97%] [Cov:==============>                    41%][Progress:=============================>97%] [Cov:==============>                    41%][Progress:=============================>97%] [Cov:==============>                    41%][Progress:=============================>97%] [Cov:==============>                    41%][Progress:==============================100%] [Cov:==============>                    41%][Progress:==============================100%] [Cov:==============>                    41%]
* Search finished after 202s and 490 generations, 154581 statements, best individual has fitness: 566.0
* Generated before the refinement 31 tests with total length 142
statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353))
statement is: registerForRead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.registerForRead()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.registerForRead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(-10);// Changed the value to -10 to make it more descriptive and representative of a negative integer

        blockingClientHandler.registerForRead();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(-10)// Changed the value to -10 to make it more descriptive and representative of a negative integer
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.registerForRead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.registerForRead() target is: blockingClientHandler method is: registerForRead()
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: registerForRead()V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.registerForRead();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getSelectionKey()Ljava/nio/channels/SelectionKey; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SelectionKey
statement code is: SelectionKey selectionKey = blockingClientHandler.getSelectionKey()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSelectionKey();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        int expectedBytesToRead = 10;
        String testMessage = "This is a test message";
        blockingClientHandler.getSelectionKey();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int expectedBytesToRead = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String testMessage = "This is a test message", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: blockingClientHandler.getSelectionKey(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getSelectionKey() target is: blockingClientHandler method is: getSelectionKey()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: getSelectionKey()Ljava/nio/channels/SelectionKey;
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "This is a test message"
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
int _int = 10;
String string = "This is a test message";
blockingClientHandler.getSelectionKey();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: finalize()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.finalize()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setConnection(new Connection("localhost", 8080));
        blockingClientHandler.finalize();
        // Assert that the connection is closed and the handler is cleaned up correctly
        assertTrue(blockingClientHandler.getConnection().isClosed());
        assertNull(blockingClientHandler.getConnection());
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setConnection(new Connection("localhost", 8080)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setConnection(new Connection("localhost", 8080)) target is: blockingClientHandler method is: setConnection(Connection)
statement is: blockingClientHandler.finalize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.finalize() target is: blockingClientHandler method is: finalize()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: finalize()V
statement is: // Assert that the connection is closed and the handler is cleaned up correctly
assertTrue(blockingClientHandler.getConnection().isClosed()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert that the connection is closed and the handler is cleaned up correctly
assertTrue(blockingClientHandler.getConnection().isClosed()) target is:  method is: assertTrue(<unknown>)
statement is: assertNull(blockingClientHandler.getConnection()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNull(blockingClientHandler.getConnection()) target is:  method is: assertNull(<unknown>)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getSocketChannel()Ljava/nio/channels/SocketChannel; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SocketChannel
statement code is: SocketChannel socketChannel = blockingClientHandler.getSocketChannel()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSocketChannel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.getSocketChannel("127.0.0.1", 80);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getSocketChannel("127.0.0.1", 80), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getSocketChannel("127.0.0.1", 80) target is: blockingClientHandler method is: getSocketChannel(java.lang.String,int)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785)
statement is: registerForWrite()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.registerForWrite()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
blockingClientHandler.registerForWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1234);
        blockingClientHandler.registerForWrite();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1234), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.registerForWrite(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.registerForWrite() target is: blockingClientHandler method is: registerForWrite()
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: registerForWrite()V
TestCase is: int _int = 1234;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
((BlockingClientHandler) _int).registerForWrite();

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785)
statement is: getBufferedReader()Ljava/io/BufferedReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.BufferedReader
statement code is: BufferedReader bufferedReader = blockingClientHandler.getBufferedReader()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
blockingClientHandler.getBufferedReader();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1234);
        blockingClientHandler.getBufferedReader();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1234), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getBufferedReader(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getBufferedReader() target is: blockingClientHandler method is: getBufferedReader()
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: getBufferedReader()Ljava/io/BufferedReader;
TestCase is: int _int = 1234;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
((BlockingClientHandler) _int).getBufferedReader();

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100)
statement is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
        blockingClientHandler.setClientWriteHandler(new ClientWriteHandler("test"));
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setClientWriteHandler(new ClientWriteHandler("test")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setClientWriteHandler(new ClientWriteHandler("test")) target is: blockingClientHandler method is: setClientWriteHandler(ClientWriteHandler)
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 100;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
ClientWriteHandler clientWriteHandler = null;
((BlockingClientHandler) _int).setClientWriteHandler(clientWriteHandler);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.quickserver.net.server.QuickServer(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer("", 0)
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.handleClient(arg0)
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.run()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
blockingClientHandler.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        QuickServer quickServer = new QuickServer("localhost", 8080);
        TheClient theClient = new TheClient();
        theClient.setServer(quickServer);
        blockingClientHandler.handleClient(theClient);
        blockingClientHandler.run();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: QuickServer quickServer = new QuickServer("localhost", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 2, type org.quickserver.net.server.TheClientindex is: 4
Matched Method is: setServer(Lorg/quickserver/net/server/QuickServer;)V
statement is: blockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleClient(theClient) target is: blockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
statement is: blockingClientHandler.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.run() target is: blockingClientHandler method is: run()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: run()V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
String string = "localhost";
int _int = 8080;
QuickServer quickServer = new QuickServer(string, _int);
TheClient theClient = new TheClient();
((TheClient) _int).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
blockingClientHandler.run();

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-453))
statement is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setSelectionKey((SelectionKey) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-453));
blockingClientHandler.setSelectionKey((SelectionKey) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(12345);// use a port number that is not in use

        blockingClientHandler.setSelectionKey(((SelectionKey) (null)));
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(12345)// use a port number that is not in use
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setSelectionKey(((SelectionKey) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSelectionKey(((SelectionKey) (null))) target is: blockingClientHandler method is: setSelectionKey(SelectionKey)
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 12345;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
SelectionKey selectionKey = null;
((BlockingClientHandler) _int).setSelectionKey(selectionKey);

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353))
statement is: getBlockingMode()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean blockingMode = blockingClientHandler.getBlockingMode()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.getBlockingMode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(2);
        assertEquals("The getBlockingMode() method should return 2 when the BlockingClientHandler is constructed with a blocking mode of 2", 2, blockingClientHandler.getBlockingMode());
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals("The getBlockingMode() method should return 2 when the BlockingClientHandler is constructed with a blocking mode of 2", 2, blockingClientHandler.getBlockingMode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("The getBlockingMode() method should return 2 when the BlockingClientHandler is constructed with a blocking mode of 2", 2, blockingClientHandler.getBlockingMode()) target is:  method is: assertEquals(java.lang.String,int,<unknown>)
TestCase is: int _int = 2;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setSocketChannel((SocketChannel) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSocketChannel((SocketChannel) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setSocketChannel(SocketChannel.open());
        // Set up a socket channel for communication with a remote server
        blockingClientHandler.getSocketChannel().configureBlocking(true);
        // Configure the socket channel as blocking }}
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setSocketChannel(SocketChannel.open()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSocketChannel(SocketChannel.open()) target is: blockingClientHandler method is: setSocketChannel()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Set up a socket channel for communication with a remote server
blockingClientHandler.getSocketChannel().configureBlocking(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Set up a socket channel for communication with a remote server
blockingClientHandler.getSocketChannel().configureBlocking(true) target is: blockingClientHandler.getSocketChannel() method is: configureBlocking(boolean)
statement is: // Configure the socket channel as blocking }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
SocketChannel socketChannel = null;
blockingClientHandler.setSocketChannel(socketChannel);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: updateInputOutputStreams()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.updateInputOutputStreams()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.updateInputOutputStreams();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for testing the updateInputOutputStreams() method of BlockingClientHandler class
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.updateInputOutputStreams(new ByteArrayInputStream("Hello, world!".getBytes()), new ByteArrayOutputStream());
    }
}
statement is: // Improved test data for testing the updateInputOutputStreams() method of BlockingClientHandler class
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.updateInputOutputStreams(new ByteArrayInputStream("Hello, world!".getBytes()), new ByteArrayOutputStream()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.updateInputOutputStreams(new ByteArrayInputStream("Hello, world!".getBytes()), new ByteArrayOutputStream()) target is: blockingClientHandler method is: updateInputOutputStreams(ByteArrayInputStream,ByteArrayOutputStream)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setInputStream((InputStream) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, World!".getBytes()));
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, World!".getBytes())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, World!".getBytes())) target is: blockingClientHandler method is: setInputStream(ByteArrayInputStream)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setInputStream(Ljava/io/InputStream;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
InputStream inputStream = null;
blockingClientHandler.setInputStream(inputStream);

statement is: org.quickserver.net.server.QuickServer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer()
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: org.quickserver.net.qsadmin.CommandHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.qsadmin.CommandHandler
statement code is: CommandHandler commandHandler = new CommandHandler()
statement is: setClientCommandHandler(Lorg/quickserver/net/server/ClientCommandHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setClientCommandHandler(arg0)
statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.handleClient(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@c9d56d8b type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.BYTE
statement is: org.evosuite.testcase.statements.FieldStatement@c663a1ff type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.IN
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setDataMode(arg0, arg1)
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setInputStream((InputStream) null)
test data is: QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);
blockingClientHandler.setInputStream((InputStream) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        QuickServer quickServer = new QuickServer();
        TheClient theClient = new TheClient("127.0.0.1", 80);
        theClient.setServer(quickServer);
        CommandHandler commandHandler = new CommandHandler();
        theClient.setClientCommandHandler(commandHandler);
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.handleClient(theClient);
        DataMode dataMode = DataMode.BYTE;
        DataType dataType = DataType.IN;
        blockingClientHandler.setDataMode(dataMode, dataType);
        blockingClientHandler.setInputStream(new FileInputStream("/path/to/file"));
    }
}
statement is: QuickServer quickServer = new QuickServer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient("127.0.0.1", 80), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
statement is: CommandHandler commandHandler = new CommandHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setClientCommandHandler(commandHandler), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setClientCommandHandler(commandHandler) target is: theClient method is: setClientCommandHandler(CommandHandler)
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleClient(theClient) target is: blockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 5, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 2
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: handleClient(Lorg/quickserver/net/server/TheClient;)V
statement is: DataMode dataMode = DataMode.BYTE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.BYTE is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.BYTE DataMode BYTE
statement is: DataType dataType = DataType.IN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.IN is DataType
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.BYTE DataMode BYTE
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.IN DataType IN
statement is: blockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(dataMode, dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 5, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 2
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
statement is: blockingClientHandler.setInputStream(new FileInputStream("/path/to/file")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setInputStream(new FileInputStream("/path/to/file")) target is: blockingClientHandler method is: setInputStream(FileInputStream)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 5, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 2
Matched Method is: setInputStream(Ljava/io/InputStream;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
* this is vulnerable: TheClient theClient = null
TestCase is: QuickServer quickServer = new QuickServer();
CommandHandler commandHandler = new CommandHandler();
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = null;
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.IN;
((BlockingClientHandler) dataType).setDataMode(dataMode, dataType);
InputStream inputStream = null;
((BlockingClientHandler) dataType).setInputStream(inputStream);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: org.evosuite.testcase.statements.FieldStatement@bcdd29f0 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.BINARY
statement is: org.evosuite.testcase.statements.AssignmentStatement@7096ce32 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.quickserver.net.server.DataMode
statement code is: blockingClientHandler.dataModeIN = dataMode
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setInputStream(arg0)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeIN = dataMode;
blockingClientHandler.setInputStream(pipedInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        PipedInputStream pipedInputStream = new PipedInputStream("largeInteger");
        DataMode dataMode = DataMode.BINARY;
        blockingClientHandler.dataModeIN = dataMode;
        blockingClientHandler.setInputStream(pipedInputStream);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PipedInputStream pipedInputStream = new PipedInputStream("largeInteger"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataMode dataMode = DataMode.BINARY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.BINARY is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.BINARY DataMode BINARY
statement is: blockingClientHandler.dataModeIN = dataMode, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.setInputStream(pipedInputStream), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setInputStream(pipedInputStream) target is: blockingClientHandler method is: setInputStream(PipedInputStream)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setInputStream(Ljava/io/InputStream;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataMode dataMode = DataMode.BINARY;
PipedInputStream pipedInputStream = null;
blockingClientHandler.setInputStream(pipedInputStream);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.closeConnection()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        blockingClientHandler.closeConnection();
        // This line of code is used to close the connection between the client and server }}
    }
}
statement is: blockingClientHandler.closeConnection(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.closeConnection() target is: blockingClientHandler method is: closeConnection()
statement is: // This line of code is used to close the connection between the client and server }}, class spoon.support.reflect.code.CtCommentImpl
statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.quickserver.net.qsadmin.CommandHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.qsadmin.CommandHandler
statement code is: CommandHandler commandHandler = new CommandHandler()
statement is: setClientEventHandler(Lorg/quickserver/net/server/ClientEventHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setClientEventHandler(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@b9ccc327 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: blockingClientHandler.connection = true
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.closeConnection()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        CommandHandler commandHandler = new CommandHandler();
        blockingClientHandler.setClientEventHandler(commandHandler);
        blockingClientHandler.connection = true;
        blockingClientHandler.closeConnection();
        // Improved test data:
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler("127.0.0.1", 8080);
        CommandHandler commandHandler = new CommandHandler(new User("John Doe"), "Hello, World!");
        blockingClientHandler.setClientEventHandler(commandHandler);
        blockingClientHandler.connect();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CommandHandler commandHandler = new CommandHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setClientEventHandler(commandHandler), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setClientEventHandler(commandHandler) target is: blockingClientHandler method is: setClientEventHandler(CommandHandler)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setClientEventHandler(Lorg/quickserver/net/server/ClientEventHandler;)V
statement is: blockingClientHandler.connection = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.closeConnection(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.closeConnection() target is: blockingClientHandler method is: closeConnection()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: closeConnection()V
statement is: // Improved test data:
BlockingClientHandler blockingClientHandler = new BlockingClientHandler("127.0.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CommandHandler commandHandler = new CommandHandler(new User("John Doe"), "Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setClientEventHandler(commandHandler), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setClientEventHandler(commandHandler) target is: blockingClientHandler method is: setClientEventHandler(CommandHandler)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setClientEventHandler(Lorg/quickserver/net/server/ClientEventHandler;)V
statement is: blockingClientHandler.connect(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.connect() target is: blockingClientHandler method is: connect()
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.closeConnection();
blockingClientHandler.setClientEventHandler(commandHandler);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.quickserver.net.qsadmin.CommandHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.qsadmin.CommandHandler
statement code is: CommandHandler commandHandler = new CommandHandler()
statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: org.evosuite.testcase.statements.AssignmentStatement@6bb6646f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.io.InputStream
statement code is: blockingClientHandler.in = (InputStream) pipedInputStream
statement is: setClientEventHandler(Lorg/quickserver/net/server/ClientEventHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setClientEventHandler(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@71dab2a0 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: blockingClientHandler.connection = true
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.closeConnection()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
blockingClientHandler.in = (InputStream) pipedInputStream;
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        CommandHandler commandHandler = new CommandHandler();
        String inputStream = "Hello, world!";
        blockingClientHandler.in = ((InputStream) (inputStream));
        blockingClientHandler.setClientEventHandler(commandHandler);
        blockingClientHandler.connection = true;
        blockingClientHandler.closeConnection();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CommandHandler commandHandler = new CommandHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String inputStream = "Hello, world!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: blockingClientHandler.in = ((InputStream) (inputStream)), class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.setClientEventHandler(commandHandler), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setClientEventHandler(commandHandler) target is: blockingClientHandler method is: setClientEventHandler(CommandHandler)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setClientEventHandler(Lorg/quickserver/net/server/ClientEventHandler;)V
statement is: blockingClientHandler.connection = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.closeConnection(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.closeConnection() target is: blockingClientHandler method is: closeConnection()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: closeConnection()V
* this is vulnerable: String string = "Hello, world!"
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
String string = "Hello, world!";
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.closeConnection();

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353))
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.run()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int timeoutMillis = 20;// Changed from a small value to a larger value

        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(timeoutMillis);
        blockingClientHandler.run();
    }
}
statement is: int timeoutMillis = 20// Changed from a small value to a larger value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(timeoutMillis), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.run() target is: blockingClientHandler method is: run()
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: run()V
TestCase is: int _int = 20;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
((BlockingClientHandler) _int).run();

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353))
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setDataMode((DataMode) null, arg1)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(-2353);
        DataType dataType = DataType.OUT;
        blockingClientHandler.setDataMode(((DataMode) (null)), dataType);
        // Replace -2353 with a more descriptive value that better represents the expected behavior of the code
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
        DataType dataType = DataType.OUT;
        blockingClientHandler.setDataMode(((DataMode) (null)), dataType);
        // Replace "null" with a more descriptive value that better represents the expected behavior of the code
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
        DataType dataType = DataType.OUT;
        blockingClientHandler.setDataMode(READ, dataType);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(-2353), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataType dataType = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: blockingClientHandler.setDataMode(((DataMode) (null)), dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(((DataMode) (null)), dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: // Replace -2353 with a more descriptive value that better represents the expected behavior of the code
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataType dataType = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: blockingClientHandler.setDataMode(((DataMode) (null)), dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(((DataMode) (null)), dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 5
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: // Replace "null" with a more descriptive value that better represents the expected behavior of the code
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataType dataType = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: blockingClientHandler.setDataMode(READ, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(READ, dataType) target is: blockingClientHandler method is: setDataMode(DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 10
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
DataType dataType = DataType.OUT;
DataType dataType = null;
blockingClientHandler.setDataMode((DataMode) dataType, dataType);
int _int = 100;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
DataType dataType = DataType.OUT;
DataType dataType = null;
blockingClientHandler.setDataMode((DataMode) dataType, dataType);
int _int = 100;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
DataType dataType = DataType.OUT;
DataType dataType = null;
blockingClientHandler.setDataMode((DataMode) dataType, dataType);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.quickserver.net.server.QuickServer(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0)
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.handleClient(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: org.quickserver.util.xmlreader.DefaultDataMode()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.util.xmlreader.DefaultDataMode
statement code is: DefaultDataMode defaultDataMode = new DefaultDataMode()
statement is: getDataMode(Lorg/quickserver/net/server/DataType;)Lorg/quickserver/net/server/DataMode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = defaultDataMode.getDataMode(arg0)
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setDataMode(arg0, arg1)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DefaultDataMode defaultDataMode = new DefaultDataMode();
DataMode dataMode = defaultDataMode.getDataMode(dataType);
blockingClientHandler.setDataMode(dataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
        TheClient theClient = new TheClient();
        theClient.setServer(quickServer);
        blockingClientHandler.handleClient(theClient);
        DataType dataType = DataType.IN;
        DefaultDataMode defaultDataMode = new DefaultDataMode();
        DataMode dataMode = defaultDataMode.getDataMode(dataType);
        blockingClientHandler.setDataMode(dataMode, dataType);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 2, type org.quickserver.net.server.TheClientindex is: 4
Matched Method is: setServer(Lorg/quickserver/net/server/QuickServer;)V
statement is: blockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleClient(theClient) target is: blockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
statement is: DataType dataType = DataType.IN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.IN is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: DefaultDataMode defaultDataMode = new DefaultDataMode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataMode dataMode = defaultDataMode.getDataMode(dataType), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultDataMode.getDataMode(dataType) target is: defaultDataMode method is: getDataMode(DataType)
source statement: org.quickserver.util.xmlreader.DefaultDataMode()V callee: VariableReference: Statement 6, type org.quickserver.util.xmlreader.DefaultDataModeindex is: 8
Matched Method is: getDataMode(Lorg/quickserver/net/server/DataType;)Lorg/quickserver/net/server/DataMode;
statement is: blockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(dataMode, dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
String string = "{0} calling closeConnection()";
int _int = 0;
QuickServer quickServer = new QuickServer(string, _int);
TheClient theClient = new TheClient();
((TheClient) _int).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DefaultDataMode defaultDataMode = new DefaultDataMode();
DataMode dataMode = ((DefaultDataMode) _void).getDataMode(dataType);
blockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.quickserver.net.server.QuickServer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer()
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: org.quickserver.net.qsadmin.CommandHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.qsadmin.CommandHandler
statement code is: CommandHandler commandHandler = new CommandHandler()
statement is: setClientCommandHandler(Lorg/quickserver/net/server/ClientCommandHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setClientCommandHandler(arg0)
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.handleClient(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@ca1f6ac0 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.STRING
statement is: org.evosuite.testcase.statements.FieldStatement@c663a1ff type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.IN
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setDataMode(arg0, arg1)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        QuickServer quickServer = new QuickServer();
        TheClient theClient = new TheClient();
        theClient.setServer(quickServer);
        CommandHandler commandHandler = new CommandHandler();
        theClient.setClientCommandHandler(commandHandler);
        blockingClientHandler.handleClient(theClient);
        DataMode dataMode = DataMode.STRING;
        DataType dataType = DataType.IN;
        blockingClientHandler.setDataMode(dataMode, dataType);
        // Improved test data
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        QuickServer quickServer = new QuickServer("localhost", 8080);
        TheClient theClient = new TheClient("123456789", "password");
        theClient.setServer(quickServer);
        CommandHandler commandHandler = new CommandHandler();
        theClient.setClientCommandHandler(commandHandler);
        blockingClientHandler.handleClient(theClient);
        DataMode dataMode = DataMode.STRING;
        DataType dataType = DataType.IN;
        blockingClientHandler.setDataMode(dataMode, dataType);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: QuickServer quickServer = new QuickServer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 2, type org.quickserver.net.server.TheClientindex is: 2
Matched Method is: setServer(Lorg/quickserver/net/server/QuickServer;)V
statement is: CommandHandler commandHandler = new CommandHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setClientCommandHandler(commandHandler), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setClientCommandHandler(commandHandler) target is: theClient method is: setClientCommandHandler(CommandHandler)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 2, type org.quickserver.net.server.TheClientindex is: 2
Matched Method is: setClientCommandHandler(Lorg/quickserver/net/server/ClientCommandHandler;)V
statement is: blockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleClient(theClient) target is: blockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
statement is: DataMode dataMode = DataMode.STRING, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.STRING is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.STRING DataMode STRING
statement is: DataType dataType = DataType.IN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.IN is DataType
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.STRING DataMode STRING
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.IN DataType IN
statement is: blockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(dataMode, dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
statement is: // Improved test data
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: QuickServer quickServer = new QuickServer("localhost", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient("123456789", "password"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 2, type org.quickserver.net.server.TheClientindex is: 2
Matched Method is: setServer(Lorg/quickserver/net/server/QuickServer;)V
statement is: CommandHandler commandHandler = new CommandHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setClientCommandHandler(commandHandler), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setClientCommandHandler(commandHandler) target is: theClient method is: setClientCommandHandler(CommandHandler)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 2, type org.quickserver.net.server.TheClientindex is: 2
Matched Method is: setClientCommandHandler(Lorg/quickserver/net/server/ClientCommandHandler;)V
statement is: blockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleClient(theClient) target is: blockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 10
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
statement is: DataMode dataMode = DataMode.STRING, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.STRING is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.STRING DataMode STRING
statement is: DataType dataType = DataType.IN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.IN is DataType
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.STRING DataMode STRING
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.IN DataType IN
statement is: blockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(dataMode, dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 10
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: org.quickserver.net.server.QuickServer(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0)
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.handleClient(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@fdb0d496 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.OBJECT
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setDataMode(arg0, arg1)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        TheClient theClient = new TheClient();
        QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
        theClient.setServer(quickServer);
        blockingClientHandler.handleClient(theClient);
        DataMode dataMode = DataMode.OBJECT;
        DataType dataType = DataType.OUT;
        blockingClientHandler.setDataMode(dataMode, dataType);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 1, type org.quickserver.net.server.TheClientindex is: 1
Matched Method is: setServer(Lorg/quickserver/net/server/QuickServer;)V
statement is: blockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleClient(theClient) target is: blockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
statement is: DataMode dataMode = DataMode.OBJECT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.OBJECT is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.OBJECT DataMode OBJECT
statement is: DataType dataType = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.OBJECT DataMode OBJECT
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: blockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(dataMode, dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
String string = "{0} calling closeConnection()";
int _int = 0;
QuickServer quickServer = new QuickServer(string, _int);
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.quickserver.net.server.QuickServer(Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer("", 0)
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.handleClient(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: org.evosuite.testcase.statements.FieldStatement@bcdd29f0 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.BINARY
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setDataMode(arg0, arg1)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setDataMode(dataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        QuickServer quickServer = new QuickServer("", 0);
        TheClient theClient = new TheClient();
        theClient.setServer(quickServer);
        blockingClientHandler.handleClient(theClient);
        DataType dataType = DataType.IN;
        DataMode dataMode = DataMode.ASCII;
        // Changed to a more descriptive example
        dataType = DataType.OUT;
        dataMode = DataMode.BINARY;
        blockingClientHandler.setDataMode(dataMode, dataType);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: QuickServer quickServer = new QuickServer("", 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 2, type org.quickserver.net.server.TheClientindex is: 4
Matched Method is: setServer(Lorg/quickserver/net/server/QuickServer;)V
statement is: blockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleClient(theClient) target is: blockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
statement is: DataType dataType = DataType.IN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.IN is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: DataMode dataMode = DataMode.ASCII, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.ASCII is DataMode
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.BINARY DataMode BINARY
statement is: // Changed to a more descriptive example
dataType = DataType.OUT, class spoon.support.reflect.code.CtAssignmentImpl
statement is: dataMode = DataMode.BINARY, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(dataMode, dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
String string = "";
int _int = 0;
QuickServer quickServer = new QuickServer(string, _int);
TheClient theClient = new TheClient();
((TheClient) _int).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.quickserver.net.server.QuickServer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer()
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.handleClient(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: org.evosuite.testcase.statements.FieldStatement@bcdd29f0 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.BINARY
statement is: org.evosuite.testcase.statements.AssignmentStatement@8d47677c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.quickserver.net.server.DataMode
statement code is: blockingClientHandler.dataModeOUT = dataMode
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setDataMode((DataMode) null, arg1)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeOUT = dataMode;
blockingClientHandler.setDataMode((DataMode) null, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        QuickServer quickServer = new QuickServer();
        TheClient theClient = new TheClient();
        theClient.setServer(quickServer);
        blockingClientHandler.handleClient(theClient);
        DataType dataType = DataType.OUT;
        DataMode binaryDataMode = new DataMode("binary");
        blockingClientHandler.dataModeOUT = binaryDataMode;
        blockingClientHandler.setDataMode(binaryDataMode, dataType);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: QuickServer quickServer = new QuickServer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 2, type org.quickserver.net.server.TheClientindex is: 2
Matched Method is: setServer(Lorg/quickserver/net/server/QuickServer;)V
statement is: blockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleClient(theClient) target is: blockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
statement is: DataType dataType = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: DataMode binaryDataMode = new DataMode("binary"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.dataModeOUT = binaryDataMode, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.setDataMode(binaryDataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(binaryDataMode, dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataType dataType = null;
blockingClientHandler.setDataMode((DataMode) dataType, dataType);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("8K%5q`1!`sQ$zu?$y", "FF2Af%b*U91fu#u\u0002")
statement is: org.evosuite.runtime.mock.java.io.MockPrintStream(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockPrintStream
statement code is: MockPrintStream mockPrintStream = new MockPrintStream(arg0)
statement is: java.io.BufferedOutputStream(Ljava/io/OutputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedOutputStream
statement code is: BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@c2923494 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.io.BufferedOutputStream
statement code is: blockingClientHandler.b_out = bufferedOutputStream
statement is: org.quickserver.net.server.QuickServer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer()
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.handleClient(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@c9d56d8b type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.BYTE
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setDataMode(arg0, arg1)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
MockFile mockFile = new MockFile("8K%5q`1!`sQ$zu?$y", "FF2Af%b*U91fu#u\u0002");
MockPrintStream mockPrintStream = new MockPrintStream(mockFile);
BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream);
blockingClientHandler.b_out = bufferedOutputStream;
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        MockFile mockFile = new MockFile("large_file.pdf", "random_string");
        MockPrintStream mockPrintStream = new MockPrintStream(mockFile);
        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream);
        blockingClientHandler.b_out = bufferedOutputStream;
        QuickServer quickServer = new QuickServer();
        TheClient theClient = new TheClient();
        theClient.setServer(quickServer);
        blockingClientHandler.handleClient(theClient);
        DataMode dataMode = DataMode.BYTE;
        DataType dataType = DataType.OUT;
        blockingClientHandler.setDataMode(dataMode, dataType);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockFile mockFile = new MockFile("large_file.pdf", "random_string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockPrintStream mockPrintStream = new MockPrintStream(mockFile), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.b_out = bufferedOutputStream, class spoon.support.reflect.code.CtAssignmentImpl
statement is: QuickServer quickServer = new QuickServer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 6, type org.quickserver.net.server.TheClientindex is: 7
Matched Method is: setServer(Lorg/quickserver/net/server/QuickServer;)V
statement is: blockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleClient(theClient) target is: blockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
statement is: DataMode dataMode = DataMode.BYTE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.BYTE is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.BYTE DataMode BYTE
statement is: DataType dataType = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.BYTE DataMode BYTE
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: blockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(dataMode, dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
String string = "large_file.pdf";
String string = "random_string";
MockFile mockFile = new MockFile(string, string);
MockPrintStream mockPrintStream = new MockPrintStream(mockFile);
BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream);
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
((TheClient) quickServer).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353))
statement is: clean()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.clean()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.clean();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(12345);// Changed the port number from -2353 to 12345, which is a more descriptive and representative value for a network connection.

        blockingClientHandler.clean();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(12345)// Changed the port number from -2353 to 12345, which is a more descriptive and representative value for a network connection.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.clean(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.clean() target is: blockingClientHandler method is: clean()
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: clean()V
TestCase is: int _int = 12345;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
((BlockingClientHandler) _int).clean();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: checkReturnClientHandler()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean checkReturnClientHandler = blockingClientHandler.checkReturnClientHandler()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.checkReturnClientHandler();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 10;
        double y = 2.71828;
        String z = "goodbye";
        char c = 'z';
    }
}
statement is: int x = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y = 2.71828, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String z = "goodbye", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'z', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 2.71828
* this is vulnerable: String string = "goodbye"
* this is vulnerable: char _char = 'z'
TestCase is: int _int = 10;
double _double = 2.71828;
String string = "goodbye";
char _char = 'z';

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.ArrayStatement@94d2a24a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.PushbackInputStream(Ljava/io/InputStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PushbackInputStream
statement code is: PushbackInputStream pushbackInputStream = new PushbackInputStream(arg0, 58)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@c1497eea type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.io.BufferedInputStream
statement code is: blockingClientHandler.b_in = bufferedInputStream
statement is: readInputStream()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] readInputStream = blockingClientHandler.readInputStream()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        byte[] byteArray = new byte[]{ ((byte) (123)), ((byte) (45)), ((byte) (67)), ((byte) (89)) };
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
        blockingClientHandler.b_in = bufferedInputStream;
        blockingClientHandler.readInputStream();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ ((byte) (123)), ((byte) (45)), ((byte) (67)), ((byte) (89)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[]{ ((byte) (123)), ((byte) (45)), ((byte) (67)), ((byte) (89)) } Elements: [((byte) (123)), ((byte) (45)), ((byte) (67)), ((byte) (89))]
lengths: [1] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.b_in = bufferedInputStream, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.readInputStream(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.readInputStream() target is: blockingClientHandler method is: readInputStream()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: readInputStream()[B
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
int _int = 58;
PushbackInputStream pushbackInputStream = new PushbackInputStream((InputStream) _int, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
blockingClientHandler.readInputStream();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.ArrayStatement@68d879e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[1]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.PushbackInputStream(Ljava/io/InputStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PushbackInputStream
statement code is: PushbackInputStream pushbackInputStream = new PushbackInputStream(arg0, 58)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0)
statement is: read([B)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int read = bufferedInputStream.read(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@af1d721e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.io.BufferedInputStream
statement code is: blockingClientHandler.b_in = bufferedInputStream
statement is: readInputStream()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] readInputStream = blockingClientHandler.readInputStream()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
bufferedInputStream.read(byteArray);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        byte[] byteArray = new byte[1];
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new String("Hello World!").getBytes());
        PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
        bufferedInputStream.read(byteArray);
        blockingClientHandler.b_in = bufferedInputStream;
        blockingClientHandler.readInputStream();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: byte[] byteArray = new byte[1] isAssignment: false Array: new byte[1] Elements: []
lengths: [1] [1]
Their type are: class [B byte[]
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new String("Hello World!").getBytes()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bufferedInputStream.read(byteArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: bufferedInputStream.read(byteArray) target is: bufferedInputStream method is: read(byte[])
source statement: java.io.BufferedInputStream(Ljava/io/InputStream;)V callee: VariableReference: Statement 4, type java.io.BufferedInputStreamindex is: 5
Matched Method is: read([B)I
statement is: blockingClientHandler.b_in = bufferedInputStream, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.readInputStream(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.readInputStream() target is: blockingClientHandler method is: readInputStream()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: readInputStream()[B
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
int _int = 58;
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, _int);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
pushbackInputStream.read(byteArray);
blockingClientHandler.readInputStream();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: returnClientHandler()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.returnClientHandler()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(5000, 10);
        blockingClientHandler.returnClientHandler();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(5000, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.returnClientHandler(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.returnClientHandler() target is: blockingClientHandler method is: returnClientHandler()
* test suite isTestSuite: 60
Test 0: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
// Undeclared exception!
try { 
  blockingClientHandler.registerForRead();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 1: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSelectionKey();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 2: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();
Test 3: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSocketChannel();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 4: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
// Undeclared exception!
try { 
  blockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 5: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
blockingClientHandler.getBufferedReader();
Test 6: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
// Undeclared exception!
try { 
  blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 7: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
blockingClientHandler.run();
Test 8: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-453));
// Undeclared exception!
try { 
  blockingClientHandler.setSelectionKey((SelectionKey) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 9: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.getBlockingMode();
Test 10: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSocketChannel((SocketChannel) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 11: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 12: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);
Test 13: 
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);
blockingClientHandler.setInputStream((InputStream) null);
Test 14: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeIN = dataMode;
blockingClientHandler.setInputStream(pipedInputStream);
Test 15: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();
Test 16: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 17: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
blockingClientHandler.in = (InputStream) pipedInputStream;
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 18: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.run();
Test 19: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, dataType);
Test 20: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DefaultDataMode defaultDataMode = new DefaultDataMode();
DataMode dataMode = defaultDataMode.getDataMode(dataType);
blockingClientHandler.setDataMode(dataMode, dataType);
Test 21: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.Reader", e);
}

Test 22: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.OUT;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 23: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setDataMode(dataMode, dataType);
Test 24: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeOUT = dataMode;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode((DataMode) null, dataType);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Unknown DataMode : null
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 25: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
MockFile mockFile = new MockFile("8K%5q`1!`sQ$zu?$y", "FF2Af%b*U91fu#u\u0002");
MockPrintStream mockPrintStream = new MockPrintStream(mockFile);
BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream);
blockingClientHandler.b_out = bufferedOutputStream;
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);
Test 26: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.clean();
Test 27: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.checkReturnClientHandler();
Test 28: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();
Test 29: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
bufferedInputStream.read(byteArray);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();
Test 30: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();
Test 31: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.registerForRead();

Test 32: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSelectionKey();

Test 33: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();

Test 34: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

Test 35: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1234);
((BlockingClientHandler)1234).registerForWrite();

Test 36: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1234);
((BlockingClientHandler)1234).getBufferedReader();

Test 37: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
((BlockingClientHandler)100).setClientWriteHandler((ClientWriteHandler) null);

Test 38: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("localhost", 8080);
TheClient theClient = new TheClient();
((TheClient)8080).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
blockingClientHandler.run();

Test 39: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(12345);
((BlockingClientHandler)12345).setSelectionKey((SelectionKey) null);

Test 40: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(2);

Test 41: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSocketChannel((SocketChannel) null);

Test 42: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

Test 43: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);

Test 44: 
QuickServer quickServer = new QuickServer();
CommandHandler commandHandler = new CommandHandler();
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.IN;
((BlockingClientHandler) dataType).setDataMode(dataMode, dataType);
InputStream inputStream = null;
((BlockingClientHandler) dataType).setInputStream(inputStream);

Test 45: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setInputStream((InputStream) null);

Test 46: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.closeConnection();
blockingClientHandler.setClientEventHandler(commandHandler);

Test 47: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.closeConnection();

Test 48: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(20);
((BlockingClientHandler)20).run();

Test 49: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) dataType, (DataType) null);
int _int = 100;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
DataType dataType = DataType.OUT;
DataType dataType = null;
blockingClientHandler.setDataMode((DataMode) dataType, dataType);
int _int = 100;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
DataType dataType = DataType.OUT;
DataType dataType = null;
blockingClientHandler.setDataMode((DataMode) dataType, dataType);

Test 50: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
TheClient theClient = new TheClient();
((TheClient)0).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DefaultDataMode defaultDataMode = new DefaultDataMode();
DataMode dataMode = ((DefaultDataMode) _void).getDataMode(dataType);
blockingClientHandler.setDataMode(dataMode, dataType);

Test 51: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);

Test 52: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);

Test 53: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
((TheClient)0).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setDataMode(dataMode, dataType);

Test 54: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) dataType, (DataType) null);

Test 55: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
MockFile mockFile = new MockFile("large_file.pdf", "random_string");
MockPrintStream mockPrintStream = new MockPrintStream(mockFile);
BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream);
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
((TheClient) quickServer).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);

Test 56: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(12345);
((BlockingClientHandler)12345).clean();

Test 57: 

Test 58: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PushbackInputStream pushbackInputStream = new PushbackInputStream((InputStream) 58, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
blockingClientHandler.readInputStream();

Test 59: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
pushbackInputStream.read(byteArray);
blockingClientHandler.readInputStream();


* Generated after the refinement and before minimization 60 tests with total length 278
* test suite isTestSuite: 60
Test 0: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
// Undeclared exception!
try { 
  blockingClientHandler.registerForRead();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 1: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSelectionKey();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 2: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();
Test 3: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSocketChannel();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 4: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
// Undeclared exception!
try { 
  blockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 5: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
blockingClientHandler.getBufferedReader();
Test 6: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
// Undeclared exception!
try { 
  blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 7: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
blockingClientHandler.run();
Test 8: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-453));
// Undeclared exception!
try { 
  blockingClientHandler.setSelectionKey((SelectionKey) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 9: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.getBlockingMode();
Test 10: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSocketChannel((SocketChannel) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 11: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 12: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);
Test 13: 
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);
blockingClientHandler.setInputStream((InputStream) null);
Test 14: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeIN = dataMode;
blockingClientHandler.setInputStream(pipedInputStream);
Test 15: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();
Test 16: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 17: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
blockingClientHandler.in = (InputStream) pipedInputStream;
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 18: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.run();
Test 19: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, dataType);
Test 20: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DefaultDataMode defaultDataMode = new DefaultDataMode();
DataMode dataMode = defaultDataMode.getDataMode(dataType);
blockingClientHandler.setDataMode(dataMode, dataType);
Test 21: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.Reader", e);
}

Test 22: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.OUT;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 23: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setDataMode(dataMode, dataType);
Test 24: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeOUT = dataMode;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode((DataMode) null, dataType);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Unknown DataMode : null
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 25: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
MockFile mockFile = new MockFile("8K%5q`1!`sQ$zu?$y", "FF2Af%b*U91fu#u\u0002");
MockPrintStream mockPrintStream = new MockPrintStream(mockFile);
BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream);
blockingClientHandler.b_out = bufferedOutputStream;
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);
Test 26: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.clean();
Test 27: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.checkReturnClientHandler();
Test 28: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();
Test 29: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
bufferedInputStream.read(byteArray);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();
Test 30: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();
Test 31: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.registerForRead();

Test 32: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSelectionKey();

Test 33: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();

Test 34: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

Test 35: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1234);
((BlockingClientHandler)1234).registerForWrite();

Test 36: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1234);
((BlockingClientHandler)1234).getBufferedReader();

Test 37: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
((BlockingClientHandler)100).setClientWriteHandler((ClientWriteHandler) null);

Test 38: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("localhost", 8080);
TheClient theClient = new TheClient();
((TheClient)8080).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
blockingClientHandler.run();

Test 39: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(12345);
((BlockingClientHandler)12345).setSelectionKey((SelectionKey) null);

Test 40: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(2);

Test 41: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSocketChannel((SocketChannel) null);

Test 42: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

Test 43: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);

Test 44: 
QuickServer quickServer = new QuickServer();
CommandHandler commandHandler = new CommandHandler();
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.IN;
((BlockingClientHandler) dataType).setDataMode(dataMode, dataType);
InputStream inputStream = null;
((BlockingClientHandler) dataType).setInputStream(inputStream);

Test 45: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setInputStream((InputStream) null);

Test 46: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.closeConnection();
blockingClientHandler.setClientEventHandler(commandHandler);

Test 47: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.closeConnection();

Test 48: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(20);
((BlockingClientHandler)20).run();

Test 49: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) dataType, (DataType) null);
int _int = 100;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
DataType dataType = DataType.OUT;
DataType dataType = null;
blockingClientHandler.setDataMode((DataMode) dataType, dataType);
int _int = 100;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
DataType dataType = DataType.OUT;
DataType dataType = null;
blockingClientHandler.setDataMode((DataMode) dataType, dataType);

Test 50: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
TheClient theClient = new TheClient();
((TheClient)0).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DefaultDataMode defaultDataMode = new DefaultDataMode();
DataMode dataMode = ((DefaultDataMode) _void).getDataMode(dataType);
blockingClientHandler.setDataMode(dataMode, dataType);

Test 51: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);

Test 52: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);

Test 53: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
((TheClient)0).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setDataMode(dataMode, dataType);

Test 54: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) dataType, (DataType) null);

Test 55: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
MockFile mockFile = new MockFile("large_file.pdf", "random_string");
MockPrintStream mockPrintStream = new MockPrintStream(mockFile);
BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream);
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
((TheClient) quickServer).setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);

Test 56: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(12345);
((BlockingClientHandler)12345).clean();

Test 57: 

Test 58: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PushbackInputStream pushbackInputStream = new PushbackInputStream((InputStream) 58, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
blockingClientHandler.readInputStream();

Test 59: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
pushbackInputStream.read(byteArray);
blockingClientHandler.readInputStream();


* Minimizing test suite
* test suite isTestSuite: 31
Test 0: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSelectionKey();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 1: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();
Test 2: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSocketChannel();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 3: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
// Undeclared exception!
try { 
  blockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 4: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
blockingClientHandler.getBufferedReader();
Test 5: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
// Undeclared exception!
try { 
  blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 6: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
// Undeclared exception!
try { 
  blockingClientHandler.registerForRead();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 7: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();
Test 8: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-453));
// Undeclared exception!
try { 
  blockingClientHandler.setSelectionKey((SelectionKey) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 9: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.getBlockingMode();
Test 10: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSocketChannel((SocketChannel) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 11: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.checkReturnClientHandler();
Test 12: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 13: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);
Test 14: 
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);
blockingClientHandler.setInputStream((InputStream) null);
Test 15: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeIN = dataMode;
blockingClientHandler.setInputStream(pipedInputStream);
Test 16: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();
Test 17: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 18: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
blockingClientHandler.in = (InputStream) pipedInputStream;
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 19: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
blockingClientHandler.run();
Test 20: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.run();
Test 21: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, dataType);
Test 22: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.Reader", e);
}

Test 23: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DefaultDataMode defaultDataMode = new DefaultDataMode();
DataMode dataMode = defaultDataMode.getDataMode(dataType);
blockingClientHandler.setDataMode(dataMode, dataType);
Test 24: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.OUT;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 25: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setDataMode(dataMode, dataType);
Test 26: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeOUT = dataMode;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode((DataMode) null, dataType);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Unknown DataMode : null
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 27: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
MockFile mockFile = new MockFile("8K%5q`1!`sQ$zu?$y", "FF2Af%b*U91fu#u\u0002");
MockPrintStream mockPrintStream = new MockPrintStream(mockFile);
BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream);
blockingClientHandler.b_out = bufferedOutputStream;
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);
Test 28: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.clean();
Test 29: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();
Test 30: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
bufferedInputStream.read(byteArray);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 31%
* Total number of goals: 228
* Number of covered goals: 71
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 34%
* Total number of goals: 327
* Number of covered goals: 111
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 12%
* Total number of goals: 40
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 31%
* Total number of goals: 228
* Number of covered goals: 71
* Generated 31 tests with total length 142
* Resulting test suite's coverage: 42% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 41%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSelectionKey();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testGetSelectionKeyInBlockingMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();
assertEquals("<ClientHandler-Pool#-1-ID:3>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testCleanUpClientHandlerWhenFinalized
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSocketChannel();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testGetSocketChannelNonBlockingThrowsException
* Compiling Tests
refined test name is: testGetSocketChannelNonBlocking
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
// Undeclared exception!
try { 
  blockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testRegisterForWriteInBlockingMode
* Compiling Tests
refined test name is: testRegisterForWriteThrowsExceptionInBlockingMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
BufferedReader bufferedReader = blockingClientHandler.getBufferedReader();
assertNull(bufferedReader);


** It was a parseable test case! 
refined test name is: testGetBufferedReaderShouldReturnNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
// Undeclared exception!
try { 
  blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testSetClientWriteHandlerNullHandlerBlockingMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
// Undeclared exception!
try { 
  blockingClientHandler.registerForRead();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testRegisterForReadNegativeClientId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();
assertEquals(0, blockingClientHandler.getTimeout());


** It was a parseable test case! 
refined test name is: testReturnClientHandlerSetsTimeoutToZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-453));
// Undeclared exception!
try { 
  blockingClientHandler.setSelectionKey((SelectionKey) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: setSelectionKeyInBlockingModeTest
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
boolean blockingMode = blockingClientHandler.getBlockingMode();
assertTrue(blockingMode);


** It was a parseable test case! 
refined test name is: testBlockingModeEnabled
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSocketChannel((SocketChannel) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testSetSocketChannelToNullInBlockingMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
boolean checkReturnClientHandler = blockingClientHandler.checkReturnClientHandler();
assertTrue(checkReturnClientHandler);


** It was a parseable test case! 
refined test name is: testCheckReturnClientHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testUpdateInputStreamsThrowsNullPointerException
* Compiling Tests
refined test name is: testUpdateInputStreamsThrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);
assertEquals("<ClientHandler-Pool#-1-ID:17>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testBlockingClientHandlerGetName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PipedInputStream arg0 = new PipedInputStream();
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeIN = dataMode;
blockingClientHandler.setInputStream(arg0);
assertEquals("<ClientHandler-Pool#-1-ID:48>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testSetInputStream
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();
assertEquals("<ClientHandler-Pool#-1-ID:53>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testBlockingClientHandlerCloseConnection
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler arg0 = new CommandHandler();
blockingClientHandler.setClientEventHandler(arg0);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
assertEquals("<ClientHandler-Pool#-1-ID:62>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testGetNameReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler arg0 = new CommandHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
blockingClientHandler.in = (InputStream) pipedInputStream;
blockingClientHandler.setClientEventHandler(arg0);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
assertEquals("<ClientHandler-Pool#-1-ID:75>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testBlockingClientHandlerCloseConnection
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.run();
assertEquals("<ClientHandler-Pool#-2353-ID:5>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testBlockingClientHandlerName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
DataType arg1 = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, arg1);
assertEquals("<ClientHandler-Pool#-2353-ID:9>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: setDataModeTestWithNullFirstArgAndOutTypeArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.clean();
assertEquals("<ClientHandler-Pool#-2353-ID:13>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testInstantiationWithNegativeId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:26.575 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:26.612 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:26.669 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:26.670 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:26.731 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:26.732 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:26.808 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:26.809 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
[MASTER] 10:00:26.879 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:26.880 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:26.940 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:26.941 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.048 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.049 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.134 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.135 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.221 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.222 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.293 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.294 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.358 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.359 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.419 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.420 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:27.506 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.507 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.586 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.587 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.662 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.664 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.731 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.732 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.809 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.811 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.884 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.885 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:27.955 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:27.957 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:28.040 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:28.050 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:28.137 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:28.138 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
** Write a test suite: 12 called: 2 to improve: false
[MASTER] 10:00:28.934 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:28.938 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 8 called: 0 to improve: false
** Write a test suite: 17 called: 1 to improve: false
** Write a test suite: 18 called: 2 to improve: false
[MASTER] 10:00:29.694 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:29.697 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
[MASTER] 10:00:30.419 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 31
Test 0: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
// Undeclared exception!
try { 
  blockingClientHandler.registerForRead();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 1: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSelectionKey();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 2: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();
Test 3: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSocketChannel();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 4: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
// Undeclared exception!
try { 
  blockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 5: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
blockingClientHandler.getBufferedReader();
Test 6: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
// Undeclared exception!
try { 
  blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 7: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
blockingClientHandler.run();
Test 8: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-453));
// Undeclared exception!
try { 
  blockingClientHandler.setSelectionKey((SelectionKey) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 9: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.getBlockingMode();
Test 10: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSocketChannel((SocketChannel) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 11: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 12: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);
Test 13: 
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);
blockingClientHandler.setInputStream((InputStream) null);
Test 14: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeIN = dataMode;
blockingClientHandler.setInputStream(pipedInputStream);
Test 15: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();
Test 16: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 17: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
blockingClientHandler.in = (InputStream) pipedInputStream;
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 18: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.run();
Test 19: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, dataType);
Test 20: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DefaultDataMode defaultDataMode = new DefaultDataMode();
DataMode dataMode = defaultDataMode.getDataMode(dataType);
blockingClientHandler.setDataMode(dataMode, dataType);
Test 21: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.Reader", e);
}

Test 22: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.OUT;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 23: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setDataMode(dataMode, dataType);
Test 24: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeOUT = dataMode;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode((DataMode) null, dataType);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Unknown DataMode : null
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 25: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
MockFile mockFile = new MockFile("8K%5q`1!`sQ$zu?$y", "FF2Af%b*U91fu#u\u0002");
MockPrintStream mockPrintStream = new MockPrintStream(mockFile);
BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream);
blockingClientHandler.b_out = bufferedOutputStream;
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);
Test 26: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.clean();
Test 27: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.checkReturnClientHandler();
Test 28: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();
Test 29: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
bufferedInputStream.read(byteArray);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();
Test 30: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();

* Minimizing test suite
[MASTER] 10:00:34.855 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 31
Test 0: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
// Undeclared exception!
try { 
  blockingClientHandler.registerForRead();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 1: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSelectionKey();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 2: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();
Test 3: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSocketChannel();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 4: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
// Undeclared exception!
try { 
  blockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 5: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(785);
blockingClientHandler.getBufferedReader();
Test 6: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(100);
// Undeclared exception!
try { 
  blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 7: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();
Test 8: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-453));
// Undeclared exception!
try { 
  blockingClientHandler.setSelectionKey((SelectionKey) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 9: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.getBlockingMode();
Test 10: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSocketChannel((SocketChannel) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 11: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.checkReturnClientHandler();
Test 12: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 13: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);
Test 14: 
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.IN;
blockingClientHandler.setDataMode(dataMode, dataType);
blockingClientHandler.setInputStream((InputStream) null);
Test 15: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeIN = dataMode;
blockingClientHandler.setInputStream(pipedInputStream);
Test 16: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();
Test 17: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 18: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
PipedInputStream pipedInputStream = new PipedInputStream();
blockingClientHandler.in = (InputStream) pipedInputStream;
blockingClientHandler.setClientEventHandler(commandHandler);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 19: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
blockingClientHandler.run();
Test 20: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.run();
Test 21: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, dataType);
Test 22: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DefaultDataMode defaultDataMode = new DefaultDataMode();
DataMode dataMode = defaultDataMode.getDataMode(dataType);
blockingClientHandler.setDataMode(dataMode, dataType);
Test 23: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
CommandHandler commandHandler = new CommandHandler();
theClient.setClientCommandHandler(commandHandler);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.STRING;
DataType dataType = DataType.IN;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.io.Reader", e);
}

Test 24: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("{0} calling closeConnection()", 0);
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.OUT;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 25: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("", 0);
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.setDataMode(dataMode, dataType);
Test 26: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeOUT = dataMode;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode((DataMode) null, dataType);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Unknown DataMode : null
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 27: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
MockFile mockFile = new MockFile("8K%5q`1!`sQ$zu?$y", "FF2Af%b*U91fu#u\u0002");
MockPrintStream mockPrintStream = new MockPrintStream(mockFile);
BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(mockPrintStream);
blockingClientHandler.b_out = bufferedOutputStream;
QuickServer quickServer = new QuickServer();
TheClient theClient = new TheClient();
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
DataMode dataMode = DataMode.BYTE;
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode(dataMode, dataType);
Test 28: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-2353));
blockingClientHandler.clean();
Test 29: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();
Test 30: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
byte[] byteArray = new byte[1];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
PushbackInputStream pushbackInputStream = new PushbackInputStream(byteArrayInputStream, 58);
BufferedInputStream bufferedInputStream = new BufferedInputStream(pushbackInputStream);
bufferedInputStream.read(byteArray);
blockingClientHandler.b_in = bufferedInputStream;
blockingClientHandler.readInputStream();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 31%
* Total number of goals: 228
* Number of covered goals: 71
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 34%
* Total number of goals: 327
* Number of covered goals: 111
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 12%
* Total number of goals: 40
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 31%
* Total number of goals: 228
* Number of covered goals: 71
[MASTER] 10:00:35.180 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Generated 31 tests with total length 142
* Resulting test suite's coverage: 42% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 41%
* Compiling and checking tests
[MASTER] 10:00:37.418 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.223 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.226 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.277 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.278 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 10:00:39.333 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.334 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.393 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.393 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.446 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.447 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.509 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.510 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.567 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.568 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.622 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.623 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.674 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.675 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.736 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.737 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.802 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.803 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.888 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.890 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:39.981 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:39.982 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:40.045 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 10:00:40.046 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:40.132 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:40.133 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:40.217 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:40.218 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:40.281 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:40.285 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:40.384 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:40.385 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:40.479 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:40.480 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:40.569 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:40.570 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 10:00:40.644 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:40.645 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
[MASTER] 10:00:41.101 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:41.109 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
[MASTER] 10:00:41.713 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8765492768351661118.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 10:00:41.715 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8765492768351661118.jar
* Writing tests to file
[MASTER] 10:00:41.721 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'BlockingClientHandler_ESTest' to evosuite-tests
** Write a test suite: 8 called: 0 to improve: false
** Write a test suite: 17 called: 1 to improve: false
** Write a test suite: 18 called: 2 to improve: false
* Writing JUnit test case 'BlockingClientHandler_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
* Done!

* Computation finished
