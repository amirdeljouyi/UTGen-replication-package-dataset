* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.server.impl.NonBlockingClientHandler
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 19325
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 07:10:55.607 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.net.SocketOption
[MASTER] 07:10:55.662 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 07:10:55.663 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 07:10:55.664 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 07:10:55.721 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Supplier
[MASTER] 07:10:56.067 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 07:10:56.069 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 07:10:56.070 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 07:10:56.074 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 07:10:56.074 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 07:10:56.090 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 07:10:56.091 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 07:10:56.092 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 07:10:56.094 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 07:10:56.095 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 07:10:56.219 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 07:10:56.225 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.server.impl.NonBlockingClientHandler
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1838
* Using seed 1710400245161
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 284 / 1838
[MASTER] 07:10:57.466 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[Progress:>                             0%] [Cov:=======>                           20%][Progress:>                             1%] [Cov:=======>                           22%][Progress:>                             2%] [Cov:========>                          23%][Progress:>                             3%] [Cov:========>                          25%][Progress:>                             3%] [Cov:========>                          25%][Progress:=>                            4%] [Cov:========>                          25%][Progress:=>                            4%] [Cov:========>                          25%][Progress:=>                            4%] [Cov:========>                          25%][Progress:=>                            4%] [Cov:========>                          25%][Progress:=>                            5%] [Cov:=========>                         26%][Progress:=>                            5%] [Cov:=========>                         26%][Progress:=>                            5%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:==>                           7%] [Cov:=========>                         26%][Progress:==>                           7%] [Cov:=========>                         26%][Progress:==>                           7%] [Cov:=========>                         26%][Progress:==>                           7%] [Cov:=========>                         27%][Progress:==>                           7%] [Cov:=========>                         27%][Progress:==>                           8%] [Cov:=========>                         27%][Progress:==>                           8%] [Cov:=========>                         27%][Progress:==>                           8%] [Cov:=========>                         27%][Progress:==>                           8%] [Cov:=========>                         27%][Progress:==>                           8%] [Cov:=========>                         27%][Progress:==>                           9%] [Cov:=========>                         27%][Progress:==>                           9%] [Cov:=========>                         27%][Progress:==>                           9%] [Cov:=========>                         27%][Progress:==>                           9%] [Cov:=========>                         27%][Progress:==>                           9%] [Cov:=========>                         27%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     29%] [Cov:=========>                         28%][Progress:========>                     29%] [Cov:=========>                         28%][Progress:========>                     29%] [Cov:=========>                         28%][Progress:========>                     29%] [Cov:=========>                         28%][Progress:========>                     29%] [Cov:=========>                         28%][Progress:========>                     29%] [Cov:=========>                         28%][Progress:========>                     29%] [Cov:=========>                         28%][Progress:========>                     29%] [Cov:=========>                         28%][Progress:=========>                    30%] [Cov:=========>                         28%][Progress:=========>                    30%] [Cov:=========>                         28%][Progress:=========>                    30%] [Cov:=========>                         28%][Progress:=========>                    30%] [Cov:=========>                         28%][Progress:=========>                    30%] [Cov:=========>                         28%][Progress:=========>                    30%] [Cov:=========>                         28%][Progress:=========>                    31%] [Cov:=========>                         28%][Progress:=========>                    31%] [Cov:=========>                         28%][Progress:=========>                    32%] [Cov:=========>                         28%][Progress:=========>                    32%] [Cov:=========>                         28%][Progress:=========>                    32%] [Cov:=========>                         28%][Progress:=========>                    32%] [Cov:=========>                         28%][Progress:=========>                    32%] [Cov:=========>                         28%][Progress:=========>                    33%] [Cov:=========>                         28%][Progress:=========>                    33%] [Cov:=========>                         28%][Progress:=========>                    33%] [Cov:=========>                         28%][Progress:=========>                    33%] [Cov:=========>                         28%][Progress:==========>                   34%] [Cov:=========>                         28%][Progress:==========>                   34%] [Cov:=========>                         28%][Progress:==========>                   34%] [Cov:=========>                         28%][Progress:==========>                   34%] [Cov:=========>                         28%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:=========>                         28%][Progress:===========>                  37%] [Cov:=========>                         28%][Progress:===========>                  37%] [Cov:=========>                         28%][Progress:===========>                  37%] [Cov:=========>                         28%][Progress:===========>                  37%] [Cov:=========>                         28%][Progress:===========>                  37%] [Cov:=========>                         28%][Progress:===========>                  37%] [Cov:=========>                         28%][Progress:===========>                  37%] [Cov:=========>                         28%][Progress:===========>                  38%] [Cov:=========>                         28%][Progress:===========>                  38%] [Cov:=========>                         28%][Progress:===========>                  38%] [Cov:=========>                         28%][Progress:===========>                  38%] [Cov:=========>                         28%][Progress:===========>                  38%] [Cov:=========>                         28%][Progress:===========>                  38%] [Cov:=========>                         28%][Progress:===========>                  38%] [Cov:=========>                         28%][Progress:===========>                  38%] [Cov:=========>                         28%][Progress:===========>                  39%] [Cov:=========>                         28%][Progress:===========>                  39%] [Cov:=========>                         28%][Progress:===========>                  39%] [Cov:=========>                         28%][Progress:===========>                  39%] [Cov:=========>                         28%][Progress:===========>                  39%] [Cov:=========>                         28%][Progress:===========>                  39%] [Cov:=========>                         28%][Progress:============>                 40%] [Cov:=========>                         28%][Progress:============>                 40%] [Cov:=========>                         28%][Progress:============>                 41%] [Cov:=========>                         28%][Progress:============>                 41%] [Cov:=========>                         28%][Progress:============>                 41%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:=============>                44%] [Cov:=========>                         28%][Progress:=============>                44%] [Cov:=========>                         28%][Progress:=============>                44%] [Cov:=========>                         28%][Progress:=============>                44%] [Cov:=========>                         28%][Progress:=============>                44%] [Cov:=========>                         28%][Progress:=============>                44%] [Cov:=========>                         28%][Progress:=============>                44%] [Cov:=========>                         28%][Progress:=============>                45%] [Cov:=========>                         28%][Progress:==============>               47%] [Cov:=========>                         28%][Progress:==============>               47%] [Cov:=========>                         28%][Progress:==============>               47%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               48%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              52%] [Cov:=========>                         28%][Progress:===============>              52%] [Cov:=========>                         28%][Progress:===============>              52%] [Cov:=========>                         28%][Progress:===============>              52%] [Cov:=========>                         28%][Progress:===============>              52%] [Cov:=========>                         28%][Progress:===============>              52%] [Cov:=========>                         28%][Progress:===============>              52%] [Cov:=========>                         28%][Progress:===============>              53%] [Cov:=========>                         28%][Progress:===============>              53%] [Cov:=========>                         28%][Progress:===============>              53%] [Cov:=========>                         28%][Progress:===============>              53%] [Cov:=========>                         28%][Progress:===============>              53%] [Cov:=========>                         28%][Progress:===============>              53%] [Cov:=========>                         28%][Progress:===============>              53%] [Cov:=========>                         28%][Progress:===============>              53%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             54%] [Cov:=========>                         28%][Progress:================>             55%] [Cov:=========>                         28%][Progress:================>             55%] [Cov:=========>                         28%][Progress:=================>            57%] [Cov:=========>                         28%][Progress:=================>            59%] [Cov:=========>                         28%][Progress:=================>            59%] [Cov:=========>                         28%][Progress:=================>            59%] [Cov:=========>                         28%][Progress:=================>            59%] [Cov:=========>                         28%][Progress:=================>            59%] [Cov:=========>                         28%][Progress:=================>            59%] [Cov:=========>                         28%][Progress:==================>           60%] [Cov:=========>                         28%][Progress:==================>           60%] [Cov:=========>                         28%][Progress:==================>           60%] [Cov:=========>                         28%][Progress:==================>           60%] [Cov:=========>                         28%][Progress:==================>           60%] [Cov:=========>                         28%][Progress:==================>           60%] [Cov:=========>                         28%][Progress:==================>           60%] [Cov:=========>                         28%][Progress:==================>           61%] [Cov:=========>                         28%][Progress:==================>           61%] [Cov:=========>                         28%][Progress:==================>           61%] [Cov:=========>                         28%][Progress:==================>           61%] [Cov:=========>                         28%][Progress:==================>           61%] [Cov:=========>                         28%][Progress:==================>           61%] [Cov:=========>                         28%][Progress:==================>           61%] [Cov:=========>                         28%][Progress:==================>           61%] [Cov:=========>                         28%][Progress:==================>           62%] [Cov:=========>                         28%][Progress:==================>           62%] [Cov:=========>                         28%][Progress:==================>           62%] [Cov:=========>                         28%][Progress:==================>           62%] [Cov:=========>                         28%][Progress:==================>           62%] [Cov:=========>                         28%][Progress:==================>           62%] [Cov:=========>                         28%][Progress:==================>           63%] [Cov:=========>                         28%][Progress:==================>           63%] [Cov:=========>                         28%][Progress:==================>           63%] [Cov:=========>                         28%][Progress:==================>           63%] [Cov:=========>                         28%][Progress:==================>           63%] [Cov:=========>                         28%][Progress:==================>           63%] [Cov:=========>                         28%][Progress:==================>           63%] [Cov:=========>                         28%][Progress:==================>           63%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          65%] [Cov:=========>                         28%][Progress:===================>          65%] [Cov:=========>                         28%][Progress:===================>          66%] [Cov:=========>                         28%][Progress:===================>          66%] [Cov:=========>                         28%][Progress:===================>          66%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         68%] [Cov:=========>                         28%][Progress:====================>         68%] [Cov:=========>                         28%][Progress:====================>         68%] [Cov:=========>                         28%][Progress:====================>         68%] [Cov:=========>                         28%][Progress:====================>         68%] [Cov:=========>                         28%][Progress:====================>         68%] [Cov:=========>                         28%][Progress:====================>         68%] [Cov:=========>                         28%][Progress:====================>         68%] [Cov:=========>                         28%][Progress:====================>         68%] [Cov:=========>                         28%][Progress:====================>         69%] [Cov:=========>                         28%][Progress:====================>         69%] [Cov:=========>                         28%][Progress:====================>         69%] [Cov:=========>                         28%][Progress:====================>         69%] [Cov:=========>                         28%][Progress:====================>         69%] [Cov:=========>                         28%][Progress:====================>         69%] [Cov:=========>                         28%][Progress:====================>         69%] [Cov:=========>                         28%][Progress:====================>         69%] [Cov:=========>                         28%][Progress:====================>         69%] [Cov:=========>                         28%][Progress:=====================>        70%] [Cov:=========>                         28%][Progress:=====================>        70%] [Cov:=========>                         28%][Progress:=====================>        70%] [Cov:=========>                         28%][Progress:=====================>        70%] [Cov:=========>                         28%][Progress:=====================>        70%] [Cov:=========>                         28%][Progress:=====================>        70%] [Cov:=========>                         28%][Progress:=====================>        70%] [Cov:=========>                         28%][Progress:=====================>        70%] [Cov:==========>                        29%][Progress:=====================>        70%] [Cov:==========>                        29%][Progress:=====================>        70%] [Cov:==========>                        29%][Progress:=====================>        70%] [Cov:==========>                        29%][Progress:=====================>        70%] [Cov:==========>                        29%][Progress:=====================>        70%] [Cov:==========>                        29%][Progress:=====================>        71%] [Cov:==========>                        29%][Progress:=====================>        71%] [Cov:==========>                        29%][Progress:=====================>        71%] [Cov:==========>                        29%][Progress:=====================>        71%] [Cov:==========>                        29%][Progress:=====================>        71%] [Cov:==========>                        29%][Progress:=====================>        71%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       74%] [Cov:==========>                        29%][Progress:======================>       75%] [Cov:==========>                        29%][Progress:======================>       75%] [Cov:==========>                        29%][Progress:======================>       75%] [Cov:==========>                        29%][Progress:======================>       75%] [Cov:==========>                        29%][Progress:======================>       75%] [Cov:==========>                        29%][Progress:======================>       75%] [Cov:==========>                        29%][Progress:======================>       75%] [Cov:==========>                        29%][Progress:======================>       75%] [Cov:==========>                        29%][Progress:======================>       75%] [Cov:==========>                        29%][Progress:======================>       75%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        30%][Progress:========================>     82%] [Cov:==========>                        30%][Progress:========================>     82%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:========================>     83%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        30%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:==========================>   87%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>98%] [Cov:===========>                       32%][Progress:=============================>98%] [Cov:===========>                       32%][Progress:=============================>98%] [Cov:===========>                       32%][Progress:=============================>98%] [Cov:===========>                       32%][Progress:=============================>98%] [Cov:===========>                       32%][Progress:=============================>98%] [Cov:===========>                       32%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>98%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:=============================>99%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%][Progress:==============================100%] [Cov:===========>                       33%]
* Search finished after 202s and 537 generations, 102672 statements, best individual has fitness: 1446.0
* Generated before the refinement 44 tests with total length 122
statement is: getMaxThreadAccessCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int maxThreadAccessCount = NonBlockingClientHandler.getMaxThreadAccessCount()
test data is: NonBlockingClientHandler.getMaxThreadAccessCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before
        int maxThreadAccessCount = 10;
        String username = "John Doe";
        // After
        int maxThreadAccessCount = 25;// more than the default value of 10 to test if the code is using the correct value

        String username = "Jane Smith";// a different user name to test if the code is able to handle multiple users }}

    }
}
statement is: // Before
int maxThreadAccessCount = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // After
int maxThreadAccessCount = 25// more than the default value of 10 to test if the code is using the correct value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "Jane Smith"// a different user name to test if the code is able to handle multiple users }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "John Doe"
* this is vulnerable: int _int = 25
* this is vulnerable: String string = "Jane Smith"
TestCase is: int _int = 10;
String string = "John Doe";
int _int = 25;
String string = "Jane Smith";

statement is: getWakeupSelectorAfterRegisterRead()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean wakeupSelectorAfterRegisterRead = NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead()
test data is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private AtomicBoolean wakeupSelectorAfterRegisterRead = new AtomicBoolean(true);

    public void setWakeupSelectorAfterRegisterRead() {
        this.wakeupSelectorAfterRegisterRead.set(false);
    }

    public boolean getWakeupSelectorAfterRegisterRead() {
        return this.wakeupSelectorAfterRegisterRead.get();
    }
}
statement is: return this.wakeupSelectorAfterRegisterRead.get(), class spoon.support.reflect.code.CtReturnImpl
statement is: this.wakeupSelectorAfterRegisterRead.set(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: this.wakeupSelectorAfterRegisterRead.set(false) target is: this.wakeupSelectorAfterRegisterRead method is: set(boolean)
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: finalize()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.finalize()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.finalize();
        // Improved test data
        int timeout = 10;
        String hostname = "localhost";
        int port = 8080;
        nonBlockingClientHandler.setTimeout(timeout);
        nonBlockingClientHandler.connect(hostname, port);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.finalize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.finalize() target is: nonBlockingClientHandler method is: finalize()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: finalize()V
statement is: // Improved test data
int timeout = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostname = "localhost", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int port = 8080, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: nonBlockingClientHandler.setTimeout(timeout), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setTimeout(timeout) target is: nonBlockingClientHandler method is: setTimeout(int)
statement is: nonBlockingClientHandler.connect(hostname, port), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.connect(hostname, port) target is: nonBlockingClientHandler method is: connect(java.lang.String,int)
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "localhost"
* this is vulnerable: int _int = 8080
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
int _int = 10;
String string = "localhost";
int _int = 8080;

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: getInitialHandshakeStatus()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean initialHandshakeStatus = nonBlockingClientHandler.getInitialHandshakeStatus()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Mock client handler with a known state for testing different scenarios
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.setInitialHandshakeStatus(true);// set to true for a successful handshake

        // Test case 1: Check if the initial handshake has been established
        assertTrue(nonBlockingClientHandler.getInitialHandshakeStatus());
        // Test case 2: Check if the initial handshake has not been established
        nonBlockingClientHandler.setInitialHandshakeStatus(false);
        assertFalse(nonBlockingClientHandler.getInitialHandshakeStatus());
        // Additional test cases as needed... }}
    }
}
statement is: // Mock client handler with a known state for testing different scenarios
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setInitialHandshakeStatus(true)// set to true for a successful handshake
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setInitialHandshakeStatus(true)// set to true for a successful handshake
 target is: nonBlockingClientHandler method is: setInitialHandshakeStatus(boolean)
statement is: // Test case 1: Check if the initial handshake has been established
assertTrue(nonBlockingClientHandler.getInitialHandshakeStatus()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test case 1: Check if the initial handshake has been established
assertTrue(nonBlockingClientHandler.getInitialHandshakeStatus()) target is:  method is: assertTrue(<unknown>)
statement is: // Test case 2: Check if the initial handshake has not been established
nonBlockingClientHandler.setInitialHandshakeStatus(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test case 2: Check if the initial handshake has not been established
nonBlockingClientHandler.setInitialHandshakeStatus(false) target is: nonBlockingClientHandler method is: setInitialHandshakeStatus(boolean)
statement is: assertFalse(nonBlockingClientHandler.getInitialHandshakeStatus()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(nonBlockingClientHandler.getInitialHandshakeStatus()) target is:  method is: assertFalse(<unknown>)
statement is: // Additional test cases as needed... }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: getWakeupSelectorAfterRegisterWrite()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean wakeupSelectorAfterRegisterWrite = NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite()
test data is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
        // Improved test data
        String registerMessage = "REGISTER message";
        int registerTimeout = 50;
        assertEquals(registerMessage, NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite());
        assertEquals(registerTimeout, NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite().intValue());
    }
}
statement is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite() target is: NonBlockingClientHandler method is: getWakeupSelectorAfterRegisterWrite()
Matched Method is: getWakeupSelectorAfterRegisterWrite()Z
statement is: // Improved test data
String registerMessage = "REGISTER message", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int registerTimeout = 50, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(registerMessage, NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(registerMessage, NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: assertEquals(registerTimeout, NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite().intValue()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(registerTimeout, NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite().intValue()) target is:  method is: assertEquals(int,<unknown>)
* this is vulnerable: String string = "REGISTER message"
* this is vulnerable: int _int = 50
TestCase is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
String string = "REGISTER message";
int _int = 50;

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5)
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.run()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(10);
        nonBlockingClientHandler.run();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.run() target is: nonBlockingClientHandler method is: run()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 1
Matched Method is: run()V
TestCase is: int _int = 10;
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(_int);
((NonBlockingClientHandler) _int).run();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: org.quickserver.net.server.QuickServer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer()
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.handleClient(arg0)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer();
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        TheClient theClient = new TheClient("John Doe", 34, "johndoe@example.com");
        QuickServer quickServer = new QuickServer(8080);
        theClient.setServer(quickServer);
        nonBlockingClientHandler.handleClient(theClient);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient("John Doe", 34, "johndoe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: QuickServer quickServer = new QuickServer(8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
statement is: nonBlockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.handleClient(theClient) target is: nonBlockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = null;
nonBlockingClientHandler.handleClient(theClient);

statement is: setWakeupSelectorAfterRegisterRead(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false)
statement is: getWakeupSelectorAfterRegisterRead()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean wakeupSelectorAfterRegisterRead = NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead()
test data is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(true);
        NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
        NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
        NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
    }
}
statement is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(true) target is: NonBlockingClientHandler method is: setWakeupSelectorAfterRegisterRead(boolean)
Matched Method is: setWakeupSelectorAfterRegisterRead(Z)V
statement is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead() target is: NonBlockingClientHandler method is: getWakeupSelectorAfterRegisterRead()
Matched Method is: getWakeupSelectorAfterRegisterRead()Z
statement is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false) target is: NonBlockingClientHandler method is: setWakeupSelectorAfterRegisterRead(boolean)
Matched Method is: setWakeupSelectorAfterRegisterRead(Z)V
statement is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead() target is: NonBlockingClientHandler method is: getWakeupSelectorAfterRegisterRead()
Matched Method is: getWakeupSelectorAfterRegisterRead()Z
TestCase is: boolean _boolean = true;
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(_boolean);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
boolean _boolean = false;
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(_boolean);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: getBlockingMode()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean blockingMode = nonBlockingClientHandler.getBlockingMode()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.getBlockingMode();
        // Improved test data
        // Instead of using a primitive value, use a more descriptive and representative String to represent the blocking mode.
        String blockingMode = "NON_BLOCKING";
        // Use a more illustrative example for the input parameter. In this case, we are testing the getBlockingMode() method with a valid input, so we can use a non-null value.
        nonBlockingClientHandler.getBlockingMode(blockingMode);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.getBlockingMode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getBlockingMode() target is: nonBlockingClientHandler method is: getBlockingMode()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: getBlockingMode()Z
statement is: // Improved test data
// Instead of using a primitive value, use a more descriptive and representative String to represent the blocking mode.
String blockingMode = "NON_BLOCKING", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Use a more illustrative example for the input parameter. In this case, we are testing the getBlockingMode() method with a valid input, so we can use a non-null value.
nonBlockingClientHandler.getBlockingMode(blockingMode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Use a more illustrative example for the input parameter. In this case, we are testing the getBlockingMode() method with a valid input, so we can use a non-null value.
nonBlockingClientHandler.getBlockingMode(blockingMode) target is: nonBlockingClientHandler method is: getBlockingMode(java.lang.String)
* this is vulnerable: String string = "NON_BLOCKING"
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();
String string = "NON_BLOCKING";

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: getThreadAccessCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.getThreadAccessCount();
        int expectedAccessCount = 10;// The actual access count is 10, which is a more descriptive and representative value for the situation being tested.

        assertEquals(expectedAccessCount, nonBlockingClientHandler.getThreadAccessCount());
    }
}
statement is: // Improved test data:
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.getThreadAccessCount(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getThreadAccessCount() target is: nonBlockingClientHandler method is: getThreadAccessCount()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: getThreadAccessCount()I
statement is: int expectedAccessCount = 10// The actual access count is 10, which is a more descriptive and representative value for the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedAccessCount, nonBlockingClientHandler.getThreadAccessCount()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedAccessCount, nonBlockingClientHandler.getThreadAccessCount()) target is:  method is: assertEquals(int,<unknown>)
* this is vulnerable: int _int = 10
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();
int _int = 10;

statement is: setWakeupSelectorAfterRegisterWrite(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false)
statement is: getWakeupSelectorAfterRegisterWrite()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean wakeupSelectorAfterRegisterWrite = NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite()
test data is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(enableWakeupSelector);
        NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
    }
}
statement is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(enableWakeupSelector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(enableWakeupSelector) target is: NonBlockingClientHandler method is: setWakeupSelectorAfterRegisterWrite()
Matched Method is: setWakeupSelectorAfterRegisterWrite(Z)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite() target is: NonBlockingClientHandler method is: getWakeupSelectorAfterRegisterWrite()
Matched Method is: getWakeupSelectorAfterRegisterWrite()Z
TestCase is: boolean _boolean = null;
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(_boolean);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: getBufferedReader()Ljava/io/BufferedReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.BufferedReader
statement code is: BufferedReader bufferedReader = nonBlockingClientHandler.getBufferedReader()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBufferedReader();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the code snippet
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler("example.com", 80);
        nonBlockingClientHandler.getBufferedReader();
    }
}
statement is: // Improved test data for the code snippet
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler("example.com", 80), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.getBufferedReader(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getBufferedReader() target is: nonBlockingClientHandler method is: getBufferedReader()
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setSelectionKey((SelectionKey) null)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.setSelectionKey(OP_READ);
        nonBlockingClientHandler.setSocketChannel(new SocketChannel());
        nonBlockingClientHandler.setBuffer(ByteBuffer.allocate(1024));
    }
}
statement is: // Improved test data:
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setSelectionKey(OP_READ), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setSelectionKey(OP_READ) target is: nonBlockingClientHandler method is: setSelectionKey()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: nonBlockingClientHandler.setSocketChannel(new SocketChannel()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setSocketChannel(new SocketChannel()) target is: nonBlockingClientHandler method is: setSocketChannel(SocketChannel)
statement is: nonBlockingClientHandler.setBuffer(ByteBuffer.allocate(1024)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setBuffer(ByteBuffer.allocate(1024)) target is: nonBlockingClientHandler method is: setBuffer()
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
SelectionKey selectionKey = null;
nonBlockingClientHandler.setSelectionKey(selectionKey);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@c596b5b2 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.ClientEvent
statement code is: ClientEvent clientEvent = ClientEvent.RUN_BLOCKING
statement is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.addEvent(arg0)
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.run()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.RUN_BLOCKING;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        ClientEvent clientEvent = ClientEvent.RUN_NON_BLOCKING;
        nonBlockingClientHandler.addEvent(clientEvent);
        nonBlockingClientHandler.run();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientEvent clientEvent = ClientEvent.RUN_NON_BLOCKING, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ClientEvent.RUN_NON_BLOCKING is ClientEvent
CtField is: public static org.quickserver.net.server.ClientEvent org.quickserver.net.server.ClientEvent.RUN_BLOCKING ClientEvent RUN_BLOCKING
statement is: nonBlockingClientHandler.addEvent(clientEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.addEvent(clientEvent) target is: nonBlockingClientHandler method is: addEvent(ClientEvent)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V
statement is: nonBlockingClientHandler.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.run() target is: nonBlockingClientHandler method is: run()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: run()V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.RUN_BLOCKING;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();

statement is: setMaxThreadAccessCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: NonBlockingClientHandler.setMaxThreadAccessCount(1485)
test data is: NonBlockingClientHandler.setMaxThreadAccessCount(1485);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.setMaxThreadAccessCount(1000);
    }
}
statement is: NonBlockingClientHandler.setMaxThreadAccessCount(1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.setMaxThreadAccessCount(1000) target is: NonBlockingClientHandler method is: setMaxThreadAccessCount(int)
Matched Method is: setMaxThreadAccessCount(I)V
TestCase is: int _int = 1000;
NonBlockingClientHandler.setMaxThreadAccessCount(_int);

statement is: setMaxThreadAccessCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: NonBlockingClientHandler.setMaxThreadAccessCount((-1))
statement is: getMaxThreadAccessCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int maxThreadAccessCount = NonBlockingClientHandler.getMaxThreadAccessCount()
test data is: NonBlockingClientHandler.setMaxThreadAccessCount((-1));
NonBlockingClientHandler.getMaxThreadAccessCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.setMaxThreadAccessCount(10);
        NonBlockingClientHandler.getMaxThreadAccessCount();
    }
}
statement is: NonBlockingClientHandler.setMaxThreadAccessCount(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.setMaxThreadAccessCount(10) target is: NonBlockingClientHandler method is: setMaxThreadAccessCount(int)
Matched Method is: setMaxThreadAccessCount(I)V
statement is: NonBlockingClientHandler.getMaxThreadAccessCount(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.getMaxThreadAccessCount() target is: NonBlockingClientHandler method is: getMaxThreadAccessCount()
Matched Method is: getMaxThreadAccessCount()I
TestCase is: int _int = 10;
NonBlockingClientHandler.setMaxThreadAccessCount(_int);
NonBlockingClientHandler.getMaxThreadAccessCount();

statement is: setMaxThreadAccessCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: NonBlockingClientHandler.setMaxThreadAccessCount((-974))
test data is: NonBlockingClientHandler.setMaxThreadAccessCount((-974));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.setMaxThreadAccessCount(10);
    }
}
statement is: NonBlockingClientHandler.setMaxThreadAccessCount(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.setMaxThreadAccessCount(10) target is: NonBlockingClientHandler method is: setMaxThreadAccessCount(int)
Matched Method is: setMaxThreadAccessCount(I)V
TestCase is: int _int = 10;
NonBlockingClientHandler.setMaxThreadAccessCount(_int);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.AssignmentStatement@48d6947c type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: nonBlockingClientHandler.threadAccessCount = 53
statement is: clean()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.clean()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.threadAccessCount = 53;
nonBlockingClientHandler.clean();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.threadAccessCount = 10;
        nonBlockingClientHandler.clean();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.threadAccessCount = 10, class spoon.support.reflect.code.CtAssignmentImpl
statement is: nonBlockingClientHandler.clean(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.clean() target is: nonBlockingClientHandler method is: clean()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: clean()V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@ca1f6ac0 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.STRING
statement is: org.evosuite.testcase.statements.AssignmentStatement@59d9ef2c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.quickserver.net.server.DataMode
statement code is: nonBlockingClientHandler.dataModeIN = dataMode
statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setInputStream(arg0)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.STRING;
nonBlockingClientHandler.dataModeIN = dataMode;
PipedInputStream pipedInputStream = new PipedInputStream();
nonBlockingClientHandler.setInputStream(pipedInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        DataMode dataMode = DataMode.STRING;// Changed from "DataMode.STRING" to a more descriptive name, such as "chatDataMode".

        nonBlockingClientHandler.dataModeIN = dataMode;
        PipedInputStream pipedInputStream = new PipedInputStream();
        nonBlockingClientHandler.setInputStream(pipedInputStream);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataMode dataMode = DataMode.STRING// Changed from "DataMode.STRING" to a more descriptive name, such as "chatDataMode".
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.STRING is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.STRING DataMode STRING
statement is: nonBlockingClientHandler.dataModeIN = dataMode, class spoon.support.reflect.code.CtAssignmentImpl
statement is: PipedInputStream pipedInputStream = new PipedInputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setInputStream(pipedInputStream), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setInputStream(pipedInputStream) target is: nonBlockingClientHandler method is: setInputStream(PipedInputStream)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setInputStream(Ljava/io/InputStream;)V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.STRING;
PipedInputStream pipedInputStream = new PipedInputStream();
nonBlockingClientHandler.setInputStream(pipedInputStream);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@c9d56d8b type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.BYTE
statement is: org.evosuite.testcase.statements.AssignmentStatement@94caeb85 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.quickserver.net.server.DataMode
statement code is: nonBlockingClientHandler.dataModeIN = dataMode
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setInputStream((InputStream) null)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.dataModeIN = dataMode;
nonBlockingClientHandler.setInputStream((InputStream) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        DataMode dataMode = DataMode.BYTE;
        nonBlockingClientHandler.dataModeIN = dataMode;
        nonBlockingClientHandler.setInputStream(new ByteArrayInputStream("ABC".getBytes()));
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataMode dataMode = DataMode.BYTE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.BYTE is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.BYTE DataMode BYTE
statement is: nonBlockingClientHandler.dataModeIN = dataMode, class spoon.support.reflect.code.CtAssignmentImpl
statement is: nonBlockingClientHandler.setInputStream(new ByteArrayInputStream("ABC".getBytes())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setInputStream(new ByteArrayInputStream("ABC".getBytes())) target is: nonBlockingClientHandler method is: setInputStream(ByteArrayInputStream)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setInputStream(Ljava/io/InputStream;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
InputStream inputStream = null;
nonBlockingClientHandler.setInputStream(inputStream);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.AssignmentStatement@40922965 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: nonBlockingClientHandler.connection = true
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.closeConnection()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
nonBlockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler("localhost", 8080);
        nonBlockingClientHandler.connection = true;
        nonBlockingClientHandler.closeConnection();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler("localhost", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.connection = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: nonBlockingClientHandler.closeConnection(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.closeConnection() target is: nonBlockingClientHandler method is: closeConnection()
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.closeConnection()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.closeConnection();
        // Improved test data
        nonBlockingClientHandler = new NonBlockingClientHandler("127.0.0.1", 8080);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.closeConnection(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.closeConnection() target is: nonBlockingClientHandler method is: closeConnection()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: closeConnection()V
statement is: // Improved test data
nonBlockingClientHandler = new NonBlockingClientHandler("127.0.0.1", 8080), class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: setSecure(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setSecure(true)
statement is: closeIfSSLOutboundDone()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean closeIfSSLOutboundDone = nonBlockingClientHandler.closeIfSSLOutboundDone()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
nonBlockingClientHandler.closeIfSSLOutboundDone();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        boolean secureConnection = true;// change this to false if the connection is not secure

        String message = "Goodbye, world!";
        nonBlockingClientHandler.setSecure(secureConnection);
        nonBlockingClientHandler.closeIfSSLOutboundDone();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: boolean secureConnection = true// change this to false if the connection is not secure
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String message = "Goodbye, world!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: nonBlockingClientHandler.setSecure(secureConnection), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setSecure(secureConnection) target is: nonBlockingClientHandler method is: setSecure(boolean)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setSecure(Z)V
statement is: nonBlockingClientHandler.closeIfSSLOutboundDone(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.closeIfSSLOutboundDone() target is: nonBlockingClientHandler method is: closeIfSSLOutboundDone()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: closeIfSSLOutboundDone()Z
* this is vulnerable: String string = "Goodbye, world!"
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
boolean _boolean = true;
String string = "Goodbye, world!";
nonBlockingClientHandler.setSecure(_boolean);
nonBlockingClientHandler.closeIfSSLOutboundDone();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: closeIfSSLOutboundDone()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean closeIfSSLOutboundDone = nonBlockingClientHandler.closeIfSSLOutboundDone()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeIfSSLOutboundDone();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.closeIfSSLOutboundDone(new SSLSession("some_ssl_session"));
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.closeIfSSLOutboundDone(new SSLSession("some_ssl_session")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.closeIfSSLOutboundDone(new SSLSession("some_ssl_session")) target is: nonBlockingClientHandler method is: closeIfSSLOutboundDone(SSLSession)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: checkReturnClientHandler()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean checkReturnClientHandler = nonBlockingClientHandler.checkReturnClientHandler()
statement is: checkReturnClientHandler()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean checkReturnClientHandler = nonBlockingClientHandler.checkReturnClientHandler()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler("localhost", 8080);
        nonBlockingClientHandler.checkReturnClientHandler("connected");
        nonBlockingClientHandler.checkReturnClientHandler("disconnected");
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler("localhost", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.checkReturnClientHandler("connected"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.checkReturnClientHandler("connected") target is: nonBlockingClientHandler method is: checkReturnClientHandler(java.lang.String)
statement is: nonBlockingClientHandler.checkReturnClientHandler("disconnected"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.checkReturnClientHandler("disconnected") target is: nonBlockingClientHandler method is: checkReturnClientHandler(java.lang.String)
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: returnThread()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.returnThread()
statement is: returnClientHandler()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.returnClientHandler()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1000);// set the timeout to 1 second for testing purposes

        nonBlockingClientHandler.returnThread();
        nonBlockingClientHandler.returnClientHandler();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1000)// set the timeout to 1 second for testing purposes
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.returnThread(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.returnThread() target is: nonBlockingClientHandler method is: returnThread()
statement is: nonBlockingClientHandler.returnClientHandler(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.returnClientHandler() target is: nonBlockingClientHandler method is: returnClientHandler()
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5)
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setDataMode((DataMode) null, arg1)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
        DataType dataType = DataType.OUT;
        nonBlockingClientHandler.setDataMode(((DataMode) (null)), dataType);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataType dataType = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: nonBlockingClientHandler.setDataMode(((DataMode) (null)), dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setDataMode(((DataMode) (null)), dataType) target is: nonBlockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 1
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: int _int = 5;
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(_int);
DataType dataType = DataType.OUT;
DataType dataType = null;
((NonBlockingClientHandler) _int).setDataMode((DataMode) dataType, dataType);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: getGlobal()Ljava/util/logging/Logger; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.logging.Logger
statement code is: Logger global = Logger.getGlobal()
statement is: org.evosuite.testcase.statements.AssignmentStatement@1f7b1cff type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.util.logging.Logger
statement code is: nonBlockingClientHandler.appLogger = logger
statement is: org.evosuite.testcase.statements.FieldStatement@c9d56d8b type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.BYTE
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setDataMode(arg0, arg1)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        DataType dataType = DataType.OUT;// Changed from "IN" to make the test more realistic

        Logger global = Logger.getGlobal();
        nonBlockingClientHandler.appLogger = global;
        DataMode dataMode = DataMode.BYTE;// Changed from "BLOCKING" to make the test more realistic

        nonBlockingClientHandler.setDataMode(dataMode, dataType);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataType dataType = DataType.OUT// Changed from "IN" to make the test more realistic
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: Logger global = Logger.getGlobal(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Logger.getGlobal() target is: Logger method is: getGlobal()
Matched Method is: getGlobal()Ljava/util/logging/Logger;
statement is: nonBlockingClientHandler.appLogger = global, class spoon.support.reflect.code.CtAssignmentImpl
statement is: DataMode dataMode = DataMode.BYTE// Changed from "BLOCKING" to make the test more realistic
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.BYTE is DataMode
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.BYTE DataMode BYTE
statement is: nonBlockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setDataMode(dataMode, dataType) target is: nonBlockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger.getGlobal();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: getGlobal()Ljava/util/logging/Logger; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.logging.Logger
statement code is: Logger global = Logger.getGlobal()
statement is: org.evosuite.testcase.statements.AssignmentStatement@8b5cdd7b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.util.logging.Logger
statement code is: nonBlockingClientHandler.appLogger = logger
statement is: org.quickserver.net.server.QuickServer()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer()
statement is: getDefaultDataMode(Lorg/quickserver/net/server/DataType;)Lorg/quickserver/net/server/DataMode; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode defaultDataMode = quickServer.getDefaultDataMode(arg0)
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setDataMode(arg0, arg1)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
QuickServer quickServer = new QuickServer();
DataMode defaultDataMode = quickServer.getDefaultDataMode(dataType);
nonBlockingClientHandler.setDataMode(defaultDataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        Logger global = Logger.getGlobal();
        nonBlockingClientHandler.appLogger = global;
        QuickServer quickServer = new QuickServer();
        DataMode defaultDataMode = quickServer.getDefaultDataMode(dataType);
        nonBlockingClientHandler.setDataMode(defaultDataMode, dataType);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Logger global = Logger.getGlobal(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Logger.getGlobal() target is: Logger method is: getGlobal()
Matched Method is: getGlobal()Ljava/util/logging/Logger;
statement is: nonBlockingClientHandler.appLogger = global, class spoon.support.reflect.code.CtAssignmentImpl
statement is: QuickServer quickServer = new QuickServer(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataMode defaultDataMode = quickServer.getDefaultDataMode(dataType), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: quickServer.getDefaultDataMode(dataType) target is: quickServer method is: getDefaultDataMode()
source statement: org.quickserver.net.server.QuickServer()V callee: VariableReference: Statement 4, type org.quickserver.net.server.QuickServerindex is: 2
Matched Method is: getDefaultDataMode(Lorg/quickserver/net/server/DataType;)Lorg/quickserver/net/server/DataMode;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: getDefaultDataMode(Lorg/quickserver/net/server/DataType;)Lorg/quickserver/net/server/DataMode;
statement is: nonBlockingClientHandler.setDataMode(defaultDataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setDataMode(defaultDataMode, dataType) target is: nonBlockingClientHandler method is: setDataMode(DataMode)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
* this is vulnerable: DataType dataType = null
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
Logger.getGlobal();
QuickServer quickServer = new QuickServer();
DataType dataType = null;
DataMode dataMode = null;
DataType dataType = null;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: getGlobal()Ljava/util/logging/Logger; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.logging.Logger
statement code is: Logger global = Logger.getGlobal()
statement is: org.evosuite.testcase.statements.AssignmentStatement@ddf92e92 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.util.logging.Logger
statement code is: nonBlockingClientHandler.appLogger = logger
statement is: org.evosuite.testcase.statements.FieldStatement@fdb0d496 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.OBJECT
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setDataMode(arg0, arg1)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.OBJECT;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        DataType dataType = DataType.OUT;
        Logger global = Logger.getGlobal();
        nonBlockingClientHandler.appLogger = global;
        DataMode dataMode = DataMode.OBJECT;
        nonBlockingClientHandler.setDataMode(dataMode, dataType);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataType dataType = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: Logger global = Logger.getGlobal(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Logger.getGlobal() target is: Logger method is: getGlobal()
Matched Method is: getGlobal()Ljava/util/logging/Logger;
statement is: nonBlockingClientHandler.appLogger = global, class spoon.support.reflect.code.CtAssignmentImpl
statement is: DataMode dataMode = DataMode.OBJECT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.OBJECT is DataMode
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.OBJECT DataMode OBJECT
statement is: nonBlockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setDataMode(dataMode, dataType) target is: nonBlockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger.getGlobal();
DataMode dataMode = DataMode.OBJECT;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: getGlobal()Ljava/util/logging/Logger; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.logging.Logger
statement code is: Logger global = Logger.getGlobal()
statement is: org.evosuite.testcase.statements.AssignmentStatement@59f34c57 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.util.logging.Logger
statement code is: nonBlockingClientHandler.appLogger = logger
statement is: org.evosuite.testcase.statements.FieldStatement@bcdd29f0 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.BINARY
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setDataMode(arg0, arg1)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BINARY;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        DataType dataType = DataType.OUT;// instead of using the default value, provide a more descriptive example like "OUT_DATA" or "IN_DATA"

        Logger global = Logger.getGlobal();
        nonBlockingClientHandler.appLogger = global;// instead of using the default value, provide a more descriptive example like "myCustomLogger"

        DataMode dataMode = DataMode.BINARY;// instead of using the default value, provide a more descriptive example like "TEXT_DATA" or "IMAGE_DATA"

        nonBlockingClientHandler.setDataMode(dataMode, dataType);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataType dataType = DataType.OUT// instead of using the default value, provide a more descriptive example like "OUT_DATA" or "IN_DATA"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: Logger global = Logger.getGlobal(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Logger.getGlobal() target is: Logger method is: getGlobal()
Matched Method is: getGlobal()Ljava/util/logging/Logger;
statement is: nonBlockingClientHandler.appLogger = global// instead of using the default value, provide a more descriptive example like "myCustomLogger"
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: DataMode dataMode = DataMode.BINARY// instead of using the default value, provide a more descriptive example like "TEXT_DATA" or "IMAGE_DATA"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.BINARY is DataMode
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.BINARY DataMode BINARY
statement is: nonBlockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setDataMode(dataMode, dataType) target is: nonBlockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger.getGlobal();
DataMode dataMode = DataMode.BINARY;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: registerForWrite()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.registerForWrite()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerForWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int port = 8080;// change this to a more descriptive value, such as 80

        String host = "localhost";// change this to a more descriptive value, such as "example.com"

        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.registerForWrite();
    }
}
statement is: int port = 8080// change this to a more descriptive value, such as 80
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String host = "localhost"// change this to a more descriptive value, such as "example.com"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.registerForWrite(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.registerForWrite() target is: nonBlockingClientHandler method is: registerForWrite()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 2
Matched Method is: registerForWrite()V
* this is vulnerable: String string = "localhost"
TestCase is: int _int = 8080;
String string = "localhost";
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
((NonBlockingClientHandler) _int).registerForWrite();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5)
statement is: getSocketChannel()Ljava/nio/channels/SocketChannel; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SocketChannel
statement code is: SocketChannel socketChannel = nonBlockingClientHandler.getSocketChannel()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.getSocketChannel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
        nonBlockingClientHandler.getSocketChannel();
        // The above code creates a new NonBlockingClientHandler object with the maximum number of connections set to 5 and retrieves the socket channel associated with the handler. }}
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.getSocketChannel(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getSocketChannel() target is: nonBlockingClientHandler method is: getSocketChannel()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 1
Matched Method is: getSocketChannel()Ljava/nio/channels/SocketChannel;
statement is: // The above code creates a new NonBlockingClientHandler object with the maximum number of connections set to 5 and retrieves the socket channel associated with the handler. }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 5;
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(_int);
((NonBlockingClientHandler) _int).getSocketChannel();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5)
statement is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setSocketChannel((SocketChannel) null)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
        nonBlockingClientHandler.setSocketChannel(SocketChannel.open());
        nonBlockingClientHandler.setSocketChannel(SocketChannel.open(new Socket("localhost", 80)));
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setSocketChannel(SocketChannel.open()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setSocketChannel(SocketChannel.open()) target is: nonBlockingClientHandler method is: setSocketChannel()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 1
Matched Method is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: nonBlockingClientHandler.setSocketChannel(SocketChannel.open(new Socket("localhost", 80))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setSocketChannel(SocketChannel.open(new Socket("localhost", 80))) target is: nonBlockingClientHandler method is: setSocketChannel()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 1
Matched Method is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 5;
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(_int);
SocketChannel socketChannel = null;
((NonBlockingClientHandler) _int).setSocketChannel(socketChannel);
SocketChannel socketChannel = null;
((NonBlockingClientHandler) _int).setSocketChannel(socketChannel);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: clean()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.clean()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Carefully
        review the;
        snippet.@Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        For example;
        For instead;
        the value;
    }
}
statement is: @Carefully
review the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: For example, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: For instead, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: the value, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1521)
statement is: getSelectionKey()Ljava/nio/channels/SelectionKey; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SelectionKey
statement code is: SelectionKey selectionKey = nonBlockingClientHandler.getSelectionKey()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1521);
nonBlockingClientHandler.getSelectionKey();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(8080);
        nonBlockingClientHandler.getSelectionKey();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.getSelectionKey(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getSelectionKey() target is: nonBlockingClientHandler method is: getSelectionKey()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 1
Matched Method is: getSelectionKey()Ljava/nio/channels/SelectionKey;
TestCase is: int _int = 8080;
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(_int);
((NonBlockingClientHandler) _int).getSelectionKey();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: returnThread()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.returnThread()
statement is: getThreadAccessCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.getThreadAccessCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.returnThread(10);
        nonBlockingClientHandler.getThreadAccessCount();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.returnThread(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.returnThread(10) target is: nonBlockingClientHandler method is: returnThread(int)
statement is: nonBlockingClientHandler.getThreadAccessCount(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getThreadAccessCount() target is: nonBlockingClientHandler method is: getThreadAccessCount()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: getThreadAccessCount()I
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.ArrayStatement@9219dd7e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[7]
statement is: java.io.ByteArrayInputStream([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0, (byte)3, (byte)9)
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setInputStream(arg0)
statement is: readInputStream()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] readInputStream = nonBlockingClientHandler.readInputStream()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (byte)3, (byte)9);
nonBlockingClientHandler.setInputStream(byteArrayInputStream);
nonBlockingClientHandler.readInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9 };// replaced with a more descriptive array of bytes

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        nonBlockingClientHandler.setInputStream(byteArrayInputStream);
        nonBlockingClientHandler.readInputStream();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9 }// replaced with a more descriptive array of bytes
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[7] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5, 6, 7, 8, 9 } Elements: [1, 2, 3, 4, 5, 6, 7, 8, 9]
lengths: [7] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setInputStream(byteArrayInputStream), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setInputStream(byteArrayInputStream) target is: nonBlockingClientHandler method is: setInputStream(ByteArrayInputStream)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setInputStream(Ljava/io/InputStream;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: nonBlockingClientHandler.readInputStream(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.readInputStream() target is: nonBlockingClientHandler method is: readInputStream()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: readInputStream()[B
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ByteArrayInputStream byteArrayInputStream = null;
nonBlockingClientHandler.setInputStream(byteArrayInputStream);
nonBlockingClientHandler.readInputStream();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.ArrayStatement@c59ef4b2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[8]
statement is: wrap([B)Ljava/nio/ByteBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.ByteBuffer
statement code is: ByteBuffer wrap = ByteBuffer.wrap(arg0)
statement is: encrypt(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.ByteBuffer
statement code is: ByteBuffer encrypt = nonBlockingClientHandler.encrypt(arg0)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[8];
ByteBuffer wrap = ByteBuffer.wrap(byteArray);
nonBlockingClientHandler.encrypt(wrap);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8 };
        ByteBuffer wrap = ByteBuffer.wrap(byteArray);
        nonBlockingClientHandler.encrypt(wrap);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[8] isAssignment: false Array: new byte[]{ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8 } Elements: [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]
lengths: [8] []
statement is: ByteBuffer wrap = ByteBuffer.wrap(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ByteBuffer.wrap(byteArray) target is: ByteBuffer method is: wrap(byte[])
Matched Method is: wrap([B)Ljava/nio/ByteBuffer;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: nonBlockingClientHandler.encrypt(wrap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.encrypt(wrap) target is: nonBlockingClientHandler method is: encrypt(ByteBuffer)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: encrypt(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = null;
ByteBuffer wrap = ByteBuffer.wrap(byteArray);
nonBlockingClientHandler.encrypt(wrap);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: registerForRead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.registerForRead()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerForRead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.registerForRead(new InetSocketAddress("example.com", 80));
    }
}
statement is: // Improved test data
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.registerForRead(new InetSocketAddress("example.com", 80)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.registerForRead(new InetSocketAddress("example.com", 80)) target is: nonBlockingClientHandler method is: registerForRead(InetSocketAddress)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: registerWrite()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.registerWrite()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Replace primitive values and Strings with more illustrative examples
        nonBlockingClientHandler.registerWrite("Hello World!");
        nonBlockingClientHandler.registerWrite(100);
        nonBlockingClientHandler.registerWrite(false);
    }
}
statement is: // Replace primitive values and Strings with more illustrative examples
nonBlockingClientHandler.registerWrite("Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Replace primitive values and Strings with more illustrative examples
nonBlockingClientHandler.registerWrite("Hello World!") target is: nonBlockingClientHandler method is: registerWrite(java.lang.String)
statement is: nonBlockingClientHandler.registerWrite(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.registerWrite(100) target is: nonBlockingClientHandler method is: registerWrite(int)
statement is: nonBlockingClientHandler.registerWrite(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.registerWrite(false) target is: nonBlockingClientHandler method is: registerWrite(boolean)
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536)
statement is: updateInputOutputStreams()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.updateInputOutputStreams()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536);
nonBlockingClientHandler.updateInputOutputStreams();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1024 * 1024);
        nonBlockingClientHandler.updateInputOutputStreams();
        // Explanation of the improved test data
        The updated;
        and output;
        are being;
        used in;
        test to;
        that the;
        handler is;
        to handle;
        amounts of;
        without running;
        issues with;
        memory or;
        The value = 1024 * 1024;
        a more;
        representative value;
        the maximum;
        buffer size;
        buffer as;
        is a;
        of two;
        and allows;
        efficient memory;
        and reallocation;
    }
}
statement is: // Improved test data
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1024 * 1024), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.updateInputOutputStreams(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.updateInputOutputStreams() target is: nonBlockingClientHandler method is: updateInputOutputStreams()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: updateInputOutputStreams()V
statement is: // Explanation of the improved test data
The updated, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: and output, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: are being, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: used in, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: test to, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: that the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: handler is, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: to handle, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: amounts of, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: without running, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: issues with, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: memory or, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: The value = 1024 * 1024, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: 1024 * 1024
statement is: a more, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: representative value, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: the maximum, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: buffer size, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: buffer as, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: is a, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of two, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: and allows, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: efficient memory, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: and reallocation, class spoon.support.reflect.code.CtLocalVariableImpl
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536);
nonBlockingClientHandler.updateInputOutputStreams();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: waitTillFullyWritten()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.waitTillFullyWritten()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.waitTillFullyWritten();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.waitTillFullyWritten(1000);// wait for 1 second before proceeding with further assertions }}

    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.waitTillFullyWritten(1000)// wait for 1 second before proceeding with further assertions }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.waitTillFullyWritten(1000)// wait for 1 second before proceeding with further assertions }}
 target is: nonBlockingClientHandler method is: waitTillFullyWritten(int)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.setClientWriteHandler(new ClientWriteHandler());
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setClientWriteHandler(new ClientWriteHandler()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setClientWriteHandler(new ClientWriteHandler()) target is: nonBlockingClientHandler method is: setClientWriteHandler(ClientWriteHandler)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientWriteHandler clientWriteHandler = null;
nonBlockingClientHandler.setClientWriteHandler(clientWriteHandler);

* test suite isTestSuite: 81
Test 0: 
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 1: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 2: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
Test 3: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();
Test 4: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 5: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.run();
Test 6: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer();
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);
Test 7: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 8: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();
Test 9: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();
Test 10: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 11: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.getBufferedReader();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Access to BufferedReader in not allowed in Non-Blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 12: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
Test 13: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.RUN_BLOCKING;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();
Test 14: 
NonBlockingClientHandler.setMaxThreadAccessCount(1485);
Test 15: 
NonBlockingClientHandler.setMaxThreadAccessCount((-1));
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 16: 
// Undeclared exception!
try { 
  NonBlockingClientHandler.setMaxThreadAccessCount((-974));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Value should be >=3 or -1
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 17: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.threadAccessCount = 53;
nonBlockingClientHandler.clean();
Test 18: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.STRING;
nonBlockingClientHandler.dataModeIN = dataMode;
PipedInputStream pipedInputStream = new PipedInputStream();
nonBlockingClientHandler.setInputStream(pipedInputStream);
Test 19: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.dataModeIN = dataMode;
nonBlockingClientHandler.setInputStream((InputStream) null);
Test 20: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeConnection();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 21: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();
Test 22: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 23: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Client is not in secure mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 24: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
Test 25: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();
Test 26: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, dataType);
Test 27: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setDataMode(dataMode, dataType);
Test 28: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
QuickServer quickServer = new QuickServer();
DataMode defaultDataMode = quickServer.getDefaultDataMode(dataType);
nonBlockingClientHandler.setDataMode(defaultDataMode, dataType);
Test 29: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.OBJECT;
// Undeclared exception!
try { 
  nonBlockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 30: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BINARY;
nonBlockingClientHandler.setDataMode(dataMode, dataType);
Test 31: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClientWriteHandler has not been set!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 32: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.getSocketChannel();
Test 33: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
Test 34: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();
Test 35: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1521);
// Undeclared exception!
try { 
  nonBlockingClientHandler.getSelectionKey();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 36: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.getThreadAccessCount();
Test 37: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (byte)3, (byte)9);
nonBlockingClientHandler.setInputStream(byteArrayInputStream);
nonBlockingClientHandler.readInputStream();
Test 38: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[8];
ByteBuffer wrap = ByteBuffer.wrap(byteArray);
try { 
  nonBlockingClientHandler.encrypt(wrap);
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 39: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForRead();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 40: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerWrite();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 41: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536);
// Undeclared exception!
try { 
  nonBlockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Null charset name
   //
   verifyException("java.nio.charset.Charset", e);
}

Test 42: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.waitTillFullyWritten();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 43: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
Test 44: 

Test 45: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();

Test 46: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 47: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();

Test 48: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(10);
((NonBlockingClientHandler)10).run();

Test 49: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.handleClient((TheClient) null);

Test 50: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(true);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();

Test 51: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();

Test 52: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();

Test 53: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite((boolean) (Boolean) null);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();

Test 54: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);

Test 55: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.RUN_BLOCKING;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();

Test 56: 
NonBlockingClientHandler.setMaxThreadAccessCount(1000);

Test 57: 
NonBlockingClientHandler.setMaxThreadAccessCount(10);
NonBlockingClientHandler.getMaxThreadAccessCount();

Test 58: 
NonBlockingClientHandler.setMaxThreadAccessCount(10);

Test 59: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();

Test 60: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.STRING;
PipedInputStream pipedInputStream = new PipedInputStream();
nonBlockingClientHandler.setInputStream(pipedInputStream);

Test 61: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setInputStream((InputStream) null);

Test 62: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();

Test 63: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
nonBlockingClientHandler.closeIfSSLOutboundDone();

Test 64: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 65: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
DataType dataType = DataType.OUT;
((NonBlockingClientHandler)5).setDataMode((DataMode) dataType, (DataType) null);

Test 66: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger.getGlobal();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

Test 67: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
Logger.getGlobal();
QuickServer quickServer = new QuickServer();
nonBlockingClientHandler.setDataMode((DataMode) null, (DataType) null);

Test 68: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger.getGlobal();
DataMode dataMode = DataMode.OBJECT;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

Test 69: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger.getGlobal();
DataMode dataMode = DataMode.BINARY;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

Test 70: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
((NonBlockingClientHandler)8080).registerForWrite();

Test 71: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
((NonBlockingClientHandler)5).getSocketChannel();

Test 72: 
int _int = 5;
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
((NonBlockingClientHandler)5).setSocketChannel((SocketChannel) null);
SocketChannel socketChannel = null;
((NonBlockingClientHandler) _int).setSocketChannel(socketChannel);

Test 73: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(8080);
((NonBlockingClientHandler)8080).getSelectionKey();

Test 74: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();

Test 75: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setInputStream((InputStream) null);
nonBlockingClientHandler.readInputStream();

Test 76: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ByteBuffer wrap = ByteBuffer.wrap((byte[]) null);
nonBlockingClientHandler.encrypt(wrap);

Test 77: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 78: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536);
nonBlockingClientHandler.updateInputOutputStreams();

Test 79: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 80: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);


* Generated after the refinement and before minimization 81 tests with total length 212
* test suite isTestSuite: 81
Test 0: 
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 1: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 2: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
Test 3: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();
Test 4: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 5: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.run();
Test 6: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer();
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);
Test 7: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 8: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();
Test 9: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();
Test 10: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 11: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.getBufferedReader();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Access to BufferedReader in not allowed in Non-Blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 12: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
Test 13: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.RUN_BLOCKING;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();
Test 14: 
NonBlockingClientHandler.setMaxThreadAccessCount(1485);
Test 15: 
NonBlockingClientHandler.setMaxThreadAccessCount((-1));
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 16: 
// Undeclared exception!
try { 
  NonBlockingClientHandler.setMaxThreadAccessCount((-974));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Value should be >=3 or -1
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 17: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.threadAccessCount = 53;
nonBlockingClientHandler.clean();
Test 18: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.STRING;
nonBlockingClientHandler.dataModeIN = dataMode;
PipedInputStream pipedInputStream = new PipedInputStream();
nonBlockingClientHandler.setInputStream(pipedInputStream);
Test 19: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.dataModeIN = dataMode;
nonBlockingClientHandler.setInputStream((InputStream) null);
Test 20: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeConnection();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 21: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();
Test 22: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 23: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Client is not in secure mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 24: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
Test 25: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();
Test 26: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, dataType);
Test 27: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setDataMode(dataMode, dataType);
Test 28: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
QuickServer quickServer = new QuickServer();
DataMode defaultDataMode = quickServer.getDefaultDataMode(dataType);
nonBlockingClientHandler.setDataMode(defaultDataMode, dataType);
Test 29: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.OBJECT;
// Undeclared exception!
try { 
  nonBlockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 30: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BINARY;
nonBlockingClientHandler.setDataMode(dataMode, dataType);
Test 31: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClientWriteHandler has not been set!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 32: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.getSocketChannel();
Test 33: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
Test 34: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();
Test 35: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1521);
// Undeclared exception!
try { 
  nonBlockingClientHandler.getSelectionKey();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 36: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.getThreadAccessCount();
Test 37: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (byte)3, (byte)9);
nonBlockingClientHandler.setInputStream(byteArrayInputStream);
nonBlockingClientHandler.readInputStream();
Test 38: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[8];
ByteBuffer wrap = ByteBuffer.wrap(byteArray);
try { 
  nonBlockingClientHandler.encrypt(wrap);
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 39: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForRead();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 40: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerWrite();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 41: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536);
// Undeclared exception!
try { 
  nonBlockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Null charset name
   //
   verifyException("java.nio.charset.Charset", e);
}

Test 42: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.waitTillFullyWritten();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 43: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
Test 44: 

Test 45: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();

Test 46: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 47: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();

Test 48: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(10);
((NonBlockingClientHandler)10).run();

Test 49: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.handleClient((TheClient) null);

Test 50: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(true);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();

Test 51: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();

Test 52: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();

Test 53: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite((boolean) (Boolean) null);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();

Test 54: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);

Test 55: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.RUN_BLOCKING;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();

Test 56: 
NonBlockingClientHandler.setMaxThreadAccessCount(1000);

Test 57: 
NonBlockingClientHandler.setMaxThreadAccessCount(10);
NonBlockingClientHandler.getMaxThreadAccessCount();

Test 58: 
NonBlockingClientHandler.setMaxThreadAccessCount(10);

Test 59: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();

Test 60: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.STRING;
PipedInputStream pipedInputStream = new PipedInputStream();
nonBlockingClientHandler.setInputStream(pipedInputStream);

Test 61: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setInputStream((InputStream) null);

Test 62: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();

Test 63: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
nonBlockingClientHandler.closeIfSSLOutboundDone();

Test 64: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 65: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
DataType dataType = DataType.OUT;
((NonBlockingClientHandler)5).setDataMode((DataMode) dataType, (DataType) null);

Test 66: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger.getGlobal();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

Test 67: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
Logger.getGlobal();
QuickServer quickServer = new QuickServer();
nonBlockingClientHandler.setDataMode((DataMode) null, (DataType) null);

Test 68: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger.getGlobal();
DataMode dataMode = DataMode.OBJECT;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

Test 69: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger.getGlobal();
DataMode dataMode = DataMode.BINARY;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

Test 70: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
((NonBlockingClientHandler)8080).registerForWrite();

Test 71: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
((NonBlockingClientHandler)5).getSocketChannel();

Test 72: 
int _int = 5;
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
((NonBlockingClientHandler)5).setSocketChannel((SocketChannel) null);
SocketChannel socketChannel = null;
((NonBlockingClientHandler) _int).setSocketChannel(socketChannel);

Test 73: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(8080);
((NonBlockingClientHandler)8080).getSelectionKey();

Test 74: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();

Test 75: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setInputStream((InputStream) null);
nonBlockingClientHandler.readInputStream();

Test 76: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ByteBuffer wrap = ByteBuffer.wrap((byte[]) null);
nonBlockingClientHandler.encrypt(wrap);

Test 77: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 78: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536);
nonBlockingClientHandler.updateInputOutputStreams();

Test 79: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 80: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);


* Minimizing test suite
* test suite isTestSuite: 44
Test 0: 
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 1: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 2: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
Test 3: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();
Test 4: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 5: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
Test 6: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();
Test 7: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
Test 8: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();
Test 9: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 10: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.getBufferedReader();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Access to BufferedReader in not allowed in Non-Blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 11: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
Test 12: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.RUN_BLOCKING;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();
Test 13: 
NonBlockingClientHandler.setMaxThreadAccessCount(10);
Test 14: 
// Undeclared exception!
try { 
  NonBlockingClientHandler.setMaxThreadAccessCount((-974));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Value should be >=3 or -1
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 15: 
NonBlockingClientHandler.setMaxThreadAccessCount((-1));
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 16: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.threadAccessCount = 53;
nonBlockingClientHandler.clean();
Test 17: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.STRING;
nonBlockingClientHandler.dataModeIN = dataMode;
PipedInputStream pipedInputStream = new PipedInputStream();
nonBlockingClientHandler.setInputStream(pipedInputStream);
Test 18: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.dataModeIN = dataMode;
nonBlockingClientHandler.setInputStream((InputStream) null);
Test 19: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeConnection();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 20: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();
Test 21: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 22: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Client is not in secure mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 23: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.run();
Test 24: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
Test 25: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();
Test 26: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, dataType);
Test 27: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BINARY;
nonBlockingClientHandler.setDataMode(dataMode, dataType);
Test 28: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
QuickServer quickServer = new QuickServer();
DataMode defaultDataMode = quickServer.getDefaultDataMode(dataType);
nonBlockingClientHandler.setDataMode(defaultDataMode, dataType);
Test 29: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.OBJECT;
// Undeclared exception!
try { 
  nonBlockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 30: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setDataMode(dataMode, dataType);
Test 31: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClientWriteHandler has not been set!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 32: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[8];
ByteBuffer wrap = ByteBuffer.wrap(byteArray);
try { 
  nonBlockingClientHandler.encrypt(wrap);
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 33: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.getSocketChannel();
Test 34: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();
Test 35: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1521);
// Undeclared exception!
try { 
  nonBlockingClientHandler.getSelectionKey();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 36: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.getThreadAccessCount();
Test 37: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 38: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (byte)3, (byte)9);
nonBlockingClientHandler.setInputStream(byteArrayInputStream);
nonBlockingClientHandler.readInputStream();
Test 39: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer();
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);
Test 40: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForRead();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 41: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerWrite();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 42: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536);
// Undeclared exception!
try { 
  nonBlockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Null charset name
   //
   verifyException("java.nio.charset.Charset", e);
}

Test 43: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.waitTillFullyWritten();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 18%
* Total number of goals: 501
* Number of covered goals: 90
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 25%
* Total number of goals: 723
* Number of covered goals: 182
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 18%
* Total number of goals: 78
* Number of covered goals: 14
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 18%
* Total number of goals: 501
* Number of covered goals: 90
* Generated 44 tests with total length 122
* Resulting test suite's coverage: 33% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 38%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int maxThreadAccessCount = NonBlockingClientHandler.getMaxThreadAccessCount();
assertEquals(5, maxThreadAccessCount);


** It was a parseable test case! 
refined test name is: testGetMaxThreadAccessCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean wakeupSelectorAfterRegisterRead = NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
assertTrue(wakeupSelectorAfterRegisterRead);


** It was a parseable test case! 
refined test name is: testGetWakeupSelectorAfterRegisterReadReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
assertEquals("<ClientHandler-Pool#-1-ID:1>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testFinalizeMethodSetsNameToId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
boolean initialHandshakeStatus = nonBlockingClientHandler.getInitialHandshakeStatus();
assertEquals("<ClientHandler-Pool#-1-ID:31>", nonBlockingClientHandler.getName());
assertFalse(initialHandshakeStatus);


** It was a parseable test case! 
refined test name is: testGetNameAndInitialHandshakeStatus
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean wakeupSelectorAfterRegisterWrite = NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
assertTrue(wakeupSelectorAfterRegisterWrite);


** It was a parseable test case! 
refined test name is: testGetWakeupSelectorAfterRegisterWriteReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
assertEquals("<ClientHandler-Pool#-1-ID:46>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testSetClientWriteHandlerToNullNameIsSetCorrectly
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
boolean blockingMode = nonBlockingClientHandler.getBlockingMode();
assertEquals("<ClientHandler-Pool#-1-ID:52>", nonBlockingClientHandler.getName());
assertFalse(blockingMode);


** It was a parseable test case! 
refined test name is: testGetBlockingModeNonBlocking
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
assertEquals("<ClientHandler-Pool#5-ID:1>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testNonBlockingClientHandlerName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount();
assertEquals("<ClientHandler-Pool#-1-ID:58>", nonBlockingClientHandler.getName());
assertEquals(0, threadAccessCount);


** It was a parseable test case! 
refined test name is: testGetThreadAccessCountWhenNewInstanceReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
boolean wakeupSelectorAfterRegisterWrite = NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
assertFalse(wakeupSelectorAfterRegisterWrite);


** It was a parseable test case! 
refined test name is: testSetWakeupSelectorAfterRegisterWriteFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.getBufferedReader();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Access to BufferedReader in not allowed in Non-Blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testGetBufferedReaderThrowsIllegalStateException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
assertEquals("<ClientHandler-Pool#-1-ID:77>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testSetNullSelectionKey
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent arg0 = ClientEvent.RUN_BLOCKING;
nonBlockingClientHandler.addEvent(arg0);
nonBlockingClientHandler.run();
assertTrue(nonBlockingClientHandler.getWillClean());


** It was a parseable test case! 
refined test name is: testHandlerRunBlockingEventSetsWillClean
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler.setMaxThreadAccessCount(10);

** It was a parseable test case! 
refined test name is: testUpdateMaxThreadAccessCountToGreaterThan10
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  NonBlockingClientHandler.setMaxThreadAccessCount((-974));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Value should be >=3 or -1
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testNegativeValueThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler.setMaxThreadAccessCount((-1));
int maxThreadAccessCount = NonBlockingClientHandler.getMaxThreadAccessCount();
assertEquals((-1), maxThreadAccessCount);


** It was a parseable test case! 
refined test name is: testSetMaxThreadAccessCountToNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.threadAccessCount = 53;
nonBlockingClientHandler.clean();
assertEquals(0, nonBlockingClientHandler.getThreadAccessCount());


** It was a parseable test case! 
refined test name is: testCleanMethodSetsThreadAccessCountToZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.STRING;
nonBlockingClientHandler.dataModeIN = dataMode;
PipedInputStream arg0 = new PipedInputStream();
nonBlockingClientHandler.setInputStream(arg0);
assertEquals("<ClientHandler-Pool#-1-ID:213>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testDataModeINNonBlockingClientHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.dataModeIN = dataMode;
nonBlockingClientHandler.setInputStream((InputStream) null);
assertEquals("<ClientHandler-Pool#-1-ID:220>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testGetNameValidInputs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeConnection();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testCloseConnectionWithoutInitializingConnection
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();
assertEquals("<ClientHandler-Pool#-1-ID:257>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testCloseConnectionShouldCloseTheConnection
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testCloseIfSSLOutboundDoneThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Client is not in secure mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testCloseIfSSLOutboundDoneNoSecureConnection
* Compiling Tests
refined test name is: testCloseIfSSLOutboundDoneNoSSLConnection
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.run();
assertEquals("<ClientHandler-Pool#5-ID:6>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testNonBlockingClientHandlerWithId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
boolean checkReturnClientHandler = nonBlockingClientHandler.checkReturnClientHandler();
assertEquals("<ClientHandler-Pool#-1-ID:287>", nonBlockingClientHandler.getName());
assertFalse(checkReturnClientHandler);


** It was a parseable test case! 
refined test name is: testCheckReturnClientHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();
assertEquals((-1), nonBlockingClientHandler.getThreadAccessCount());


** It was a parseable test case! 
refined test name is: testReturnThreadShouldSetThreadToNull
* Compiling Tests
refined test name is: testReturnThreadShouldSetThreadToNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
DataType arg1 = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, arg1);
assertEquals("<ClientHandler-Pool#5-ID:14>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testSetDataModeWithNullDirectionAndOUTMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType arg1 = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode arg0 = DataMode.BINARY;
nonBlockingClientHandler.setDataMode(arg0, arg1);
assertEquals("<ClientHandler-Pool#-1-ID:384>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testSetDataModeWithBinaryOutput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType arg1 = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
QuickServer quickServer = new QuickServer();
DataMode arg0 = quickServer.getDefaultDataMode(arg1);
nonBlockingClientHandler.setDataMode(arg0, arg1);
assertEquals("<ClientHandler-Pool#-1-ID:404>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testSetDefaultDataMode
* Compiling Tests
refined test name is: testNonBlockingClientHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType arg1 = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode arg0 = DataMode.OBJECT;
// Undeclared exception!
try { 
  nonBlockingClientHandler.setDataMode(arg0, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testSetDataModeWithNullAppLoggerThrowsNPE
* Compiling Tests
refined test name is: testSetDataModethrowsNPEWhenAppLoggerIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType arg1 = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode arg0 = DataMode.BYTE;
nonBlockingClientHandler.setDataMode(arg0, arg1);
assertEquals("<ClientHandler-Pool#-1-ID:453>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testSetDataModeSetsCorrectName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClientWriteHandler has not been set!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testRegisterForWriteNullClientWriteHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.getSocketChannel();
assertEquals("<ClientHandler-Pool#5-ID:22>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testGetSocketChannelFromNonBlockingClientHandler
* Compiling Tests
refined test name is: testNonBlockingClientHandlerName
[MASTER] 11:14:48.236 [logback-1] WARN  TestSuiteGenerator - JUnit checking timed out
[MASTER] 11:14:48.425 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 44
Test 0: 
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 1: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 2: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
Test 3: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();
Test 4: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 5: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.run();
Test 6: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer();
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);
Test 7: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
Test 8: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();
Test 9: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();
Test 10: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
Test 11: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.getBufferedReader();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Access to BufferedReader in not allowed in Non-Blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 12: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
Test 13: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.RUN_BLOCKING;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();
Test 14: 
NonBlockingClientHandler.setMaxThreadAccessCount(1485);
Test 15: 
NonBlockingClientHandler.setMaxThreadAccessCount((-1));
Test 16: 
// Undeclared exception!
try { 
  NonBlockingClientHandler.setMaxThreadAccessCount((-974));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Value should be >=3 or -1
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 17: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.threadAccessCount = 53;
nonBlockingClientHandler.clean();
Test 18: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.STRING;
nonBlockingClientHandler.dataModeIN = dataMode;
PipedInputStream pipedInputStream = new PipedInputStream();
nonBlockingClientHandler.setInputStream(pipedInputStream);
Test 19: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.dataModeIN = dataMode;
nonBlockingClientHandler.setInputStream((InputStream) null);
Test 20: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeConnection();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 21: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();
Test 22: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 23: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Client is not in secure mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 24: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
Test 25: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();
Test 26: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-1));
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, dataType);
Test 27: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setDataMode(dataMode, dataType);
Test 28: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
QuickServer quickServer = new QuickServer();
DataMode defaultDataMode = quickServer.getDefaultDataMode(dataType);
nonBlockingClientHandler.setDataMode(defaultDataMode, dataType);
Test 29: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.OBJECT;
// Undeclared exception!
try { 
  nonBlockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 30: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BINARY;
nonBlockingClientHandler.setDataMode(dataMode, dataType);
Test 31: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClientWriteHandler has not been set!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 32: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-1));
nonBlockingClientHandler.getSocketChannel();
Test 33: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-1));
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
Test 34: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();
Test 35: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1521);
// Undeclared exception!
try { 
  nonBlockingClientHandler.getSelectionKey();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 36: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.getThreadAccessCount();
Test 37: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (byte)3, (byte)9);
nonBlockingClientHandler.setInputStream(byteArrayInputStream);
nonBlockingClientHandler.readInputStream();
Test 38: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[8];
ByteBuffer wrap = ByteBuffer.wrap(byteArray);
try { 
  nonBlockingClientHandler.encrypt(wrap);
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 39: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForRead();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 40: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerWrite();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 41: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536);
// Undeclared exception!
try { 
  nonBlockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Null charset name
   //
   verifyException("java.nio.charset.Charset", e);
}

Test 42: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.waitTillFullyWritten();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 43: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);

* Minimizing test suite
* test suite isTestSuite: 44
Test 0: 
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 1: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 2: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
Test 3: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();
Test 4: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 5: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-1));
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
Test 6: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
Test 7: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
Test 8: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();
Test 9: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();
Test 10: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
Test 11: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.getBufferedReader();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Access to BufferedReader in not allowed in Non-Blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 12: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
Test 13: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-1));
nonBlockingClientHandler.getSocketChannel();
Test 14: 
NonBlockingClientHandler.setMaxThreadAccessCount(1485);
Test 15: 
NonBlockingClientHandler.setMaxThreadAccessCount((-1));
Test 16: 
// Undeclared exception!
try { 
  NonBlockingClientHandler.setMaxThreadAccessCount((-974));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Value should be >=3 or -1
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 17: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.threadAccessCount = 53;
nonBlockingClientHandler.clean();
Test 18: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.STRING;
nonBlockingClientHandler.dataModeIN = dataMode;
PipedInputStream pipedInputStream = new PipedInputStream();
nonBlockingClientHandler.setInputStream(pipedInputStream);
Test 19: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.dataModeIN = dataMode;
nonBlockingClientHandler.setInputStream((InputStream) null);
Test 20: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeConnection();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 21: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();
Test 22: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 23: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Client is not in secure mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 24: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.RUN_BLOCKING;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();
Test 25: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5);
nonBlockingClientHandler.run();
Test 26: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
Test 27: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();
Test 28: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-1));
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, dataType);
Test 29: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BINARY;
nonBlockingClientHandler.setDataMode(dataMode, dataType);
Test 30: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
QuickServer quickServer = new QuickServer();
DataMode defaultDataMode = quickServer.getDefaultDataMode(dataType);
nonBlockingClientHandler.setDataMode(defaultDataMode, dataType);
Test 31: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.OBJECT;
// Undeclared exception!
try { 
  nonBlockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 32: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
Logger global = Logger.getGlobal();
nonBlockingClientHandler.appLogger = global;
DataMode dataMode = DataMode.BYTE;
nonBlockingClientHandler.setDataMode(dataMode, dataType);
Test 33: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClientWriteHandler has not been set!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 34: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[8];
ByteBuffer wrap = ByteBuffer.wrap(byteArray);
try { 
  nonBlockingClientHandler.encrypt(wrap);
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 35: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();
Test 36: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(1521);
// Undeclared exception!
try { 
  nonBlockingClientHandler.getSelectionKey();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 37: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.getThreadAccessCount();
Test 38: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
byte[] byteArray = new byte[7];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray, (byte)3, (byte)9);
nonBlockingClientHandler.setInputStream(byteArrayInputStream);
nonBlockingClientHandler.readInputStream();
Test 39: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer();
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);
Test 40: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForRead();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 41: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerWrite();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 42: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(65536);
// Undeclared exception!
try { 
  nonBlockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Null charset name
   //
   verifyException("java.nio.charset.Charset", e);
}

Test 43: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.waitTillFullyWritten();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


[MASTER] 11:14:55.094 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 18%
* Total number of goals: 501
* Number of covered goals: 89
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 25%
* Total number of goals: 723
* Number of covered goals: 182
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 15%
* Total number of goals: 78
* Number of covered goals: 12
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 18%
* Total number of goals: 501
* Number of covered goals: 91
* Generated 44 tests with total length 119
* Resulting test suite's coverage: 33% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:14:55.742 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 38%
* Compiling and checking tests
[MASTER] 11:15:33.093 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.245 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.335 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.336 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.378 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.379 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.425 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.425 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.479 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.480 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.519 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.520 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.570 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.585 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.654 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.656 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.734 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.735 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.779 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.780 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.816 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.818 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:15:35.866 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.867 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:35.950 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:35.962 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.061 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.062 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.113 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.114 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.167 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.168 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.230 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.231 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:15:36.279 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.280 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.332 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.333 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.381 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.384 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.433 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.434 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.475 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.476 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.521 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.522 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.572 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.573 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.615 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.617 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.675 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.676 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.728 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.729 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.800 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.801 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.842 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.843 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.887 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.888 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:36.934 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.935 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:15:36.977 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:36.978 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:37.020 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:37.021 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:37.077 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:37.078 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:37.135 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:37.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:37.223 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:37.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:37.277 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:37.278 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:37.328 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:37.329 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:37.377 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:37.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:37.434 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:37.437 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:15:37.493 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:37.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
[MASTER] 11:15:38.345 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:38.346 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
[MASTER] 11:15:39.223 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/tmp/EvoSuite_pathingJar7014119041480675283.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:15:39.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7014119041480675283.jar
* Writing tests to file
[MASTER] 11:15:39.225 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'NonBlockingClientHandler_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 13 called: 11 to improve: false
** Write a test suite: 14 called: 12 to improve: false
** Write a test suite: 17 called: 13 to improve: false
** Write a test suite: 20 called: 14 to improve: false
* Writing JUnit test case 'NonBlockingClientHandler_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
* Done!

* Computation finished
