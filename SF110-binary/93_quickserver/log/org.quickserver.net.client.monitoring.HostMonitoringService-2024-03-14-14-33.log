* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.client.monitoring.HostMonitoringService
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 6811
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 14:33:22.303 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 14:33:22.313 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 14:33:22.316 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 14:33:22.344 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 14:33:22.348 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 14:33:22.349 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 14:33:22.351 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 14:33:22.352 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 14:33:22.355 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 14:33:22.356 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 14:33:22.357 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 14:33:22.363 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 14:33:22.366 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 14:33:22.415 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 14:33:22.417 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.client.monitoring.HostMonitoringService
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 324
* Using seed 1710426798109
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 112 / 324
[Progress:>                             2%] [Cov:==========================>        76%][Progress:>                             2%] [Cov:==========================>        76%][Progress:>                             3%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:============================>      81%][Progress:=>                            4%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           8%] [Cov:=============================>     84%][Progress:==>                           8%] [Cov:=============================>     84%][Progress:==>                           8%] [Cov:=============================>     84%][Progress:==>                           8%] [Cov:=============================>     84%][Progress:==>                           8%] [Cov:=============================>     84%][Progress:==>                           8%] [Cov:=============================>     84%][Progress:==>                           8%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:====>                         14%] [Cov:=============================>     84%][Progress:====>                         14%] [Cov:=============================>     84%][Progress:====>                         14%] [Cov:=============================>     84%][Progress:====>                         14%] [Cov:=============================>     84%][Progress:====>                         14%] [Cov:=============================>     84%][Progress:====>                         15%] [Cov:=============================>     84%][Progress:====>                         15%] [Cov:=============================>     84%][Progress:====>                         15%] [Cov:=============================>     84%][Progress:====>                         15%] [Cov:=============================>     84%][Progress:====>                         15%] [Cov:=============================>     84%][Progress:====>                         15%] [Cov:=============================>     84%][Progress:====>                         15%] [Cov:=============================>     84%][Progress:====>                         15%] [Cov:=============================>     84%][Progress:====>                         16%] [Cov:=============================>     84%][Progress:====>                         16%] [Cov:=============================>     84%][Progress:====>                         16%] [Cov:=============================>     84%][Progress:====>                         16%] [Cov:=============================>     84%][Progress:====>                         16%] [Cov:=============================>     84%][Progress:====>                         16%] [Cov:=============================>     85%][Progress:====>                         16%] [Cov:=============================>     85%][Progress:====>                         16%] [Cov:=============================>     85%][Progress:=====>                        17%] [Cov:=============================>     85%][Progress:=====>                        17%] [Cov:=============================>     85%][Progress:=====>                        17%] [Cov:=============================>     85%][Progress:=====>                        17%] [Cov:=============================>     85%][Progress:=====>                        17%] [Cov:=============================>     85%][Progress:=====>                        17%] [Cov:=============================>     85%][Progress:=====>                        17%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][MASTER] 14:33:41.395 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       22%] [Cov:=============================>     85%][Progress:======>                       22%] [Cov:=============================>     85%][Progress:======>                       22%] [Cov:=============================>     85%][Progress:======>                       22%] [Cov:=============================>     85%][Progress:======>                       22%] [Cov:=============================>     85%][Progress:======>                       22%] [Cov:=============================>     85%][Progress:======>                       22%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:=======>                      24%] [Cov:=============================>     85%][Progress:=======>                      24%] [Cov:=============================>     85%][Progress:=======>                      24%] [Cov:=============================>     85%][Progress:=======>                      24%] [Cov:=============================>     85%][Progress:=======>                      24%] [Cov:=============================>     85%][Progress:=======>                      24%] [Cov:=============================>     85%][Progress:=======>                      24%] [Cov:=============================>     85%][Progress:=======>                      24%] [Cov:=============================>     85%][Progress:=======>                      24%] [Cov:=============================>     85%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      26%] [Cov:=============================>     85%][Progress:=======>                      26%] [Cov:=============================>     85%][Progress:=======>                      26%] [Cov:=============================>     85%][Progress:=======>                      26%] [Cov:=============================>     85%][Progress:=======>                      26%] [Cov:=============================>     85%][Progress:=======>                      26%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     27%] [Cov:=============================>     85%][Progress:========>                     28%] [Cov:=============================>     85%][Progress:========>                     28%] [Cov:=============================>     85%][Progress:========>                     28%] [Cov:=============================>     85%][Progress:========>                     28%] [Cov:=============================>     85%][Progress:========>                     28%] [Cov:=============================>     85%][Progress:========>                     28%] [Cov:=============================>     85%][Progress:========>                     28%] [Cov:=============================>     85%][Progress:========>                     29%] [Cov:=============================>     85%][Progress:========>                     29%] [Cov:=============================>     85%][Progress:========>                     29%] [Cov:=============================>     85%][Progress:========>                     29%] [Cov:=============================>     85%][Progress:========>                     29%] [Cov:=============================>     85%][Progress:========>                     29%] [Cov:=============================>     85%][Progress:========>                     29%] [Cov:=============================>     85%][Progress:========>                     29%] [Cov:=============================>     85%][Progress:=========>                    30%] [Cov:=============================>     85%][Progress:=========>                    30%] [Cov:=============================>     85%][Progress:=========>                    30%] [Cov:=============================>     85%][Progress:=========>                    30%] [Cov:=============================>     85%][Progress:=========>                    30%] [Cov:=============================>     85%][Progress:=========>                    30%] [Cov:=============================>     85%][Progress:=========>                    30%] [Cov:=============================>     85%][Progress:=========>                    30%] [Cov:=============================>     85%][Progress:=========>                    31%] [Cov:=============================>     85%][Progress:=========>                    31%] [Cov:=============================>     85%][Progress:=========>                    31%] [Cov:=============================>     85%][Progress:=========>                    31%] [Cov:=============================>     85%][Progress:=========>                    31%] [Cov:=============================>     85%][Progress:=========>                    31%] [Cov:=============================>     85%][Progress:=========>                    31%] [Cov:=============================>     85%][Progress:=========>                    31%] [Cov:=============================>     85%][Progress:=========>                    32%] [Cov:=============================>     85%][Progress:=========>                    32%] [Cov:=============================>     85%][Progress:=========>                    32%] [Cov:=============================>     85%][Progress:=========>                    32%] [Cov:=============================>     85%][Progress:=========>                    32%] [Cov:=============================>     85%][Progress:=========>                    32%] [Cov:=============================>     85%][Progress:=========>                    32%] [Cov:=============================>     85%][Progress:=========>                    32%] [Cov:=============================>     85%][Progress:=========>                    32%] [Cov:=============================>     85%][Progress:=========>                    32%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:=========>                    33%] [Cov:=============================>     85%][Progress:==========>                   34%] [Cov:=============================>     85%][Progress:==========>                   34%] [Cov:=============================>     85%][Progress:==========>                   34%] [Cov:=============================>     85%][Progress:==========>                   34%] [Cov:=============================>     85%][Progress:==========>                   34%] [Cov:=============================>     85%][Progress:==========>                   34%] [Cov:=============================>     85%][Progress:==========>                   34%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   35%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  37%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  38%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:===========>                  39%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 40%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    88%][Progress:=============>                44%] [Cov:==============================>    88%][Progress:=============>                44%] [Cov:===============================>   89%][Progress:=============>                45%] [Cov:===============================>   89%][Progress:=============>                45%] [Cov:===============================>   89%][Progress:=============>                45%] [Cov:===============================>   89%][Progress:=============>                45%] [Cov:===============================>   89%][Progress:=============>                45%] [Cov:===============================>   89%][Progress:=============>                45%] [Cov:===============================>   89%][Progress:=============>                46%] [Cov:===============================>   89%][Progress:=============>                46%] [Cov:===============================>   89%][Progress:=============>                46%] [Cov:===============================>   89%][Progress:=============>                46%] [Cov:===============================>   89%][Progress:=============>                46%] [Cov:===============================>   89%][Progress:=============>                46%] [Cov:===============================>   89%][Progress:=============>                46%] [Cov:===============================>   89%][Progress:=============>                46%] [Cov:===============================>   89%][Progress:==============>               47%] [Cov:===============================>   89%][Progress:==============>               47%] [Cov:===============================>   89%][Progress:==============>               47%] [Cov:===============================>   89%][Progress:==============>               47%] [Cov:===============================>   89%][Progress:==============>               47%] [Cov:===============================>   89%][Progress:==============>               47%] [Cov:===============================>   89%][Progress:==============>               48%] [Cov:===============================>   89%][Progress:==============>               48%] [Cov:===============================>   89%][Progress:==============>               48%] [Cov:===============================>   89%][Progress:==============>               48%] [Cov:===============================>   89%][Progress:==============>               48%] [Cov:===============================>   89%][Progress:==============>               48%] [Cov:===============================>   89%][Progress:==============>               49%] [Cov:===============================>   89%][Progress:==============>               49%] [Cov:===============================>   89%][Progress:==============>               49%] [Cov:===============================>   89%][Progress:==============>               49%] [Cov:===============================>   89%][Progress:==============>               49%] [Cov:===============================>   89%][Progress:==============>               49%] [Cov:===============================>   89%][Progress:===============>              50%] [Cov:===============================>   89%][Progress:===============>              50%] [Cov:===============================>   89%][Progress:===============>              50%] [Cov:===============================>   89%][Progress:===============>              50%] [Cov:===============================>   89%][Progress:===============>              50%] [Cov:===============================>   89%][Progress:===============>              51%] [Cov:===============================>   89%][Progress:===============>              51%] [Cov:===============================>   89%][Progress:===============>              51%] [Cov:===============================>   89%][Progress:===============>              51%] [Cov:===============================>   89%][Progress:===============>              51%] [Cov:===============================>   89%][Progress:===============>              51%] [Cov:===============================>   89%][Progress:===============>              52%] [Cov:===============================>   89%][Progress:===============>              52%] [Cov:===============================>   89%][Progress:===============>              52%] [Cov:===============================>   89%][Progress:===============>              52%] [Cov:===============================>   89%][Progress:===============>              52%] [Cov:===============================>   89%][Progress:===============>              53%] [Cov:===============================>   89%][Progress:===============>              53%] [Cov:===============================>   89%][Progress:===============>              53%] [Cov:===============================>   89%][Progress:===============>              53%] [Cov:===============================>   89%][Progress:===============>              53%] [Cov:===============================>   89%][Progress:===============>              53%] [Cov:===============================>   89%][Progress:================>             54%] [Cov:===============================>   89%][Progress:================>             54%] [Cov:===============================>   89%][Progress:================>             54%] [Cov:===============================>   89%][Progress:================>             54%] [Cov:===============================>   89%][Progress:================>             54%] [Cov:===============================>   89%][Progress:================>             54%] [Cov:===============================>   89%][Progress:================>             54%] [Cov:===============================>   89%][Progress:================>             54%] [Cov:===============================>   89%][Progress:================>             55%] [Cov:===============================>   89%][Progress:================>             55%] [Cov:===============================>   89%][Progress:================>             55%] [Cov:===============================>   89%][Progress:================>             55%] [Cov:===============================>   89%][Progress:================>             55%] [Cov:===============================>   89%][Progress:================>             55%] [Cov:===============================>   89%][Progress:================>             55%] [Cov:===============================>   89%][Progress:================>             55%] [Cov:===============================>   89%][Progress:================>             55%] [Cov:===============================>   89%][Progress:================>             56%] [Cov:===============================>   89%][Progress:================>             56%] [Cov:===============================>   89%][Progress:================>             56%] [Cov:===============================>   89%][Progress:================>             56%] [Cov:===============================>   89%][Progress:================>             56%] [Cov:===============================>   89%][Progress:================>             56%] [Cov:===============================>   89%][Progress:================>             56%] [Cov:===============================>   89%][Progress:================>             56%] [Cov:===============================>   89%][Progress:=================>            57%] [Cov:===============================>   89%][Progress:=================>            57%] [Cov:===============================>   89%][Progress:=================>            57%] [Cov:===============================>   89%][Progress:=================>            57%] [Cov:===============================>   89%][Progress:=================>            57%] [Cov:===============================>   89%][Progress:=================>            57%] [Cov:===============================>   89%][Progress:=================>            57%] [Cov:===============================>   89%][Progress:=================>            58%] [Cov:===============================>   89%][Progress:=================>            58%] [Cov:===============================>   89%][Progress:=================>            58%] [Cov:===============================>   89%][Progress:=================>            58%] [Cov:===============================>   89%][Progress:=================>            58%] [Cov:===============================>   89%][Progress:=================>            58%] [Cov:===============================>   89%][Progress:=================>            59%] [Cov:===============================>   89%][Progress:=================>            59%] [Cov:===============================>   89%][Progress:=================>            59%] [Cov:===============================>   89%][Progress:=================>            59%] [Cov:===============================>   89%][Progress:=================>            59%] [Cov:===============================>   89%][Progress:=================>            59%] [Cov:===============================>   89%][Progress:=================>            59%] [Cov:===============================>   89%][Progress:==================>           60%] [Cov:===============================>   89%][Progress:==================>           60%] [Cov:===============================>   89%][Progress:==================>           60%] [Cov:===============================>   89%][Progress:==================>           60%] [Cov:===============================>   89%][Progress:==================>           60%] [Cov:===============================>   89%][Progress:==================>           60%] [Cov:===============================>   89%][Progress:==================>           60%] [Cov:===============================>   89%][Progress:==================>           61%] [Cov:===============================>   89%][Progress:==================>           61%] [Cov:===============================>   89%][Progress:==================>           61%] [Cov:===============================>   89%][Progress:==================>           61%] [Cov:===============================>   89%][Progress:==================>           61%] [Cov:===============================>   89%][Progress:==================>           61%] [Cov:===============================>   89%][Progress:==================>           61%] [Cov:===============================>   89%][Progress:==================>           62%] [Cov:===============================>   89%][Progress:==================>           62%] [Cov:===============================>   89%][Progress:==================>           62%] [Cov:===============================>   89%][Progress:==================>           62%] [Cov:===============================>   89%][Progress:==================>           62%] [Cov:===============================>   89%][Progress:==================>           62%] [Cov:===============================>   89%][Progress:==================>           62%] [Cov:===============================>   89%][Progress:==================>           63%] [Cov:===============================>   89%][Progress:==================>           63%] [Cov:===============================>   89%][Progress:==================>           63%] [Cov:===============================>   89%][Progress:==================>           63%] [Cov:===============================>   89%][Progress:==================>           63%] [Cov:===============================>   89%][Progress:==================>           63%] [Cov:===============================>   89%][Progress:==================>           63%] [Cov:===============================>   89%][Progress:===================>          64%] [Cov:===============================>   89%][Progress:===================>          64%] [Cov:===============================>   89%][Progress:===================>          64%] [Cov:===============================>   89%][Progress:===================>          64%] [Cov:===============================>   89%][Progress:===================>          64%] [Cov:===============================>   89%][Progress:===================>          64%] [Cov:===============================>   89%][Progress:===================>          64%] [Cov:===============================>   89%][Progress:===================>          65%] [Cov:===============================>   89%][Progress:===================>          65%] [Cov:===============================>   89%][Progress:===================>          65%] [Cov:===============================>   89%][Progress:===================>          65%] [Cov:===============================>   89%][Progress:===================>          65%] [Cov:===============================>   89%][Progress:===================>          65%] [Cov:===============================>   89%][Progress:===================>          66%] [Cov:===============================>   89%][Progress:===================>          66%] [Cov:===============================>   90%][Progress:===================>          66%] [Cov:===============================>   90%][Progress:===================>          66%] [Cov:===============================>   90%][Progress:===================>          66%] [Cov:===============================>   90%][Progress:===================>          66%] [Cov:===============================>   90%][Progress:====================>         67%] [Cov:===============================>   90%][Progress:====================>         67%] [Cov:===============================>   90%][Progress:====================>         67%] [Cov:===============================>   90%][Progress:====================>         67%] [Cov:===============================>   90%][Progress:====================>         67%] [Cov:===============================>   90%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        70%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        71%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        72%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:=====================>        73%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       74%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:===============================>   91%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       75%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:======================>       76%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      77%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      78%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:=======================>      79%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     80%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     81%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     82%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:========================>     83%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    84%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    85%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:=========================>    86%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   87%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   88%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:==========================>   89%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  90%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  91%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  92%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:===========================>  93%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 94%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 95%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:============================> 96%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>97%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>98%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:=============================>99%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%][Progress:==============================100%] [Cov:================================>  92%]
* Search finished after 101s and 792 generations, 342357 statements, best individual has fitness: 25.0
* Generated before the refinement 21 tests with total length 140
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, (String) null)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add((Object) arg0)
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<java.lang.Object>
statement code is: Iterator<Object> iterator = linkedList.iterator()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList((String) null)
statement is: addDefault(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.addDefault((Host) null)
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: setInetAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setInetAddress("")
statement is: addDefault(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.addDefault(arg0)
statement is: org.quickserver.net.client.monitoring.impl.UDPMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.UDPMonitor
statement code is: UDPMonitor uDPMonitor = new UDPMonitor()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, 4, (List) arg3)
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec(1451)
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor("")
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, (String) null)
test data is: HostMonitoringService.getSize();
HostMonitoringService.monitor(false, (String) null);
Object object = new Object();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
linkedList.add((Object) hostMonitoringService);
linkedList.iterator();
HostList hostList = new HostList((String) null);
hostList.addDefault((Host) null);
Host host = new Host();
host.setInetAddress("");
hostList.addDefault(host);
UDPMonitor uDPMonitor = new UDPMonitor();
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, 4, (List) linkedList);
hostMonitoringService.setIntervalInSec(1451);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(true);
hostMonitoringService.getListnersList();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor(true);
HostMonitoringService.monitor("");
HostMonitoringService.monitor(false, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.getSize();
        HostMonitoringService.monitor(false, "127.0.0.1");
        Object object = new Object();
        LinkedList<Object> linkedList = new LinkedList<>();
        linkedList.add("example.com");
        linkedList.iterator();
        HostList hostList = new HostList("example.com");
        hostList.addDefault(new Host("192.168.0.1"));
        UDPMonitor uDPMonitor = new UDPMonitor();
        HostMonitoringService.add(hostList, ((HostMonitor) (uDPMonitor)), 4, linkedList);
        hostMonitoringService.setIntervalInSec(300);
        hostMonitoringService.getHostList();
        HostMonitoringService.monitor(true);
        hostMonitoringService.getListnersList();
        HostMonitoringService.add(hostMonitoringService);
        HostMonitoringService.monitor(true);
        HostMonitoringService.monitor("example.com");
        HostMonitoringService.monitor(false, "127.0.0.1");
    }
}
statement is: HostMonitoringService.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.getSize() target is: HostMonitoringService method is: getSize()
Matched Method is: getSize()I
statement is: HostMonitoringService.monitor(false, "127.0.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "127.0.0.1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<Object> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add("example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add("example.com") target is: linkedList method is: add(java.lang.String)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
statement is: linkedList.iterator(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.iterator() target is: linkedList method is: iterator()
source statement: java.util.LinkedList()V callee: VariableReference: Statement 3, type java.util.LinkedList<java.lang.Object>index is: 5
Matched Method is: iterator()Ljava/util/Iterator;
statement is: HostList hostList = new HostList("example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.addDefault(new Host("192.168.0.1")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addDefault(new Host("192.168.0.1")) target is: hostList method is: addDefault(Host)
source statement: org.quickserver.net.client.HostList(Ljava/lang/String;)V callee: VariableReference: Statement 7, type org.quickserver.net.client.HostListindex is: 10
source statement: org.quickserver.net.client.HostList(Ljava/lang/String;)V callee: VariableReference: Statement 7, type org.quickserver.net.client.HostListindex is: 10
Matched Method is: addDefault(Lorg/quickserver/net/client/Host;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: UDPMonitor uDPMonitor = new UDPMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (uDPMonitor)), 4, linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (uDPMonitor)), 4, linkedList) target is: HostMonitoringService method is: add(HostList,HostMonitor,int,LinkedList)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
statement is: hostMonitoringService.setIntervalInSec(300), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(300) target is: hostMonitoringService method is: setIntervalInSec(int)
statement is: hostMonitoringService.getHostList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostList() target is: hostMonitoringService method is: getHostList()
statement is: HostMonitoringService.monitor(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
statement is: HostMonitoringService.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostMonitoringService) target is: HostMonitoringService method is: add()
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.monitor(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
statement is: HostMonitoringService.monitor("example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("example.com") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Z)V
statement is: HostMonitoringService.monitor(false, "127.0.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "127.0.0.1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
TestCase is: HostMonitoringService.getSize();
boolean _boolean = false;
String string = "127.0.0.1";
HostMonitoringService.monitor(_boolean, string);
Object object = new Object();
LinkedList<Object> linkedList = new LinkedList<Object>();
String string = "example.com";
HostMonitoringService.add((HostMonitoringService) string);
((List) _void).iterator();
String string = "example.com";
HostList hostList = new HostList(string);
Host host = null;
((HostList) _void).addDefault(host);
UDPMonitor uDPMonitor = new UDPMonitor();
int _int = 4;
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, _int, (List) linkedList);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
String string = null;
HostMonitoringService.add((HostMonitoringService) string);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
String string = "example.com";
HostMonitoringService.monitor((boolean) string);
boolean _boolean = false;
String string = "127.0.0.1";
HostMonitoringService.monitor(_boolean, string);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService1 = new HostMonitoringService("host1", 80, "localhost");
        HostMonitoringService hostMonitoringService2 = new HostMonitoringService("host2", 80, "localhost");
        HostMonitoringService.add(hostMonitoringService1);
        HostMonitoringService.add(hostMonitoringService2);
    }
}
statement is: HostMonitoringService hostMonitoringService1 = new HostMonitoringService("host1", 80, "localhost"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService hostMonitoringService2 = new HostMonitoringService("host2", 80, "localhost"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.add(hostMonitoringService1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostMonitoringService1) target is: HostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.add(hostMonitoringService2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostMonitoringService2) target is: HostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        // Set up a fake host object with some specific properties
        Host host = new Host("example.com", "192.168.0.1", 3389);
        host.setLastCheckOn(Instant.now().minusSeconds(60));
        host.setNextCheckOn(Instant.now().plusSeconds(300));
        // Call the getNextCheckOn method with the fake host object
        hostMonitoringService.getNextCheckOn(host);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Set up a fake host object with some specific properties
Host host = new Host("example.com", "192.168.0.1", 3389), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: host.setLastCheckOn(Instant.now().minusSeconds(60)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setLastCheckOn(Instant.now().minusSeconds(60)) target is: host method is: setLastCheckOn()
statement is: host.setNextCheckOn(Instant.now().plusSeconds(300)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setNextCheckOn(Instant.now().plusSeconds(300)) target is: host method is: setNextCheckOn()
statement is: // Call the getNextCheckOn method with the fake host object
hostMonitoringService.getNextCheckOn(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Call the getNextCheckOn method with the fake host object
hostMonitoringService.getNextCheckOn(host) target is: hostMonitoringService method is: getNextCheckOn(Host)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getIntervalInSec();
        // Improved test data
        int intervalInSec = 30;
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getIntervalInSec()I
statement is: // Improved test data
int intervalInSec = 30, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 30
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();
int _int = 30;

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.monitoring.impl.PingMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor pingMonitor = new PingMonitor()
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor hostMonitor = (PingMonitor)hostMonitoringService.getHostMonitor()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
PingMonitor pingMonitor = new PingMonitor();
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getHostMonitor();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        PingMonitor pingMonitor = new PingMonitor();
        hostMonitoringService.setHostMonitor(pingMonitor);
        hostMonitoringService.getHostMonitor();
        // Improved test data
        // Using a more descriptive host name for the monitored host
        hostMonitoringService.setHostMonitor(new PingMonitor("www.example.com"));
        // Using a more representative timeout value
        hostMonitoringService.setHostMonitor(new PingMonitor("www.example.com", 1000));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PingMonitor pingMonitor = new PingMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostMonitor(pingMonitor), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(pingMonitor) target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: hostMonitoringService.getHostMonitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostMonitor() target is: hostMonitoringService method is: getHostMonitor()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor;
statement is: // Improved test data
// Using a more descriptive host name for the monitored host
hostMonitoringService.setHostMonitor(new PingMonitor("www.example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
// Using a more descriptive host name for the monitored host
hostMonitoringService.setHostMonitor(new PingMonitor("www.example.com")) target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Using a more representative timeout value
hostMonitoringService.setHostMonitor(new PingMonitor("www.example.com", 1000)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Using a more representative timeout value
hostMonitoringService.setHostMonitor(new PingMonitor("www.example.com", 1000)) target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
PingMonitor pingMonitor = new PingMonitor();
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getHostMonitor();
PingMonitor pingMonitor = null;
hostMonitoringService.setHostMonitor(pingMonitor);
PingMonitor pingMonitor = null;
hostMonitoringService.setHostMonitor(pingMonitor);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "")
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList((HostList) null)
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.quickserver.net.client.monitoring.HostMonitor
statement code is: HostMonitor hostMonitor = hostMonitoringService.getHostMonitor()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec((-49))
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor((HostMonitor) null)
statement is: mock(interface org.quickserver.net.client.monitoring.HostStateListener) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.quickserver.net.client.monitoring.HostStateListener
statement code is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer())
statement is: clear()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.clear()
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner(arg0)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: mock(interface org.quickserver.net.client.monitoring.HostStateListener) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.quickserver.net.client.monitoring.HostStateListener
statement code is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer())
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostMonitoringService.monitor();
HostMonitoringService.monitor(true, "");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.getHostList();
hostMonitoringService.setHostList((HostList) null);
hostMonitoringService.getHostMonitor();
HostMonitoringService.monitor(true);
hostMonitoringService.setIntervalInSec((-49));
hostMonitoringService.setHostMonitor((HostMonitor) null);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
HostMonitoringService.clear();
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
hostMonitoringService.getListnersList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        LinkedList<Object> linkedList = new LinkedList<>();
        hostMonitoringService.setListnersList(linkedList);
        hostMonitoringService.monitor("15 minutes", "2 hours");
        HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListener);
        hostMonitoringService.clear();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<Object> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setListnersList(linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setListnersList(linkedList) target is: hostMonitoringService method is: setListnersList(LinkedList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setListnersList(Ljava/util/List;)V
statement is: hostMonitoringService.monitor("15 minutes", "2 hours"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.monitor("15 minutes", "2 hours") target is: hostMonitoringService method is: monitor(java.lang.String,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListener) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
statement is: hostMonitoringService.clear(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.clear() target is: hostMonitoringService method is: clear()
Matched Method is: clear()V
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
String string = "15 minutes";
String string = "2 hours";
HostMonitoringService.monitor((boolean) string, string);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostMonitoringService.clear();

statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, (String) null)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, (String) null)
test data is: HostMonitoringService.getSize();
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.getSize();
        // Improve the test data by changing the primitive values and Strings to more illustrative examples
        HostMonitoringService.monitor(false, "My Computer");
        HostMonitoringService.monitor(true, "My Laptop");
    }
}
statement is: HostMonitoringService.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.getSize() target is: HostMonitoringService method is: getSize()
Matched Method is: getSize()I
statement is: // Improve the test data by changing the primitive values and Strings to more illustrative examples
HostMonitoringService.monitor(false, "My Computer"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improve the test data by changing the primitive values and Strings to more illustrative examples
HostMonitoringService.monitor(false, "My Computer") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: HostMonitoringService.monitor(true, "My Laptop"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "My Laptop") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
TestCase is: HostMonitoringService.getSize();
boolean _boolean = false;
String string = "My Computer";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = true;
String string = "My Laptop";
HostMonitoringService.monitor(_boolean, string);

statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "ISLv3")
test data is: HostMonitoringService.monitor(true, "ISLv3");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor(true, "server123");
    }
}
statement is: HostMonitoringService.monitor(true, "server123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "server123") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
TestCase is: boolean _boolean = true;
String string = "server123";
HostMonitoringService.monitor(_boolean, string);

statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, "5<@q,VM;J*9")
test data is: HostMonitoringService.monitor(false, "5<@q,VM;J*9");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the HostMonitoringService.monitor() method
        // The first argument is a boolean value that indicates whether or not the host is up
        HostMonitoringService.monitor(true, "192.168.0.1");
        // The second argument is a string that contains the IP address of the host to be monitored
        HostMonitoringService.monitor(false, "192.168.0.1");
        // The third argument is a string that contains the name of the host to be monitored
        HostMonitoringService.monitor(true, "MyServer");
        // The fourth argument is an integer that indicates the number of seconds before a timeout occurs
        HostMonitoringService.monitor(false, "192.168.0.1", 30);
    }
}
statement is: // Improved test data for the HostMonitoringService.monitor() method
// The first argument is a boolean value that indicates whether or not the host is up
HostMonitoringService.monitor(true, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data for the HostMonitoringService.monitor() method
// The first argument is a boolean value that indicates whether or not the host is up
HostMonitoringService.monitor(true, "192.168.0.1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: // The second argument is a string that contains the IP address of the host to be monitored
HostMonitoringService.monitor(false, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // The second argument is a string that contains the IP address of the host to be monitored
HostMonitoringService.monitor(false, "192.168.0.1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: // The third argument is a string that contains the name of the host to be monitored
HostMonitoringService.monitor(true, "MyServer"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // The third argument is a string that contains the name of the host to be monitored
HostMonitoringService.monitor(true, "MyServer") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: // The fourth argument is an integer that indicates the number of seconds before a timeout occurs
HostMonitoringService.monitor(false, "192.168.0.1", 30), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // The fourth argument is an integer that indicates the number of seconds before a timeout occurs
HostMonitoringService.monitor(false, "192.168.0.1", 30) target is: HostMonitoringService method is: monitor(boolean,java.lang.String,int)
TestCase is: boolean _boolean = true;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = false;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = true;
String string = "MyServer";
HostMonitoringService.monitor(_boolean, string);

statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor((String) null)
statement is: getLoopbackAddress()Ljava/net/InetAddress; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.net.Inet4Address
statement code is: Inet4Address loopbackAddress = (Inet4Address)MockInetAddress.getLoopbackAddress()
statement is: getByName(Ljava/lang/String;)Ljava/net/InetAddress; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.net.Inet4Address
statement code is: Inet4Address byName = (Inet4Address)MockInetAddress.getByName((String) null)
statement is: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host(arg0)
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date lastCheckedOn = host.getLastCheckedOn()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setNextCheckOn((Date) null)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: org.quickserver.net.client.Host(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host((String) null)
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove(arg0)
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, (String) null)
statement is: setCurrentTimeMillis(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: System.setCurrentTimeMillis(3)
test data is: HostMonitoringService.getSize();
HostMonitoringService.monitor((String) null);
MockInetAddress.getLoopbackAddress();
Inet4Address byName = (Inet4Address)MockInetAddress.getByName((String) null);
Host host = new Host(byName);
host.getLastCheckedOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setNextCheckOn((Date) null);
hostMonitoringService.getListnersList();
Host host = new Host((String) null);
HostMonitoringService.remove(hostMonitoringService);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(false);
HostMonitoringService.monitor(true, (String) null);
System.setCurrentTimeMillis(3);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.getSize();
        HostMonitoringService.monitor("example.com");
        MockInetAddress.getLoopbackAddress();
        Inet4Address byName = ((Inet4Address) (MockInetAddress.getByName("192.0.2.1")));
        Host host = new Host(byName);
        host.getLastCheckedOn();
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setNextCheckOn(new Date());
        hostMonitoringService.getListnersList();
        Host host = new Host("example.com");
        HostMonitoringService.remove(hostMonitoringService);
        hostMonitoringService.getHostList();
        HostMonitoringService.monitor(false, "example.com");
        System.setCurrentTimeMillis(3);
    }
}
statement is: HostMonitoringService.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.getSize() target is: HostMonitoringService method is: getSize()
Matched Method is: getSize()I
statement is: HostMonitoringService.monitor("example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("example.com") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Ljava/lang/String;)V
statement is: MockInetAddress.getLoopbackAddress(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockInetAddress.getLoopbackAddress() target is: MockInetAddress method is: getLoopbackAddress()
Matched Method is: getLoopbackAddress()Ljava/net/InetAddress;
statement is: Inet4Address byName = ((Inet4Address) (MockInetAddress.getByName("192.0.2.1"))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Inet4Address) (MockInetAddress.getByName("192.0.2.1"))) target is: MockInetAddress method is: getByName(java.lang.String)
Matched Method is: getByName(Ljava/lang/String;)Ljava/net/InetAddress;
statement is: Host host = new Host(byName), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: host.getLastCheckedOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.getLastCheckedOn() target is: host method is: getLastCheckedOn()
source statement: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V callee: VariableReference: Statement 4, type org.quickserver.net.client.Hostindex is: 6
Matched Method is: getLastCheckedOn()Ljava/util/Date;
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setNextCheckOn(new Date()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setNextCheckOn(new Date()) target is: hostMonitoringService method is: setNextCheckOn(Date)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 6, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 8
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 6, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 8
Matched Method is: getListnersList()Ljava/util/List;
statement is: Host host = new Host("example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.remove(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.remove(hostMonitoringService) target is: HostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
statement is: hostMonitoringService.getHostList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostList() target is: hostMonitoringService method is: getHostList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 6, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 8
Matched Method is: getHostList()Lorg/quickserver/net/client/HostList;
statement is: HostMonitoringService.monitor(false, "example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "example.com") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: System.setCurrentTimeMillis(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.setCurrentTimeMillis(3) target is: System method is: setCurrentTimeMillis(int)
Matched Method is: setCurrentTimeMillis(J)V
TestCase is: HostMonitoringService.getSize();
String string = "example.com";
HostMonitoringService.monitor(string);
MockInetAddress.getLoopbackAddress();
String string = "192.0.2.1";
Inet4Address byName = (Inet4Address)MockInetAddress.getByName(string);
Host host = new Host(byName);
((Host) string).getLastCheckedOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
Date date = null;
host.setNextCheckOn(date);
((HostMonitoringService) host).getListnersList();
String string = "example.com";
Host host = new Host((InetAddress) string);
HostMonitoringService.remove(hostMonitoringService);
((HostMonitoringService) host).getHostList();
boolean _boolean = false;
String string = "example.com";
HostMonitoringService.monitor(_boolean, string);
int _int = 3;
System.setCurrentTimeMillis(_int);

statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, (String) null)
test data is: HostMonitoringService.monitor(true, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor(true, "http://www.example.com");
    }
}
statement is: HostMonitoringService.monitor(true, "http://www.example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "http://www.example.com") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
TestCase is: boolean _boolean = true;
String string = "http://www.example.com";
HostMonitoringService.monitor(_boolean, string);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("ISLv3")
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList(arg0)
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostList hostList = new HostList("ISLv3");
        hostList.add(new Host("server1", "10.10.10.10"));
        hostList.add(new Host("server2", "10.10.10.11"));
        hostMonitoringService.setHostList(hostList);
        assertEquals(hostList, hostMonitoringService.getHostList());
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostList hostList = new HostList("ISLv3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.add(new Host("server1", "10.10.10.10")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.add(new Host("server1", "10.10.10.10")) target is: hostList method is: add(Host)
statement is: hostList.add(new Host("server2", "10.10.10.11")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.add(new Host("server2", "10.10.10.11")) target is: hostList method is: add(Host)
statement is: hostMonitoringService.setHostList(hostList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostList(hostList) target is: hostMonitoringService method is: setHostList(HostList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostList(Lorg/quickserver/net/client/HostList;)V
statement is: assertEquals(hostList, hostMonitoringService.getHostList()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(hostList, hostMonitoringService.getHostList()) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "ISLv3";
HostList hostList = new HostList(string);
hostMonitoringService.setHostList(hostList);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec((-319))
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-319));
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setIntervalInSec(60);
        hostMonitoringService.getIntervalInSec();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setIntervalInSec(60), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(60) target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getIntervalInSec()I
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 60;
hostMonitoringService.setIntervalInSec(_int);
hostMonitoringService.getIntervalInSec();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: setLastCheckedOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setLastCheckedOn(arg0)
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate lastCheckedOn = (MockDate)hostMonitoringService.getLastCheckedOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate();
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        MockDate mockDateInThePast = new MockDate("2021-12-31");
        hostMonitoringService.setLastCheckedOn(mockDateInThePast);
        hostMonitoringService.getLastCheckedOn();
        HostMonitoringService hostMonitoringService2 = new HostMonitoringService();
        MockDate mockDateInTheFuture = new MockDate("2023-01-01");
        hostMonitoringService2.setLastCheckedOn(mockDateInTheFuture);
        hostMonitoringService2.getLastCheckedOn();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockDate mockDateInThePast = new MockDate("2021-12-31"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setLastCheckedOn(mockDateInThePast), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setLastCheckedOn(mockDateInThePast) target is: hostMonitoringService method is: setLastCheckedOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setLastCheckedOn(Ljava/util/Date;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.getLastCheckedOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getLastCheckedOn() target is: hostMonitoringService method is: getLastCheckedOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getLastCheckedOn()Ljava/util/Date;
statement is: HostMonitoringService hostMonitoringService2 = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockDate mockDateInTheFuture = new MockDate("2023-01-01"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService2.setLastCheckedOn(mockDateInTheFuture), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService2.setLastCheckedOn(mockDateInTheFuture) target is: hostMonitoringService2 method is: setLastCheckedOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 4
Matched Method is: setLastCheckedOn(Ljava/util/Date;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService2.getLastCheckedOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService2.getLastCheckedOn() target is: hostMonitoringService2 method is: getLastCheckedOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 4
Matched Method is: getLastCheckedOn()Ljava/util/Date;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = null;
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = null;
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner((HostStateListener) null)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.addHostStateListner(new HostStateListener() {
            @Override
            public void hostChanged(Host host) {
                System.out.println("Host changed: " + host.getHostname());
            }
        });
        hostMonitoringService.getListnersList();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.addHostStateListner(new HostStateListener() {
    @Override
    public void hostChanged(Host host) {
        System.out.println("Host changed: " + host.getHostname());
    }
}), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(new HostStateListener() {
    @Override
    public void hostChanged(Host host) {
        System.out.println("Host changed: " + host.getHostname());
    }
}) target is: hostMonitoringService method is: addHostStateListner(DummyClass$1)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = null;
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        LinkedList<Object> linkedList = new LinkedList<Object>();
        linkedList.add(new Integer(123));
        linkedList.add(new Double(456.789));
        linkedList.add("Hello World");
        hostMonitoringService.setListnersList(linkedList);
        hostMonitoringService.getListnersList();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<Object> linkedList = new LinkedList<Object>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add(new Integer(123)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(new Integer(123)) target is: linkedList method is: add(java.lang.Integer)
statement is: linkedList.add(new Double(456.789)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(new Double(456.789)) target is: linkedList method is: add(java.lang.Double)
statement is: linkedList.add("Hello World"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add("Hello World") target is: linkedList method is: add(java.lang.String)
statement is: hostMonitoringService.setListnersList(linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setListnersList(linkedList) target is: hostMonitoringService method is: setListnersList(LinkedList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setListnersList(Ljava/util/List;)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.evosuite.runtime.mock.java.util.MockDate(IIIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-1230), 0, 421, 1, 1)
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setNextCheckOn(arg0)
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate nextCheckOn = (MockDate)hostMonitoringService.getNextCheckOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((-1230), 0, 421, 1, 1);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        MockDate mockDate = new MockDate(1580, 0, 421, 1, 1);// use more descriptive values for date and time

        hostMonitoringService.setNextCheckOn(mockDate);
        hostMonitoringService.getNextCheckOn();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockDate mockDate = new MockDate(1580, 0, 421, 1, 1)// use more descriptive values for date and time
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setNextCheckOn(mockDate), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setNextCheckOn(mockDate) target is: hostMonitoringService method is: setNextCheckOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getNextCheckOn()Ljava/util/Date;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 1580;
int _int = 0;
int _int = 421;
int _int = 1;
int _int = 1;
MockDate mockDate = new MockDate(_int, _int, _int, _int, _int);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService host1 = new HostMonitoringService("host1");
        HostMonitoringService host2 = new HostMonitoringService("host2");
        HostMonitoringService host3 = new HostMonitoringService("host3");
        host1.add(host2);
        host1.add(host3);
        host2.remove(host3);
    }
}
statement is: HostMonitoringService host1 = new HostMonitoringService("host1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService host2 = new HostMonitoringService("host2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService host3 = new HostMonitoringService("host3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: host1.add(host2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host1.add(host2) target is: host1 method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: host1.add(host3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host1.add(host3) target is: host1 method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: host2.remove(host3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host2.remove(host3) target is: host2 method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.remove(hostMonitoringService);

statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor("")
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: org.quickserver.net.client.Host(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host("")
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove(arg0)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor("Xv.!,wAyk+P~O2%jw'Q")
test data is: HostMonitoringService.monitor(false);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor("");
hostMonitoringService.getListnersList();
Host host = new Host("");
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
HostMonitoringService.monitor(true);
HostMonitoringService.monitor("Xv.!,wAyk+P~O2%jw'Q");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor(false);
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostMonitoringService.monitor("192.168.1.1");
        hostMonitoringService.getListnersList();
        Host host = new Host("www.example.com");
        HostMonitoringService.remove(hostMonitoringService);
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getHostList();
        HostMonitoringService.monitor(true);
        HostMonitoringService.monitor("192.168.1.2");
    }
}
statement is: HostMonitoringService.monitor(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.monitor("192.168.1.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("192.168.1.1") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Z)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 1, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 2
Matched Method is: getListnersList()Ljava/util/List;
statement is: Host host = new Host("www.example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.remove(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.remove(hostMonitoringService) target is: HostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getHostList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostList() target is: hostMonitoringService method is: getHostList()
statement is: HostMonitoringService.monitor(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
statement is: HostMonitoringService.monitor("192.168.1.2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("192.168.1.2") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Z)V
TestCase is: boolean _boolean = false;
HostMonitoringService.monitor(_boolean);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "192.168.1.1";
HostMonitoringService.monitor((boolean) string);
((HostMonitoringService) _void).getListnersList();
String string = "www.example.com";
Host host = new Host(string);
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
String string = "192.168.1.2";
HostMonitoringService.monitor((boolean) string);

statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.quickserver.net.client.monitoring.HostMonitor
statement code is: HostMonitor hostMonitor = hostMonitoringService.getHostMonitor()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("Gi~4SNw_hKjb<76")
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: addDefault(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.addDefault(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec(0)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add(arg0)
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<java.lang.Object>
statement code is: Iterator<Object> iterator = linkedList.iterator()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) null, (-879), (List) arg3)
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec(1451)
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.quickserver.net.client.monitoring.HostMonitor
statement code is: HostMonitor hostMonitor = hostMonitoringService.getHostMonitor()
statement is: mock(interface org.quickserver.net.client.monitoring.HostStateListener) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.quickserver.net.client.monitoring.HostStateListener
statement code is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer())
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner(arg0)
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date lastCheckedOn = hostMonitoringService.getLastCheckedOn()
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor("G6")
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService.monitor(false);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
HostList hostList = new HostList("Gi~4SNw_hKjb<76");
Host host = new Host();
hostList.addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setIntervalInSec(0);
Object object = new Object();
linkedList.add(object);
linkedList.iterator();
HostMonitoringService.add(hostList, (HostMonitor) null, (-879), (List) linkedList);
hostMonitoringService.setIntervalInSec(1451);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(false);
hostMonitoringService.getListnersList();
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.getHostMonitor();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getLastCheckedOn();
hostMonitoringService.getIntervalInSec();
HostMonitoringService.monitor("G6");
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        String hostId = "Gi~4SNw_hKjb<76";
        HostList hostList = new HostList(hostId);
        Host host = new Host();
        hostList.addDefault(host);
        LinkedList<Object> linkedList = new LinkedList<>();
        Object object = new Object();
        linkedList.add(object);
        int hostMonitorInterval = 0;
        hostMonitoringService.setIntervalInSec(hostMonitorInterval);
        hostMonitoringService.getHostList();
        HostStateListener hostStateListenerMock = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListenerMock);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String hostId = "Gi~4SNw_hKjb<76", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: HostList hostList = new HostList(hostId), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.addDefault(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addDefault(host) target is: hostList method is: addDefault(Host)
source statement: org.quickserver.net.client.HostList(Ljava/lang/String;)V callee: VariableReference: Statement 3, type org.quickserver.net.client.HostListindex is: 2
Matched Method is: addDefault(Lorg/quickserver/net/client/Host;)V
statement is: LinkedList<Object> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add(object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(object) target is: linkedList method is: add(java.lang.Object)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
statement is: int hostMonitorInterval = 0, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: hostMonitoringService.setIntervalInSec(hostMonitorInterval), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(hostMonitorInterval) target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 1, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 1, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: hostMonitoringService.getHostList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostList() target is: hostMonitoringService method is: getHostList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 1, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getHostList()Lorg/quickserver/net/client/HostList;
statement is: HostStateListener hostStateListenerMock = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListenerMock), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListenerMock) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 1, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "Gi~4SNw_hKjb<76";
HostList hostList = new HostList(string);
Host host = new Host();
((HostList) host).addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
Object object = new Object();
HostMonitoringService.add((HostMonitoringService) object);
int _int = 0;
((HostMonitoringService) string).setIntervalInSec(_int);
((HostMonitoringService) string).getHostList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
((HostMonitoringService) string).addHostStateListner(hostStateListener);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("ISLv3")
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: addDefault(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.addDefault(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add((Object) null)
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
Host host = new Host();
hostList.addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
linkedList.add((Object) null);
HostMonitoringService.monitor(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostList hostList = new HostList("ISLv3");
        Host host = new Host();
        host.setName("host1");
        host.setIpAddress("192.168.0.1");
        hostList.addDefault(host);
        LinkedList<Object> linkedList = new LinkedList<Object>();
        linkedList.add(((Object) (null)));
        HostMonitoringService.monitor(true);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostList hostList = new HostList("ISLv3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: host.setName("host1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setName("host1") target is: host method is: setName(java.lang.String)
statement is: host.setIpAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setIpAddress("192.168.0.1") target is: host method is: setIpAddress(java.lang.String)
statement is: hostList.addDefault(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addDefault(host) target is: hostList method is: addDefault(Host)
source statement: org.quickserver.net.client.HostList(Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.quickserver.net.client.HostListindex is: 2
Matched Method is: addDefault(Lorg/quickserver/net/client/Host;)V
statement is: LinkedList<Object> linkedList = new LinkedList<Object>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(((Object) (null))) target is: linkedList method is: add(java.lang.Object)
source statement: java.util.LinkedList()V callee: VariableReference: Statement 4, type java.util.LinkedList<java.lang.Object>index is: 5
Matched Method is: add(Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.monitor(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "ISLv3";
HostList hostList = new HostList(string);
Host host = new Host();
((HostList) string).addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
Object object = null;
((LinkedList) _void).add(object);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);

* test suite isTestSuite: 42
Test 0: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(false, (String) null);
Object object = new Object();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
linkedList.add((Object) hostMonitoringService);
linkedList.iterator();
HostList hostList = new HostList((String) null);
hostList.addDefault((Host) null);
Host host = new Host();
host.setInetAddress("");
hostList.addDefault(host);
UDPMonitor uDPMonitor = new UDPMonitor();
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, 4, (List) linkedList);
hostMonitoringService.setIntervalInSec(1451);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(true);
hostMonitoringService.getListnersList();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor(true);
HostMonitoringService.monitor("");
HostMonitoringService.monitor(false, (String) null);
Test 1: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 2: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
Test 3: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();
Test 4: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
PingMonitor pingMonitor = new PingMonitor();
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getHostMonitor();
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostMonitoringService.monitor();
HostMonitoringService.monitor(true, "");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.getHostList();
hostMonitoringService.setHostList((HostList) null);
hostMonitoringService.getHostMonitor();
HostMonitoringService.monitor(true);
hostMonitoringService.setIntervalInSec((-49));
hostMonitoringService.setHostMonitor((HostMonitor) null);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
HostMonitoringService.clear();
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
hostMonitoringService.getListnersList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
Test 6: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, (String) null);
Test 7: 
HostMonitoringService.monitor(true, "ISLv3");
Test 8: 
HostMonitoringService.monitor(false, "5<@q,VM;J*9");
Test 9: 
HostMonitoringService.getSize();
HostMonitoringService.monitor((String) null);
MockInetAddress.getLoopbackAddress();
Inet4Address byName = (Inet4Address)MockInetAddress.getByName((String) null);
Host host = new Host(byName);
host.getLastCheckedOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setNextCheckOn((Date) null);
hostMonitoringService.getListnersList();
Host host = new Host((String) null);
HostMonitoringService.remove(hostMonitoringService);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(false);
HostMonitoringService.monitor(true, (String) null);
System.setCurrentTimeMillis(3);
Test 10: 
HostMonitoringService.monitor(true, (String) null);
Test 11: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-319));
hostMonitoringService.getIntervalInSec();
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate();
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.getListnersList();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((-1230), 0, 421, 1, 1);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);
Test 18: 
HostMonitoringService.monitor(false);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor("");
hostMonitoringService.getListnersList();
Host host = new Host("");
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
HostMonitoringService.monitor(true);
HostMonitoringService.monitor("Xv.!,wAyk+P~O2%jw'Q");
Test 19: 
HostMonitoringService.monitor(false);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
HostList hostList = new HostList("Gi~4SNw_hKjb<76");
Host host = new Host();
hostList.addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setIntervalInSec(0);
Object object = new Object();
linkedList.add(object);
linkedList.iterator();
HostMonitoringService.add(hostList, (HostMonitor) null, (-879), (List) linkedList);
hostMonitoringService.setIntervalInSec(1451);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(false);
hostMonitoringService.getListnersList();
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.getHostMonitor();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getLastCheckedOn();
hostMonitoringService.getIntervalInSec();
HostMonitoringService.monitor("G6");
hostMonitoringService.getIntervalInSec();
Test 20: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
Host host = new Host();
hostList.addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
linkedList.add((Object) null);
HostMonitoringService.monitor(true);
Test 21: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(false, "127.0.0.1");
Object object = new Object();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add((HostMonitoringService) "example.com");
((List) _void).iterator();
String string = "example.com";
HostList hostList = new HostList(string);
Host host = null;
((HostList) _void).addDefault(host);
UDPMonitor uDPMonitor = new UDPMonitor();
int _int = 4;
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, _int, (List) linkedList);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
String string = null;
HostMonitoringService.add((HostMonitoringService) string);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
String string = "example.com";
HostMonitoringService.monitor((boolean) string);
boolean _boolean = false;
String string = "127.0.0.1";
HostMonitoringService.monitor(_boolean, string);

Test 22: 
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);

Test 23: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 24: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();

Test 25: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
PingMonitor pingMonitor = new PingMonitor();
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getHostMonitor();
hostMonitoringService.setHostMonitor((HostMonitor) null);
hostMonitoringService.setHostMonitor((HostMonitor) null);

Test 26: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostMonitoringService.monitor((boolean) "15 minutes", "2 hours");
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostMonitoringService.clear();

Test 27: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(false, "My Computer");
HostMonitoringService.monitor(true, "My Laptop");

Test 28: 
HostMonitoringService.monitor(true, "server123");

Test 29: 
HostMonitoringService.monitor(true, "192.168.0.1");
HostMonitoringService.monitor(false, "192.168.0.1");
HostMonitoringService.monitor(true, "MyServer");

Test 30: 
HostMonitoringService.getSize();
HostMonitoringService.monitor("example.com");
MockInetAddress.getLoopbackAddress();
Inet4Address byName = (Inet4Address)MockInetAddress.getByName("192.0.2.1");
Host host = new Host(byName);
((Host)"192.0.2.1").getLastCheckedOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
Date date = null;
host.setNextCheckOn(date);
((HostMonitoringService) host).getListnersList();
String string = "example.com";
Host host = new Host((InetAddress) string);
HostMonitoringService.remove(hostMonitoringService);
((HostMonitoringService) host).getHostList();
boolean _boolean = false;
String string = "example.com";
HostMonitoringService.monitor(_boolean, string);
int _int = 3;
System.setCurrentTimeMillis(_int);

Test 31: 
HostMonitoringService.monitor(true, "http://www.example.com");

Test 32: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
hostMonitoringService.setHostList(hostList);

Test 33: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(60);
hostMonitoringService.getIntervalInSec();

Test 34: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setLastCheckedOn((Date) null);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setLastCheckedOn((Date) null);
hostMonitoringService.getLastCheckedOn();

Test 35: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.getListnersList();

Test 36: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

Test 37: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(1580, 0, 421, 1, 1);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

Test 38: 
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.remove((HostMonitoringService) null);

Test 39: 
HostMonitoringService.monitor(false);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor((boolean) "192.168.1.1");
((HostMonitoringService) _void).getListnersList();
String string = "www.example.com";
Host host = new Host(string);
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
String string = "192.168.1.2";
HostMonitoringService.monitor((boolean) string);

Test 40: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "Gi~4SNw_hKjb<76";
HostList hostList = new HostList("Gi~4SNw_hKjb<76");
Host host = new Host();
((HostList) host).addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
Object object = new Object();
HostMonitoringService.add((HostMonitoringService) object);
int _int = 0;
((HostMonitoringService) string).setIntervalInSec(_int);
((HostMonitoringService) string).getHostList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
((HostMonitoringService) string).addHostStateListner(hostStateListener);

Test 41: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
Host host = new Host();
((HostList)"ISLv3").addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
Object object = null;
((LinkedList) _void).add(object);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);


* Generated after the refinement and before minimization 42 tests with total length 269
* test suite isTestSuite: 42
Test 0: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(false, (String) null);
Object object = new Object();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
linkedList.add((Object) hostMonitoringService);
linkedList.iterator();
HostList hostList = new HostList((String) null);
hostList.addDefault((Host) null);
Host host = new Host();
host.setInetAddress("");
hostList.addDefault(host);
UDPMonitor uDPMonitor = new UDPMonitor();
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, 4, (List) linkedList);
hostMonitoringService.setIntervalInSec(1451);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(true);
hostMonitoringService.getListnersList();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor(true);
HostMonitoringService.monitor("");
HostMonitoringService.monitor(false, (String) null);
Test 1: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 2: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
Test 3: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();
Test 4: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
PingMonitor pingMonitor = new PingMonitor();
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getHostMonitor();
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostMonitoringService.monitor();
HostMonitoringService.monitor(true, "");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.getHostList();
hostMonitoringService.setHostList((HostList) null);
hostMonitoringService.getHostMonitor();
HostMonitoringService.monitor(true);
hostMonitoringService.setIntervalInSec((-49));
hostMonitoringService.setHostMonitor((HostMonitor) null);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
HostMonitoringService.clear();
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
hostMonitoringService.getListnersList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
Test 6: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, (String) null);
Test 7: 
HostMonitoringService.monitor(true, "ISLv3");
Test 8: 
HostMonitoringService.monitor(false, "5<@q,VM;J*9");
Test 9: 
HostMonitoringService.getSize();
HostMonitoringService.monitor((String) null);
MockInetAddress.getLoopbackAddress();
Inet4Address byName = (Inet4Address)MockInetAddress.getByName((String) null);
Host host = new Host(byName);
host.getLastCheckedOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setNextCheckOn((Date) null);
hostMonitoringService.getListnersList();
Host host = new Host((String) null);
HostMonitoringService.remove(hostMonitoringService);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(false);
HostMonitoringService.monitor(true, (String) null);
System.setCurrentTimeMillis(3);
Test 10: 
HostMonitoringService.monitor(true, (String) null);
Test 11: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-319));
hostMonitoringService.getIntervalInSec();
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate();
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.getListnersList();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((-1230), 0, 421, 1, 1);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);
Test 18: 
HostMonitoringService.monitor(false);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor("");
hostMonitoringService.getListnersList();
Host host = new Host("");
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
HostMonitoringService.monitor(true);
HostMonitoringService.monitor("Xv.!,wAyk+P~O2%jw'Q");
Test 19: 
HostMonitoringService.monitor(false);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
HostList hostList = new HostList("Gi~4SNw_hKjb<76");
Host host = new Host();
hostList.addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setIntervalInSec(0);
Object object = new Object();
linkedList.add(object);
linkedList.iterator();
HostMonitoringService.add(hostList, (HostMonitor) null, (-879), (List) linkedList);
hostMonitoringService.setIntervalInSec(1451);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(false);
hostMonitoringService.getListnersList();
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.getHostMonitor();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getLastCheckedOn();
hostMonitoringService.getIntervalInSec();
HostMonitoringService.monitor("G6");
hostMonitoringService.getIntervalInSec();
Test 20: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
Host host = new Host();
hostList.addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
linkedList.add((Object) null);
HostMonitoringService.monitor(true);
Test 21: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(false, "127.0.0.1");
Object object = new Object();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add((HostMonitoringService) "example.com");
((List) _void).iterator();
String string = "example.com";
HostList hostList = new HostList(string);
Host host = null;
((HostList) _void).addDefault(host);
UDPMonitor uDPMonitor = new UDPMonitor();
int _int = 4;
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, _int, (List) linkedList);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
String string = null;
HostMonitoringService.add((HostMonitoringService) string);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
String string = "example.com";
HostMonitoringService.monitor((boolean) string);
boolean _boolean = false;
String string = "127.0.0.1";
HostMonitoringService.monitor(_boolean, string);

Test 22: 
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);

Test 23: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 24: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();

Test 25: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
PingMonitor pingMonitor = new PingMonitor();
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getHostMonitor();
hostMonitoringService.setHostMonitor((HostMonitor) null);
hostMonitoringService.setHostMonitor((HostMonitor) null);

Test 26: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostMonitoringService.monitor((boolean) "15 minutes", "2 hours");
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostMonitoringService.clear();

Test 27: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(false, "My Computer");
HostMonitoringService.monitor(true, "My Laptop");

Test 28: 
HostMonitoringService.monitor(true, "server123");

Test 29: 
HostMonitoringService.monitor(true, "192.168.0.1");
HostMonitoringService.monitor(false, "192.168.0.1");
HostMonitoringService.monitor(true, "MyServer");

Test 30: 
HostMonitoringService.getSize();
HostMonitoringService.monitor("example.com");
MockInetAddress.getLoopbackAddress();
Inet4Address byName = (Inet4Address)MockInetAddress.getByName("192.0.2.1");
Host host = new Host(byName);
((Host)"192.0.2.1").getLastCheckedOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
Date date = null;
host.setNextCheckOn(date);
((HostMonitoringService) host).getListnersList();
String string = "example.com";
Host host = new Host((InetAddress) string);
HostMonitoringService.remove(hostMonitoringService);
((HostMonitoringService) host).getHostList();
boolean _boolean = false;
String string = "example.com";
HostMonitoringService.monitor(_boolean, string);
int _int = 3;
System.setCurrentTimeMillis(_int);

Test 31: 
HostMonitoringService.monitor(true, "http://www.example.com");

Test 32: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
hostMonitoringService.setHostList(hostList);

Test 33: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(60);
hostMonitoringService.getIntervalInSec();

Test 34: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setLastCheckedOn((Date) null);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setLastCheckedOn((Date) null);
hostMonitoringService.getLastCheckedOn();

Test 35: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.getListnersList();

Test 36: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

Test 37: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(1580, 0, 421, 1, 1);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

Test 38: 
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.remove((HostMonitoringService) null);

Test 39: 
HostMonitoringService.monitor(false);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor((boolean) "192.168.1.1");
((HostMonitoringService) _void).getListnersList();
String string = "www.example.com";
Host host = new Host(string);
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
String string = "192.168.1.2";
HostMonitoringService.monitor((boolean) string);

Test 40: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "Gi~4SNw_hKjb<76";
HostList hostList = new HostList("Gi~4SNw_hKjb<76");
Host host = new Host();
((HostList) host).addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
Object object = new Object();
HostMonitoringService.add((HostMonitoringService) object);
int _int = 0;
((HostMonitoringService) string).setIntervalInSec(_int);
((HostMonitoringService) string).getHostList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
((HostMonitoringService) string).addHostStateListner(hostStateListener);

Test 41: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
Host host = new Host();
((HostList)"ISLv3").addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
Object object = null;
((LinkedList) _void).add(object);
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);


* Minimizing test suite
* test suite isTestSuite: 19
Test 0: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 1: 
HostMonitoringService.getSize();
HostMonitoringService.monitor((String) null);
MockInetAddress.getLoopbackAddress();
Inet4Address byName = (Inet4Address)MockInetAddress.getByName((String) null);
Host host = new Host(byName);
host.getLastCheckedOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setNextCheckOn((Date) null);
hostMonitoringService.getListnersList();
Host host = new Host((String) null);
HostMonitoringService.remove(hostMonitoringService);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(false);
HostMonitoringService.monitor(true, (String) null);
System.setCurrentTimeMillis(3);
Test 2: 
HostMonitoringService.remove((HostMonitoringService) null);
Test 3: 
HostMonitoringService.clear();
Test 4: 
HostMonitoringService.monitor();
Test 5: 
HostMonitoringService.add((HostMonitoringService) null);
Test 6: 
HostMonitoringService.monitor(false);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
HostList hostList = new HostList("Gi~4SNw_hKjb<76");
Host host = new Host();
hostList.addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setIntervalInSec(0);
Object object = new Object();
linkedList.add(object);
linkedList.iterator();
HostMonitoringService.add(hostList, (HostMonitor) null, (-879), (List) linkedList);
hostMonitoringService.setIntervalInSec(1451);
hostMonitoringService.getHostList();
HostMonitoringService.monitor(false);
hostMonitoringService.getListnersList();
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.getHostMonitor();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getLastCheckedOn();
hostMonitoringService.getIntervalInSec();
HostMonitoringService.monitor("G6");
hostMonitoringService.getIntervalInSec();
Test 7: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
Test 8: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
Test 9: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((-1230), 0, 421, 1, 1);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 10: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
PingMonitor pingMonitor = new PingMonitor();
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getHostMonitor();
Test 11: 
HostMonitoringService.monitor(true, "ISLv3");
Test 12: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, (String) null);
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-319));
hostMonitoringService.getIntervalInSec();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate();
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.getListnersList();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 18: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
Host host = new Host();
hostList.addDefault(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
linkedList.add((Object) null);
HostMonitoringService.monitor(true);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 72%
* Total number of goals: 74
* Number of covered goals: 53
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 79%
* Total number of goals: 131
* Number of covered goals: 104
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 82%
* Total number of goals: 22
* Number of covered goals: 18
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 74
* Number of covered goals: 51
* Generated 19 tests with total length 90
* Resulting test suite's coverage: 93% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 40%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList arg0 = new HostList("ISLv3");
hostMonitoringService.setHostList(arg0);
HostList hostList = hostMonitoringService.getHostList();
assertEquals("ISLv3", hostList.getName());


** It was a parseable test case! 
refined test name is: testSetAndGetHostList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean remove = HostMonitoringService.remove((HostMonitoringService) null);
assertFalse(remove);


** It was a parseable test case! 
refined test name is: testRemoveNullHost
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.clear();

** It was a parseable test case! 
refined test name is: testClearShouldEmptyMonitoredList
* Compiling Tests
refined test name is: testClearMethodClearsAllHosts
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor();

** It was a parseable test case! 
refined test name is: testMonitorServiceConnectsToHostAndPort
* Compiling Tests
refined test name is: testConnectToHostAndMonitorChanges
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.add((HostMonitoringService) null);

** It was a parseable test case! 
refined test name is: testAddNullHostThrowsIllegalArgumentException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
Date nextCheckOn = hostMonitoringService.getNextCheckOn();
assertNull(nextCheckOn);


** It was a parseable test case! 
refined test name is: testGetNextCheckOnWithNullValueShouldReturnNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate arg0 = new MockDate((-1230), 0, 421, 1, 1);
hostMonitoringService.setNextCheckOn(arg0);
Date nextCheckOn = hostMonitoringService.getNextCheckOn();
assertEquals("Tue Feb 25 01:01:00 GMT 671", nextCheckOn.toString());


** It was a parseable test case! 
refined test name is: testGetNextCheckOnWithMockDate
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
PingMonitor arg0 = new PingMonitor();
hostMonitoringService.setHostMonitor(arg0);
HostMonitor hostMonitor = hostMonitoringService.getHostMonitor();
assertSame(hostMonitor, arg0);


** It was a parseable test case! 
refined test name is: testSetHostMonitorReturnsSameInstanceOfPingMonitor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor(true, "ISLv3");

** It was a parseable test case! 
refined test name is: testUpdateMonitoringStateForExistingHost
* Compiling Tests
refined test name is: testMonitorMethodUpdatesHostMonitoringState
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.getSize();
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, (String) null);

** It was a parseable test case! 
refined test name is: testGetSizeAndMonitorHosts
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-319));
int intervalInSec = hostMonitoringService.getIntervalInSec();
assertEquals((-319), intervalInSec);


** It was a parseable test case! 
refined test name is: testGetIntervalInSecWhenNegativeReturnsSameValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int intervalInSec = hostMonitoringService.getIntervalInSec();
assertEquals(0, intervalInSec);


** It was a parseable test case! 
refined test name is: testDefaultHostMonitoringServiceIntervalIsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate arg0 = new MockDate();
hostMonitoringService.setLastCheckedOn(arg0);
Date lastCheckedOn = hostMonitoringService.getLastCheckedOn();
assertSame(lastCheckedOn, arg0);


** It was a parseable test case! 
refined test name is: testSetLastCheckedOn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
List listnersList = hostMonitoringService.getListnersList();
assertFalse(listnersList.isEmpty());


** It was a parseable test case! 
refined test name is: testAddNullHostStateListenerListnersListIsNotEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> arg0 = new LinkedList<Object>();
hostMonitoringService.setListnersList(arg0);
List listnersList = hostMonitoringService.getListnersList();
assertEquals(0, listnersList.size());


** It was a parseable test case! 
refined test name is: testSetListenersListEmptyList
* Compiling Tests
refined test name is: testSetEmptyList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("ISLv3");
Host arg0 = new Host();
hostList.addDefault(arg0);
LinkedList<Object> linkedList = new LinkedList<Object>();
linkedList.add((Object) null);
HostMonitoringService.monitor(true);

** It was a parseable test case! 
refined test name is: testHostAdditionReturnsTrue
* Compiling Tests
refined test name is: testAddHostToListReturnsTrue
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:22:10.101 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.146 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:22:10.200 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.201 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:22:10.264 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.265 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
[MASTER] 17:22:10.359 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.360 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
* Compiling Tests
[MASTER] 17:22:10.424 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.425 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:22:10.483 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.484 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:22:10.542 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.545 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:22:10.599 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.600 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:22:10.655 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.662 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:22:10.761 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.762 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:22:10.847 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.848 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:22:10.914 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:10.915 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:22:11.000 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:11.002 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 17:22:11.062 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:11.064 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:22:11.140 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:11.141 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 17:22:11.207 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:11.208 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
** Write a test suite: 8 called: 2 to improve: false
** Write a test suite: 14 called: 3 to improve: false
** Write a test suite: 15 called: 4 to improve: false
[MASTER] 17:22:11.414 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:11.415 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 7 called: 2 to improve: false
** Write a test suite: 12 called: 3 to improve: false
** Write a test suite: 13 called: 4 to improve: false
[MASTER] 17:22:11.683 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8191668254088152908.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 17:22:11.684 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8191668254088152908.jar
[MASTER] 17:22:12.122 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
[MASTER] 17:22:18.311 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Computation finished
