* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.client.monitoring.HostMonitoringService
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 18565
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 16:17:04.408 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 16:17:04.421 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 16:17:04.423 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 16:17:04.446 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 16:17:04.450 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 16:17:04.452 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 16:17:04.455 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 16:17:04.456 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 16:17:04.459 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 16:17:04.461 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 16:17:04.463 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 16:17:04.468 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 16:17:04.472 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 16:17:04.576 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 16:17:04.578 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.client.monitoring.HostMonitoringService
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 324
* Using seed 1710433020659
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 112 / 324
[Progress:>                             1%] [Cov:=========================>         72%][Progress:>                             1%] [Cov:=========================>         72%][Progress:>                             2%] [Cov:===========================>       78%][Progress:>                             2%] [Cov:============================>      81%][Progress:>                             2%] [Cov:============================>      82%][Progress:>                             2%] [Cov:============================>      82%][Progress:>                             2%] [Cov:============================>      82%][Progress:>                             3%] [Cov:============================>      82%][Progress:>                             3%] [Cov:============================>      82%][Progress:>                             3%] [Cov:============================>      82%][Progress:>                             3%] [Cov:============================>      82%][Progress:>                             3%] [Cov:=============================>     84%][Progress:>                             3%] [Cov:=============================>     84%][Progress:>                             3%] [Cov:=============================>     84%][Progress:=>                            4%] [Cov:=============================>     84%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            4%] [Cov:=============================>     85%][Progress:=>                            5%] [Cov:=============================>     85%][Progress:=>                            5%] [Cov:=============================>     85%][Progress:=>                            5%] [Cov:=============================>     85%][Progress:=>                            5%] [Cov:=============================>     85%][Progress:=>                            5%] [Cov:=============================>     85%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:===>                          13%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:====>                         16%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:===============================>   89%][Progress:=====>                        18%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:=====>                        19%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       20%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       21%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       22%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][MASTER] 16:17:51.746 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:======>                       23%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      24%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   89%][Progress:=======>                      25%] [Cov:===============================>   91%][Progress:=======>                      25%] [Cov:===============================>   91%][Progress:=======>                      25%] [Cov:===============================>   91%][Progress:=======>                      25%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    31%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    32%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:=========>                    33%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   34%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   35%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:==========>                   36%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  37%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  38%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:===========>                  39%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 40%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 41%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 42%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:============>                 43%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                44%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                45%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:=============>                46%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               47%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               48%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:==============>               49%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              50%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              51%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              52%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:===============>              53%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             54%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             55%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:================>             56%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            57%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            58%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:=================>            59%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           60%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           61%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           62%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:==================>           63%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          64%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          65%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:===================>          66%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         67%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         68%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:===============================>   91%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%]
* Search finished after 202s and 1628 generations, 821248 statements, best individual has fitness: 24.0
* Generated before the refinement 20 tests with total length 119
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("JuEDk")
statement is: org.quickserver.net.client.monitoring.impl.UDPMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.UDPMonitor
statement code is: UDPMonitor uDPMonitor = new UDPMonitor()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: org.quickserver.net.client.Host(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host("Error: ")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add((Object) null)
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove(arg0)
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, (-19), (List) arg3)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setLastCheckedOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setLastCheckedOn((Date) null)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: setStatus(C)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setStatus('K')
statement is: setTimeout(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setTimeout(2)
statement is: add(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.add(arg0)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, (String) null)
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, (String) null)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "^sL1/9mfD_B <M''{d")
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom(0)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("JuEDk");
UDPMonitor uDPMonitor = new UDPMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
Host host = new Host("Error: ");
linkedList.add((Object) null);
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, (-19), (List) linkedList);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setLastCheckedOn((Date) null);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
Host host = new Host();
host.setStatus('K');
host.setTimeout(2);
hostList.add(host);
HostMonitoringService.monitor(true, (String) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, "^sL1/9mfD_B <M''{d");
hostMonitoringService.getListnersList();
Random.setNextRandom(0);
HostMonitoringService.getSize();
HostMonitoringService.getSize();
HostMonitoringService.getSize();
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostList hostList = new HostList("JuEDk");
        UDPMonitor uDPMonitor = new UDPMonitor();
        LinkedList<Object> linkedList = new LinkedList<>();
        Host host = new Host("www.example.com", 80, "HTTP");
        linkedList.add(((Object) (null)));
        hostMonitoringService.remove(hostMonitoringService);
        hostMonitoringService.add(hostList, ((HostMonitor) (uDPMonitor)), -19, ((List) (linkedList)));
        hostMonitoringService.setLastCheckedOn(new Date());
        host.setStatus('K');
        host.setTimeout(2);
        hostList.add(host);
        hostMonitoringService.monitor(true, "www.example.com");
        hostMonitoringService.getIntervalInSec();
        hostMonitoringService.monitor(false, ((String) (null)));
        hostMonitoringService.monitor(true, "^sL1/9mfD_B <M''{d");
        hostMonitoringService.getListnersList();
        Random.setNextRandom(0);
        hostMonitoringService.getSize();
        hostMonitoringService.getSize();
        hostMonitoringService.getSize();
        hostMonitoringService.getListnersList();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostList hostList = new HostList("JuEDk"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UDPMonitor uDPMonitor = new UDPMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<Object> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host("www.example.com", 80, "HTTP"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(((Object) (null))) target is: linkedList method is: add(java.lang.Object)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.remove(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.remove(hostMonitoringService) target is: hostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
statement is: hostMonitoringService.add(hostList, ((HostMonitor) (uDPMonitor)), -19, ((List) (linkedList))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.add(hostList, ((HostMonitor) (uDPMonitor)), -19, ((List) (linkedList))) target is: hostMonitoringService method is: add(HostList,HostMonitor,int,List)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: hostMonitoringService.setLastCheckedOn(new Date()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setLastCheckedOn(new Date()) target is: hostMonitoringService method is: setLastCheckedOn(Date)
statement is: host.setStatus('K'), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setStatus('K') target is: host method is: setStatus(char)
statement is: host.setTimeout(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setTimeout(2) target is: host method is: setTimeout(int)
statement is: hostList.add(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.add(host) target is: hostList method is: add(Host)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.monitor(true, "www.example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.monitor(true, "www.example.com") target is: hostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
statement is: hostMonitoringService.monitor(false, ((String) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.monitor(false, ((String) (null))) target is: hostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: hostMonitoringService.monitor(true, "^sL1/9mfD_B <M''{d"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.monitor(true, "^sL1/9mfD_B <M''{d") target is: hostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 1, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
statement is: Random.setNextRandom(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(0) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
statement is: hostMonitoringService.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getSize() target is: hostMonitoringService method is: getSize()
Matched Method is: getSize()I
statement is: hostMonitoringService.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getSize() target is: hostMonitoringService method is: getSize()
Matched Method is: getSize()I
statement is: hostMonitoringService.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getSize() target is: hostMonitoringService method is: getSize()
Matched Method is: getSize()I
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 1, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "JuEDk";
HostList hostList = new HostList(string);
UDPMonitor uDPMonitor = new UDPMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);
LinkedList<Object> linkedList = null;
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, linkedList, (List) linkedList);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
boolean _boolean = true;
String string = "www.example.com";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = false;
String string = null;
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = true;
String string = "^sL1/9mfD_B <M''{d";
HostMonitoringService.monitor(_boolean, string);
((HostMonitoringService) string).getListnersList();
int _int = 0;
Random.setNextRandom(_int);
HostMonitoringService.getSize();
HostMonitoringService.getSize();
HostMonitoringService.getSize();
((HostMonitoringService) string).getListnersList();

statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor("OCMD~hXWQ")
test data is: HostMonitoringService.monitor("OCMD~hXWQ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor("OCMD~hXWQ", 123456, "production", "us-west-2a");
    }
}
statement is: HostMonitoringService.monitor("OCMD~hXWQ", 123456, "production", "us-west-2a"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("OCMD~hXWQ", 123456, "production", "us-west-2a") target is: HostMonitoringService method is: monitor(java.lang.String,int,java.lang.String,java.lang.String)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
test data is: HostMonitoringService.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        return 50;// Instead of returning a constant value, we can return a random value between 1 and 100. }}

    }
}
statement is: return 50// Instead of returning a constant value, we can return a random value between 1 and 100. }}
, class spoon.support.reflect.code.CtReturnImpl
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        HostMonitoringService hostMonitoringService = new HostMonitoringService("192.168.0.1", "80", "/api/v1/hosts");
        hostMonitoringService.remove(hostMonitoringService);
    }
}
statement is: // Improved test data
HostMonitoringService hostMonitoringService = new HostMonitoringService("192.168.0.1", "80", "/api/v1/hosts"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.remove(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.remove(hostMonitoringService) target is: hostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: HostMonitoringService hostMonitoringService = null;
HostMonitoringService.remove(hostMonitoringService);

statement is: clear()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.clear()
test data is: HostMonitoringService.clear();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.clear(new Host("host1", "192.168.1.10", 80));
        HostMonitoringService.clear(new Host("host2", "192.168.1.11", 80));
        HostMonitoringService.clear(new Host("host3", "192.168.1.12", 80));
    }
}
statement is: HostMonitoringService.clear(new Host("host1", "192.168.1.10", 80)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.clear(new Host("host1", "192.168.1.10", 80)) target is: HostMonitoringService method is: clear(Host)
statement is: HostMonitoringService.clear(new Host("host2", "192.168.1.11", 80)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.clear(new Host("host2", "192.168.1.11", 80)) target is: HostMonitoringService method is: clear(Host)
statement is: HostMonitoringService.clear(new Host("host3", "192.168.1.12", 80)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.clear(new Host("host3", "192.168.1.12", 80)) target is: HostMonitoringService method is: clear(Host)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.add(new Host("server1", "192.168.0.1"));
        hostMonitoringService.add(new Host("server2", "192.168.0.2"));
        hostMonitoringService.add(new Host("server3", "192.168.0.3"));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.add(new Host("server1", "192.168.0.1")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.add(new Host("server1", "192.168.0.1")) target is: hostMonitoringService method is: add(Host)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.add(new Host("server2", "192.168.0.2")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.add(new Host("server2", "192.168.0.2")) target is: hostMonitoringService method is: add(Host)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.add(new Host("server3", "192.168.0.3")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.add(new Host("server3", "192.168.0.3")) target is: hostMonitoringService method is: add(Host)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);

statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, (String) null)
test data is: HostMonitoringService.monitor(false, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor(true, "192.168.0.1");
    }
}
statement is: HostMonitoringService.monitor(true, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "192.168.0.1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
TestCase is: boolean _boolean = true;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner((HostStateListener) null)
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner((HostStateListener) null)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.addHostStateListner((HostStateListener) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.addHostStateListner(new HostStateListener() {
            @Override
            public void onHostStateChanged(String hostname, HostState state) {
                if (state == HostState.UP) {
                    System.out.println(("Host " + hostname) + " is now up");
                } else if (state == HostState.DOWN) {
                    System.out.println(("Host " + hostname) + " is now down");
                }
            }
        });
        hostMonitoringService.addHostStateListner(new HostStateListener() {
            @Override
            public void onHostStateChanged(String hostname, HostState state) {
                if (state == HostState.UP) {
                    System.out.println(("Host " + hostname) + " is now up");
                } else if (state == HostState.DOWN) {
                    System.out.println(("Host " + hostname) + " is now down");
                }
            }
        });
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.addHostStateListner(new HostStateListener() {
    @Override
    public void onHostStateChanged(String hostname, HostState state) {
        if (state == HostState.UP) {
            System.out.println(("Host " + hostname) + " is now up");
        } else if (state == HostState.DOWN) {
            System.out.println(("Host " + hostname) + " is now down");
        }
    }
}), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(new HostStateListener() {
    @Override
    public void onHostStateChanged(String hostname, HostState state) {
        if (state == HostState.UP) {
            System.out.println(("Host " + hostname) + " is now up");
        } else if (state == HostState.DOWN) {
            System.out.println(("Host " + hostname) + " is now down");
        }
    }
}) target is: hostMonitoringService method is: addHostStateListner(DummyClass$1)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.addHostStateListner(new HostStateListener() {
    @Override
    public void onHostStateChanged(String hostname, HostState state) {
        if (state == HostState.UP) {
            System.out.println(("Host " + hostname) + " is now up");
        } else if (state == HostState.DOWN) {
            System.out.println(("Host " + hostname) + " is now down");
        }
    }
}), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(new HostStateListener() {
    @Override
    public void onHostStateChanged(String hostname, HostState state) {
        if (state == HostState.UP) {
            System.out.println(("Host " + hostname) + " is now up");
        } else if (state == HostState.DOWN) {
            System.out.println(("Host " + hostname) + " is now down");
        }
    }
}) target is: hostMonitoringService method is: addHostStateListner(DummyClass$2)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = null;
hostMonitoringService.addHostStateListner(hostStateListener);
HostStateListener hostStateListener = null;
hostMonitoringService.addHostStateListner(hostStateListener);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getHostList();
        // Improved test data
        String[] hosts = new String[]{ "host1", "host2", "host3" };
        int[] cpuUtilization = new int[]{ 70, 80, 90 };
        int[] memoryUsage = new int[]{ 50, 60, 70 };
        for (int i = 0; i < hosts.length; i++) {
            Host host = new Host(hosts[i], "127.0.0.1", cpuUtilization[i], memoryUsage[i]);
            hostMonitoringService.addHost(host);
        }
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getHostList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostList() target is: hostMonitoringService method is: getHostList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getHostList()Lorg/quickserver/net/client/HostList;
statement is: // Improved test data
String[] hosts = new String[]{ "host1", "host2", "host3" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: int[] cpuUtilization = new int[]{ 70, 80, 90 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: int[] memoryUsage = new int[]{ 50, 60, 70 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (int i = 0; i < hosts.length; i++) {
    Host host = new Host(hosts[i], "127.0.0.1", cpuUtilization[i], memoryUsage[i]);
    hostMonitoringService.addHost(host);
}, class spoon.support.reflect.code.CtForImpl
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date lastCheckedOn = hostMonitoringService.getLastCheckedOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the getLastCheckedOn method
        // Initially, we have a non-null value for lastCheckedOn
        String lastCheckedOn = "2022-03-09 14:58:27";
        // After calling the getLastCheckedOn method, we expect it to return the same value as before
        lastCheckedOn = hostMonitoringService.getLastCheckedOn();
        assertEquals("2022-03-09 14:58:27", lastCheckedOn);
        // Additionally, we want to ensure that the returned value is within a certain range
        long now = System.currentTimeMillis();
        long oneHourAgo = now - ((1000 * 60) * 60);
        assertTrue(("The returned value '" + lastCheckedOn) + "' is more than an hour old", date.getTime() >= oneHourAgo);
    }
}
statement is: // Improved test data for the getLastCheckedOn method
// Initially, we have a non-null value for lastCheckedOn
String lastCheckedOn = "2022-03-09 14:58:27", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // After calling the getLastCheckedOn method, we expect it to return the same value as before
lastCheckedOn = hostMonitoringService.getLastCheckedOn(), class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertEquals("2022-03-09 14:58:27", lastCheckedOn), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("2022-03-09 14:58:27", lastCheckedOn) target is:  method is: assertEquals(java.lang.String,java.lang.String)
statement is: // Additionally, we want to ensure that the returned value is within a certain range
long now = System.currentTimeMillis(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.currentTimeMillis() target is: System method is: currentTimeMillis()
statement is: long oneHourAgo = now - ((1000 * 60) * 60), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtBinaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: now - ((1000 * 60) * 60)
statement is: assertTrue(("The returned value '" + lastCheckedOn) + "' is more than an hour old", date.getTime() >= oneHourAgo), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(("The returned value '" + lastCheckedOn) + "' is more than an hour old", date.getTime() >= oneHourAgo) target is:  method is: assertTrue(java.lang.String,<unknown>)
* this is vulnerable: String string = "2022-03-09 14:58:27"
TestCase is: String string = "2022-03-09 14:58:27";

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        LinkedList<String> linkedList = new LinkedList<>();
        linkedList.add("localhost");
        linkedList.add("127.0.0.1");
        hostMonitoringService.setListnersList(linkedList);
        hostMonitoringService.getListnersList();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<String> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add("localhost"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add("localhost") target is: linkedList method is: add(java.lang.String)
statement is: linkedList.add("127.0.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add("127.0.0.1") target is: linkedList method is: add(java.lang.String)
statement is: hostMonitoringService.setListnersList(linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setListnersList(linkedList) target is: hostMonitoringService method is: setListnersList(LinkedList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setListnersList(Ljava/util/List;)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.monitoring.impl.HttpMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.HttpMonitor
statement code is: HttpMonitor httpMonitor = new HttpMonitor()
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.monitoring.impl.HttpMonitor
statement code is: HttpMonitor hostMonitor = (HttpMonitor)hostMonitoringService.getHostMonitor()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HttpMonitor httpMonitor = new HttpMonitor();
hostMonitoringService.setHostMonitor(httpMonitor);
hostMonitoringService.getHostMonitor();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService("http://example.com", 80, "GET");
        HttpMonitor httpMonitor = new HttpMonitor(80, "GET", "200 OK", "text/html");
        hostMonitoringService.setHostMonitor(httpMonitor);
        hostMonitoringService.getHostMonitor();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService("http://example.com", 80, "GET"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HttpMonitor httpMonitor = new HttpMonitor(80, "GET", "200 OK", "text/html"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostMonitor(httpMonitor), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(httpMonitor) target is: hostMonitoringService method is: setHostMonitor(HttpMonitor)
statement is: hostMonitoringService.getHostMonitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostMonitor() target is: hostMonitoringService method is: getHostMonitor()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec((-3871))
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-3871));
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setIntervalInSec(86400);// 24 hours in seconds

        hostMonitoringService.getIntervalInSec();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setIntervalInSec(86400)// 24 hours in seconds
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(86400)// 24 hours in seconds
 target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getIntervalInSec()I
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 86400;
hostMonitoringService.setIntervalInSec(_int);
hostMonitoringService.getIntervalInSec();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec(290)
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(290);
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setIntervalInSec(10);
        hostMonitoringService.getIntervalInSec();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setIntervalInSec(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(10) target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getIntervalInSec()I
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 10;
hostMonitoringService.setIntervalInSec(_int);
hostMonitoringService.getIntervalInSec();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(0L)
statement is: setLastCheckedOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setLastCheckedOn(arg0)
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate lastCheckedOn = (MockDate)hostMonitoringService.getLastCheckedOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(0L);
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        MockDate mockDate = new MockDate("now");
        hostMonitoringService.setLastCheckedOn(mockDate);
        hostMonitoringService.getLastCheckedOn();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockDate mockDate = new MockDate("now"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setLastCheckedOn(mockDate), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setLastCheckedOn(mockDate) target is: hostMonitoringService method is: setLastCheckedOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setLastCheckedOn(Ljava/util/Date;)V
statement is: hostMonitoringService.getLastCheckedOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getLastCheckedOn() target is: hostMonitoringService method is: getLastCheckedOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getLastCheckedOn()Ljava/util/Date;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "now";
MockDate mockDate = new MockDate((long) string);
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: mock(interface org.quickserver.net.client.monitoring.HostStateListener) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.quickserver.net.client.monitoring.HostStateListener
statement code is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer())
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner(arg0)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListener);
        hostMonitoringService.getListnersList();
        // Improved test data
        HostMonitoringService hostMonitoringService = new HostMonitoringService("192.168.0.1", 10000);
        HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListener);
        hostMonitoringService.getListnersList();
        // Improved test data
        HostMonitoringService hostMonitoringService = new HostMonitoringService("192.168.0.1", 10000);
        HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListener);
        hostMonitoringService.getListnersList();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListener) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
statement is: // Improved test data
HostMonitoringService hostMonitoringService = new HostMonitoringService("192.168.0.1", 10000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListener) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
statement is: // Improved test data
HostMonitoringService hostMonitoringService = new HostMonitoringService("192.168.0.1", 10000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListener) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-1883))
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setNextCheckOn(arg0)
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate nextCheckOn = (MockDate)hostMonitoringService.getNextCheckOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((-1883));
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        MockDate mockDate = new MockDate("2023-03-15T13:45:30.123Z");
        hostMonitoringService.setNextCheckOn(mockDate);
        hostMonitoringService.getNextCheckOn();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockDate mockDate = new MockDate("2023-03-15T13:45:30.123Z"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setNextCheckOn(mockDate), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setNextCheckOn(mockDate) target is: hostMonitoringService method is: setNextCheckOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getNextCheckOn()Ljava/util/Date;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "2023-03-15T13:45:30.123Z";
MockDate mockDate = new MockDate((long) string);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setHostName("localhost");
        hostMonitoringService.setPort(8080);
        hostMonitoringService.setProtocol("http");
        hostMonitoringService.setPath("/health");
        hostMonitoringService.setInterval(10);
        hostMonitoringService.setTimeout(20);
        HostMonitoringService.add(hostMonitoringService);
        HostMonitoringService.remove(hostMonitoringService);
    }
}
statement is: // Improved test data
HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostName("localhost"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostName("localhost") target is: hostMonitoringService method is: setHostName(java.lang.String)
statement is: hostMonitoringService.setPort(8080), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setPort(8080) target is: hostMonitoringService method is: setPort(int)
statement is: hostMonitoringService.setProtocol("http"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setProtocol("http") target is: hostMonitoringService method is: setProtocol(java.lang.String)
statement is: hostMonitoringService.setPath("/health"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setPath("/health") target is: hostMonitoringService method is: setPath(java.lang.String)
statement is: hostMonitoringService.setInterval(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setInterval(10) target is: hostMonitoringService method is: setInterval(int)
statement is: hostMonitoringService.setTimeout(20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setTimeout(20) target is: hostMonitoringService method is: setTimeout(int)
statement is: HostMonitoringService.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostMonitoringService) target is: HostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
statement is: HostMonitoringService.remove(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.remove(hostMonitoringService) target is: HostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("JuEDk")
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.quickserver.net.client.monitoring.HostMonitor
statement code is: HostMonitor hostMonitor = hostMonitoringService.getHostMonitor()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) null, (-19), (List) arg3)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: setLastCheckedOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setLastCheckedOn((Date) null)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: setStatus(C)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setStatus('M')
statement is: setTimeout(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setTimeout(2)
statement is: add(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.add(arg0)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, (String) null)
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, "^sL1/9mfD_B <M''{d")
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: setCurrentTimeMillis(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: System.setCurrentTimeMillis(0)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "E")
test data is: HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("JuEDk");
hostMonitoringService.getHostMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostList, (HostMonitor) null, (-19), (List) linkedList);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setLastCheckedOn((Date) null);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
Host host = new Host();
host.setStatus('M');
host.setTimeout(2);
hostList.add(host);
HostMonitoringService.monitor(false, (String) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.monitor(false, "^sL1/9mfD_B <M''{d");
hostMonitoringService.getListnersList();
HostMonitoringService.getSize();
HostMonitoringService.getSize();
System.setCurrentTimeMillis(0);
HostMonitoringService.monitor(true, "E");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Carefully
        review the;
        snippet.@Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your improved;
    }
}
statement is: @Carefully
review the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: now()Ljava/time/Instant; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.time.Instant
statement code is: Instant now = MockInstant.now()
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("~)0kaJv")
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.quickserver.net.client.monitoring.HostMonitor
statement code is: HostMonitor hostMonitor = hostMonitoringService.getHostMonitor()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) null, 85, (List) null)
statement is: setLastCheckedOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setLastCheckedOn((Date) null)
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: add(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.add(arg0)
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList(arg0)
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList((List) null)
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "org.quickserver.net.client.monitoring.impl.UDPMonitor")
statement is: setCurrentTimeMillis(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: System.setCurrentTimeMillis(0L)
test data is: HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockInstant.now();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("~)0kaJv");
hostMonitoringService.getHostMonitor();
HostMonitoringService.add(hostList, (HostMonitor) null, 85, (List) null);
hostMonitoringService.setLastCheckedOn((Date) null);
hostMonitoringService.getNextCheckOn();
Host host = new Host();
hostList.add(host);
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor(false);
hostMonitoringService.getNextCheckOn();
hostMonitoringService.setHostList(hostList);
hostMonitoringService.setListnersList((List) null);
hostMonitoringService.getHostList();
hostMonitoringService.getNextCheckOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor(true, "org.quickserver.net.client.monitoring.impl.UDPMonitor");
System.setCurrentTimeMillis(0L);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor();
        HostMonitoringService hostMonitoringService = new HostMonitoringService("http://example.com", 8080);
        MockInstant.now();
        hostMonitoringService.getNextCheckOn();
        HostList hostList = new HostList("~)0kaJv");
        hostMonitoringService.getHostMonitor();
        HostMonitoringService.add(hostList, ((HostMonitor) (null)), 85, ((List) (null)));
        hostMonitoringService.setLastCheckedOn(((Date) (null)));
        hostMonitoringService.getNextCheckOn();
        Host host = new Host("example.com", 8080, "org.quickserver.net.client.monitoring.impl.UDPMonitor");
        hostList.add(host);
        HostMonitoringService.add(hostMonitoringService);
        HostMonitoringService.monitor(false);
        hostMonitoringService.getNextCheckOn();
        hostMonitoringService.setHostList(hostList);
        hostMonitoringService.setListnersList(((List) (null)));
        hostMonitoringService.getHostList();
        hostMonitoringService.getNextCheckOn();
        HostMonitoringService hostMonitoringService = new HostMonitoringService("http://example.com", 8080, "org.quickserver.net.client.monitoring.impl.UDPMonitor");
        HostMonitoringService.add(hostMonitoringService);
        HostMonitoringService.monitor(true, "org.quickserver.net.client.monitoring.impl.UDPMonitor");
        System.setCurrentTimeMillis(0L);
    }
}
statement is: HostMonitoringService.monitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor() target is: HostMonitoringService method is: monitor()
Matched Method is: monitor()V
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService("http://example.com", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockInstant.now(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockInstant.now() target is: MockInstant method is: now()
Matched Method is: now()Ljava/time/Instant;
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
statement is: HostList hostList = new HostList("~)0kaJv"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getHostMonitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostMonitor() target is: hostMonitoringService method is: getHostMonitor()
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (null)), 85, ((List) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (null)), 85, ((List) (null))) target is: HostMonitoringService method is: add(HostList,HostMonitor,int,List)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: hostMonitoringService.setLastCheckedOn(((Date) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setLastCheckedOn(((Date) (null))) target is: hostMonitoringService method is: setLastCheckedOn(Date)
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
statement is: Host host = new Host("example.com", 8080, "org.quickserver.net.client.monitoring.impl.UDPMonitor"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.add(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.add(host) target is: hostList method is: add(Host)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostMonitoringService) target is: HostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.monitor(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
statement is: hostMonitoringService.setHostList(hostList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostList(hostList) target is: hostMonitoringService method is: setHostList(HostList)
statement is: hostMonitoringService.setListnersList(((List) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setListnersList(((List) (null))) target is: hostMonitoringService method is: setListnersList(List)
statement is: hostMonitoringService.getHostList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostList() target is: hostMonitoringService method is: getHostList()
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService("http://example.com", 8080, "org.quickserver.net.client.monitoring.impl.UDPMonitor"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostMonitoringService) target is: HostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.monitor(true, "org.quickserver.net.client.monitoring.impl.UDPMonitor"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "org.quickserver.net.client.monitoring.impl.UDPMonitor") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: System.setCurrentTimeMillis(0L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.setCurrentTimeMillis(0L) target is: System method is: setCurrentTimeMillis(long)
Matched Method is: setCurrentTimeMillis(J)V
TestCase is: HostMonitoringService.monitor();
MockInstant.now();
String string = "~)0kaJv";
HostList hostList = new HostList(string);
int _int = 85;
int _int = null;
List<Object> list = null;
HostMonitoringService.add(hostList, (HostMonitor) _int, _int, (List) list);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
boolean _boolean = false;
HostMonitoringService.monitor(_boolean);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
boolean _boolean = true;
String string = "org.quickserver.net.client.monitoring.impl.UDPMonitor";
HostMonitoringService.monitor(_boolean, string);
long _long = 0L;
System.setCurrentTimeMillis(_long);

* test suite isTestSuite: 35
Test 0: 
HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("JuEDk");
UDPMonitor uDPMonitor = new UDPMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
Host host = new Host("Error: ");
linkedList.add((Object) null);
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, (-19), (List) linkedList);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setLastCheckedOn((Date) null);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
Host host = new Host();
host.setStatus('K');
host.setTimeout(2);
hostList.add(host);
HostMonitoringService.monitor(true, (String) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, "^sL1/9mfD_B <M''{d");
hostMonitoringService.getListnersList();
Random.setNextRandom(0);
HostMonitoringService.getSize();
HostMonitoringService.getSize();
HostMonitoringService.getSize();
hostMonitoringService.getListnersList();
Test 1: 
HostMonitoringService.monitor("OCMD~hXWQ");
Test 2: 
HostMonitoringService.getSize();
Test 3: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove(hostMonitoringService);
Test 4: 
HostMonitoringService.clear();
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 6: 
HostMonitoringService.monitor(false, (String) null);
Test 7: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.addHostStateListner((HostStateListener) null);
Test 8: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 9: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
Test 10: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 11: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HttpMonitor httpMonitor = new HttpMonitor();
hostMonitoringService.setHostMonitor(httpMonitor);
hostMonitoringService.getHostMonitor();
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-3871));
hostMonitoringService.getIntervalInSec();
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(290);
hostMonitoringService.getIntervalInSec();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(0L);
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((-1883));
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);
Test 18: 
HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("JuEDk");
hostMonitoringService.getHostMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostList, (HostMonitor) null, (-19), (List) linkedList);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setLastCheckedOn((Date) null);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
Host host = new Host();
host.setStatus('M');
host.setTimeout(2);
hostList.add(host);
HostMonitoringService.monitor(false, (String) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.monitor(false, "^sL1/9mfD_B <M''{d");
hostMonitoringService.getListnersList();
HostMonitoringService.getSize();
HostMonitoringService.getSize();
System.setCurrentTimeMillis(0);
HostMonitoringService.monitor(true, "E");
Test 19: 
HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockInstant.now();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("~)0kaJv");
hostMonitoringService.getHostMonitor();
HostMonitoringService.add(hostList, (HostMonitor) null, 85, (List) null);
hostMonitoringService.setLastCheckedOn((Date) null);
hostMonitoringService.getNextCheckOn();
Host host = new Host();
hostList.add(host);
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor(false);
hostMonitoringService.getNextCheckOn();
hostMonitoringService.setHostList(hostList);
hostMonitoringService.setListnersList((List) null);
hostMonitoringService.getHostList();
hostMonitoringService.getNextCheckOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor(true, "org.quickserver.net.client.monitoring.impl.UDPMonitor");
System.setCurrentTimeMillis(0L);
Test 20: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "JuEDk";
HostList hostList = new HostList("JuEDk");
UDPMonitor uDPMonitor = new UDPMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, linkedList, (List) null);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
boolean _boolean = true;
String string = "www.example.com";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = false;
String string = null;
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = true;
String string = "^sL1/9mfD_B <M''{d";
HostMonitoringService.monitor(_boolean, string);
((HostMonitoringService) string).getListnersList();
int _int = 0;
Random.setNextRandom(_int);
HostMonitoringService.getSize();
HostMonitoringService.getSize();
HostMonitoringService.getSize();
((HostMonitoringService) string).getListnersList();

Test 21: 
HostMonitoringService.remove((HostMonitoringService) null);

Test 22: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);

Test 23: 
HostMonitoringService.monitor(true, "192.168.0.1");

Test 24: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.addHostStateListner((HostStateListener) null);

Test 25: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

Test 26: 

Test 27: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

Test 28: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(86400);
hostMonitoringService.getIntervalInSec();

Test 29: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(10);
hostMonitoringService.getIntervalInSec();

Test 30: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((long) "now");
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();

Test 31: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

Test 32: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((long) "2023-03-15T13:45:30.123Z");
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

Test 33: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

Test 34: 
HostMonitoringService.monitor();
MockInstant.now();
HostList hostList = new HostList("~)0kaJv");
HostMonitoringService.add(hostList, (HostMonitor) 85, (int) (Integer) null, (List) null);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
boolean _boolean = false;
HostMonitoringService.monitor(_boolean);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
boolean _boolean = true;
String string = "org.quickserver.net.client.monitoring.impl.UDPMonitor";
HostMonitoringService.monitor(_boolean, string);
long _long = 0L;
System.setCurrentTimeMillis(_long);


* Generated after the refinement and before minimization 35 tests with total length 204
* test suite isTestSuite: 35
Test 0: 
HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("JuEDk");
UDPMonitor uDPMonitor = new UDPMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
Host host = new Host("Error: ");
linkedList.add((Object) null);
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, (-19), (List) linkedList);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setLastCheckedOn((Date) null);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
Host host = new Host();
host.setStatus('K');
host.setTimeout(2);
hostList.add(host);
HostMonitoringService.monitor(true, (String) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, "^sL1/9mfD_B <M''{d");
hostMonitoringService.getListnersList();
Random.setNextRandom(0);
HostMonitoringService.getSize();
HostMonitoringService.getSize();
HostMonitoringService.getSize();
hostMonitoringService.getListnersList();
Test 1: 
HostMonitoringService.monitor("OCMD~hXWQ");
Test 2: 
HostMonitoringService.getSize();
Test 3: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove(hostMonitoringService);
Test 4: 
HostMonitoringService.clear();
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 6: 
HostMonitoringService.monitor(false, (String) null);
Test 7: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.addHostStateListner((HostStateListener) null);
Test 8: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 9: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
Test 10: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 11: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HttpMonitor httpMonitor = new HttpMonitor();
hostMonitoringService.setHostMonitor(httpMonitor);
hostMonitoringService.getHostMonitor();
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-3871));
hostMonitoringService.getIntervalInSec();
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(290);
hostMonitoringService.getIntervalInSec();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(0L);
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((-1883));
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);
Test 18: 
HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("JuEDk");
hostMonitoringService.getHostMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostList, (HostMonitor) null, (-19), (List) linkedList);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setLastCheckedOn((Date) null);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
Host host = new Host();
host.setStatus('M');
host.setTimeout(2);
hostList.add(host);
HostMonitoringService.monitor(false, (String) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.monitor(false, "^sL1/9mfD_B <M''{d");
hostMonitoringService.getListnersList();
HostMonitoringService.getSize();
HostMonitoringService.getSize();
System.setCurrentTimeMillis(0);
HostMonitoringService.monitor(true, "E");
Test 19: 
HostMonitoringService.monitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockInstant.now();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("~)0kaJv");
hostMonitoringService.getHostMonitor();
HostMonitoringService.add(hostList, (HostMonitor) null, 85, (List) null);
hostMonitoringService.setLastCheckedOn((Date) null);
hostMonitoringService.getNextCheckOn();
Host host = new Host();
hostList.add(host);
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor(false);
hostMonitoringService.getNextCheckOn();
hostMonitoringService.setHostList(hostList);
hostMonitoringService.setListnersList((List) null);
hostMonitoringService.getHostList();
hostMonitoringService.getNextCheckOn();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor(true, "org.quickserver.net.client.monitoring.impl.UDPMonitor");
System.setCurrentTimeMillis(0L);
Test 20: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "JuEDk";
HostList hostList = new HostList("JuEDk");
UDPMonitor uDPMonitor = new UDPMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.remove(hostMonitoringService);
HostMonitoringService.add(hostList, (HostMonitor) uDPMonitor, linkedList, (List) null);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
boolean _boolean = true;
String string = "www.example.com";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = false;
String string = null;
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = true;
String string = "^sL1/9mfD_B <M''{d";
HostMonitoringService.monitor(_boolean, string);
((HostMonitoringService) string).getListnersList();
int _int = 0;
Random.setNextRandom(_int);
HostMonitoringService.getSize();
HostMonitoringService.getSize();
HostMonitoringService.getSize();
((HostMonitoringService) string).getListnersList();

Test 21: 
HostMonitoringService.remove((HostMonitoringService) null);

Test 22: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);

Test 23: 
HostMonitoringService.monitor(true, "192.168.0.1");

Test 24: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.addHostStateListner((HostStateListener) null);
hostMonitoringService.addHostStateListner((HostStateListener) null);

Test 25: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

Test 26: 

Test 27: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

Test 28: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(86400);
hostMonitoringService.getIntervalInSec();

Test 29: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(10);
hostMonitoringService.getIntervalInSec();

Test 30: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((long) "now");
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();

Test 31: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

Test 32: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((long) "2023-03-15T13:45:30.123Z");
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

Test 33: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

Test 34: 
HostMonitoringService.monitor();
MockInstant.now();
HostList hostList = new HostList("~)0kaJv");
HostMonitoringService.add(hostList, (HostMonitor) 85, (int) (Integer) null, (List) null);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
boolean _boolean = false;
HostMonitoringService.monitor(_boolean);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
boolean _boolean = true;
String string = "org.quickserver.net.client.monitoring.impl.UDPMonitor";
HostMonitoringService.monitor(_boolean, string);
long _long = 0L;
System.setCurrentTimeMillis(_long);


* Minimizing test suite
* test suite isTestSuite: 27
Test 0: 
HostMonitoringService.monitor(true, "192.168.0.1");
Test 1: 
HostMonitoringService.monitor(false);
Test 2: 
HostList hostList = new HostList("~)0kaJv");
HostMonitoringService.add(hostList, (HostMonitor) null, 85, (List) null);
Test 3: 
HostMonitoringService.monitor("OCMD~hXWQ");
Test 4: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
Test 5: 
HostMonitoringService.getSize();
Test 6: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getIntervalInSec();
Test 7: 
HostMonitoringService.remove((HostMonitoringService) null);
Test 8: 
HostMonitoringService.clear();
Test 9: 
HostMonitoringService.monitor();
Test 10: 
HostMonitoringService.add((HostMonitoringService) null);
Test 11: 
HostMonitoringService.monitor(false, (String) null);
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(10);
hostMonitoringService.getIntervalInSec();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(0L);
hostMonitoringService.setLastCheckedOn(mockDate);
hostMonitoringService.getLastCheckedOn();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
Test 18: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("~)0kaJv");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 19: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate((-1883));
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 20: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HttpMonitor httpMonitor = new HttpMonitor();
hostMonitoringService.setHostMonitor(httpMonitor);
hostMonitoringService.getHostMonitor();
Test 21: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
Test 22: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 23: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
Test 24: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-3871));
hostMonitoringService.getIntervalInSec();
Test 25: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 26: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove(hostMonitoringService);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 47%
* Total number of goals: 74
* Number of covered goals: 35
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 53%
* Total number of goals: 131
* Number of covered goals: 69
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 86%
* Total number of goals: 22
* Number of covered goals: 19
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 46%
* Total number of goals: 74
* Number of covered goals: 34
* Generated 27 tests with total length 62
* Resulting test suite's coverage: 93% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 20%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor(true, "192.168.0.1");

** It was a parseable test case! 
refined test name is: testMonitorMethodWithCorrectArguments
* Compiling Tests
refined test name is: testMonitorMethodCalledWithExpectedArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor(false);

** It was a parseable test case! 
refined test name is: testHostNotDeletedWhenMonitoringDisabled
* Compiling Tests
refined test name is: testDisabledHostMonitoringAddHostDoesNotDeleteHost
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostList arg0 = new HostList("~)0kaJv");
HostMonitoringService.add(arg0, (HostMonitor) null, 85, (List) null);
assertEquals("~)0kaJv", arg0.getName());


** It was a parseable test case! 
refined test name is: testHostListNameIsSetCorrectly
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor("OCMD~hXWQ");

** It was a parseable test case! 
refined test name is: testMonitorHostshouldReturnMonitoredValue
* Compiling Tests
refined test name is: testMonitorshouldReturnExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
List listnersList = hostMonitoringService.getListnersList();
assertNull(listnersList);


** It was a parseable test case! 
refined test name is: testGetListenersWithNoDataShouldReturnNull
* Compiling Tests
refined test name is: testGetListenersWithNoDataReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int size = HostMonitoringService.getSize();
assertEquals(12, size);


** It was a parseable test case! 
* Computation finished
