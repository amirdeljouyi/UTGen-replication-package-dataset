* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.client.monitoring.HostMonitoringService
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 18935
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 11:28:27.947 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 11:28:27.953 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 11:28:27.954 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 11:28:27.971 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 11:28:27.972 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 11:28:27.973 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 11:28:27.974 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 11:28:27.974 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 11:28:27.975 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 11:28:27.975 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 11:28:27.975 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 11:28:27.982 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 11:28:27.983 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 11:28:28.031 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 11:28:28.031 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.client.monitoring.HostMonitoringService
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 324
* Using seed 1709292505380
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 112 / 324
[Progress:>                             1%] [Cov:======================>            65%][Progress:>                             2%] [Cov:========================>          69%][Progress:>                             3%] [Cov:=========================>         73%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            5%] [Cov:==========================>        76%][Progress:=>                            5%] [Cov:==========================>        76%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:====>                         16%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      24%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      25%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:=======>                      26%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:========>                     29%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    30%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    31%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    32%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   34%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   35%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:==========>                   36%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  37%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 42%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:============>                 43%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                44%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                45%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               47%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:=============================>     85%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           60%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           61%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          65%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         68%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:====================>         69%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        72%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:=====================>        73%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:======================>       76%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][MASTER] 11:29:46.962 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      79%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     80%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     82%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:========================>     83%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    85%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   87%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   88%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  90%] [Cov:==============================>    86%][Progress:===========================>  91%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 94%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>97%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:=============================>99%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%]
* Search finished after 104s and 400 generations, 139951 statements, best individual has fitness: 50.0
* Generated before the refinement 24 tests with total length 79
statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor((String) null)
test data is: HostMonitoringService.monitor((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor("localhost");
        HostMonitoringService.monitor("example.com");
        HostMonitoringService.monitor("127.0.0.1");
        HostMonitoringService.monitor("::1");
    }
}
statement is: HostMonitoringService.monitor("localhost"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("localhost") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Ljava/lang/String;)V
statement is: HostMonitoringService.monitor("example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("example.com") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Ljava/lang/String;)V
statement is: HostMonitoringService.monitor("127.0.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("127.0.0.1") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Ljava/lang/String;)V
statement is: HostMonitoringService.monitor("::1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("::1") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Ljava/lang/String;)V
TestCase is: String string = "localhost";
HostMonitoringService.monitor(string);
String string = "example.com";
HostMonitoringService.monitor(string);
String string = "127.0.0.1";
HostMonitoringService.monitor(string);
String string = "::1";
HostMonitoringService.monitor(string);

statement is: org.quickserver.net.client.monitoring.impl.SocketMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.SocketMonitor
statement code is: SocketMonitor socketMonitor = new SocketMonitor()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add((HostList) null, (HostMonitor) arg1, 814, (List) arg3)
test data is: SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add((HostList) null, (HostMonitor) socketMonitor, 814, (List) linkedList);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SocketMonitor socketMonitor = new SocketMonitor();
        LinkedList<Object> linkedList = new LinkedList<>();// changed from <Object> to <Object>

        HostMonitoringService.add(null, socketMonitor, 814, linkedList);
    }
}
statement is: SocketMonitor socketMonitor = new SocketMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<Object> linkedList = new LinkedList<>()// changed from <Object> to <Object>
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.add(null, socketMonitor, 814, linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(null, socketMonitor, 814, linkedList) target is: HostMonitoringService method is: add(<unknown>,SocketMonitor,int,LinkedList)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
TestCase is: SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
int _int = 814;
LinkedList<Object> linkedList = null;
HostMonitoringService.add((HostList) socketMonitor, (HostMonitor) _int, linkedList, (List) linkedList);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService("google.com", 443, "udp");
        hostMonitoringService.remove(new HostMonitoringService("yahoo.com", 80, "tcp"));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService("google.com", 443, "udp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.remove(new HostMonitoringService("yahoo.com", 80, "tcp")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.remove(new HostMonitoringService("yahoo.com", 80, "tcp")) target is: hostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: HostMonitoringService hostMonitoringService = null;
HostMonitoringService.remove(hostMonitoringService);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService("192.168.0.1", "host01");
        hostMonitoringService.add(new NetworkInterface("eth0", true, 100));
        hostMonitoringService.add(new NetworkInterface("wlan0", false, 50));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService("192.168.0.1", "host01"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.add(new NetworkInterface("eth0", true, 100)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.add(new NetworkInterface("eth0", true, 100)) target is: hostMonitoringService method is: add(NetworkInterface)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.add(new NetworkInterface("wlan0", false, 50)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.add(new NetworkInterface("wlan0", false, 50)) target is: hostMonitoringService method is: add(NetworkInterface)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);

statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
test data is: HostMonitoringService.monitor(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor(false);
    }
}
statement is: HostMonitoringService.monitor(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
TestCase is: boolean _boolean = false;
HostMonitoringService.monitor(_boolean);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner((HostStateListener) null)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.addHostStateListner((HostStateListener) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
        hostMonitoringService.setListnersList(linkedList);
        hostMonitoringService.addHostStateListner("hostStateListener1");
        hostMonitoringService.startMonitoring("localhost", 8080);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setListnersList(linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setListnersList(linkedList) target is: hostMonitoringService method is: setListnersList(LinkedList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setListnersList(Ljava/util/List;)V
statement is: hostMonitoringService.addHostStateListner("hostStateListener1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner("hostStateListener1") target is: hostMonitoringService method is: addHostStateListner(java.lang.String)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
statement is: hostMonitoringService.startMonitoring("localhost", 8080), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.startMonitoring("localhost", 8080) target is: hostMonitoringService method is: startMonitoring(java.lang.String,int)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
String string = "hostStateListener1";
hostMonitoringService.addHostStateListner((HostStateListener) string);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getNextCheckOn(new Date(System.currentTimeMillis() + 1000));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getNextCheckOn(new Date(System.currentTimeMillis() + 1000)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn(new Date(System.currentTimeMillis() + 1000)) target is: hostMonitoringService method is: getNextCheckOn(Date)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for HostMonitoringService
        hostMonitoringService.getHostList(Arrays.asList("host1", "host2", "host3"));
    }
}
statement is: // Improved test data for HostMonitoringService
hostMonitoringService.getHostList(Arrays.asList("host1", "host2", "host3")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data for HostMonitoringService
hostMonitoringService.getHostList(Arrays.asList("host1", "host2", "host3")) target is: hostMonitoringService method is: getHostList()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date lastCheckedOn = hostMonitoringService.getLastCheckedOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        // Set the last checked on value to a specific date and time in the past
        hostMonitoringService.setLastCheckedOn(LocalDateTime.of(2021, 6, 21, 13, 45));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Set the last checked on value to a specific date and time in the past
hostMonitoringService.setLastCheckedOn(LocalDateTime.of(2021, 6, 21, 13, 45)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Set the last checked on value to a specific date and time in the past
hostMonitoringService.setLastCheckedOn(LocalDateTime.of(2021, 6, 21, 13, 45)) target is: hostMonitoringService method is: setLastCheckedOn()
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getListnersList();
        // Improved test data
        // Example 1: Successful retrieval of listener list
        String expectedResponse = "{\"listeners\": [{\"id\": 1, \"name\": \"Listener1\",\"type\": \"TCP\", \"port\": 8080}, {\"id\": 2, \"name\": \"Listener2\", \"type\": \"UDP\", \"port\": 53}]}";
        hostMonitoringService.getListnersList();
        // Example 2: Empty listener list
        String expectedResponse = "{\"listeners\": []}";
        hostMonitoringService.getListnersList();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
statement is: // Improved test data
// Example 1: Successful retrieval of listener list
String expectedResponse = "{\"listeners\": [{\"id\": 1, \"name\": \"Listener1\",\"type\": \"TCP\", \"port\": 8080}, {\"id\": 2, \"name\": \"Listener2\", \"type\": \"UDP\", \"port\": 53}]}", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
statement is: // Example 2: Empty listener list
String expectedResponse = "{\"listeners\": []}", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
* this is vulnerable: String string = "{\"listeners\": [{\"id\": 1, \"name\": \"Listener1\",\"type\": \"TCP\", \"port\": 8080}, {\"id\": 2, \"name\": \"Listener2\", \"type\": \"UDP\", \"port\": 53}]}"
* this is vulnerable: String string = "{\"listeners\": []}"
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
String string = "{\"listeners\": [{\"id\": 1, \"name\": \"Listener1\",\"type\": \"TCP\", \"port\": 8080}, {\"id\": 2, \"name\": \"Listener2\", \"type\": \"UDP\", \"port\": 53}]}";
hostMonitoringService.getListnersList();
String string = "{\"listeners\": []}";
hostMonitoringService.getListnersList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.quickserver.net.client.monitoring.HostMonitor
statement code is: HostMonitor hostMonitor = hostMonitoringService.getHostMonitor()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getHostMonitor(10, "USA", 500);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getHostMonitor(10, "USA", 500), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostMonitor(10, "USA", 500) target is: hostMonitoringService method is: getHostMonitor(int,java.lang.String,int)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, (String) null)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(0L)
statement is: setLastCheckedOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setLastCheckedOn(arg0)
statement is: org.evosuite.runtime.mock.java.util.MockDate(III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-2096), (-2096), (-760))
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setNextCheckOn(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true, (String) null);
MockDate mockDate = new MockDate(0L);
hostMonitoringService.setLastCheckedOn(mockDate);
MockDate mockDate = new MockDate((-2096), (-2096), (-760));
hostMonitoringService.setNextCheckOn(mockDate);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        // Improved test data:
        hostMonitoringService.monitor("https://www.example1.com", "Example1");
        MockDate mockDate = new MockDate(0L);
        hostMonitoringService.setLastCheckedOn(mockDate);
        MockDate mockDate = new MockDate(-2096, -2096, -760);
        hostMonitoringService.setNextCheckOn(mockDate);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data:
hostMonitoringService.monitor("https://www.example1.com", "Example1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
hostMonitoringService.monitor("https://www.example1.com", "Example1") target is: hostMonitoringService method is: monitor(java.lang.String,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: MockDate mockDate = new MockDate(0L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setLastCheckedOn(mockDate), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setLastCheckedOn(mockDate) target is: hostMonitoringService method is: setLastCheckedOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setLastCheckedOn(Ljava/util/Date;)V
statement is: MockDate mockDate = new MockDate(-2096, -2096, -760), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setNextCheckOn(mockDate), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setNextCheckOn(mockDate) target is: hostMonitoringService method is: setNextCheckOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "https://www.example1.com";
String string = "Example1";
HostMonitoringService.monitor((boolean) string, string);
long _long = 0L;
MockDate mockDate = new MockDate(_long);
hostMonitoringService.setLastCheckedOn(mockDate);
MockDate mockDate = new MockDate((-2096), (-2096), (-760));
hostMonitoringService.setNextCheckOn(mockDate);

statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, ".R~MGc3Pqj!dmjPq")
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom(1)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor((HostMonitor) null)
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: clear()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.clear()
statement is: mock(interface org.quickserver.net.client.monitoring.HostStateListener) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.quickserver.net.client.monitoring.HostStateListener
statement code is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer())
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner(arg0)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
test data is: HostMonitoringService.monitor(true, ".R~MGc3Pqj!dmjPq");
Random.setNextRandom(1);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
hostMonitoringService.setHostMonitor((HostMonitor) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.getSize();
HostMonitoringService.clear();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostMonitoringService.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor("available", "R~MGc3Pqj!dmjPq", "5 minutes");
        Random.setNextRandom(1);
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostMonitoringService.monitor();
        hostMonitoringService.setHostMonitor(mock(HostMonitor.class, new ViolatedAssumptionAnswer()));
        hostMonitoringService.getIntervalInSec();
        HostMonitoringService.getSize();
        HostMonitoringService.clear();
        HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListener);
        HostMonitoringService.getSize();
    }
}
statement is: HostMonitoringService.monitor("available", "R~MGc3Pqj!dmjPq", "5 minutes"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("available", "R~MGc3Pqj!dmjPq", "5 minutes") target is: HostMonitoringService method is: monitor(java.lang.String,java.lang.String,java.lang.String)
statement is: Random.setNextRandom(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(1) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.monitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor() target is: HostMonitoringService method is: monitor()
Matched Method is: monitor()V
statement is: hostMonitoringService.setHostMonitor(mock(HostMonitor.class, new ViolatedAssumptionAnswer())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(mock(HostMonitor.class, new ViolatedAssumptionAnswer())) target is: hostMonitoringService method is: setHostMonitor()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 2, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 2
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 2, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 2
Matched Method is: getIntervalInSec()I
statement is: HostMonitoringService.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.getSize() target is: HostMonitoringService method is: getSize()
Matched Method is: getSize()I
statement is: HostMonitoringService.clear(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.clear() target is: HostMonitoringService method is: clear()
Matched Method is: clear()V
statement is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListener) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 2, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 2
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
statement is: HostMonitoringService.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.getSize() target is: HostMonitoringService method is: getSize()
Matched Method is: getSize()I
TestCase is: int _int = 1;
Random.setNextRandom(_int);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
HostMonitor hostMonitor = null;
hostMonitoringService.setHostMonitor(hostMonitor);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.getSize();
HostMonitoringService.clear();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostMonitoringService.getSize();

statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, (String) null)
test data is: HostMonitoringService.monitor(false, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor(true, "server01");
    }
}
statement is: HostMonitoringService.monitor(true, "server01"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "server01") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
TestCase is: boolean _boolean = true;
String string = "server01";
HostMonitoringService.monitor(_boolean, string);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("Bug in monitor method! ")
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList(arg0)
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("Bug in monitor method! ");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostList hostList = new HostList("Bug in monitor method! ");
        hostList.addHost(new Host("host1", "192.168.0.1"));
        hostList.addHost(new Host("host2", "192.168.0.2"));
        hostMonitoringService.setHostList(hostList);
        hostMonitoringService.getHostList();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostList hostList = new HostList("Bug in monitor method! "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.addHost(new Host("host1", "192.168.0.1")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addHost(new Host("host1", "192.168.0.1")) target is: hostList method is: addHost(Host)
statement is: hostList.addHost(new Host("host2", "192.168.0.2")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addHost(new Host("host2", "192.168.0.2")) target is: hostList method is: addHost(Host)
statement is: hostMonitoringService.setHostList(hostList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostList(hostList) target is: hostMonitoringService method is: setHostList(HostList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostList(Lorg/quickserver/net/client/HostList;)V
statement is: hostMonitoringService.getHostList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostList() target is: hostMonitoringService method is: getHostList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getHostList()Lorg/quickserver/net/client/HostList;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "Bug in monitor method! ";
HostList hostList = new HostList(string);
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.monitoring.impl.SocketMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.SocketMonitor
statement code is: SocketMonitor socketMonitor = new SocketMonitor()
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.monitoring.impl.SocketMonitor
statement code is: SocketMonitor hostMonitor = (SocketMonitor)hostMonitoringService.getHostMonitor()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = new SocketMonitor();
hostMonitoringService.setHostMonitor(socketMonitor);
hostMonitoringService.getHostMonitor();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        SocketMonitor socketMonitor = new SocketMonitor("192.168.0.1", 80);
        hostMonitoringService.setHostMonitor(socketMonitor);
        hostMonitoringService.getHostMonitor();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SocketMonitor socketMonitor = new SocketMonitor("192.168.0.1", 80), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostMonitor(socketMonitor), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(socketMonitor) target is: hostMonitoringService method is: setHostMonitor(SocketMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.getHostMonitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostMonitor() target is: hostMonitoringService method is: getHostMonitor()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = null;
hostMonitoringService.setHostMonitor(socketMonitor);
hostMonitoringService.getHostMonitor();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec((-2564))
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-2564));
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setIntervalInSec(120);// 120 seconds, or 2 minutes

        hostMonitoringService.getIntervalInSec();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setIntervalInSec(120)// 120 seconds, or 2 minutes
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(120)// 120 seconds, or 2 minutes
 target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getIntervalInSec()I
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 120;
hostMonitoringService.setIntervalInSec(_int);
hostMonitoringService.getIntervalInSec();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec(1)
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(1);
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setIntervalInSec(30);// 30 seconds interval for monitoring

        hostMonitoringService.getIntervalInSec();
    }
}
statement is: // Improved test data
HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setIntervalInSec(30)// 30 seconds interval for monitoring
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(30)// 30 seconds interval for monitoring
 target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getIntervalInSec()I
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 30;
hostMonitoringService.setIntervalInSec(_int);
hostMonitoringService.getIntervalInSec();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: clear()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.clear()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("$%Ei`c?")
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList(arg0)
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate lastCheckedOn = (MockDate)hostMonitoringService.getLastCheckedOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.clear();
HostList hostList = new HostList("$%Ei`c?");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor();
hostMonitoringService.getLastCheckedOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: mock(interface org.quickserver.net.client.monitoring.HostStateListener) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.quickserver.net.client.monitoring.HostStateListener
statement code is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer())
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner(arg0)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListener);
        // Add a descriptive and representative value for the host name
        hostMonitoringService.getListnersList("my-host");
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListener) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
statement is: // Add a descriptive and representative value for the host name
hostMonitoringService.getListnersList("my-host"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add a descriptive and representative value for the host name
hostMonitoringService.getListnersList("my-host") target is: hostMonitoringService method is: getListnersList(java.lang.String)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        LinkedList<String> linkedList = new LinkedList<>();
        linkedList.add("host1");
        linkedList.add("host2");
        hostMonitoringService.setListnersList(linkedList);
        hostMonitoringService.getListnersList();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<String> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add("host1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add("host1") target is: linkedList method is: add(java.lang.String)
statement is: linkedList.add("host2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add("host2") target is: linkedList method is: add(java.lang.String)
statement is: hostMonitoringService.setListnersList(linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setListnersList(linkedList) target is: hostMonitoringService method is: setListnersList(LinkedList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setListnersList(Ljava/util/List;)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.evosuite.runtime.mock.java.util.MockDate(III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(69, 69, 69)
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setNextCheckOn(arg0)
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate nextCheckOn = (MockDate)hostMonitoringService.getNextCheckOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(69, 69, 69);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        MockDate mockDate1 = new MockDate(2023, 12, 19);
        hostMonitoringService.setNextCheckOn(mockDate1);
        hostMonitoringService.getNextCheckOn();
        MockDate mockDate2 = new MockDate(2023, 12, 20);
        hostMonitoringService.setNextCheckOn(mockDate2);
        hostMonitoringService.getNextCheckOn();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockDate mockDate1 = new MockDate(2023, 12, 19), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setNextCheckOn(mockDate1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setNextCheckOn(mockDate1) target is: hostMonitoringService method is: setNextCheckOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getNextCheckOn()Ljava/util/Date;
statement is: MockDate mockDate2 = new MockDate(2023, 12, 20), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setNextCheckOn(mockDate2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setNextCheckOn(mockDate2) target is: hostMonitoringService method is: setNextCheckOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getNextCheckOn()Ljava/util/Date;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 2023;
int _int = 12;
int _int = 19;
MockDate mockDate = new MockDate(_int, _int, _int);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
int _int = 2023;
int _int = 12;
int _int = 20;
MockDate mockDate = new MockDate(_int, _int, _int);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setName("Production Server");
        hostMonitoringService.setIpAddress("192.168.0.1");
        hostMonitoringService.setPort(80);
        HostMonitoringService.add(hostMonitoringService);
        HostMonitoringService.remove(hostMonitoringService);
    }
}
statement is: // Improved test data
HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setName("Production Server"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setName("Production Server") target is: hostMonitoringService method is: setName(java.lang.String)
statement is: hostMonitoringService.setIpAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIpAddress("192.168.0.1") target is: hostMonitoringService method is: setIpAddress(java.lang.String)
statement is: hostMonitoringService.setPort(80), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setPort(80) target is: hostMonitoringService method is: setPort(int)
statement is: HostMonitoringService.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostMonitoringService) target is: HostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
statement is: HostMonitoringService.remove(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.remove(hostMonitoringService) target is: HostMonitoringService method is: remove(HostMonitoringService)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, ".R~MGc3Pqj!dmjPq")
test data is: HostMonitoringService.monitor(false, ".R~MGc3Pqj!dmjPq");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor(true, "example.com");
    }
}
statement is: HostMonitoringService.monitor(true, "example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "example.com") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
TestCase is: boolean _boolean = true;
String string = "example.com";
HostMonitoringService.monitor(_boolean, string);

* test suite isTestSuite: 46
Test 0: 
HostMonitoringService.monitor((String) null);
Test 1: 
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add((HostList) null, (HostMonitor) socketMonitor, 814, (List) linkedList);
Test 2: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove(hostMonitoringService);
Test 3: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 4: 
HostMonitoringService.monitor(true);
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.addHostStateListner((HostStateListener) null);
Test 6: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
Test 7: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 8: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
Test 9: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
Test 10: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
Test 11: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true, (String) null);
MockDate mockDate = new MockDate(0L);
hostMonitoringService.setLastCheckedOn(mockDate);
MockDate mockDate = new MockDate((-2096), (-2096), (-760));
hostMonitoringService.setNextCheckOn(mockDate);
Test 12: 
HostMonitoringService.monitor(true, ".R~MGc3Pqj!dmjPq");
Random.setNextRandom(1);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
hostMonitoringService.setHostMonitor((HostMonitor) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.getSize();
HostMonitoringService.clear();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostMonitoringService.getSize();
Test 13: 
HostMonitoringService.monitor(false, (String) null);
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("Bug in monitor method! ");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = new SocketMonitor();
hostMonitoringService.setHostMonitor(socketMonitor);
hostMonitoringService.getHostMonitor();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-2564));
hostMonitoringService.getIntervalInSec();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(1);
hostMonitoringService.getIntervalInSec();
Test 18: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.clear();
HostList hostList = new HostList("$%Ei`c?");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor();
hostMonitoringService.getLastCheckedOn();
Test 19: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 20: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 21: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(69, 69, 69);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 22: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);
Test 23: 
HostMonitoringService.monitor(false, ".R~MGc3Pqj!dmjPq");
Test 24: 
HostMonitoringService.monitor("localhost");
HostMonitoringService.monitor("example.com");
HostMonitoringService.monitor("127.0.0.1");
HostMonitoringService.monitor("::1");

Test 25: 
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add((HostList) socketMonitor, (HostMonitor) 814, linkedList, (List) null);

Test 26: 
HostMonitoringService.remove((HostMonitoringService) null);

Test 27: 
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);

Test 28: 
HostMonitoringService.monitor(false);

Test 29: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.addHostStateListner((HostStateListener) "hostStateListener1");

Test 30: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 31: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 32: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
hostMonitoringService.getListnersList();
hostMonitoringService.getListnersList();

Test 33: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 34: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor((boolean) "https://www.example1.com", "Example1");
long _long = 0L;
MockDate mockDate = new MockDate(_long);
hostMonitoringService.setLastCheckedOn(mockDate);
MockDate mockDate = new MockDate((-2096), (-2096), (-760));
hostMonitoringService.setNextCheckOn(mockDate);

Test 35: 
Random.setNextRandom(1);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
hostMonitoringService.setHostMonitor((HostMonitor) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.getSize();
HostMonitoringService.clear();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostMonitoringService.getSize();

Test 36: 
HostMonitoringService.monitor(true, "server01");

Test 37: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("Bug in monitor method! ");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();

Test 38: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setHostMonitor((HostMonitor) null);
hostMonitoringService.getHostMonitor();

Test 39: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(120);
hostMonitoringService.getIntervalInSec();

Test 40: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(30);
hostMonitoringService.getIntervalInSec();

Test 41: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);

Test 42: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

Test 43: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(2023, 12, 19);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
MockDate mockDate = new MockDate(2023, 12, 20);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

Test 44: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

Test 45: 
HostMonitoringService.monitor(true, "example.com");


* Generated after the refinement and before minimization 46 tests with total length 150
* test suite isTestSuite: 46
Test 0: 
HostMonitoringService.monitor((String) null);
Test 1: 
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add((HostList) null, (HostMonitor) socketMonitor, 814, (List) linkedList);
Test 2: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove(hostMonitoringService);
Test 3: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 4: 
HostMonitoringService.monitor(true);
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.addHostStateListner((HostStateListener) null);
Test 6: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
Test 7: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 8: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
Test 9: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
Test 10: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
Test 11: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true, (String) null);
MockDate mockDate = new MockDate(0L);
hostMonitoringService.setLastCheckedOn(mockDate);
MockDate mockDate = new MockDate((-2096), (-2096), (-760));
hostMonitoringService.setNextCheckOn(mockDate);
Test 12: 
HostMonitoringService.monitor(true, ".R~MGc3Pqj!dmjPq");
Random.setNextRandom(1);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
hostMonitoringService.setHostMonitor((HostMonitor) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.getSize();
HostMonitoringService.clear();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostMonitoringService.getSize();
Test 13: 
HostMonitoringService.monitor(false, (String) null);
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("Bug in monitor method! ");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = new SocketMonitor();
hostMonitoringService.setHostMonitor(socketMonitor);
hostMonitoringService.getHostMonitor();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-2564));
hostMonitoringService.getIntervalInSec();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(1);
hostMonitoringService.getIntervalInSec();
Test 18: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.clear();
HostList hostList = new HostList("$%Ei`c?");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor();
hostMonitoringService.getLastCheckedOn();
Test 19: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 20: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 21: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(69, 69, 69);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 22: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);
Test 23: 
HostMonitoringService.monitor(false, ".R~MGc3Pqj!dmjPq");
Test 24: 
HostMonitoringService.monitor("localhost");
HostMonitoringService.monitor("example.com");
HostMonitoringService.monitor("127.0.0.1");
HostMonitoringService.monitor("::1");

Test 25: 
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add((HostList) socketMonitor, (HostMonitor) 814, linkedList, (List) null);

Test 26: 
HostMonitoringService.remove((HostMonitoringService) null);

Test 27: 
HostMonitoringService.add((HostMonitoringService) null);
HostMonitoringService.add((HostMonitoringService) null);

Test 28: 
HostMonitoringService.monitor(false);

Test 29: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.addHostStateListner((HostStateListener) "hostStateListener1");

Test 30: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 31: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 32: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
hostMonitoringService.getListnersList();
hostMonitoringService.getListnersList();

Test 33: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 34: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor((boolean) "https://www.example1.com", "Example1");
long _long = 0L;
MockDate mockDate = new MockDate(_long);
hostMonitoringService.setLastCheckedOn(mockDate);
MockDate mockDate = new MockDate((-2096), (-2096), (-760));
hostMonitoringService.setNextCheckOn(mockDate);

Test 35: 
Random.setNextRandom(1);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
hostMonitoringService.setHostMonitor((HostMonitor) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.getSize();
HostMonitoringService.clear();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostMonitoringService.getSize();

Test 36: 
HostMonitoringService.monitor(true, "server01");

Test 37: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("Bug in monitor method! ");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();

Test 38: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setHostMonitor((HostMonitor) null);
hostMonitoringService.getHostMonitor();

Test 39: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(120);
hostMonitoringService.getIntervalInSec();

Test 40: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(30);
hostMonitoringService.getIntervalInSec();

Test 41: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);

Test 42: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

Test 43: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(2023, 12, 19);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
MockDate mockDate = new MockDate(2023, 12, 20);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

Test 44: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

Test 45: 
HostMonitoringService.monitor(true, "example.com");


* Minimizing test suite
* test suite isTestSuite: 23
Test 0: 
HostMonitoringService.monitor(false);
Test 1: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
Test 2: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("Bug in monitor method! ");
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 3: 
HostMonitoringService.monitor("localhost");
Test 4: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getListnersList();
Test 5: 
SocketMonitor socketMonitor = new SocketMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add((HostList) null, (HostMonitor) socketMonitor, 814, (List) linkedList);
Test 6: 
HostMonitoringService.remove((HostMonitoringService) null);
Test 7: 
HostMonitoringService.add((HostMonitoringService) null);
Test 8: 
HostMonitoringService.monitor((String) null);
Test 9: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true, (String) null);
MockDate mockDate = new MockDate(0L);
hostMonitoringService.setLastCheckedOn(mockDate);
MockDate mockDate = new MockDate((-2096), (-2096), (-760));
hostMonitoringService.setNextCheckOn(mockDate);
Test 10: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.addHostStateListner((HostStateListener) null);
Test 11: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor socketMonitor = new SocketMonitor();
hostMonitoringService.setHostMonitor(socketMonitor);
hostMonitoringService.getHostMonitor();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-2564));
hostMonitoringService.getIntervalInSec();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(1);
hostMonitoringService.getIntervalInSec();
Test 18: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.clear();
HostList hostList = new HostList("$%Ei`c?");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.monitor();
hostMonitoringService.getLastCheckedOn();
Test 19: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 20: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(69, 69, 69);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 21: 
Random.setNextRandom(1);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
hostMonitoringService.setHostMonitor((HostMonitor) null);
hostMonitoringService.getIntervalInSec();
HostMonitoringService.getSize();
HostMonitoringService.clear();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
HostMonitoringService.getSize();
Test 22: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 46%
* Total number of goals: 74
* Number of covered goals: 34
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 52%
* Total number of goals: 131
* Number of covered goals: 68
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 86%
* Total number of goals: 22
* Number of covered goals: 19
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 43%
* Total number of goals: 74
* Number of covered goals: 32
* Generated 23 tests with total length 74
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 77%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor(false);

** It was a parseable test case! 
refined test name is: testHostMonitoringServiceDisable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitor hostMonitor = hostMonitoringService.getHostMonitor();
assertNull(hostMonitor);


** It was a parseable test case! 
refined test name is: testGetHostMonitorNoHostsInSystemReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList arg0 = new HostList("Bug in monitor method! ");
hostMonitoringService.setHostList(arg0);
HostList hostList = hostMonitoringService.getHostList();
assertEquals("Bug in monitor method! ", hostList.getName());


** It was a parseable test case! 
refined test name is: testSetHostListWithValidHostListObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor("localhost");

** It was a parseable test case! 
refined test name is: testHostMonitoringServicevalidHostName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
List listnersList = hostMonitoringService.getListnersList();
assertNull(listnersList);


** It was a parseable test case! 
refined test name is: testGetListnersListReturnsNullWhenNoListenersExist
* Compiling Tests
refined test name is: testGetListenersListreturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SocketMonitor arg1 = new SocketMonitor();
LinkedList<Object> arg3 = new LinkedList<Object>();
HostMonitoringService.add((HostList) null, (HostMonitor) arg1, 814, (List) arg3);
assertFalse(arg3.contains(814));


** It was a parseable test case! 
refined test name is: testAddNullHostNameReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean remove = HostMonitoringService.remove((HostMonitoringService) null);
assertFalse(remove);


** It was a parseable test case! 
refined test name is: testRemoveNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.add((HostMonitoringService) null);

** It was a parseable test case! 
refined test name is: testAddWithNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor((String) null);

** It was a parseable test case! 
refined test name is: testHostMonitoringNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> arg0 = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(arg0);
hostMonitoringService.addHostStateListner((HostStateListener) null);
assertEquals(15, hostMonitoringService.getSize());


** It was a parseable test case! 
refined test name is: testAddNullHostStateListener
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener arg0 = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(arg0).toString();
hostMonitoringService.addHostStateListner(arg0);
List listnersList = hostMonitoringService.getListnersList();
assertFalse(listnersList.isEmpty());


** It was a parseable test case! 
refined test name is: testAddHostStateListenerWithNullToString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
Date nextCheckOn = hostMonitoringService.getNextCheckOn();
assertNull(nextCheckOn);


** It was a parseable test case! 
refined test name is: testGetNextCheckOnReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = hostMonitoringService.getHostList();
assertNull(hostList);


** It was a parseable test case! 
refined test name is: testGetHostListWithEmptyHostsListReturnsNull
* Compiling Tests
refined test name is: testGetHostListReturnsNullWhenNoHostsProvided
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
Date lastCheckedOn = hostMonitoringService.getLastCheckedOn();
assertNull(lastCheckedOn);


** It was a parseable test case! 
refined test name is: testGetLastCheckedOnReturnsNullWhenNotSet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
SocketMonitor arg0 = new SocketMonitor();
hostMonitoringService.setHostMonitor(arg0);
SocketMonitor hostMonitor = (SocketMonitor)hostMonitoringService.getHostMonitor();
assertEquals(0, hostMonitor.getCloseDelayMiliSec());


** It was a parseable test case! 
refined test name is: testGetSocketMonitorCloseDelay
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-2564));
int intervalInSec = hostMonitoringService.getIntervalInSec();
assertEquals((-2564), intervalInSec);


** It was a parseable test case! 
refined test name is: testSetNegativeIntervalInSec
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(1);
int intervalInSec = hostMonitoringService.getIntervalInSec();
assertEquals(1, intervalInSec);


** It was a parseable test case! 
refined test name is: testGetIntervalInSecShouldReturnOneSecond
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> arg0 = new LinkedList<Object>();
hostMonitoringService.setListnersList(arg0);
List listnersList = hostMonitoringService.getListnersList();
assertTrue(listnersList.isEmpty());


** It was a parseable test case! 
refined test name is: testSetGetListenersList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate arg0 = new MockDate(69, 69, 69);
hostMonitoringService.setNextCheckOn(arg0);
Date nextCheckOn = hostMonitoringService.getNextCheckOn();
assertEquals("Sun Dec 08 00:00:00 GMT 1974", nextCheckOn.toString());


** It was a parseable test case! 
refined test name is: testSetNextCheckOn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService arg0 = new HostMonitoringService();
HostMonitoringService.add(arg0);
boolean remove = HostMonitoringService.remove(arg0);
assertTrue(remove);


** It was a parseable test case! 
refined test name is: testHostMonitoringServiceAddAndRemove
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:10.026 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:35:10.042 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
* Compiling Tests
[MASTER] 11:35:10.199 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:35:10.211 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
* Compiling Tests
[MASTER] 11:35:10.362 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:10.377 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
[MASTER] 11:35:10.489 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:10.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:10.601 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:10.603 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
[MASTER] 11:35:10.703 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:10.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:10.820 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:10.822 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:10.904 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:10.905 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:11.201 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:11.202 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:11.320 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:11.322 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:11.417 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:11.419 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:11.557 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:11.558 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:35:11.656 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:11.657 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:11.792 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:11.794 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:11.922 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:11.924 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:12.003 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:12.004 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:12.107 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:12.108 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:35:12.201 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:12.202 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
* Compiling Tests
[MASTER] 11:35:12.317 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:12.324 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:35:12.433 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:12.443 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 4 called: 0 to improve: false
** Write a test suite: 12 called: 1 to improve: false
[MASTER] 11:35:12.612 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:35:12.613 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
* Compiling Tests
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 15 called: 1 to improve: false
[MASTER] 11:35:12.801 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar4948484430201957412.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:35:12.802 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4948484430201957412.jar
* Writing tests to file
* Writing JUnit test case 'HostMonitoringService_ESTest' to evosuite-tests
** Write a test suite: 7 called: 0 to improve: false
** Write a test suite: 15 called: 1 to improve: false
* Done!

* Computation finished
