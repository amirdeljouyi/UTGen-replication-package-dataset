* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.client.monitoring.HostMonitoringService
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 17584
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 12:09:59.249 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 12:09:59.260 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 12:09:59.262 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 12:09:59.288 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 12:09:59.292 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 12:09:59.293 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 12:09:59.296 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 12:09:59.297 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 12:09:59.300 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 12:09:59.302 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 12:09:59.303 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 12:09:59.309 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 12:09:59.313 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 12:09:59.365 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 12:09:59.367 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.client.monitoring.HostMonitoringService
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 324
* Using seed 1710418195915
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 112 / 324
[Progress:>                             0%] [Cov:===================>               56%][Progress:>                             1%] [Cov:======================>            63%][Progress:>                             1%] [Cov:=======================>           67%][Progress:>                             1%] [Cov:=======================>           67%][Progress:>                             1%] [Cov:=======================>           67%][Progress:>                             1%] [Cov:=======================>           67%][Progress:>                             1%] [Cov:=======================>           67%][Progress:>                             2%] [Cov:=======================>           67%][Progress:>                             2%] [Cov:==========================>        77%][Progress:>                             2%] [Cov:=============================>     83%][Progress:>                             2%] [Cov:=============================>     84%][Progress:>                             2%] [Cov:=============================>     84%][Progress:>                             3%] [Cov:==============================>    86%][Progress:>                             3%] [Cov:==============================>    86%][Progress:>                             3%] [Cov:==============================>    86%][Progress:>                             3%] [Cov:==============================>    86%][Progress:>                             3%] [Cov:==============================>    86%][Progress:>                             3%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            5%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:===============================>   89%][Progress:=>                            6%] [Cov:===============================>   89%][MASTER] 12:10:12.897 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:=>                            6%] [Cov:===============================>   89%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:=>                            6%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           7%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:===============================>   91%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           8%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:==>                           9%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          10%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          11%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          12%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:===>                          13%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         14%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         15%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:====>                         16%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        17%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        18%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:=====>                        19%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       20%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       21%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       22%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:======>                       23%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      24%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      25%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:=======>                      26%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     27%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     28%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:========>                     29%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][MASTER] 12:11:00.086 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    32%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:=========>                    33%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   34%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   35%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:==========>                   36%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  37%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  38%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:===========>                  39%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 40%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 41%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  92%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 42%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:============>                 43%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                44%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                45%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:=============>                46%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               47%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               48%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:==============>               49%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              50%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              51%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              52%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:===============>              53%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             54%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             55%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:================>             56%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            57%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            58%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:=================>            59%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           60%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           61%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           62%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:==================>           63%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          64%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          65%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:===================>          66%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         67%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         68%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:====================>         69%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        70%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        71%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        72%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:=====================>        73%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       74%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       75%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:======================>       76%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      77%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      78%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:=======================>      79%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     80%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     81%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     82%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:========================>     83%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    84%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    85%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:=========================>    86%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   87%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   88%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:==========================>   89%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  90%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  91%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  92%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:===========================>  93%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 94%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 95%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:============================> 96%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>97%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>98%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:=============================>99%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%][Progress:==============================100%] [Cov:================================>  93%]
* Search finished after 201s and 1392 generations, 803928 statements, best individual has fitness: 22.0
* Generated before the refinement 22 tests with total length 213
statement is: monitor(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor("78j%~")
test data is: HostMonitoringService.monitor("78j%~");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.monitor("server-1");
    }
}
statement is: HostMonitoringService.monitor("server-1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("server-1") target is: HostMonitoringService method is: monitor(java.lang.String)
Matched Method is: monitor(Ljava/lang/String;)V
TestCase is: String string = "server-1";
HostMonitoringService.monitor(string);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec((-1919))
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-1919));
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setIntervalInSec(300);
        assertEquals(hostMonitoringService.getIntervalInSec(), 300);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setIntervalInSec(300), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(300) target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: assertEquals(hostMonitoringService.getIntervalInSec(), 300), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(hostMonitoringService.getIntervalInSec(), 300) target is:  method is: assertEquals(<unknown>,int)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 300;
hostMonitoringService.setIntervalInSec(_int);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for HostMonitoringService class
        // Create a dummy host object with some basic information
        Host host = new Host();
        host.setName("TestHost");
        host.setIpAddress("192.168.1.100");
        host.setMacAddress("00:11:22:33:44:55");
        // Create a dummy host monitoring object with some basic information
        HostMonitoring hostMonitoring = new HostMonitoring();
        hostMonitoring.setHost(host);
        hostMonitoring.setCpuUsage(80.0);
        hostMonitoring.setMemoryUsage(70.0);
        hostMonitoring.setDiskUsage(60.0);
        hostMonitoring.setNetworkUsage(50.0);
        // Remove the host monitoring object from the service
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.remove(hostMonitoring);
    }
}
statement is: // Improved test data for HostMonitoringService class
// Create a dummy host object with some basic information
Host host = new Host(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: host.setName("TestHost"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setName("TestHost") target is: host method is: setName(java.lang.String)
statement is: host.setIpAddress("192.168.1.100"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setIpAddress("192.168.1.100") target is: host method is: setIpAddress(java.lang.String)
statement is: host.setMacAddress("00:11:22:33:44:55"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setMacAddress("00:11:22:33:44:55") target is: host method is: setMacAddress(java.lang.String)
statement is: // Create a dummy host monitoring object with some basic information
HostMonitoring hostMonitoring = new HostMonitoring(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoring.setHost(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoring.setHost(host) target is: hostMonitoring method is: setHost(Host)
statement is: hostMonitoring.setCpuUsage(80.0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoring.setCpuUsage(80.0) target is: hostMonitoring method is: setCpuUsage(double)
statement is: hostMonitoring.setMemoryUsage(70.0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoring.setMemoryUsage(70.0) target is: hostMonitoring method is: setMemoryUsage(double)
statement is: hostMonitoring.setDiskUsage(60.0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoring.setDiskUsage(60.0) target is: hostMonitoring method is: setDiskUsage(double)
statement is: hostMonitoring.setNetworkUsage(50.0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoring.setNetworkUsage(50.0) target is: hostMonitoring method is: setNetworkUsage(double)
statement is: // Remove the host monitoring object from the service
HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.remove(hostMonitoring), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.remove(hostMonitoring) target is: hostMonitoringService method is: remove(HostMonitoring)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.remove(hostMonitoringService);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setHostName("example.com");
        hostMonitoringService.setPort(80);
        hostMonitoringService.setProtocol("http");
        hostMonitoringService.add(hostMonitoringService);
        hostMonitoringService.add(hostMonitoringService);
        HostMonitoringService anotherHostMonitoringService = new HostMonitoringService();
        anotherHostMonitoringService.setHostName("example2.com");
        anotherHostMonitoringService.setPort(8080);
        anotherHostMonitoringService.setProtocol("https");
        anotherHostMonitoringService.add(anotherHostMonitoringService);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostName("example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostName("example.com") target is: hostMonitoringService method is: setHostName(java.lang.String)
statement is: hostMonitoringService.setPort(80), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setPort(80) target is: hostMonitoringService method is: setPort(int)
statement is: hostMonitoringService.setProtocol("http"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setProtocol("http") target is: hostMonitoringService method is: setProtocol(java.lang.String)
statement is: hostMonitoringService.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.add(hostMonitoringService) target is: hostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
statement is: hostMonitoringService.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.add(hostMonitoringService) target is: hostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
statement is: HostMonitoringService anotherHostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: anotherHostMonitoringService.setHostName("example2.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: anotherHostMonitoringService.setHostName("example2.com") target is: anotherHostMonitoringService method is: setHostName(java.lang.String)
statement is: anotherHostMonitoringService.setPort(8080), class spoon.support.reflect.code.CtInvocationImpl
invocation is: anotherHostMonitoringService.setPort(8080) target is: anotherHostMonitoringService method is: setPort(int)
statement is: anotherHostMonitoringService.setProtocol("https"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: anotherHostMonitoringService.setProtocol("https") target is: anotherHostMonitoringService method is: setProtocol(java.lang.String)
statement is: anotherHostMonitoringService.add(anotherHostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: anotherHostMonitoringService.add(anotherHostMonitoringService) target is: anotherHostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date lastCheckedOn = hostMonitoringService.getLastCheckedOn()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("aufwI>:Ow,@rsA3")
statement is: org.quickserver.net.client.Host()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host()
statement is: add(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.add(arg0)
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList(arg0)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3")
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec((-1919))
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2")
statement is: org.quickserver.net.client.monitoring.impl.PingMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor pingMonitor = new PingMonitor()
statement is: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host((InetAddress) null)
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setNextCheckOn((Date) null)
statement is: monitor(Lorg/quickserver/net/client/Host;)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char monitor = pingMonitor.monitor(arg0)
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setNextCheckOn((Date) null)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = host.toString()
statement is: mock(interface org.quickserver.net.client.monitoring.HostStateListener) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.quickserver.net.client.monitoring.HostStateListener
statement code is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer())
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner(arg0)
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor hostMonitor = (PingMonitor)hostMonitoringService.getHostMonitor()
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor hostMonitor = (PingMonitor)hostMonitoringService.getHostMonitor()
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: setLastCheckedOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setLastCheckedOn((Date) null)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
statement is: setLastCheckedOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setLastCheckedOn((Date) null)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host();
hostList.add(host);
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
host.setNextCheckOn((Date) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
host.setNextCheckOn((Date) null);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
host.toString();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getHostMonitor();
hostMonitoringService.getHostMonitor();
hostMonitoringService.getListnersList();
hostMonitoringService.setLastCheckedOn((Date) null);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
hostMonitoringService.getIntervalInSec();
hostMonitoringService.setLastCheckedOn((Date) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getLastCheckedOn();
        HostList hostList = new HostList("192.168.0.1");
        Host host = new Host(InetAddress.getByName("www.example.com"));
        hostList.add(host);
        hostMonitoringService.setHostList(hostList);
        HostMonitoringService.monitor(false, "192.168.0.1");
        HostMonitoringService.add(hostMonitoringService);
        hostMonitoringService.setIntervalInSec(300);
        HostMonitoringService.monitor(true, "192.168.0.1");
        PingMonitor pingMonitor = new PingMonitor();
        Host host = new Host(((InetAddress) (null)));
        host.setNextCheckOn(((Date) (null)));
        pingMonitor.monitor(host);
        hostMonitoringService.setHostMonitor(pingMonitor);
        host.setNextCheckOn(((Date) (null)));
        LinkedList<Object> linkedList = new LinkedList<>();
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        host.toString();
        HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListener);
        hostMonitoringService.getHostMonitor();
        hostMonitoringService.getHostMonitor();
        hostMonitoringService.getListnersList();
        hostMonitoringService.setLastCheckedOn(((Date) (null)));
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostMonitoringService.monitor();
        hostMonitoringService.getIntervalInSec();
        hostMonitoringService.setLastCheckedOn(((Date) (null)));
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getLastCheckedOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getLastCheckedOn() target is: hostMonitoringService method is: getLastCheckedOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getLastCheckedOn()Ljava/util/Date;
statement is: HostList hostList = new HostList("192.168.0.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host(InetAddress.getByName("www.example.com")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.add(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.add(host) target is: hostList method is: add(Host)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
statement is: hostMonitoringService.setHostList(hostList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostList(hostList) target is: hostMonitoringService method is: setHostList(HostList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostList(Lorg/quickserver/net/client/HostList;)V
statement is: HostMonitoringService.monitor(false, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "192.168.0.1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: HostMonitoringService.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostMonitoringService) target is: HostMonitoringService method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
statement is: hostMonitoringService.setIntervalInSec(300), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(300) target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: HostMonitoringService.monitor(true, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "192.168.0.1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: PingMonitor pingMonitor = new PingMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host(((InetAddress) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: host.setNextCheckOn(((Date) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setNextCheckOn(((Date) (null))) target is: host method is: setNextCheckOn(Date)
source statement: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V callee: VariableReference: Statement 11, type org.quickserver.net.client.Hostindex is: 17
source statement: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V callee: VariableReference: Statement 11, type org.quickserver.net.client.Hostindex is: 17
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: pingMonitor.monitor(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: pingMonitor.monitor(host) target is: pingMonitor method is: monitor(Host)
source statement: org.quickserver.net.client.monitoring.impl.PingMonitor()V callee: VariableReference: Statement 10, type org.quickserver.net.client.monitoring.impl.PingMonitorindex is: 16
Matched Method is: monitor(Lorg/quickserver/net/client/Host;)C
statement is: hostMonitoringService.setHostMonitor(pingMonitor), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(pingMonitor) target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: host.setNextCheckOn(((Date) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setNextCheckOn(((Date) (null))) target is: host method is: setNextCheckOn(Date)
source statement: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V callee: VariableReference: Statement 11, type org.quickserver.net.client.Hostindex is: 17
source statement: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V callee: VariableReference: Statement 11, type org.quickserver.net.client.Hostindex is: 17
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: LinkedList<Object> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: host.toString(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.toString() target is: host method is: toString()
source statement: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V callee: VariableReference: Statement 11, type org.quickserver.net.client.Hostindex is: 17
Matched Method is: toString()Ljava/lang/String;
statement is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListener) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 25
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
statement is: hostMonitoringService.getHostMonitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostMonitor() target is: hostMonitoringService method is: getHostMonitor()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 25
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 25
Matched Method is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor;
statement is: hostMonitoringService.getHostMonitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostMonitor() target is: hostMonitoringService method is: getHostMonitor()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 25
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 25
Matched Method is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor;
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
statement is: hostMonitoringService.setLastCheckedOn(((Date) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setLastCheckedOn(((Date) (null))) target is: hostMonitoringService method is: setLastCheckedOn(Date)
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.monitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor() target is: HostMonitoringService method is: monitor()
Matched Method is: monitor()V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
statement is: hostMonitoringService.setLastCheckedOn(((Date) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setLastCheckedOn(((Date) (null))) target is: hostMonitoringService method is: setLastCheckedOn(Date)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
String string = "192.168.0.1";
HostList hostList = new HostList(string);
Host host = new Host((InetAddress) null);
HostMonitoringService.add((HostMonitoringService) host);
hostMonitoringService.setHostList(hostList);
boolean _boolean = false;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
HostMonitoringService.add(hostMonitoringService);
int _int = 300;
hostMonitoringService.setIntervalInSec(_int);
boolean _boolean = true;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
Date date = null;
((Host) _int).setNextCheckOn(date);
((PingMonitor) _void).monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
Date date = null;
((Host) _int).setNextCheckOn(date);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
((Host) _int).toString();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getHostMonitor();
hostMonitoringService.getHostMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: mock(interface org.quickserver.net.client.monitoring.HostStateListener) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.quickserver.net.client.monitoring.HostStateListener
statement code is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer())
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        LinkedList<Object> linkedList = new LinkedList<>();
        linkedList.add("192.168.0.1");
        hostMonitoringService.setListnersList(linkedList);
        HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListener);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<Object> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add("192.168.0.1") target is: linkedList method is: add(java.lang.String)
statement is: hostMonitoringService.setListnersList(linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setListnersList(linkedList) target is: hostMonitoringService method is: setListnersList(LinkedList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setListnersList(Ljava/util/List;)V
statement is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListener) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("aufwI>:Ow,@rsA3")
statement is: org.quickserver.net.client.Host(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host("")
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList(arg0)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3")
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec((-1919))
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2")
statement is: org.quickserver.net.client.monitoring.impl.PingMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor pingMonitor = new PingMonitor()
statement is: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host((InetAddress) null)
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: setStatus(C)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setStatus('M')
statement is: clear()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.clear()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.time.temporal.Temporal>
statement code is: LinkedList<Temporal> linkedList = new LinkedList<Temporal>()
statement is: iterator()Ljava/util/Iterator; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Iterator<java.time.temporal.Temporal>
statement code is: Iterator<Temporal> iterator = linkedList.iterator()
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, (-1919), (List) arg3)
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date lastCheckedOn = hostMonitoringService.getLastCheckedOn()
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host("");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
HostMonitoringService.monitor();
host.setStatus('M');
HostMonitoringService.clear();
LinkedList<Temporal> linkedList = new LinkedList<Temporal>();
linkedList.iterator();
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, (-1919), (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();
HostMonitoringService.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getNextCheckOn();// Returns a Date object representing the next time the host monitoring service will check on its hosts

        HostList hostList = new HostList("192.168.1.1");
        hostMonitoringService.setHostList(hostList);// Sets the list of hosts that the host monitoring service will check on

        Host host = new Host("192.168.1.1");
        hostMonitoringService.add(host);// Adds a new host to the host list

        hostMonitoringService.setIntervalInSec(300);// Sets the interval in seconds for the host monitoring service to check on its hosts

        PingMonitor pingMonitor = new PingMonitor();
        HostMonitoringService.monitor(false, "192.168.1.1");// Starts the host monitoring service to monitor a single host

        HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)));// Adds a new HostMonitor object to the host monitoring service's list of monitors

        hostMonitoringService.setHostMonitor(pingMonitor);// Sets the current HostMonitor object for the host monitoring service

        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getLastCheckedOn();// Returns a Date object representing the last time the host monitoring service checked on its hosts

        HostMonitoringService.monitor();// Starts the host monitoring service to monitor all of its hosts

        HostMonitoringService.getSize();// Returns the number of hosts being monitored by the host monitoring service }}

    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getNextCheckOn()// Returns a Date object representing the next time the host monitoring service will check on its hosts
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn()// Returns a Date object representing the next time the host monitoring service will check on its hosts
 target is: hostMonitoringService method is: getNextCheckOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getNextCheckOn()Ljava/util/Date;
statement is: HostList hostList = new HostList("192.168.1.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostList(hostList)// Sets the list of hosts that the host monitoring service will check on
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostList(hostList)// Sets the list of hosts that the host monitoring service will check on
 target is: hostMonitoringService method is: setHostList(HostList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostList(Lorg/quickserver/net/client/HostList;)V
statement is: Host host = new Host("192.168.1.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.add(host)// Adds a new host to the host list
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.add(host)// Adds a new host to the host list
 target is: hostMonitoringService method is: add(Host)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
statement is: hostMonitoringService.setIntervalInSec(300)// Sets the interval in seconds for the host monitoring service to check on its hosts
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(300)// Sets the interval in seconds for the host monitoring service to check on its hosts
 target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: PingMonitor pingMonitor = new PingMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.monitor(false, "192.168.1.1")// Starts the host monitoring service to monitor a single host
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "192.168.1.1")// Starts the host monitoring service to monitor a single host
 target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)))// Adds a new HostMonitor object to the host monitoring service's list of monitors
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)))// Adds a new HostMonitor object to the host monitoring service's list of monitors
 target is: HostMonitoringService method is: add(HostList,HostMonitor)
statement is: hostMonitoringService.setHostMonitor(pingMonitor)// Sets the current HostMonitor object for the host monitoring service
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(pingMonitor)// Sets the current HostMonitor object for the host monitoring service
 target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getLastCheckedOn()// Returns a Date object representing the last time the host monitoring service checked on its hosts
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getLastCheckedOn()// Returns a Date object representing the last time the host monitoring service checked on its hosts
 target is: hostMonitoringService method is: getLastCheckedOn()
statement is: HostMonitoringService.monitor()// Starts the host monitoring service to monitor all of its hosts
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor()// Starts the host monitoring service to monitor all of its hosts
 target is: HostMonitoringService method is: monitor()
Matched Method is: monitor()V
statement is: HostMonitoringService.getSize()// Returns the number of hosts being monitored by the host monitoring service }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.getSize()// Returns the number of hosts being monitored by the host monitoring service }}
 target is: HostMonitoringService method is: getSize()
Matched Method is: getSize()I
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
String string = "192.168.1.1";
HostList hostList = new HostList(string);
hostMonitoringService.setHostList(hostList);
String string = "192.168.1.1";
Host host = new Host(string);
HostMonitoringService.add((HostMonitoringService) host);
int _int = 300;
hostMonitoringService.setIntervalInSec(_int);
PingMonitor pingMonitor = new PingMonitor();
boolean _boolean = false;
String string = "192.168.1.1";
HostMonitoringService.monitor(_boolean, string);
hostMonitoringService.setHostMonitor(pingMonitor);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
HostMonitoringService.getSize();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getHostList();
        // Improved test data
        List<String> hosts = Arrays.asList("host1", "host2", "host3");
        hostMonitoringService.setHostList(hosts);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getHostList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostList() target is: hostMonitoringService method is: getHostList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getHostList()Lorg/quickserver/net/client/HostList;
statement is: // Improved test data
List<String> hosts = Arrays.asList("host1", "host2", "host3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList("host1", "host2", "host3") target is: Arrays method is: asList(java.lang.String,java.lang.String,java.lang.String)
statement is: hostMonitoringService.setHostList(hosts), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostList(hosts) target is: hostMonitoringService method is: setHostList(List)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date lastCheckedOn = hostMonitoringService.getLastCheckedOn()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("aufwI>:Ow,@rsA3")
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList(arg0)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3")
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec((-1919))
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2")
statement is: org.quickserver.net.client.monitoring.impl.PingMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor pingMonitor = new PingMonitor()
statement is: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host((InetAddress) null)
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setNextCheckOn((Date) null)
statement is: monitor(Lorg/quickserver/net/client/Host;)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char monitor = pingMonitor.monitor(arg0)
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add((Object) null)
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa")
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, (-2316), (List) arg3)
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate lastCheckedOn = (MockDate)hostMonitoringService.getLastCheckedOn()
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
host.setNextCheckOn((Date) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true);
linkedList.add((Object) null);
HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa");
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, (-2316), (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getLastCheckedOn();
        HostList hostList = new HostList("aufwI>:Ow,@rsA3");
        hostMonitoringService.setHostList(hostList);
        HostMonitoringService.monitor(false, "\"{Sw%Us{i6MJ>b2");
        PingMonitor pingMonitor = new PingMonitor();
        Host host = new Host(((InetAddress) (null)));
        host.setNextCheckOn(((Date) (null)));
        pingMonitor.monitor(host);
        hostMonitoringService.setHostMonitor(pingMonitor);
        LinkedList<Object> linkedList = new LinkedList<Object>();
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostMonitoringService.monitor(true);
        linkedList.add(((Object) (null)));
        HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa");
        HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), 60, ((List) (linkedList)));
        hostMonitoringService.setHostMonitor(pingMonitor);
        hostMonitoringService.getLastCheckedOn();
        HostMonitoringService.monitor();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getLastCheckedOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getLastCheckedOn() target is: hostMonitoringService method is: getLastCheckedOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getLastCheckedOn()Ljava/util/Date;
statement is: HostList hostList = new HostList("aufwI>:Ow,@rsA3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostList(hostList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostList(hostList) target is: hostMonitoringService method is: setHostList(HostList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostList(Lorg/quickserver/net/client/HostList;)V
statement is: HostMonitoringService.monitor(false, "\"{Sw%Us{i6MJ>b2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "\"{Sw%Us{i6MJ>b2") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: PingMonitor pingMonitor = new PingMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host(((InetAddress) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: host.setNextCheckOn(((Date) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setNextCheckOn(((Date) (null))) target is: host method is: setNextCheckOn(Date)
source statement: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V callee: VariableReference: Statement 9, type org.quickserver.net.client.Hostindex is: 9
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: pingMonitor.monitor(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: pingMonitor.monitor(host) target is: pingMonitor method is: monitor(Host)
Matched Method is: monitor(Z)V
statement is: hostMonitoringService.setHostMonitor(pingMonitor), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(pingMonitor) target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: LinkedList<Object> linkedList = new LinkedList<Object>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.monitor(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
statement is: linkedList.add(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(((Object) (null))) target is: linkedList method is: add(java.lang.Object)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), 60, ((List) (linkedList))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), 60, ((List) (linkedList))) target is: HostMonitoringService method is: add(HostList,HostMonitor,int,List)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
statement is: hostMonitoringService.setHostMonitor(pingMonitor), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(pingMonitor) target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 15
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: hostMonitoringService.getLastCheckedOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getLastCheckedOn() target is: hostMonitoringService method is: getLastCheckedOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 15
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 15
Matched Method is: getLastCheckedOn()Ljava/util/Date;
statement is: HostMonitoringService.monitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor() target is: HostMonitoringService method is: monitor()
Matched Method is: monitor()V
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
String string = "aufwI>:Ow,@rsA3";
HostList hostList = new HostList(string);
hostMonitoringService.setHostList(hostList);
boolean _boolean = false;
String string = "\"{Sw%Us{i6MJ>b2";
HostMonitoringService.monitor(_boolean, string);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
Date date = null;
host.setNextCheckOn(date);
HostMonitoringService.monitor((boolean) host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
String string = "pLoM_^cOvW;,,Q>[qa";
HostList hostList = new HostList(string);
int _int = 60;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, _int, (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();

statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList((String) null)
statement is: org.quickserver.net.client.Host(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host("r?8T0eVhgF-;+;$L")
statement is: addDefault(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.addDefault(arg0)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, (String) null)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, (String) null)
statement is: org.quickserver.net.client.monitoring.impl.PingMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor pingMonitor = new PingMonitor()
statement is: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host((InetAddress) null)
statement is: monitor(Lorg/quickserver/net/client/Host;)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char monitor = pingMonitor.monitor(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
statement is: ofEpochSecond(J)Ljava/time/Instant; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.time.Instant
statement code is: Instant ofEpochSecond = MockInstant.ofEpochSecond((-584L))
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add((Object) arg0)
statement is: removeLast()Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.time.Instant
statement code is: Instant removeLast = (Instant)linkedList.removeLast()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("1ftR")
statement is: add(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.add(arg0)
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, (-1919), (List) arg3)
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: org.quickserver.net.client.monitoring.impl.HttpMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.HttpMonitor
statement code is: HttpMonitor httpMonitor = new HttpMonitor()
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: setCurrentTimeMillis(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: System.setCurrentTimeMillis((-1599L))
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
test data is: HostList hostList = new HostList((String) null);
Host host = new Host("r?8T0eVhgF-;+;$L");
hostList.addDefault(host);
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, (String) null);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(false);
Instant ofEpochSecond = MockInstant.ofEpochSecond((-584L));
linkedList.add((Object) ofEpochSecond);
linkedList.removeLast();
HostList hostList = new HostList("1ftR");
hostList.add(host);
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, (-1919), (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
HttpMonitor httpMonitor = new HttpMonitor();
hostMonitoringService.setHostMonitor(httpMonitor);
HostMonitoringService.monitor();
hostMonitoringService.getListnersList();
System.setCurrentTimeMillis((-1599L));
HostMonitoringService.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Host host = new Host("r?8T0eVhgF-;+;$L");// (1)

        HostList hostList = new HostList(((String) (null)));// (2)

        HostMonitoringService.monitor(false, ((String) (null)));// (3)

        HostMonitoringService.monitor(true, ((String) (null)));// (4)

        PingMonitor pingMonitor = new PingMonitor();// (5)

        Host host = new Host(((InetAddress) (null)));// (6)

        pingMonitor.monitor(host);// (7)

        LinkedList<Object> linkedList = new LinkedList<Object>();// (8)

        HostMonitoringService hostMonitoringService = new HostMonitoringService();// (9)

        HostMonitoringService.monitor(false);// (10)

        Instant ofEpochSecond = MockInstant.ofEpochSecond(-584L);// (11)

        linkedList.add(((Object) (ofEpochSecond)));// (12)

        linkedList.removeLast();// (13)

        HostList hostList = new HostList("1ftR");// (14)

        hostList.add(host);// (15)

        HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), -1919, ((List) (linkedList)));// (16)

        hostMonitoringService.setHostMonitor(pingMonitor);// (17)

        HttpMonitor httpMonitor = new HttpMonitor();// (18)

        hostMonitoringService.setHostMonitor(httpMonitor);// (19)

        HostMonitoringService.monitor();// (20)

        hostMonitoringService.getListnersList();// (21)

        System.setCurrentTimeMillis(-1599L);// (22)

        HostMonitoringService.getSize();// (23) }}

    }
}
statement is: Host host = new Host("r?8T0eVhgF-;+;$L")// (1)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostList hostList = new HostList(((String) (null)))// (2)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.monitor(false, ((String) (null)))// (3)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, ((String) (null)))// (3)
 target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: HostMonitoringService.monitor(true, ((String) (null)))// (4)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, ((String) (null)))// (4)
 target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: PingMonitor pingMonitor = new PingMonitor()// (5)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host(((InetAddress) (null)))// (6)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: pingMonitor.monitor(host)// (7)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: pingMonitor.monitor(host)// (7)
 target is: pingMonitor method is: monitor(Host)
Matched Method is: monitor(Z)V
statement is: LinkedList<Object> linkedList = new LinkedList<Object>()// (8)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService()// (9)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.monitor(false)// (10)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false)// (10)
 target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
statement is: Instant ofEpochSecond = MockInstant.ofEpochSecond(-584L)// (11)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: MockInstant.ofEpochSecond(-584L) target is: MockInstant method is: ofEpochSecond(long)
Matched Method is: ofEpochSecond(J)Ljava/time/Instant;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: linkedList.add(((Object) (ofEpochSecond)))// (12)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(((Object) (ofEpochSecond)))// (12)
 target is: linkedList method is: add(java.lang.Object)
source statement: java.util.LinkedList()V callee: VariableReference: Statement 8, type java.util.LinkedList<java.lang.Object>index is: 12
Matched Method is: add(Ljava/lang/Object;)Z
statement is: linkedList.removeLast()// (13)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.removeLast()// (13)
 target is: linkedList method is: removeLast()
source statement: java.util.LinkedList()V callee: VariableReference: Statement 8, type java.util.LinkedList<java.lang.Object>index is: 12
Matched Method is: removeLast()Ljava/lang/Object;
statement is: HostList hostList = new HostList("1ftR")// (14)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.add(host)// (15)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.add(host)// (15)
 target is: hostList method is: add(Host)
source statement: org.quickserver.net.client.HostList(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.quickserver.net.client.HostListindex is: 21
Matched Method is: add(Lorg/quickserver/net/client/Host;)V
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), -1919, ((List) (linkedList)))// (16)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), -1919, ((List) (linkedList)))// (16)
 target is: HostMonitoringService method is: add(HostList,HostMonitor,int,List)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: hostMonitoringService.setHostMonitor(pingMonitor)// (17)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(pingMonitor)// (17)
 target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 9, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 13
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 9, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 13
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: HttpMonitor httpMonitor = new HttpMonitor()// (18)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostMonitor(httpMonitor)// (19)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(httpMonitor)// (19)
 target is: hostMonitoringService method is: setHostMonitor(HttpMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 9, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 13
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 9, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 13
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: HostMonitoringService.monitor()// (20)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor()// (20)
 target is: HostMonitoringService method is: monitor()
Matched Method is: monitor()V
statement is: hostMonitoringService.getListnersList()// (21)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList()// (21)
 target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 9, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 13
Matched Method is: getListnersList()Ljava/util/List;
statement is: System.setCurrentTimeMillis(-1599L)// (22)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.setCurrentTimeMillis(-1599L)// (22)
 target is: System method is: setCurrentTimeMillis(long)
Matched Method is: setCurrentTimeMillis(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostMonitoringService.getSize()// (23) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.getSize()// (23) }}
 target is: HostMonitoringService method is: getSize()
Matched Method is: getSize()I
TestCase is: String string = "r?8T0eVhgF-;+;$L";
Host host = new Host(string);
HostList hostList = new HostList((String) null);
boolean _boolean = false;
String string = null;
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = true;
String string = null;
HostMonitoringService.monitor(_boolean, string);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host(string);
HostMonitoringService.monitor((boolean) host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = false;
HostMonitoringService.monitor(_boolean);
long _long = null;
Instant ofEpochSecond = MockInstant.ofEpochSecond(_long);
((LinkedList) _void).add((Object) ofEpochSecond);
((LinkedList) _void).removeLast();
String string = "1ftR";
HostList hostList = new HostList(string);
((HostList) string).add(host);
LinkedList<Object> linkedList = null;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, linkedList, (List) linkedList);
((HostMonitoringService) pingMonitor).setHostMonitor(pingMonitor);
HttpMonitor httpMonitor = new HttpMonitor();
((HostMonitoringService) pingMonitor).setHostMonitor(httpMonitor);
HostMonitoringService.monitor();
((HostMonitoringService) pingMonitor).getListnersList();
long _long = null;
System.setCurrentTimeMillis(_long);
HostMonitoringService.getSize();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList((String) null)
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList(arg0)
statement is: getHostList()Lorg/quickserver/net/client/HostList; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = hostMonitoringService.getHostList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList((String) null);
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostList hostList = new HostList("192.168.0.1", "192.168.0.2");
        hostMonitoringService.setHostList(hostList);
        hostMonitoringService.getHostList();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostList hostList = new HostList("192.168.0.1", "192.168.0.2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostList(hostList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostList(hostList) target is: hostMonitoringService method is: setHostList(HostList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostList(Lorg/quickserver/net/client/HostList;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: hostMonitoringService.getHostList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostList() target is: hostMonitoringService method is: getHostList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getHostList()Lorg/quickserver/net/client/HostList;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = null;
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getHostMonitor()Lorg/quickserver/net/client/monitoring/HostMonitor; type is: class org.evosuite.testcase.statements.MethodStatement return type interface org.quickserver.net.client.monitoring.HostMonitor
statement code is: HostMonitor hostMonitor = hostMonitoringService.getHostMonitor()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getHostMonitor("192.168.0.1", "1234");
        // Replace the IP address with a more descriptive one, such as "example.com"
        hostMonitoringService.getHostMonitor("example.com", "1234");
        // Replace the port number with a more representative one, such as "80" or "443"
        hostMonitoringService.getHostMonitor("example.com", "80");
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getHostMonitor("192.168.0.1", "1234"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getHostMonitor("192.168.0.1", "1234") target is: hostMonitoringService method is: getHostMonitor(java.lang.String,java.lang.String)
statement is: // Replace the IP address with a more descriptive one, such as "example.com"
hostMonitoringService.getHostMonitor("example.com", "1234"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Replace the IP address with a more descriptive one, such as "example.com"
hostMonitoringService.getHostMonitor("example.com", "1234") target is: hostMonitoringService method is: getHostMonitor(java.lang.String,java.lang.String)
statement is: // Replace the port number with a more representative one, such as "80" or "443"
hostMonitoringService.getHostMonitor("example.com", "80"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Replace the port number with a more representative one, such as "80" or "443"
hostMonitoringService.getHostMonitor("example.com", "80") target is: hostMonitoringService method is: getHostMonitor(java.lang.String,java.lang.String)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec(3255)
statement is: getIntervalInSec()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int intervalInSec = hostMonitoringService.getIntervalInSec()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(3255);
hostMonitoringService.getIntervalInSec();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setIntervalInSec(300);
        hostMonitoringService.getIntervalInSec();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setIntervalInSec(300), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setIntervalInSec(300) target is: hostMonitoringService method is: setIntervalInSec(int)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setIntervalInSec(I)V
statement is: hostMonitoringService.getIntervalInSec(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getIntervalInSec() target is: hostMonitoringService method is: getIntervalInSec()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getIntervalInSec()I
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 300;
hostMonitoringService.setIntervalInSec(_int);
hostMonitoringService.getIntervalInSec();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: mock(interface org.quickserver.net.client.monitoring.HostStateListener) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface org.quickserver.net.client.monitoring.HostStateListener
statement code is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer())
statement is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.addHostStateListner(arg0)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        hostMonitoringService.addHostStateListner(hostStateListener);
        hostMonitoringService.getListnersList();
        // The test data has been improved by changing the primitive values and Strings to more descriptive examples.
        // Before:
        // HostMonitoringService hostMonitoringService = new HostMonitoringService();
        // HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        // hostMonitoringService.addHostStateListner(hostStateListener);
        // hostMonitoringService.getListnersList();
        // After:
        // HostMonitoringService hostMonitoringService = new HostMonitoringService("Production");
        // HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
        // hostMonitoringService.addHostStateListner(hostStateListener);
        // hostMonitoringService.getListnersList(); }}
    }
}
statement is: // Improved test data
HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(HostStateListener.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: HostStateListener argument is: HostStateListener.class
Matched Method is: mock(interface org.quickserver.net.client.monitoring.HostStateListener)
statement is: hostMonitoringService.addHostStateListner(hostStateListener), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.addHostStateListner(hostStateListener) target is: hostMonitoringService method is: addHostStateListner(HostStateListener)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: addHostStateListner(Lorg/quickserver/net/client/monitoring/HostStateListener;)V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getListnersList()Ljava/util/List;
statement is: // The test data has been improved by changing the primitive values and Strings to more descriptive examples., class spoon.support.reflect.code.CtCommentImpl
statement is: // Before:, class spoon.support.reflect.code.CtCommentImpl
statement is: // HostMonitoringService hostMonitoringService = new HostMonitoringService();, class spoon.support.reflect.code.CtCommentImpl
statement is: // HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());, class spoon.support.reflect.code.CtCommentImpl
statement is: // hostMonitoringService.addHostStateListner(hostStateListener);, class spoon.support.reflect.code.CtCommentImpl
statement is: // hostMonitoringService.getListnersList();, class spoon.support.reflect.code.CtCommentImpl
statement is: // After:, class spoon.support.reflect.code.CtCommentImpl
statement is: // HostMonitoringService hostMonitoringService = new HostMonitoringService("Production");, class spoon.support.reflect.code.CtCommentImpl
statement is: // HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());, class spoon.support.reflect.code.CtCommentImpl
statement is: // hostMonitoringService.addHostStateListner(hostStateListener);, class spoon.support.reflect.code.CtCommentImpl
statement is: // hostMonitoringService.getListnersList(); }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        LinkedList<HostMonitoringService> linkedList = new LinkedList<>();
        linkedList.add(new HostMonitoringService());
        hostMonitoringService.setListnersList(linkedList);
        assertEquals(linkedList, hostMonitoringService.getListnersList());
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LinkedList<HostMonitoringService> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add(new HostMonitoringService()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(new HostMonitoringService()) target is: linkedList method is: add(HostMonitoringService)
statement is: hostMonitoringService.setListnersList(linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setListnersList(linkedList) target is: hostMonitoringService method is: setListnersList(LinkedList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setListnersList(Ljava/util/List;)V
statement is: assertEquals(linkedList, hostMonitoringService.getListnersList()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(linkedList, hostMonitoringService.getListnersList()) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(3255)
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setNextCheckOn(arg0)
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate nextCheckOn = (MockDate)hostMonitoringService.getNextCheckOn()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(3255);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        MockDate mockDate = new MockDate(3255);
        hostMonitoringService.setNextCheckOn(mockDate);
        hostMonitoringService.getNextCheckOn();
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockDate mockDate = new MockDate(3255), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setNextCheckOn(mockDate), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setNextCheckOn(mockDate) target is: hostMonitoringService method is: setNextCheckOn(MockDate)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getNextCheckOn()Ljava/util/Date;
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
int _int = 3255;
MockDate mockDate = new MockDate(_int);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = HostMonitoringService.getSize()
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "t_&Z$;(R:r@T4R")
test data is: HostMonitoringService.getSize();
HostMonitoringService.monitor(true, "t_&Z$;(R:r@T4R");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService.getSize();
        HostMonitoringService.monitor(true, "t_&Z$;(R:r@T4R");
    }
}
statement is: HostMonitoringService.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.getSize() target is: HostMonitoringService method is: getSize()
Matched Method is: getSize()I
statement is: HostMonitoringService.monitor(true, "t_&Z$;(R:r@T4R"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "t_&Z$;(R:r@T4R") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
TestCase is: HostMonitoringService.getSize();
boolean _boolean = true;
String string = "t_&Z$;(R:r@T4R";
HostMonitoringService.monitor(_boolean, string);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean remove = HostMonitoringService.remove(arg0)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        String hostName = "example.com";
        int port = 80;
        hostMonitoringService.add(hostName, port);
        hostMonitoringService.remove(hostName);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String hostName = "example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int port = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: hostMonitoringService.add(hostName, port), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.add(hostName, port) target is: hostMonitoringService method is: add(java.lang.String,int)
statement is: hostMonitoringService.remove(hostName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.remove(hostName) target is: hostMonitoringService method is: remove(java.lang.String)
Matched Method is: remove(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)Z
* this is vulnerable: int _int = 80
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "example.com";
int _int = 80;
HostMonitoringService.remove((HostMonitoringService) string);

statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "")
statement is: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host((InetAddress) null)
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date lastCheckedOn = host.getLastCheckedOn()
statement is: setNextCheckOn(Ljava/util/Date;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setNextCheckOn((Date) null)
statement is: org.quickserver.net.client.monitoring.impl.PingMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor pingMonitor = new PingMonitor()
statement is: monitor(Lorg/quickserver/net/client/Host;)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char monitor = pingMonitor.monitor(arg0)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add((Object) arg0)
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa")
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<org.quickserver.net.client.monitoring.HostMonitoringService>
statement code is: LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>()
statement is: setListnersList(Ljava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setListnersList(arg0)
statement is: containsAll(Ljava/util/Collection;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean containsAll = linkedList.containsAll((Collection<?>) null)
statement is: int _int = 80 type is: class org.evosuite.testcase.statements.numeric.IntPrimitiveStatement return type int
statement code is: int _int = 80
statement is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0, (HostMonitor) arg1, arg2, (List) arg3)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: getLastCheckedOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date lastCheckedOn = hostMonitoringService.getLastCheckedOn()
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
statement is: getListnersList()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List listnersList = hostMonitoringService.getListnersList()
statement is: long _long = (-2381L) type is: class org.evosuite.testcase.statements.numeric.LongPrimitiveStatement return type long
statement code is: long _long = (-2381L)
statement is: setCurrentTimeMillis(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: System.setCurrentTimeMillis(arg0)
test data is: HostMonitoringService.monitor(true, "");
Host host = new Host((InetAddress) null);
host.getLastCheckedOn();
host.setNextCheckOn((Date) null);
PingMonitor pingMonitor = new PingMonitor();
pingMonitor.monitor(host);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(false);
linkedList.add((Object) hostMonitoringService);
HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa");
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
linkedList.containsAll((Collection<?>) null);
int _int = 80;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, _int, (List) linkedList);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();
hostMonitoringService.getListnersList();
long _long = (-2381L);
System.setCurrentTimeMillis(_long);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        HostMonitoringService.monitor(true, "test-host");
        Host host = new Host("192.168.0.1");
        host.getLastCheckedOn();
        host.setNextCheckOn(new Date());
        PingMonitor pingMonitor = new PingMonitor();
        pingMonitor.monitor(host);
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.setHostMonitor(pingMonitor);
        LinkedList<Object> linkedList = new LinkedList<>();
        linkedList.add(hostMonitoringService);
        HostList hostList = new HostList("test-host-list");
        linkedList.addAll(hostList.getHosts());
        int _int = 80;
        HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), _int, linkedList);
        hostMonitoringService.setHostMonitor(pingMonitor);
        hostMonitoringService.setHostMonitor(pingMonitor);
        hostMonitoringService.getLastCheckedOn();
        HostMonitoringService.monitor();
        hostMonitoringService.getListnersList();
        long _long = System.currentTimeMillis();
        System.setCurrentTimeMillis(_long);
    }
}
statement is: // Improved test data
HostMonitoringService.monitor(true, "test-host"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
HostMonitoringService.monitor(true, "test-host") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: Host host = new Host("192.168.0.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: host.getLastCheckedOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.getLastCheckedOn() target is: host method is: getLastCheckedOn()
source statement: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V callee: VariableReference: Statement 1, type org.quickserver.net.client.Hostindex is: 4
Matched Method is: getLastCheckedOn()Ljava/util/Date;
statement is: host.setNextCheckOn(new Date()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: host.setNextCheckOn(new Date()) target is: host method is: setNextCheckOn(Date)
source statement: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V callee: VariableReference: Statement 1, type org.quickserver.net.client.Hostindex is: 4
Matched Method is: setNextCheckOn(Ljava/util/Date;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: PingMonitor pingMonitor = new PingMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: pingMonitor.monitor(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: pingMonitor.monitor(host) target is: pingMonitor method is: monitor(Host)
Matched Method is: monitor(Z)V
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostMonitor(pingMonitor), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(pingMonitor) target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 6, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 10
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: LinkedList<Object> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(hostMonitoringService) target is: linkedList method is: add(HostMonitoringService)
source statement: java.util.LinkedList()V callee: VariableReference: Statement 8, type java.util.LinkedList<java.lang.Object>index is: 12
Matched Method is: add(Ljava/lang/Object;)Z
statement is: HostList hostList = new HostList("test-host-list"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.addAll(hostList.getHosts()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.addAll(hostList.getHosts()) target is: linkedList method is: addAll()
statement is: int _int = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), _int, linkedList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.add(hostList, ((HostMonitor) (pingMonitor)), _int, linkedList) target is: HostMonitoringService method is: add(HostList,HostMonitor,int,LinkedList)
Matched Method is: add(Lorg/quickserver/net/client/HostList;Lorg/quickserver/net/client/monitoring/HostMonitor;ILjava/util/List;)V
statement is: hostMonitoringService.setHostMonitor(pingMonitor), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(pingMonitor) target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 6, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 10
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: hostMonitoringService.setHostMonitor(pingMonitor), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(pingMonitor) target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 6, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 10
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: hostMonitoringService.getLastCheckedOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getLastCheckedOn() target is: hostMonitoringService method is: getLastCheckedOn()
statement is: HostMonitoringService.monitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor() target is: HostMonitoringService method is: monitor()
Matched Method is: monitor()V
statement is: hostMonitoringService.getListnersList(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getListnersList() target is: hostMonitoringService method is: getListnersList()
statement is: long _long = System.currentTimeMillis(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.currentTimeMillis() target is: System method is: currentTimeMillis()
statement is: System.setCurrentTimeMillis(_long), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.setCurrentTimeMillis(_long) target is: System method is: setCurrentTimeMillis(long)
Matched Method is: setCurrentTimeMillis(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: boolean _boolean = true;
String string = "test-host";
HostMonitoringService.monitor(_boolean, string);
String string = "192.168.0.1";
Host host = new Host((InetAddress) string);
((Host) string).getLastCheckedOn();
Date date = null;
((Host) string).setNextCheckOn(date);
PingMonitor pingMonitor = new PingMonitor();
HostMonitoringService.monitor((boolean) host);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
((HostMonitoringService) date).setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
((LinkedList) pingMonitor).add((Object) hostMonitoringService);
String string = "test-host-list";
HostList hostList = new HostList(string);
int _int = 80;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, _int, (List) linkedList);
((HostMonitoringService) date).setHostMonitor(pingMonitor);
((HostMonitoringService) date).setHostMonitor(pingMonitor);
HostMonitoringService.monitor();
long _long = null;
System.setCurrentTimeMillis(_long);

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: getNextCheckOn()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date nextCheckOn = hostMonitoringService.getNextCheckOn()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("aufwI>:Ow,@rsA3")
statement is: org.quickserver.net.client.Host(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host("")
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3")
statement is: org.quickserver.net.client.monitoring.impl.PingMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor pingMonitor = new PingMonitor()
statement is: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host((InetAddress) null)
statement is: monitor(Lorg/quickserver/net/client/Host;)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char monitor = pingMonitor.monitor(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add(arg0)
statement is: add(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.add(arg0)
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host("");
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true);
Object object = new Object();
linkedList.add(object);
hostList.add(host);
HostMonitoringService.monitor();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        hostMonitoringService.getNextCheckOn();
        HostList hostList = new HostList("192.168.0.1");
        Host host = new Host("hostname1");
        HostMonitoringService.monitor(false, "192.168.0.1");
        PingMonitor pingMonitor = new PingMonitor();
        Host host = new Host(InetAddress.getByName("google.com"));
        pingMonitor.monitor(host);
        LinkedList<Object> linkedList = new LinkedList<>();
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostMonitoringService.monitor(true, "192.168.0.1");
        Object object = new Object();
        linkedList.add(object);
        hostList.add(host);
        HostMonitoringService.monitor("192.168.0.1", false);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.getNextCheckOn(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.getNextCheckOn() target is: hostMonitoringService method is: getNextCheckOn()
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: getNextCheckOn()Ljava/util/Date;
statement is: HostList hostList = new HostList("192.168.0.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host("hostname1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.monitor(false, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "192.168.0.1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: PingMonitor pingMonitor = new PingMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host(InetAddress.getByName("google.com")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: pingMonitor.monitor(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: pingMonitor.monitor(host) target is: pingMonitor method is: monitor(Host)
Matched Method is: monitor(Z)V
statement is: LinkedList<Object> linkedList = new LinkedList<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.monitor(true, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "192.168.0.1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add(object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(object) target is: linkedList method is: add(java.lang.Object)
source statement: java.util.LinkedList()V callee: VariableReference: Statement 8, type java.util.LinkedList<java.lang.Object>index is: 12
Matched Method is: add(Ljava/lang/Object;)Z
statement is: hostList.add(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.add(host) target is: hostList method is: add(Host)
source statement: org.quickserver.net.client.HostList(Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.quickserver.net.client.HostListindex is: 3
Matched Method is: add(Lorg/quickserver/net/client/Host;)V
statement is: HostMonitoringService.monitor("192.168.0.1", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor("192.168.0.1", false) target is: HostMonitoringService method is: monitor(java.lang.String,boolean)
Matched Method is: monitor(ZLjava/lang/String;)V
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
String string = "192.168.0.1";
HostList hostList = new HostList(string);
String string = "hostname1";
Host host = new Host(string);
boolean _boolean = false;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host(string);
HostMonitoringService.monitor((boolean) host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
Object object = new Object();
((LinkedList) _void).add(object);
((HostList) string).add(host);
String string = "192.168.0.1";
boolean _boolean = false;
HostMonitoringService.monitor((boolean) string, (String) _boolean);

statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("aufwI>:Ow,@rsA3")
statement is: org.quickserver.net.client.Host(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host("r?8T0eVhgF-;+;$L")
statement is: addDefault(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.addDefault(arg0)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3")
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2")
statement is: org.quickserver.net.client.monitoring.impl.PingMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor pingMonitor = new PingMonitor()
statement is: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host((InetAddress) null)
statement is: monitor(Lorg/quickserver/net/client/Host;)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char monitor = pingMonitor.monitor(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(true)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = linkedList.add((Object) null)
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa")
statement is: add(Lorg/quickserver/net/client/Host;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostList.add(arg0)
statement is: monitor()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor()
test data is: HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host("r?8T0eVhgF-;+;$L");
hostList.addDefault(host);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true);
linkedList.add((Object) null);
HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa");
hostList.add(host);
HostMonitoringService.monitor();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostList hostList = new HostList("192.168.1.1");
        Host host = new Host("google.com");
        hostList.addDefault(host);
        HostMonitoringService.monitor(false, "192.168.1.1");
        HostMonitoringService.monitor(true, "google.com");
        PingMonitor pingMonitor = new PingMonitor();
        Host host = new Host(((InetAddress) (null)));
        pingMonitor.monitor(host);
        LinkedList<Object> linkedList = new LinkedList<Object>();
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostMonitoringService.monitor(true);
        linkedList.add(((Object) (null)));
        HostList hostList = new HostList("192.168.1.1");
        hostList.add(host);
        HostMonitoringService.monitor();
    }
}
statement is: HostList hostList = new HostList("192.168.1.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host("google.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.addDefault(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.addDefault(host) target is: hostList method is: addDefault(Host)
source statement: org.quickserver.net.client.HostList(Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.quickserver.net.client.HostListindex is: 1
Matched Method is: addDefault(Lorg/quickserver/net/client/Host;)V
statement is: HostMonitoringService.monitor(false, "192.168.1.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "192.168.1.1") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: HostMonitoringService.monitor(true, "google.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true, "google.com") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: PingMonitor pingMonitor = new PingMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host(((InetAddress) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: pingMonitor.monitor(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: pingMonitor.monitor(host) target is: pingMonitor method is: monitor(Host)
Matched Method is: monitor(Z)V
statement is: LinkedList<Object> linkedList = new LinkedList<Object>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostMonitoringService.monitor(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(true) target is: HostMonitoringService method is: monitor(boolean)
Matched Method is: monitor(Z)V
statement is: linkedList.add(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(((Object) (null))) target is: linkedList method is: add(java.lang.Object)
source statement: java.util.LinkedList()V callee: VariableReference: Statement 8, type java.util.LinkedList<java.lang.Object>index is: 14
Matched Method is: add(Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HostList hostList = new HostList("192.168.1.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostList.add(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostList.add(host) target is: hostList method is: add(Host)
statement is: HostMonitoringService.monitor(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor() target is: HostMonitoringService method is: monitor()
Matched Method is: monitor()V
TestCase is: String string = "192.168.1.1";
HostList hostList = new HostList(string);
String string = "google.com";
Host host = new Host(string);
((HostList) string).addDefault(host);
boolean _boolean = false;
String string = "192.168.1.1";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = true;
String string = "google.com";
HostMonitoringService.monitor(_boolean, string);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host(string);
HostMonitoringService.monitor((boolean) host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
Object object = null;
((LinkedList) _boolean).add(object);
String string = "192.168.1.1";
HostList hostList = new HostList(string);
HostMonitoringService.monitor();

statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("")
statement is: org.quickserver.net.client.HostList(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.HostList
statement code is: HostList hostList = new HostList("")
statement is: setHostList(Lorg/quickserver/net/client/HostList;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostList(arg0)
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, ">e46 C")
statement is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.add(arg0)
statement is: setIntervalInSec(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setIntervalInSec((-1919))
statement is: monitor(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false, "\"{Sw%Us{i6MJ>b2")
statement is: org.quickserver.net.client.monitoring.impl.PingMonitor()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.impl.PingMonitor
statement code is: PingMonitor pingMonitor = new PingMonitor()
statement is: org.quickserver.net.client.Host(Ljava/net/InetAddress;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host((InetAddress) null)
statement is: monitor(Lorg/quickserver/net/client/Host;)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char monitor = pingMonitor.monitor(arg0)
statement is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: hostMonitoringService.setHostMonitor(arg0)
statement is: java.util.LinkedList()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.LinkedList<java.lang.Object>
statement code is: LinkedList<Object> linkedList = new LinkedList<Object>()
statement is: setTimeout(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: host.setTimeout((-1919))
statement is: org.quickserver.net.client.Host(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.Host
statement code is: Host host = new Host("listener was null!")
statement is: monitor(Lorg/quickserver/net/client/Host;)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char monitor = pingMonitor.monitor(arg0)
statement is: org.quickserver.net.client.monitoring.HostMonitoringService()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.client.monitoring.HostMonitoringService
statement code is: HostMonitoringService hostMonitoringService = new HostMonitoringService()
statement is: monitor(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: HostMonitoringService.monitor(false)
test data is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("");
HostList hostList = new HostList("");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, ">e46 C");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(false, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
host.setTimeout((-1919));
Host host = new Host("listener was null!");
pingMonitor.monitor(host);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HostMonitoringService hostMonitoringService = new HostMonitoringService();
        HostList hostList = new HostList("192.168.0.1, 192.168.0.2");
        hostMonitoringService.setHostList(hostList);
        HostMonitoringService.monitor(false, "google.com");
        PingMonitor pingMonitor = new PingMonitor();
        Host host = new Host("192.168.0.1");
        pingMonitor.monitor(host);
        hostMonitoringService.setHostMonitor(pingMonitor);
        LinkedList<Object> linkedList = new LinkedList<Object>();
        linkedList.add(hostMonitoringService);
    }
}
statement is: HostMonitoringService hostMonitoringService = new HostMonitoringService(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HostList hostList = new HostList("192.168.0.1, 192.168.0.2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hostMonitoringService.setHostList(hostList), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostList(hostList) target is: hostMonitoringService method is: setHostList(HostList)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostList(Lorg/quickserver/net/client/HostList;)V
statement is: HostMonitoringService.monitor(false, "google.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HostMonitoringService.monitor(false, "google.com") target is: HostMonitoringService method is: monitor(boolean,java.lang.String)
Matched Method is: monitor(ZLjava/lang/String;)V
statement is: PingMonitor pingMonitor = new PingMonitor(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Host host = new Host("192.168.0.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: pingMonitor.monitor(host), class spoon.support.reflect.code.CtInvocationImpl
invocation is: pingMonitor.monitor(host) target is: pingMonitor method is: monitor(Host)
Matched Method is: monitor(Z)V
statement is: hostMonitoringService.setHostMonitor(pingMonitor), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hostMonitoringService.setHostMonitor(pingMonitor) target is: hostMonitoringService method is: setHostMonitor(PingMonitor)
source statement: org.quickserver.net.client.monitoring.HostMonitoringService()V callee: VariableReference: Statement 0, type org.quickserver.net.client.monitoring.HostMonitoringServiceindex is: 0
Matched Method is: setHostMonitor(Lorg/quickserver/net/client/monitoring/HostMonitor;)V
statement is: LinkedList<Object> linkedList = new LinkedList<Object>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: linkedList.add(hostMonitoringService), class spoon.support.reflect.code.CtInvocationImpl
invocation is: linkedList.add(hostMonitoringService) target is: linkedList method is: add(HostMonitoringService)
Matched Method is: add(Lorg/quickserver/net/client/monitoring/HostMonitoringService;)V
TestCase is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
String string = "192.168.0.1, 192.168.0.2";
HostList hostList = new HostList(string);
hostMonitoringService.setHostList(hostList);
boolean _boolean = false;
String string = "google.com";
HostMonitoringService.monitor(_boolean, string);
PingMonitor pingMonitor = new PingMonitor();
String string = "192.168.0.1";
Host host = new Host((InetAddress) string);
HostMonitoringService.monitor((boolean) host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostMonitoringService);

* test suite isTestSuite: 44
Test 0: 
HostMonitoringService.monitor("78j%~");
Test 1: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-1919));
hostMonitoringService.getIntervalInSec();
Test 2: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove(hostMonitoringService);
Test 3: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 4: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host();
hostList.add(host);
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
host.setNextCheckOn((Date) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
host.setNextCheckOn((Date) null);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
host.toString();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getHostMonitor();
hostMonitoringService.getHostMonitor();
hostMonitoringService.getListnersList();
hostMonitoringService.setLastCheckedOn((Date) null);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
hostMonitoringService.getIntervalInSec();
hostMonitoringService.setLastCheckedOn((Date) null);
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
Test 6: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host("");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
HostMonitoringService.monitor();
host.setStatus('M');
HostMonitoringService.clear();
LinkedList<Temporal> linkedList = new LinkedList<Temporal>();
linkedList.iterator();
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, (-1919), (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();
HostMonitoringService.getSize();
Test 7: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 8: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
host.setNextCheckOn((Date) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true);
linkedList.add((Object) null);
HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa");
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, (-2316), (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();
Test 9: 
HostList hostList = new HostList((String) null);
Host host = new Host("r?8T0eVhgF-;+;$L");
hostList.addDefault(host);
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, (String) null);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(false);
Instant ofEpochSecond = MockInstant.ofEpochSecond((-584L));
linkedList.add((Object) ofEpochSecond);
linkedList.removeLast();
HostList hostList = new HostList("1ftR");
hostList.add(host);
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, (-1919), (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
HttpMonitor httpMonitor = new HttpMonitor();
hostMonitoringService.setHostMonitor(httpMonitor);
HostMonitoringService.monitor();
hostMonitoringService.getListnersList();
System.setCurrentTimeMillis((-1599L));
HostMonitoringService.getSize();
Test 10: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList((String) null);
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 11: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(3255);
hostMonitoringService.getIntervalInSec();
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(3255);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 16: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(true, "t_&Z$;(R:r@T4R");
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);
Test 18: 
HostMonitoringService.monitor(true, "");
Host host = new Host((InetAddress) null);
host.getLastCheckedOn();
host.setNextCheckOn((Date) null);
PingMonitor pingMonitor = new PingMonitor();
pingMonitor.monitor(host);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(false);
linkedList.add((Object) hostMonitoringService);
HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa");
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
// Undeclared exception!
try { 
  linkedList.containsAll((Collection<?>) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.AbstractCollection", e);
}

int _int = 80;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, _int, (List) linkedList);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();
hostMonitoringService.getListnersList();
long _long = (-2381L);
System.setCurrentTimeMillis(_long);
Test 19: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host("");
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true);
Object object = new Object();
linkedList.add(object);
hostList.add(host);
HostMonitoringService.monitor();
Test 20: 
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host("r?8T0eVhgF-;+;$L");
hostList.addDefault(host);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true);
linkedList.add((Object) null);
HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa");
hostList.add(host);
HostMonitoringService.monitor();
Test 21: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("");
HostList hostList = new HostList("");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, ">e46 C");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(false, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
host.setTimeout((-1919));
Host host = new Host("listener was null!");
pingMonitor.monitor(host);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(false);
Test 22: 
HostMonitoringService.monitor("server-1");

Test 23: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(300);

Test 24: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove((HostMonitoringService) null);

Test 25: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);

Test 26: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("192.168.0.1");
Host host = new Host((InetAddress) null);
HostMonitoringService.add((HostMonitoringService) host);
hostMonitoringService.setHostList(hostList);
boolean _boolean = false;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
HostMonitoringService.add(hostMonitoringService);
int _int = 300;
hostMonitoringService.setIntervalInSec(_int);
boolean _boolean = true;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
Date date = null;
((Host) _int).setNextCheckOn(date);
((PingMonitor) _void).monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
Date date = null;
((Host) _int).setNextCheckOn(date);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
((Host) _int).toString();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getHostMonitor();
hostMonitoringService.getHostMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();

Test 27: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);

Test 28: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("192.168.1.1");
hostMonitoringService.setHostList(hostList);
Host host = new Host("192.168.1.1");
HostMonitoringService.add((HostMonitoringService) host);
int _int = 300;
hostMonitoringService.setIntervalInSec(_int);
PingMonitor pingMonitor = new PingMonitor();
boolean _boolean = false;
String string = "192.168.1.1";
HostMonitoringService.monitor(_boolean, string);
hostMonitoringService.setHostMonitor(pingMonitor);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
HostMonitoringService.getSize();

Test 29: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

Test 30: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
host.setNextCheckOn((Date) null);
HostMonitoringService.monitor((boolean) host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
String string = "pLoM_^cOvW;,,Q>[qa";
HostList hostList = new HostList(string);
int _int = 60;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, _int, (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();

Test 31: 
String string = "r?8T0eVhgF-;+;$L";
Host host = new Host("r?8T0eVhgF-;+;$L");
HostList hostList = new HostList((String) null);
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, (String) null);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host("r?8T0eVhgF-;+;$L");
HostMonitoringService.monitor((boolean) host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = false;
HostMonitoringService.monitor(_boolean);
long _long = null;
Instant ofEpochSecond = MockInstant.ofEpochSecond(_long);
((LinkedList) _void).add((Object) ofEpochSecond);
((LinkedList) _void).removeLast();
String string = "1ftR";
HostList hostList = new HostList(string);
((HostList) string).add(host);
LinkedList<Object> linkedList = null;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, linkedList, (List) linkedList);
((HostMonitoringService) pingMonitor).setHostMonitor(pingMonitor);
HttpMonitor httpMonitor = new HttpMonitor();
((HostMonitoringService) pingMonitor).setHostMonitor(httpMonitor);
HostMonitoringService.monitor();
((HostMonitoringService) pingMonitor).getListnersList();
long _long = null;
System.setCurrentTimeMillis(_long);
HostMonitoringService.getSize();

Test 32: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setHostList((HostList) null);
hostMonitoringService.getHostList();

Test 33: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 34: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(300);
hostMonitoringService.getIntervalInSec();

Test 35: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

Test 36: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);

Test 37: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(3255);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

Test 38: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(true, "t_&Z$;(R:r@T4R");

Test 39: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove((HostMonitoringService) "example.com");

Test 40: 
String string = "test-host";
HostMonitoringService.monitor(true, "test-host");
Host host = new Host((InetAddress) "192.168.0.1");
((Host) string).getLastCheckedOn();
Date date = null;
((Host) string).setNextCheckOn(date);
PingMonitor pingMonitor = new PingMonitor();
HostMonitoringService.monitor((boolean) host);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
((HostMonitoringService) date).setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
((LinkedList) pingMonitor).add((Object) hostMonitoringService);
String string = "test-host-list";
HostList hostList = new HostList(string);
int _int = 80;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, _int, (List) linkedList);
((HostMonitoringService) date).setHostMonitor(pingMonitor);
((HostMonitoringService) date).setHostMonitor(pingMonitor);
HostMonitoringService.monitor();
long _long = null;
System.setCurrentTimeMillis(_long);

Test 41: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
String string = "192.168.0.1";
HostList hostList = new HostList("192.168.0.1");
Host host = new Host("hostname1");
HostMonitoringService.monitor(false, "192.168.0.1");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host("hostname1");
HostMonitoringService.monitor((boolean) host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
Object object = new Object();
((LinkedList) _void).add(object);
((HostList) string).add(host);
String string = "192.168.0.1";
boolean _boolean = false;
HostMonitoringService.monitor((boolean) string, (String) _boolean);

Test 42: 
HostList hostList = new HostList("192.168.1.1");
String string = "google.com";
Host host = new Host("google.com");
((HostList)"192.168.1.1").addDefault(host);
boolean _boolean = false;
String string = "192.168.1.1";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = true;
String string = "google.com";
HostMonitoringService.monitor(_boolean, string);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host(string);
HostMonitoringService.monitor((boolean) host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
Object object = null;
((LinkedList) _boolean).add(object);
String string = "192.168.1.1";
HostList hostList = new HostList(string);
HostMonitoringService.monitor();

Test 43: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("192.168.0.1, 192.168.0.2");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "google.com");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) "192.168.0.1");
HostMonitoringService.monitor((boolean) host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostMonitoringService);


* Generated after the refinement and before minimization 44 tests with total length 425
* test suite isTestSuite: 44
Test 0: 
HostMonitoringService.monitor("78j%~");
Test 1: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-1919));
hostMonitoringService.getIntervalInSec();
Test 2: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove(hostMonitoringService);
Test 3: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 4: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host();
hostList.add(host);
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
host.setNextCheckOn((Date) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
host.setNextCheckOn((Date) null);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
host.toString();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getHostMonitor();
hostMonitoringService.getHostMonitor();
hostMonitoringService.getListnersList();
hostMonitoringService.setLastCheckedOn((Date) null);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
hostMonitoringService.getIntervalInSec();
hostMonitoringService.setLastCheckedOn((Date) null);
Test 5: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
Test 6: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host("");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
HostMonitoringService.monitor();
host.setStatus('M');
HostMonitoringService.clear();
LinkedList<Temporal> linkedList = new LinkedList<Temporal>();
linkedList.iterator();
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, (-1919), (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();
HostMonitoringService.getSize();
Test 7: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 8: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
host.setNextCheckOn((Date) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true);
linkedList.add((Object) null);
HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa");
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, (-2316), (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();
Test 9: 
HostList hostList = new HostList((String) null);
Host host = new Host("r?8T0eVhgF-;+;$L");
hostList.addDefault(host);
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, (String) null);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(false);
Instant ofEpochSecond = MockInstant.ofEpochSecond((-584L));
linkedList.add((Object) ofEpochSecond);
linkedList.removeLast();
HostList hostList = new HostList("1ftR");
hostList.add(host);
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, (-1919), (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
HttpMonitor httpMonitor = new HttpMonitor();
hostMonitoringService.setHostMonitor(httpMonitor);
HostMonitoringService.monitor();
hostMonitoringService.getListnersList();
System.setCurrentTimeMillis((-1599L));
HostMonitoringService.getSize();
Test 10: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList((String) null);
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 11: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(3255);
hostMonitoringService.getIntervalInSec();
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(3255);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 16: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(true, "t_&Z$;(R:r@T4R");
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);
Test 18: 
HostMonitoringService.monitor(true, "");
Host host = new Host((InetAddress) null);
host.getLastCheckedOn();
host.setNextCheckOn((Date) null);
PingMonitor pingMonitor = new PingMonitor();
pingMonitor.monitor(host);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(false);
linkedList.add((Object) hostMonitoringService);
HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa");
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
// Undeclared exception!
try { 
  linkedList.containsAll((Collection<?>) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.AbstractCollection", e);
}

int _int = 80;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, _int, (List) linkedList);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();
hostMonitoringService.getListnersList();
long _long = (-2381L);
System.setCurrentTimeMillis(_long);
Test 19: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host("");
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true);
Object object = new Object();
linkedList.add(object);
hostList.add(host);
HostMonitoringService.monitor();
Test 20: 
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host("r?8T0eVhgF-;+;$L");
hostList.addDefault(host);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true);
linkedList.add((Object) null);
HostList hostList = new HostList("pLoM_^cOvW;,,Q>[qa");
hostList.add(host);
HostMonitoringService.monitor();
Test 21: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("");
HostList hostList = new HostList("");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, ">e46 C");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(false, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
host.setTimeout((-1919));
Host host = new Host("listener was null!");
pingMonitor.monitor(host);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(false);
Test 22: 
HostMonitoringService.monitor("server-1");

Test 23: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(300);

Test 24: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove((HostMonitoringService) null);

Test 25: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);

Test 26: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("192.168.0.1");
Host host = new Host((InetAddress) null);
HostMonitoringService.add((HostMonitoringService) host);
hostMonitoringService.setHostList(hostList);
boolean _boolean = false;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
HostMonitoringService.add(hostMonitoringService);
int _int = 300;
hostMonitoringService.setIntervalInSec(_int);
boolean _boolean = true;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
Date date = null;
((Host) _int).setNextCheckOn(date);
((PingMonitor) _void).monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
Date date = null;
((Host) _int).setNextCheckOn(date);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
((Host) _int).toString();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getHostMonitor();
hostMonitoringService.getHostMonitor();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();

Test 27: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);

Test 28: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("192.168.1.1");
hostMonitoringService.setHostList(hostList);
Host host = new Host("192.168.1.1");
HostMonitoringService.add((HostMonitoringService) host);
int _int = 300;
hostMonitoringService.setIntervalInSec(_int);
PingMonitor pingMonitor = new PingMonitor();
boolean _boolean = false;
String string = "192.168.1.1";
HostMonitoringService.monitor(_boolean, string);
hostMonitoringService.setHostMonitor(pingMonitor);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
HostMonitoringService.getSize();

Test 29: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();

Test 30: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
host.setNextCheckOn((Date) null);
HostMonitoringService.monitor((boolean) host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
HostMonitoringService hostMonitoringService = null;
HostMonitoringService.add(hostMonitoringService);
String string = "pLoM_^cOvW;,,Q>[qa";
HostList hostList = new HostList(string);
int _int = 60;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, _int, (List) linkedList);
hostMonitoringService.setHostMonitor(pingMonitor);
hostMonitoringService.getLastCheckedOn();
HostMonitoringService.monitor();

Test 31: 
String string = "r?8T0eVhgF-;+;$L";
Host host = new Host("r?8T0eVhgF-;+;$L");
HostList hostList = new HostList((String) null);
HostMonitoringService.monitor(false, (String) null);
HostMonitoringService.monitor(true, (String) null);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host("r?8T0eVhgF-;+;$L");
HostMonitoringService.monitor((boolean) host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = false;
HostMonitoringService.monitor(_boolean);
long _long = null;
Instant ofEpochSecond = MockInstant.ofEpochSecond(_long);
((LinkedList) _void).add((Object) ofEpochSecond);
((LinkedList) _void).removeLast();
String string = "1ftR";
HostList hostList = new HostList(string);
((HostList) string).add(host);
LinkedList<Object> linkedList = null;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, linkedList, (List) linkedList);
((HostMonitoringService) pingMonitor).setHostMonitor(pingMonitor);
HttpMonitor httpMonitor = new HttpMonitor();
((HostMonitoringService) pingMonitor).setHostMonitor(httpMonitor);
HostMonitoringService.monitor();
((HostMonitoringService) pingMonitor).getListnersList();
long _long = null;
System.setCurrentTimeMillis(_long);
HostMonitoringService.getSize();

Test 32: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setHostList((HostList) null);
hostMonitoringService.getHostList();

Test 33: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();

Test 34: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(300);
hostMonitoringService.getIntervalInSec();

Test 35: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();

Test 36: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);

Test 37: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(3255);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();

Test 38: 
HostMonitoringService.getSize();
HostMonitoringService.monitor(true, "t_&Z$;(R:r@T4R");

Test 39: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.remove((HostMonitoringService) "example.com");

Test 40: 
String string = "test-host";
HostMonitoringService.monitor(true, "test-host");
Host host = new Host((InetAddress) "192.168.0.1");
((Host) string).getLastCheckedOn();
Date date = null;
((Host) string).setNextCheckOn(date);
PingMonitor pingMonitor = new PingMonitor();
HostMonitoringService.monitor((boolean) host);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
((HostMonitoringService) date).setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
((LinkedList) pingMonitor).add((Object) hostMonitoringService);
String string = "test-host-list";
HostList hostList = new HostList(string);
int _int = 80;
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, _int, (List) linkedList);
((HostMonitoringService) date).setHostMonitor(pingMonitor);
((HostMonitoringService) date).setHostMonitor(pingMonitor);
HostMonitoringService.monitor();
long _long = null;
System.setCurrentTimeMillis(_long);

Test 41: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
String string = "192.168.0.1";
HostList hostList = new HostList("192.168.0.1");
Host host = new Host("hostname1");
HostMonitoringService.monitor(false, "192.168.0.1");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host("hostname1");
HostMonitoringService.monitor((boolean) host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
String string = "192.168.0.1";
HostMonitoringService.monitor(_boolean, string);
Object object = new Object();
((LinkedList) _void).add(object);
((HostList) string).add(host);
String string = "192.168.0.1";
boolean _boolean = false;
HostMonitoringService.monitor((boolean) string, (String) _boolean);

Test 42: 
HostList hostList = new HostList("192.168.1.1");
String string = "google.com";
Host host = new Host("google.com");
((HostList)"192.168.1.1").addDefault(host);
boolean _boolean = false;
String string = "192.168.1.1";
HostMonitoringService.monitor(_boolean, string);
boolean _boolean = true;
String string = "google.com";
HostMonitoringService.monitor(_boolean, string);
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host(string);
HostMonitoringService.monitor((boolean) host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
boolean _boolean = true;
HostMonitoringService.monitor(_boolean);
Object object = null;
((LinkedList) _boolean).add(object);
String string = "192.168.1.1";
HostList hostList = new HostList(string);
HostMonitoringService.monitor();

Test 43: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("192.168.0.1, 192.168.0.2");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "google.com");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) "192.168.0.1");
HostMonitoringService.monitor((boolean) host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostMonitoringService);


* Minimizing test suite
* test suite isTestSuite: 21
Test 0: 
HostMonitoringService.monitor("server-1");
Test 1: 
HostMonitoringService.monitor(false, (String) null);
Test 2: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostMonitor();
Test 3: 
HostMonitoringService.monitor(true);
Test 4: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(300);
hostMonitoringService.getIntervalInSec();
Test 5: 
HostMonitoringService.getSize();
Test 6: 
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
PingMonitor pingMonitor = new PingMonitor();
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService.add(hostList, (HostMonitor) pingMonitor, (-2316), (List) linkedList);
Test 7: 
HostMonitoringService.remove((HostMonitoringService) null);
Test 8: 
HostMonitoringService.clear();
Test 9: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.add(hostMonitoringService);
Test 10: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getNextCheckOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host("");
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(true);
Object object = new Object();
linkedList.add(object);
hostList.add(host);
HostMonitoringService.monitor();
Test 11: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList("");
HostList hostList = new HostList("");
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, ">e46 C");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(false, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
LinkedList<Object> linkedList = new LinkedList<Object>();
host.setTimeout((-1919));
Host host = new Host("listener was null!");
pingMonitor.monitor(host);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor(false);
Test 12: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getLastCheckedOn();
HostList hostList = new HostList("aufwI>:Ow,@rsA3");
Host host = new Host();
hostList.add(host);
hostMonitoringService.setHostList(hostList);
HostMonitoringService.monitor(false, "aufwI>:Ow,@rsA3");
HostMonitoringService.add(hostMonitoringService);
hostMonitoringService.setIntervalInSec((-1919));
HostMonitoringService.monitor(true, "\"{Sw%Us{i6MJ>b2");
PingMonitor pingMonitor = new PingMonitor();
Host host = new Host((InetAddress) null);
host.setNextCheckOn((Date) null);
pingMonitor.monitor(host);
hostMonitoringService.setHostMonitor(pingMonitor);
host.setNextCheckOn((Date) null);
LinkedList<Object> linkedList = new LinkedList<Object>();
HostMonitoringService hostMonitoringService = new HostMonitoringService();
host.toString();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getHostMonitor();
hostMonitoringService.getHostMonitor();
hostMonitoringService.getListnersList();
hostMonitoringService.setLastCheckedOn((Date) null);
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.monitor();
hostMonitoringService.getIntervalInSec();
hostMonitoringService.setLastCheckedOn((Date) null);
Test 13: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<Object> linkedList = new LinkedList<Object>();
hostMonitoringService.setListnersList(linkedList);
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
Test 14: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.getHostList();
Test 15: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate mockDate = new MockDate(3255);
hostMonitoringService.setNextCheckOn(mockDate);
hostMonitoringService.getNextCheckOn();
Test 16: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = new HostList((String) null);
hostMonitoringService.setHostList(hostList);
hostMonitoringService.getHostList();
Test 17: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-1919));
hostMonitoringService.getIntervalInSec();
Test 18: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener hostStateListener = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
hostMonitoringService.addHostStateListner(hostStateListener);
hostMonitoringService.getListnersList();
Test 19: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> linkedList = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(linkedList);
hostMonitoringService.getListnersList();
Test 20: 
HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitoringService.add(hostMonitoringService);
HostMonitoringService.remove(hostMonitoringService);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 46%
* Total number of goals: 74
* Number of covered goals: 34
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 52%
* Total number of goals: 131
* Number of covered goals: 68
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 77%
* Total number of goals: 22
* Number of covered goals: 17
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 46%
* Total number of goals: 74
* Number of covered goals: 34
* Generated 21 tests with total length 109
* Resulting test suite's coverage: 94% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 38%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor("server-1");

** It was a parseable test case! 
refined test name is: testHostMonitoringServiceMonitorServerSucceeds
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor(false, (String) null);

** It was a parseable test case! 
refined test name is: testMonitorHostFalseNullParams
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostMonitor hostMonitor = hostMonitoringService.getHostMonitor();
assertNull(hostMonitor);


** It was a parseable test case! 
refined test name is: testGetHostMonitorNoHostsBeingMonitoredReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.monitor(true);

** It was a parseable test case! 
refined test name is: testEnableHostMonitoring
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec(300);
int intervalInSec = hostMonitoringService.getIntervalInSec();
assertEquals(300, intervalInSec);


** It was a parseable test case! 
refined test name is: testSetGetIntervalInSec
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int size = HostMonitoringService.getSize();
assertEquals(0, size);


** It was a parseable test case! 
refined test name is: testGetSizeEmptyList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostList arg0 = new HostList("aufwI>:Ow,@rsA3");
PingMonitor arg1 = new PingMonitor();
LinkedList<Object> arg3 = new LinkedList<Object>();
HostMonitoringService.add(arg0, (HostMonitor) arg1, (-2316), (List) arg3);
assertEquals(0, arg3.size());


** It was a parseable test case! 
refined test name is: testAddWithValidArgumentsReturnsEmptyList
* Compiling Tests
refined test name is: testAddWhenGivenValidArgumentsReturnsEmptyList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean remove = HostMonitoringService.remove((HostMonitoringService) null);
assertFalse(remove);


** It was a parseable test case! 
refined test name is: testRemoveWithNullInputReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService.clear();

** It was a parseable test case! 
refined test name is: testClearAllHosts
* Compiling Tests
refined test name is: testClearHostData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService arg0 = new HostMonitoringService();
HostMonitoringService.add(arg0);
HostMonitoringService.add(arg0);
assertEquals(1, arg0.getSize());


** It was a parseable test case! 
refined test name is: testAddHostMonitoringServiceduplicateinstance
* Compiling Tests
refined test name is: testDuplicateHostMonitoringService
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList hostList = hostMonitoringService.getHostList();
assertNull(hostList);


** It was a parseable test case! 
refined test name is: testGetHostListShouldReturnNullWhenNoHostsExist
* Compiling Tests
refined test name is: testGetHostListNoHostsReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
MockDate arg0 = new MockDate(3255);
hostMonitoringService.setNextCheckOn(arg0);
Date nextCheckOn = hostMonitoringService.getNextCheckOn();
assertSame(nextCheckOn, arg0);


** It was a parseable test case! 
refined test name is: testSetNextCheckOnReturnsSameMockDate
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostList arg0 = new HostList((String) null);
hostMonitoringService.setHostList(arg0);
HostList hostList = hostMonitoringService.getHostList();
assertSame(hostList, arg0);


** It was a parseable test case! 
refined test name is: testSetGetHostList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
hostMonitoringService.setIntervalInSec((-1919));
int intervalInSec = hostMonitoringService.getIntervalInSec();
assertEquals((-1919), intervalInSec);


** It was a parseable test case! 
refined test name is: testSetIntervalInSecNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
HostStateListener arg0 = mock(HostStateListener.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(arg0).toString();
hostMonitoringService.addHostStateListner(arg0);
List listnersList = hostMonitoringService.getListnersList();
assertFalse(listnersList.isEmpty());


** It was a parseable test case! 
refined test name is: testAddHostStateListenerShouldReturnNonEmptyList
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService hostMonitoringService = new HostMonitoringService();
LinkedList<HostMonitoringService> arg0 = new LinkedList<HostMonitoringService>();
hostMonitoringService.setListnersList(arg0);
List listnersList = hostMonitoringService.getListnersList();
assertTrue(listnersList.isEmpty());


** It was a parseable test case! 
refined test name is: testGetListenersListIsEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HostMonitoringService arg0 = new HostMonitoringService();
HostMonitoringService.add(arg0);
boolean remove = HostMonitoringService.remove(arg0);
assertTrue(remove);


** It was a parseable test case! 
refined test name is: testAddAndRemoveService
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:07.324 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:07.376 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:07.458 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:07.463 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:07.543 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:07.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
[MASTER] 15:18:07.609 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:07.610 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
* Compiling Tests
[MASTER] 15:18:07.692 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:07.693 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:07.774 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:07.775 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 15:18:07.883 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:07.884 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:07.955 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:07.957 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 15:18:08.024 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:08.025 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 15:18:08.098 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:08.100 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 15:18:08.175 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:08.177 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:08.254 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:08.256 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:08.312 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:08.314 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:08.413 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:08.414 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:08.557 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:08.558 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:08.685 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:08.686 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 15:18:08.796 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:08.797 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 6 called: 0 to improve: false
** Write a test suite: 8 called: 1 to improve: false
** Write a test suite: 9 called: 2 to improve: false
** Write a test suite: 10 called: 3 to improve: false
[MASTER] 15:18:09.159 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:09.160 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 6 called: 0 to improve: false
** Write a test suite: 7 called: 1 to improve: false
** Write a test suite: 8 called: 2 to improve: false
** Write a test suite: 10 called: 3 to improve: false
[MASTER] 15:18:09.501 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar4426516066757346109.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 15:18:09.502 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar4426516066757346109.jar
[MASTER] 15:18:10.058 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
[MASTER] 15:18:12.668 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Computation finished
