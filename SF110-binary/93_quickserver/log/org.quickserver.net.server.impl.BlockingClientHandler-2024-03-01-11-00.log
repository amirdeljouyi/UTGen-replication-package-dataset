* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.server.impl.BlockingClientHandler
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 8312
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 11:00:59.374 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.net.SocketOption
[MASTER] 11:00:59.383 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 11:00:59.385 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 11:00:59.389 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Supplier
[MASTER] 11:00:59.404 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 11:00:59.482 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 11:00:59.482 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 11:00:59.483 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 11:00:59.483 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 11:00:59.483 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 11:00:59.483 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 11:00:59.484 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 11:00:59.484 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 11:00:59.497 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 11:00:59.514 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 11:00:59.537 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 11:00:59.538 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.server.impl.BlockingClientHandler
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
[Progress:>                             0%] [Cov:>                                  0%]* Total number of test goals for DYNAMOSA: 845
* Using seed 1709290853706
* Starting evolution
* Initial Number of Goals in DynaMOSA = 114 / 845
[MASTER] 11:01:01.297 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[Progress:>                             2%] [Cov:========>                          24%][Progress:>                             3%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          13%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:====>                         16%] [Cov:=========>                         28%][Progress:=====>                        17%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        19%] [Cov:=========>                         28%][Progress:=====>                        19%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       20%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       21%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:=========>                         28%][Progress:======>                       22%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:=========>                         28%][Progress:======>                       23%] [Cov:=========>                         28%][Progress:=======>                      24%] [Cov:=========>                         28%][Progress:=======>                      24%] [Cov:=========>                         28%][Progress:=======>                      25%] [Cov:=========>                         28%][Progress:=======>                      25%] [Cov:=========>                         28%][Progress:=======>                      25%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:=======>                      26%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     27%] [Cov:=========>                         28%][Progress:========>                     28%] [Cov:=========>                         28%][Progress:========>                     28%] [Cov:=========>                         28%][Progress:========>                     28%] [Cov:=========>                         28%][Progress:========>                     29%] [Cov:=========>                         28%][Progress:========>                     29%] [Cov:=========>                         28%][Progress:=========>                    30%] [Cov:=========>                         28%][Progress:=========>                    30%] [Cov:=========>                         28%][Progress:=========>                    30%] [Cov:=========>                         28%][Progress:=========>                    30%] [Cov:=========>                         28%][Progress:=========>                    31%] [Cov:=========>                         28%][Progress:=========>                    31%] [Cov:=========>                         28%][Progress:=========>                    31%] [Cov:=========>                         28%][Progress:=========>                    32%] [Cov:=========>                         28%][Progress:=========>                    32%] [Cov:=========>                         28%][Progress:=========>                    33%] [Cov:=========>                         28%][Progress:==========>                   34%] [Cov:=========>                         28%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   35%] [Cov:=========>                         28%][Progress:==========>                   36%] [Cov:=========>                         28%][Progress:===========>                  37%] [Cov:=========>                         28%][Progress:===========>                  37%] [Cov:=========>                         28%][Progress:===========>                  38%] [Cov:=========>                         28%][Progress:===========>                  39%] [Cov:=========>                         28%][Progress:===========>                  39%] [Cov:=========>                         28%][Progress:============>                 40%] [Cov:=========>                         28%][Progress:============>                 41%] [Cov:=========>                         28%][Progress:============>                 41%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 42%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:=========>                         28%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:============>                 43%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:=============>                44%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              50%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              51%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              52%] [Cov:==========>                        30%][Progress:===============>              53%] [Cov:==========>                        30%][Progress:===============>              53%] [Cov:==========>                        30%][Progress:===============>              53%] [Cov:==========>                        30%][Progress:================>             54%] [Cov:==========>                        30%][Progress:================>             54%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             55%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:================>             56%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:=================>            57%] [Cov:==========>                        30%][Progress:==================>           62%] [Cov:==========>                        30%][Progress:====================>         67%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         68%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:====================>         69%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        70%] [Cov:==========>                        30%][Progress:=====================>        71%] [Cov:==========>                        30%][Progress:=====================>        71%] [Cov:==========>                        31%][Progress:=====================>        71%] [Cov:==========>                        31%][Progress:=====================>        72%] [Cov:==========>                        31%][Progress:=====================>        72%] [Cov:==========>                        31%][Progress:=====================>        73%] [Cov:==========>                        31%][Progress:=======================>      78%] [Cov:==========>                        31%][Progress:========================>     83%] [Cov:==========>                        31%][Progress:=========================>    84%] [Cov:==========>                        31%][Progress:=========================>    85%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:=========================>    86%] [Cov:==========>                        31%][Progress:==========================>   87%] [Cov:==========>                        31%][Progress:==========================>   87%] [Cov:==========>                        31%][Progress:==========================>   87%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   88%] [Cov:==========>                        31%][Progress:==========================>   89%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  90%] [Cov:==========>                        31%][Progress:===========================>  91%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  92%] [Cov:==========>                        31%][Progress:===========================>  93%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 94%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 95%] [Cov:==========>                        31%][Progress:============================> 96%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>97%] [Cov:===========>                       32%][Progress:=============================>98%] [Cov:===========>                       32%][Progress:=============================>98%] [Cov:===========>                       32%][Progress:=============================>99%] [Cov:===========>                       32%][Progress:==============================100%] [Cov:===========>                       32%][Progress:==============================100%] [Cov:===========>                       32%][Progress:==============================100%] [Cov:===========>                       32%][Progress:==============================100%] [Cov:===========>                       32%]
* Search finished after 102s and 181 generations, 36273 statements, best individual has fitness: 679.0
* Generated before the refinement 24 tests with total length 60
statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-1))
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: org.evosuite.testcase.statements.FieldStatement@fdb0d496 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.OBJECT
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setDataMode(arg0, arg1)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-1));
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.OBJECT;
blockingClientHandler.setDataMode(dataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(-1);
        DataType dataType = DataType.OUT;
        DataMode dataMode = DataMode.OBJECT;
        blockingClientHandler.setDataMode(dataMode, dataType);
        // Changed the integer value -1 to a more descriptive example of a negative number that is not zero.
        blockingClientHandler.setDataMode(dataMode, dataType);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(-1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataType dataType = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: DataMode dataMode = DataMode.OBJECT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.OBJECT is DataMode
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.OBJECT DataMode OBJECT
statement is: blockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setDataMode(dataMode, dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
statement is: // Changed the integer value -1 to a more descriptive example of a negative number that is not zero.
blockingClientHandler.setDataMode(dataMode, dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed the integer value -1 to a more descriptive example of a negative number that is not zero.
blockingClientHandler.setDataMode(dataMode, dataType) target is: blockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-1));
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.OBJECT;
blockingClientHandler.setDataMode(dataMode, dataType);
blockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getSelectionKey()Ljava/nio/channels/SelectionKey; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SelectionKey
statement code is: SelectionKey selectionKey = blockingClientHandler.getSelectionKey()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSelectionKey();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test with a specific port number
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(9000);
        blockingClientHandler.getSelectionKey();
        // Test with a meaningful string value
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler("example.com");
        blockingClientHandler.getSelectionKey();
    }
}
statement is: // Test with a specific port number
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(9000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getSelectionKey(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getSelectionKey() target is: blockingClientHandler method is: getSelectionKey()
statement is: // Test with a meaningful string value
BlockingClientHandler blockingClientHandler = new BlockingClientHandler("example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getSelectionKey(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getSelectionKey() target is: blockingClientHandler method is: getSelectionKey()
statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0)
statement is: finalize()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.finalize()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.finalize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(10);
        blockingClientHandler.finalize();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.finalize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.finalize() target is: blockingClientHandler method is: finalize()
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: finalize()V
TestCase is: int _int = 10;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
((BlockingClientHandler) _int).finalize();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getSocketChannel()Ljava/nio/channels/SocketChannel; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SocketChannel
statement code is: SocketChannel socketChannel = blockingClientHandler.getSocketChannel()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSocketChannel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setSocketChannel(new SocketChannel());
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setSocketChannel(new SocketChannel()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSocketChannel(new SocketChannel()) target is: blockingClientHandler method is: setSocketChannel(SocketChannel)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: registerForWrite()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.registerForWrite()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.registerForWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        blockingClientHandler.sendMessage(message);
    }
}
statement is: blockingClientHandler.sendMessage(message), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.sendMessage(message) target is: blockingClientHandler method is: sendMessage()
statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getBufferedReader()Ljava/io/BufferedReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.BufferedReader
statement code is: BufferedReader bufferedReader = blockingClientHandler.getBufferedReader()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBufferedReader();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.getBufferedReader();
        // Test data:
        String expectedResponse = "Welcome to the server!";
        String inputMessage = "Hello, server!";
        // Improved test data:
        String expectedResponse = "Welcome to the server! Your request has been received and is being processed.";
        String inputMessage = "Hello, server! I would like to order a breakfast sandwich with scrambled eggs and bacon, could you please let me know if it's available?";
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getBufferedReader(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getBufferedReader() target is: blockingClientHandler method is: getBufferedReader()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: getBufferedReader()Ljava/io/BufferedReader;
statement is: // Test data:
String expectedResponse = "Welcome to the server!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String inputMessage = "Hello, server!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Improved test data:
String expectedResponse = "Welcome to the server! Your request has been received and is being processed.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String inputMessage = "Hello, server! I would like to order a breakfast sandwich with scrambled eggs and bacon, could you please let me know if it's available?", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "Welcome to the server!"
* this is vulnerable: String string = "Hello, server!"
* this is vulnerable: String string = "Welcome to the server! Your request has been received and is being processed."
* this is vulnerable: String string = "Hello, server! I would like to order a breakfast sandwich with scrambled eggs and bacon, could you please let me know if it's available?"
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBufferedReader();
String string = "Welcome to the server!";
String string = "Hello, server!";
String string = "Welcome to the server! Your request has been received and is being processed.";
String string = "Hello, server! I would like to order a breakfast sandwich with scrambled eggs and bacon, could you please let me know if it's available?";

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setClientWriteHandler(new ClientWriteHandler() {
            @Override
            public void write(byte[] buffer, int offset, int length) {
                // Write some data to the client
                System.out.println("Writing to the client...");
            }
        });
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setClientWriteHandler(new ClientWriteHandler() {
    @Override
    public void write(byte[] buffer, int offset, int length) {
        // Write some data to the client
        System.out.println("Writing to the client...");
    }
}), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setClientWriteHandler(new ClientWriteHandler() {
    @Override
    public void write(byte[] buffer, int offset, int length) {
        // Write some data to the client
        System.out.println("Writing to the client...");
    }
}) target is: blockingClientHandler method is: setClientWriteHandler(DummyClass$1)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientWriteHandler clientWriteHandler = null;
blockingClientHandler.setClientWriteHandler(clientWriteHandler);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: readInputStream()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] readInputStream = blockingClientHandler.readInputStream()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.readInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(10, "TestString");
        blockingClientHandler.readInputStream("This is a test string.");
    }
}
statement is: // Improved test data
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(10, "TestString"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.readInputStream("This is a test string."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.readInputStream("This is a test string.") target is: blockingClientHandler method is: readInputStream(java.lang.String)
statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: registerForRead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.registerForRead()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.registerForRead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int socketTimeoutMillis = 1000;
        String hostname = "www.example.com";
        int port = 80;
        boolean useTLS = true;
        // Original test data
        int socketTimeoutMillis = 5000;
        String hostname = "localhost";
        int port = 8080;
        boolean useTLS = false;
    }
}
statement is: // Improved test data
int socketTimeoutMillis = 1000, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostname = "www.example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int port = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean useTLS = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Original test data
int socketTimeoutMillis = 5000, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostname = "localhost", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int port = 8080, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean useTLS = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1000
* this is vulnerable: String string = "www.example.com"
* this is vulnerable: int _int = 80
* this is vulnerable: boolean _boolean = true
* this is vulnerable: int _int = 5000
* this is vulnerable: String string = "localhost"
* this is vulnerable: int _int = 8080
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 1000;
String string = "www.example.com";
int _int = 80;
boolean _boolean = true;
int _int = 5000;
String string = "localhost";
int _int = 8080;
boolean _boolean = false;

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@9b8613bc type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.ClientEvent
statement code is: ClientEvent clientEvent = ClientEvent.WRITE
statement is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.addEvent(arg0)
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.run()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        ClientEvent clientEvent = ClientEvent.READ;
        blockingClientHandler.addEvent(clientEvent);
        blockingClientHandler.run();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientEvent clientEvent = ClientEvent.READ, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ClientEvent.READ is ClientEvent
CtField is: public static org.quickserver.net.server.ClientEvent org.quickserver.net.server.ClientEvent.WRITE ClientEvent WRITE
statement is: blockingClientHandler.addEvent(clientEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.addEvent(clientEvent) target is: blockingClientHandler method is: addEvent(ClientEvent)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V
statement is: blockingClientHandler.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.run() target is: blockingClientHandler method is: run()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: run()V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setSelectionKey((SelectionKey) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSelectionKey((SelectionKey) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setSelectionKey(OP_CONNECT);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setSelectionKey(OP_CONNECT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSelectionKey(OP_CONNECT) target is: blockingClientHandler method is: setSelectionKey()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
SelectionKey selectionKey = null;
blockingClientHandler.setSelectionKey(selectionKey);

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0)
statement is: getBlockingMode()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean blockingMode = blockingClientHandler.getBlockingMode()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.getBlockingMode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1000);
        blockingClientHandler.getBlockingMode();
    }
}
statement is: // Improved test data:
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getBlockingMode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getBlockingMode() target is: blockingClientHandler method is: getBlockingMode()
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: getBlockingMode()Z
TestCase is: int _int = 1000;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
((BlockingClientHandler) _int).getBlockingMode();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setSocketChannel((SocketChannel) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSocketChannel((SocketChannel) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setSocketChannel(SocketChannel.open());
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setSocketChannel(SocketChannel.open()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSocketChannel(SocketChannel.open()) target is: blockingClientHandler method is: setSocketChannel()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
SocketChannel socketChannel = null;
blockingClientHandler.setSocketChannel(socketChannel);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: updateInputOutputStreams()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.updateInputOutputStreams()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.updateInputOutputStreams();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.updateInputOutputStreams();
        // Improved test data:
        // The input and output streams are now more descriptive and representative of the situation being tested.
        blockingClientHandler.setInputStream(new ByteArrayInputStream("Sample Input".getBytes()));
        blockingClientHandler.setOutputStream(new ByteArrayOutputStream());
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.updateInputOutputStreams(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.updateInputOutputStreams() target is: blockingClientHandler method is: updateInputOutputStreams()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: updateInputOutputStreams()V
statement is: // Improved test data:
// The input and output streams are now more descriptive and representative of the situation being tested.
blockingClientHandler.setInputStream(new ByteArrayInputStream("Sample Input".getBytes())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
// The input and output streams are now more descriptive and representative of the situation being tested.
blockingClientHandler.setInputStream(new ByteArrayInputStream("Sample Input".getBytes())) target is: blockingClientHandler method is: setInputStream(ByteArrayInputStream)
statement is: blockingClientHandler.setOutputStream(new ByteArrayOutputStream()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setOutputStream(new ByteArrayOutputStream()) target is: blockingClientHandler method is: setOutputStream(ByteArrayOutputStream)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.updateInputOutputStreams();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setInputStream((InputStream) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, World!".getBytes()));
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, World!".getBytes())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, World!".getBytes())) target is: blockingClientHandler method is: setInputStream(ByteArrayInputStream)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setInputStream(Ljava/io/InputStream;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ObjectInputStream objectInputStream = null;
blockingClientHandler.setInputStream(objectInputStream);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.AssignmentStatement@e6b2aeac type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: blockingClientHandler.connection = true
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.closeConnection()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data for a successful connection
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.connection = true;
        // Test data for a failed connection
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.connection = false;
    }
}
statement is: // Test data for a successful connection
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.connection = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: // Test data for a failed connection
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.connection = false, class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.closeConnection()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int portNumber = 8080;
        String serverHost = "localhost";
        String requestMethod = "GET";
        String requestUri = "/some/resource";
        String requestBody = null;
        Map<String, List<String>> requestHeaders = new HashMap<>();
        requestHeaders.put("Content-Type", Collections.singletonList("application/json"));
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.closeConnection(portNumber, serverHost, requestMethod, requestUri, requestBody, requestHeaders);
    }
}
statement is: // Improved test data
int portNumber = 8080, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String serverHost = "localhost", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String requestMethod = "GET", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String requestUri = "/some/resource", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String requestBody = null, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Map<String, List<String>> requestHeaders = new HashMap<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: requestHeaders.put("Content-Type", Collections.singletonList("application/json")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: requestHeaders.put("Content-Type", Collections.singletonList("application/json")) target is: requestHeaders method is: put(java.lang.String)
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.closeConnection(portNumber, serverHost, requestMethod, requestUri, requestBody, requestHeaders), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.closeConnection(portNumber, serverHost, requestMethod, requestUri, requestBody, requestHeaders) target is: blockingClientHandler method is: closeConnection(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,Map)
* this is vulnerable: int _int = 8080
* this is vulnerable: String string = "localhost"
* this is vulnerable: String string = "GET"
* this is vulnerable: String string = "/some/resource"
TestCase is: int _int = 8080;
String string = "localhost";
String string = "GET";
String string = "/some/resource";
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.quickserver.net.qsadmin.CommandHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.qsadmin.CommandHandler
statement code is: CommandHandler commandHandler = new CommandHandler()
statement is: org.evosuite.testcase.statements.AssignmentStatement@89aa5825 type is: class org.evosuite.testcase.statements.AssignmentStatement return type interface org.quickserver.net.server.ClientEventHandler
statement code is: blockingClientHandler.clientEventHandler = (ClientEventHandler) commandHandler
statement is: org.evosuite.testcase.statements.AssignmentStatement@8c4de265 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: blockingClientHandler.connection = true
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.closeConnection()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.clientEventHandler = (ClientEventHandler) commandHandler;
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        CommandHandler commandHandler = new CommandHandler();
        blockingClientHandler.clientEventHandler = ((ClientEventHandler) (commandHandler));
        blockingClientHandler.connection = true;
        blockingClientHandler.closeConnection();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CommandHandler commandHandler = new CommandHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.clientEventHandler = ((ClientEventHandler) (commandHandler)), class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.connection = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.closeConnection(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.closeConnection() target is: blockingClientHandler method is: closeConnection()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: closeConnection()V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.closeConnection();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.run()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.run();
        // Replace the primitive values and Strings with more illustrative examples
        int portNumber = 80;
        String hostname = "www.example.com";
        blockingClientHandler.setPort(portNumber);
        blockingClientHandler.setHostname(hostname);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.run() target is: blockingClientHandler method is: run()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: run()V
statement is: // Replace the primitive values and Strings with more illustrative examples
int portNumber = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostname = "www.example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: blockingClientHandler.setPort(portNumber), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setPort(portNumber) target is: blockingClientHandler method is: setPort(int)
statement is: blockingClientHandler.setHostname(hostname), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setHostname(hostname) target is: blockingClientHandler method is: setHostname(java.lang.String)
* this is vulnerable: int _int = 80
* this is vulnerable: String string = "www.example.com"
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.run();
int _int = 80;
String string = "www.example.com";

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setDataMode((DataMode) null, arg1)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: clean()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.clean()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.clean();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.clean();
        // Improved test data:
        int port = 8080;// This is the default port for most web servers, so it's a good choice for our example.

        String hostname = "localhost";// This is the standard hostname for a local development server. }}

    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.clean(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.clean() target is: blockingClientHandler method is: clean()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: clean()V
statement is: // Improved test data:
int port = 8080// This is the default port for most web servers, so it's a good choice for our example.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostname = "localhost"// This is the standard hostname for a local development server. }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 8080
* this is vulnerable: String string = "localhost"
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.clean();
int _int = 8080;
String string = "localhost";

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: checkReturnClientHandler()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean checkReturnClientHandler = blockingClientHandler.checkReturnClientHandler()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.checkReturnClientHandler();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler("example.com", 80, false);
        blockingClientHandler.checkReturnClientHandler();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler("example.com", 80, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.checkReturnClientHandler(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.checkReturnClientHandler() target is: blockingClientHandler method is: checkReturnClientHandler()
statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: org.quickserver.net.server.QuickServer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer("")
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.handleClient(arg0)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("");
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        TheClient theClient = new TheClient("localhost", 8080);
        QuickServer quickServer = new QuickServer("localhost");
        theClient.setServer(quickServer);
        blockingClientHandler.handleClient(theClient);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient("localhost", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: QuickServer quickServer = new QuickServer("localhost"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
statement is: blockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleClient(theClient) target is: blockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
String string = "localhost";
QuickServer quickServer = new QuickServer(string);
TheClient theClient = null;
blockingClientHandler.handleClient(theClient);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: returnClientHandler()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.returnClientHandler()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setConnectionTimeout(10);
        blockingClientHandler.setRequestTimeout(20);
        blockingClientHandler.setMaxConnectionsPerHost(5);
        blockingClientHandler.setSocketBufferSize(8192);
        String url = "http://www.example.com";
        HttpMethod method = HttpMethod.GET;
        String payload = "";
        blockingClientHandler.handleRequest(url, method, payload);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setConnectionTimeout(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setConnectionTimeout(10) target is: blockingClientHandler method is: setConnectionTimeout(int)
statement is: blockingClientHandler.setRequestTimeout(20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setRequestTimeout(20) target is: blockingClientHandler method is: setRequestTimeout(int)
statement is: blockingClientHandler.setMaxConnectionsPerHost(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setMaxConnectionsPerHost(5) target is: blockingClientHandler method is: setMaxConnectionsPerHost(int)
statement is: blockingClientHandler.setSocketBufferSize(8192), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSocketBufferSize(8192) target is: blockingClientHandler method is: setSocketBufferSize(int)
statement is: String url = "http://www.example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: HttpMethod method = HttpMethod.GET, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: HttpMethod.GET is HttpMethod
statement is: String payload = "", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: blockingClientHandler.handleRequest(url, method, payload), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.handleRequest(url, method, payload) target is: blockingClientHandler method is: handleRequest(java.lang.String,HttpMethod,java.lang.String)
* this is vulnerable: String string = "http://www.example.com"
* this is vulnerable: String string = ""
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
String string = "http://www.example.com";
String string = "";

* test suite isTestSuite: 43
Test 0: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-1));
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.OBJECT;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 1: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSelectionKey();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 2: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.finalize();
Test 3: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSocketChannel();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 4: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 5: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBufferedReader();
Test 6: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 7: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
try { 
  blockingClientHandler.readInputStream();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // InputStream can't be null!
   //
   verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
}

Test 8: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.registerForRead();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 9: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();
Test 10: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSelectionKey((SelectionKey) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 11: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.getBlockingMode();
Test 12: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSocketChannel((SocketChannel) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 13: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 14: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);
Test 15: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 16: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();
Test 17: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.clientEventHandler = (ClientEventHandler) commandHandler;
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 18: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.run();
Test 19: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, dataType);
Test 20: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.clean();
Test 21: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.checkReturnClientHandler();
Test 22: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("");
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
Test 23: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();
Test 24: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-1));
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.OBJECT;
blockingClientHandler.setDataMode(dataMode, dataType);
blockingClientHandler.setDataMode(dataMode, dataType);

Test 25: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(10);
((BlockingClientHandler)10).finalize();

Test 26: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

Test 27: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBufferedReader();

Test 28: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);

Test 29: 

Test 30: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();

Test 31: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSelectionKey((SelectionKey) null);

Test 32: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1000);
((BlockingClientHandler)1000).getBlockingMode();

Test 33: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSocketChannel((SocketChannel) null);

Test 34: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.updateInputOutputStreams();

Test 35: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);

Test 36: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

Test 37: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

Test 38: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.closeConnection();

Test 39: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.run();

Test 40: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.clean();

Test 41: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("localhost");
blockingClientHandler.handleClient((TheClient) null);

Test 42: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();


* Generated after the refinement and before minimization 43 tests with total length 100
* test suite isTestSuite: 43
Test 0: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-1));
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.OBJECT;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 1: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSelectionKey();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 2: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.finalize();
Test 3: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSocketChannel();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 4: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 5: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBufferedReader();
Test 6: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 7: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
try { 
  blockingClientHandler.readInputStream();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // InputStream can't be null!
   //
   verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
}

Test 8: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.registerForRead();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 9: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();
Test 10: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSelectionKey((SelectionKey) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 11: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.getBlockingMode();
Test 12: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSocketChannel((SocketChannel) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 13: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 14: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);
Test 15: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 16: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();
Test 17: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.clientEventHandler = (ClientEventHandler) commandHandler;
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 18: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.run();
Test 19: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, dataType);
Test 20: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.clean();
Test 21: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.checkReturnClientHandler();
Test 22: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("");
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
Test 23: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();
Test 24: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-1));
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.OBJECT;
blockingClientHandler.setDataMode(dataMode, dataType);
blockingClientHandler.setDataMode(dataMode, dataType);

Test 25: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(10);
((BlockingClientHandler)10).finalize();

Test 26: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

Test 27: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBufferedReader();

Test 28: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);

Test 29: 

Test 30: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();

Test 31: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSelectionKey((SelectionKey) null);

Test 32: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1000);
((BlockingClientHandler)1000).getBlockingMode();

Test 33: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSocketChannel((SocketChannel) null);

Test 34: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.updateInputOutputStreams();

Test 35: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);

Test 36: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

Test 37: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

Test 38: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.closeConnection();

Test 39: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.run();

Test 40: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.clean();

Test 41: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
QuickServer quickServer = new QuickServer("localhost");
blockingClientHandler.handleClient((TheClient) null);

Test 42: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();


* Minimizing test suite
* test suite isTestSuite: 24
Test 0: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSelectionKey();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 1: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.finalize();
Test 2: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSocketChannel();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 3: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 4: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBufferedReader();
Test 5: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 6: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
try { 
  blockingClientHandler.readInputStream();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // InputStream can't be null!
   //
   verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
}

Test 7: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.registerForRead();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 8: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();
Test 9: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSelectionKey((SelectionKey) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 10: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.getBlockingMode();
Test 11: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSocketChannel((SocketChannel) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 12: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 13: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);
Test 14: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 15: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();
Test 16: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.clientEventHandler = (ClientEventHandler) commandHandler;
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
Test 17: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.run();
Test 18: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-1));
DataType dataType = DataType.OUT;
DataMode dataMode = DataMode.OBJECT;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}

Test 19: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataType dataType = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, dataType);
Test 20: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.clean();
Test 21: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.checkReturnClientHandler();
Test 22: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("");
theClient.setServer(quickServer);
blockingClientHandler.handleClient(theClient);
Test 23: 
BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 16%
* Total number of goals: 228
* Number of covered goals: 36
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 21%
* Total number of goals: 327
* Number of covered goals: 70
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 8%
* Total number of goals: 40
* Number of covered goals: 3
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 16%
* Total number of goals: 228
* Number of covered goals: 36
* Generated 24 tests with total length 60
* Resulting test suite's coverage: 32% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 25%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSelectionKey();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testGetSelectionKeyInBlockingMode
* Compiling Tests
refined test name is: testGetSelectionKeyThrowsExceptionInBlockingMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.finalize();
assertEquals("<ClientHandler-Pool#0-ID:1>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testBlockingClientHandlerFinalizeName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.getSocketChannel();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't get in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testGetSocketChannelInNonBlockingMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testRegisterForWriteFailsInBlockingMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
BufferedReader bufferedReader = blockingClientHandler.getBufferedReader();
assertNull(bufferedReader);


** It was a parseable test case! 
refined test name is: testGetBufferedReaderWithNullBufferedReader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testSetClientWriteHandlerToNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
try { 
  blockingClientHandler.readInputStream();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // InputStream can't be null!
   //
   verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testNullInputStreamThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.registerForRead();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't register in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testRegisterForReadBlockingMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent arg0 = ClientEvent.WRITE;
blockingClientHandler.addEvent(arg0);
blockingClientHandler.run();
assertTrue(blockingClientHandler.getWillClean());


** It was a parseable test case! 
refined test name is: testAddEventShouldSetWillCleanPropertyToTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSelectionKey((SelectionKey) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testSetSelectionKeyNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
boolean blockingMode = blockingClientHandler.getBlockingMode();
assertTrue(blockingMode);


** It was a parseable test case! 
refined test name is: testGetBlockingModeshouldReturnTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.setSocketChannel((SocketChannel) null);
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Can't set in blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testSetSocketChannelnullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
// Undeclared exception!
try { 
  blockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testUpdateInputOutputStreamsNullStreams
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setInputStream((InputStream) null);
assertEquals("<ClientHandler-Pool#-1-ID:25>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testNameOfHandlerWhenInputStreamIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
assertEquals("<ClientHandler-Pool#-1-ID:31>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testCloseConnectionSetsNameToNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();
assertEquals("<ClientHandler-Pool#-1-ID:42>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testCloseConnectionShouldSetNameToNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
CommandHandler commandHandler = new CommandHandler();
blockingClientHandler.clientEventHandler = (ClientEventHandler) commandHandler;
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();
assertEquals("<ClientHandler-Pool#-1-ID:51>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testCloseConnectionShouldCloseConnectionAndSetName
* Compiling Tests
refined test name is: testCloseConnection
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.run();
assertEquals("<ClientHandler-Pool#-1-ID:64>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testBlockingClientHandlerName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler((-1));
DataType arg1 = DataType.OUT;
DataMode arg0 = DataMode.OBJECT;
// Undeclared exception!
try { 
  blockingClientHandler.setDataMode(arg0, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testSetDataModeNullDataModeThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataType arg1 = DataType.OUT;
blockingClientHandler.setDataMode((DataMode) null, arg1);
assertEquals("<ClientHandler-Pool#-1-ID:81>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testSetDataModeNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.clean();
assertEquals("<ClientHandler-Pool#-1-ID:85>", blockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testCleanMethodUpdatesName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
boolean checkReturnClientHandler = blockingClientHandler.checkReturnClientHandler();
assertTrue(checkReturnClientHandler);


** It was a parseable test case! 
refined test name is: testCheckReturnClientHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.returnClientHandler();
assertEquals(0, blockingClientHandler.getTimeout());


** It was a parseable test case! 
refined test name is: testGetTimeoutReturnsDefaultValue
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:07:21.129 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:21.392 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:23.185 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:07:23.213 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
* Compiling Tests
[MASTER] 11:07:24.353 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:07:24.373 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
* Compiling Tests
[MASTER] 11:07:25.473 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:07:25.493 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
* Compiling Tests
[MASTER] 11:07:26.569 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:07:26.589 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:27.697 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:07:27.717 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:28.817 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:07:28.837 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:07:29.661 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:07:29.663 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
* Compiling Tests
[MASTER] 11:07:29.773 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:07:29.775 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:29.852 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:29.869 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:29.977 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:07:29.979 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
* Compiling Tests
[MASTER] 11:07:30.124 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:30.125 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:30.331 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:07:30.334 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
* Compiling Tests
[MASTER] 11:07:30.466 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:30.468 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:30.549 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:30.551 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:30.641 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:07:30.647 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:30.761 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:30.763 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:30.850 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:30.852 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:30.955 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:30.957 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:31.063 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:31.082 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:31.171 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:07:31.175 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
* Compiling Tests
[MASTER] 11:07:31.266 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:31.268 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
[MASTER] 11:07:31.375 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:07:31.385 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 16 called: 1 to improve: false
[MASTER] 11:07:31.673 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:07:31.678 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 6 called: 0 to improve: false
** Write a test suite: 22 called: 1 to improve: false
[MASTER] 11:07:32.010 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/tmp/EvoSuite_pathingJar2367855060391459882.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:07:32.014 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2367855060391459882.jar
* Writing tests to file
* Writing JUnit test case 'BlockingClientHandler_ESTest' to evosuite-tests
** Write a test suite: 6 called: 0 to improve: false
** Write a test suite: 22 called: 1 to improve: false
* Done!

* Computation finished
