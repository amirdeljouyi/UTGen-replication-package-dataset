* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.server.impl.BlockingClientHandler
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 5505
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 22:32:08.500 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.net.SocketOption
[MASTER] 22:32:08.531 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 22:32:08.534 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 22:32:08.560 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Supplier
[MASTER] 22:32:08.628 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 22:32:08.767 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 22:32:08.768 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 22:32:08.783 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 22:32:08.783 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 22:32:08.785 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 22:32:08.785 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 22:32:08.786 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 22:32:08.788 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 22:32:08.802 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 22:32:08.850 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 22:32:08.890 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 22:32:08.897 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.server.impl.BlockingClientHandler
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 845
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1710455518623
* Starting evolution
* Initial Number of Goals in DynaMOSA = 114 / 845
[Progress:>                             0%] [Cov:========>                          23%][Progress:>                             0%] [Cov:=========>                         26%][Progress:>                             1%] [Cov:=========>                         26%][MASTER] 22:32:12.308 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[Progress:>                             2%] [Cov:=========>                         27%][Progress:>                             2%] [Cov:=========>                         27%][Progress:>                             2%] [Cov:=========>                         27%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:=========>                         28%][Progress:===>                          12%] [Cov:==========>                        30%][Progress:===>                          12%] [Cov:==========>                        30%][Progress:===>                          12%] [Cov:==========>                        30%][Progress:===>                          13%] [Cov:==========>                        30%][Progress:===>                          13%] [Cov:==========>                        30%][Progress:===>                          13%] [Cov:==========>                        30%][Progress:===>                          13%] [Cov:==========>                        30%][Progress:====>                         14%] [Cov:==========>                        30%][Progress:====>                         14%] [Cov:==========>                        30%][Progress:====>                         14%] [Cov:==========>                        30%][Progress:====>                         14%] [Cov:==========>                        30%][Progress:====>                         14%] [Cov:==========>                        30%][Progress:====>                         15%] [Cov:==========>                        30%][Progress:====>                         15%] [Cov:==========>                        30%][Progress:====>                         15%] [Cov:==========>                        30%][Progress:====>                         15%] [Cov:==========>                        30%][Progress:====>                         15%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:====>                         16%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        17%] [Cov:==========>                        30%][Progress:=====>                        18%] [Cov:==========>                        31%][Progress:=====>                        18%] [Cov:==========>                        31%][Progress:=====>                        18%] [Cov:==========>                        31%][Progress:=====>                        18%] [Cov:==========>                        31%][Progress:=====>                        19%] [Cov:==========>                        31%][Progress:=====>                        19%] [Cov:==========>                        31%][Progress:=====>                        19%] [Cov:==========>                        31%][Progress:=====>                        19%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       21%] [Cov:==========>                        31%][Progress:======>                       21%] [Cov:==========>                        31%][Progress:======>                       21%] [Cov:==========>                        31%][Progress:======>                       21%] [Cov:==========>                        31%][Progress:======>                       21%] [Cov:==========>                        31%][Progress:======>                       22%] [Cov:==========>                        31%][Progress:======>                       22%] [Cov:==========>                        31%][Progress:======>                       22%] [Cov:==========>                        31%][Progress:======>                       22%] [Cov:==========>                        31%][Progress:======>                       22%] [Cov:==========>                        31%][Progress:======>                       23%] [Cov:==========>                        31%][Progress:======>                       23%] [Cov:==========>                        31%][Progress:======>                       23%] [Cov:==========>                        31%][Progress:======>                       23%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      24%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      25%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:=======>                      26%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     27%] [Cov:==========>                        31%][Progress:========>                     28%] [Cov:==========>                        31%][Progress:========>                     28%] [Cov:==========>                        31%][Progress:========>                     28%] [Cov:==========>                        31%][Progress:========>                     28%] [Cov:==========>                        31%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    31%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:=============>                44%] [Cov:===========>                       32%][Progress:=============>                44%] [Cov:===========>                       32%][Progress:=============>                44%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               47%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               48%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       33%][Progress:===============>              52%] [Cov:===========>                       33%][Progress:===============>              52%] [Cov:===========>                       33%][Progress:===============>              52%] [Cov:===========>                       33%][Progress:===============>              52%] [Cov:===========>                       33%][Progress:===============>              53%] [Cov:===========>                       33%][Progress:===============>              53%] [Cov:===========>                       33%][Progress:===============>              53%] [Cov:===========>                       33%][Progress:===============>              53%] [Cov:===========>                       33%][Progress:================>             54%] [Cov:===========>                       33%][Progress:================>             54%] [Cov:===========>                       33%][Progress:================>             54%] [Cov:===========>                       33%][Progress:================>             54%] [Cov:===========>                       33%][Progress:================>             54%] [Cov:===========>                       33%][Progress:================>             55%] [Cov:===========>                       33%][Progress:================>             55%] [Cov:===========>                       33%][Progress:================>             55%] [Cov:===========>                       33%][Progress:================>             55%] [Cov:============>                      36%][Progress:================>             55%] [Cov:============>                      36%][Progress:================>             55%] [Cov:============>                      36%][Progress:================>             56%] [Cov:============>                      36%][Progress:================>             56%] [Cov:============>                      36%][Progress:================>             56%] [Cov:============>                      36%][Progress:================>             56%] [Cov:============>                      36%][Progress:================>             56%] [Cov:============>                      36%][Progress:================>             56%] [Cov:============>                      36%][Progress:================>             56%] [Cov:============>                      36%][Progress:=================>            57%] [Cov:============>                      36%][Progress:=================>            57%] [Cov:============>                      36%][Progress:=================>            57%] [Cov:============>                      36%][Progress:=================>            57%] [Cov:============>                      36%][Progress:=================>            57%] [Cov:============>                      36%][Progress:=================>            58%] [Cov:============>                      36%][Progress:=================>            58%] [Cov:============>                      36%][Progress:=================>            58%] [Cov:============>                      36%][Progress:=================>            58%] [Cov:============>                      36%][Progress:==================>           60%] [Cov:============>                      36%][Progress:==================>           61%] [Cov:============>                      36%][Progress:==================>           61%] [Cov:============>                      36%][Progress:==================>           61%] [Cov:============>                      36%][Progress:==================>           61%] [Cov:============>                      36%][Progress:==================>           61%] [Cov:============>                      36%][Progress:==================>           62%] [Cov:============>                      36%][Progress:==================>           62%] [Cov:============>                      36%][Progress:==================>           62%] [Cov:============>                      36%][Progress:==================>           63%] [Cov:============>                      36%][Progress:===================>          66%] [Cov:============>                      36%][Progress:===================>          66%] [Cov:============>                      36%][Progress:===================>          66%] [Cov:============>                      36%][Progress:===================>          66%] [Cov:============>                      36%][Progress:===================>          66%] [Cov:============>                      36%][Progress:====================>         67%] [Cov:============>                      36%][Progress:====================>         67%] [Cov:============>                      36%][Progress:====================>         67%] [Cov:============>                      36%][Progress:====================>         67%] [Cov:============>                      36%][Progress:====================>         67%] [Cov:============>                      36%][Progress:====================>         67%] [Cov:============>                      36%][Progress:====================>         67%] [Cov:============>                      36%][Progress:====================>         67%] [Cov:============>                      36%][Progress:====================>         67%] [Cov:============>                      36%][Progress:====================>         68%] [Cov:============>                      37%][Progress:====================>         68%] [Cov:============>                      37%][Progress:====================>         68%] [Cov:============>                      37%][Progress:====================>         68%] [Cov:============>                      37%][Progress:====================>         68%] [Cov:============>                      37%][Progress:====================>         68%] [Cov:============>                      37%][Progress:====================>         68%] [Cov:============>                      37%][Progress:====================>         69%] [Cov:============>                      37%][Progress:====================>         69%] [Cov:============>                      37%][Progress:====================>         69%] [Cov:=============>                     38%][Progress:=====================>        71%] [Cov:=============>                     38%][Progress:=====================>        72%] [Cov:=============>                     38%][Progress:=====================>        72%] [Cov:=============>                     38%][Progress:=====================>        72%] [Cov:=============>                     38%][Progress:=====================>        72%] [Cov:=============>                     38%][Progress:=====================>        72%] [Cov:=============>                     38%][Progress:=====================>        72%] [Cov:=============>                     38%][Progress:=====================>        73%] [Cov:=============>                     39%][Progress:=====================>        73%] [Cov:=============>                     39%][Progress:=====================>        73%] [Cov:=============>                     39%][Progress:=====================>        73%] [Cov:=============>                     39%][Progress:=====================>        73%] [Cov:=============>                     39%][Progress:======================>       74%] [Cov:=============>                     39%][Progress:======================>       74%] [Cov:=============>                     39%][Progress:======================>       74%] [Cov:=============>                     39%][Progress:======================>       74%] [Cov:=============>                     39%][Progress:======================>       74%] [Cov:=============>                     39%][Progress:======================>       74%] [Cov:=============>                     39%][Progress:======================>       75%] [Cov:=============>                     39%][Progress:======================>       75%] [Cov:=============>                     39%][Progress:=======================>      77%] [Cov:=============>                     39%][Progress:=======================>      78%] [Cov:=============>                     39%][Progress:=======================>      78%] [Cov:=============>                     39%][Progress:=======================>      78%] [Cov:=============>                     39%][Progress:=======================>      78%] [Cov:=============>                     39%][Progress:=======================>      78%] [Cov:=============>                     39%][Progress:=======================>      78%] [Cov:=============>                     39%][Progress:=======================>      78%] [Cov:=============>                     39%][Progress:=======================>      79%] [Cov:=============>                     39%][Progress:=======================>      79%] [Cov:=============>                     39%][Progress:=======================>      79%] [Cov:=============>                     39%][Progress:=======================>      79%] [Cov:=============>                     39%][Progress:=======================>      79%] [Cov:=============>                     39%][Progress:=======================>      79%] [Cov:=============>                     39%][Progress:========================>     80%] [Cov:=============>                     39%][Progress:========================>     80%] [Cov:=============>                     39%][Progress:========================>     80%] [Cov:=============>                     39%][Progress:========================>     80%] [Cov:=============>                     39%][Progress:========================>     80%] [Cov:=============>                     39%][Progress:========================>     80%] [Cov:=============>                     39%][Progress:========================>     80%] [Cov:=============>                     39%][Progress:========================>     80%] [Cov:=============>                     39%][Progress:========================>     80%] [Cov:=============>                     39%][Progress:========================>     81%] [Cov:=============>                     39%][Progress:========================>     81%] [Cov:=============>                     39%][Progress:========================>     81%] [Cov:=============>                     39%][Progress:========================>     81%] [Cov:=============>                     39%][Progress:========================>     81%] [Cov:=============>                     39%][Progress:========================>     81%] [Cov:=============>                     39%][Progress:========================>     82%] [Cov:=============>                     39%][Progress:========================>     82%] [Cov:=============>                     39%][Progress:========================>     82%] [Cov:=============>                     39%][Progress:========================>     82%] [Cov:=============>                     39%][Progress:========================>     82%] [Cov:=============>                     39%][Progress:========================>     82%] [Cov:=============>                     39%][Progress:========================>     82%] [Cov:=============>                     39%][Progress:=========================>    85%] [Cov:=============>                     39%][Progress:=========================>    85%] [Cov:=============>                     39%][Progress:=========================>    85%] [Cov:=============>                     39%][Progress:=========================>    85%] [Cov:=============>                     39%][Progress:=========================>    86%] [Cov:=============>                     39%][Progress:=========================>    86%] [Cov:=============>                     39%][Progress:=========================>    86%] [Cov:=============>                     39%][Progress:=========================>    86%] [Cov:=============>                     39%][Progress:=========================>    86%] [Cov:=============>                     39%][Progress:=========================>    86%] [Cov:=============>                     39%][Progress:==========================>   87%] [Cov:=============>                     39%][Progress:==========================>   87%] [Cov:=============>                     39%][Progress:==========================>   87%] [Cov:=============>                     39%][Progress:==========================>   87%] [Cov:=============>                     39%][Progress:==========================>   87%] [Cov:=============>                     39%][Progress:==========================>   87%] [Cov:=============>                     39%][Progress:==========================>   88%] [Cov:=============>                     39%][Progress:==========================>   89%] [Cov:=============>                     39%][Progress:==========================>   89%] [Cov:=============>                     39%][Progress:===========================>  90%] [Cov:=============>                     39%][Progress:=============================>98%] [Cov:=============>                     39%][Progress:=============================>98%] [Cov:=============>                     39%][Progress:=============================>98%] [Cov:=============>                     39%][Progress:=============================>98%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:==============================100%] [Cov:=============>                     39%][Progress:==============================100%] [Cov:=============>                     39%][Progress:==============================100%] [Cov:=============>                     39%]
* Search finished after 202s and 383 generations, 106991 statements, best individual has fitness: 586.0
* Generated before the refinement 32 tests with total length 122
statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int timeout = 1000;// Change to a more descriptive value, such as "long_timeout" or "short_timeout"

        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(timeout);
        try {
            blockingClientHandler.sendMessage("Hello, world!");
        } catch (IOException e) {
            System.out.println("Error sending message: " + e.getMessage());
        }
    }
}
statement is: int timeout = 1000// Change to a more descriptive value, such as "long_timeout" or "short_timeout"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(timeout), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: try {
    blockingClientHandler.sendMessage("Hello, world!");
} catch (IOException e) {
    System.out.println("Error sending message: " + e.getMessage());
}, class spoon.support.reflect.code.CtTryImpl
TestCase is: int _int = 1000;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getSelectionKey()Ljava/nio/channels/SelectionKey; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SelectionKey
statement code is: SelectionKey selectionKey = blockingClientHandler.getSelectionKey()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSelectionKey();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the code snippet
        int selectionKey = 123456789;
        String clientName = "Test Client";
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(clientName);
        blockingClientHandler.getSelectionKey();// Should return the value of selectionKey (123456789) }}

    }
}
statement is: // Improved test data for the code snippet
int selectionKey = 123456789, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String clientName = "Test Client", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(clientName), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getSelectionKey()// Should return the value of selectionKey (123456789) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getSelectionKey()// Should return the value of selectionKey (123456789) }}
 target is: blockingClientHandler method is: getSelectionKey()
* this is vulnerable: int _int = 123456789
* this is vulnerable: String string = "Test Client"
TestCase is: int _int = 123456789;
String string = "Test Client";

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: finalize()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.finalize()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int port = 80;// Change to a specific port number that is not in use

        String host = "example.com";// Change to a valid domain name or IP address

        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(port, host);
        blockingClientHandler.finalize();
    }
}
statement is: // Improved test data
int port = 80// Change to a specific port number that is not in use
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String host = "example.com"// Change to a valid domain name or IP address
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(port, host), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.finalize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.finalize() target is: blockingClientHandler method is: finalize()
* this is vulnerable: int _int = 80
* this is vulnerable: String string = "example.com"
TestCase is: int _int = 80;
String string = "example.com";

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getSocketChannel()Ljava/nio/channels/SocketChannel; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SocketChannel
statement code is: SocketChannel socketChannel = blockingClientHandler.getSocketChannel()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSocketChannel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        int portNumber = 8080;
        String hostName = "localhost";
        InetAddress inetAddress = InetAddress.getByName(hostName);
        SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress(inetAddress, portNumber));
    }
}
statement is: // Improved test data for the above code snippet
int portNumber = 8080, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostName = "localhost", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: InetAddress inetAddress = InetAddress.getByName(hostName), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: InetAddress.getByName(hostName) target is: InetAddress method is: getByName(java.lang.String)
statement is: SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress(inetAddress, portNumber)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: SocketChannel.open(new InetSocketAddress(inetAddress, portNumber)) target is: SocketChannel method is: open(InetSocketAddress)
* this is vulnerable: int _int = 8080
* this is vulnerable: String string = "localhost"
TestCase is: int _int = 8080;
String string = "localhost";

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: registerForWrite()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.registerForWrite()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.registerForWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.registerForWrite();
        // Improved test data
        int socketTimeout = 10000;// 10 seconds

        String hostname = "www.example.com";
        int portNumber = 80;
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.registerForWrite(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.registerForWrite() target is: blockingClientHandler method is: registerForWrite()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: registerForWrite()V
statement is: // Improved test data
int socketTimeout = 10000// 10 seconds
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostname = "www.example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int portNumber = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10000
* this is vulnerable: String string = "www.example.com"
* this is vulnerable: int _int = 80
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.registerForWrite();
int _int = 10000;
String string = "www.example.com";
int _int = 80;

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getBufferedReader()Ljava/io/BufferedReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.BufferedReader
statement code is: BufferedReader bufferedReader = blockingClientHandler.getBufferedReader()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBufferedReader();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        String response = blockingClientHandler.getBufferedReader().readLine();
        System.out.println("Response: " + response);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String response = blockingClientHandler.getBufferedReader().readLine(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getBufferedReader().readLine() target is: blockingClientHandler.getBufferedReader() method is: readLine()
statement is: System.out.println("Response: " + response), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Response: " + response) target is: System.out method is: println(java.lang.String)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setClientWriteHandler(new ClientWriteHandler());
    }
}
statement is: // Improved test data
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setClientWriteHandler(new ClientWriteHandler()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setClientWriteHandler(new ClientWriteHandler()) target is: blockingClientHandler method is: setClientWriteHandler(ClientWriteHandler)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientWriteHandler clientWriteHandler = null;
blockingClientHandler.setClientWriteHandler(clientWriteHandler);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: readInputStream()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] readInputStream = blockingClientHandler.readInputStream()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.readInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int timeoutMillis = 1000;// changed from the default value of 0 to a more descriptive value

        String host = "example.com";// changed from an arbitrary string to a more descriptive and representative value

        int port = 80;// changed from an arbitrary integer to a more descriptive and representative value

        boolean useTLS = true;// changed from false to a more descriptive and representative value

        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(timeoutMillis, host, port, useTLS);
        blockingClientHandler.readInputStream();
    }
}
statement is: // Improved test data
int timeoutMillis = 1000// changed from the default value of 0 to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String host = "example.com"// changed from an arbitrary string to a more descriptive and representative value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int port = 80// changed from an arbitrary integer to a more descriptive and representative value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean useTLS = true// changed from false to a more descriptive and representative value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(timeoutMillis, host, port, useTLS), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.readInputStream(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.readInputStream() target is: blockingClientHandler method is: readInputStream()
* this is vulnerable: int _int = 1000
* this is vulnerable: String string = "example.com"
* this is vulnerable: int _int = 80
* this is vulnerable: boolean _boolean = true
TestCase is: int _int = 1000;
String string = "example.com";
int _int = 80;
boolean _boolean = true;

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: registerForRead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.registerForRead()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.registerForRead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.registerForRead();
        // Improved test data
        int socketTimeout = 10000;// milliseconds

        String hostname = "example.com";
        int portNumber = 80;
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.registerForRead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.registerForRead() target is: blockingClientHandler method is: registerForRead()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: registerForRead()V
statement is: // Improved test data
int socketTimeout = 10000// milliseconds
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostname = "example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int portNumber = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10000
* this is vulnerable: String string = "example.com"
* this is vulnerable: int _int = 80
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.registerForRead();
int _int = 10000;
String string = "example.com";
int _int = 80;

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@717ee5e7 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.ClientEvent
statement code is: ClientEvent clientEvent = ClientEvent.READ
statement is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.addEvent(arg0)
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.run()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.READ;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        ClientEvent clientEvent = ClientEvent.READ;
        String message = "Hello, World!";
        blockingClientHandler.addEvent(clientEvent);
        blockingClientHandler.run();
    }
}
statement is: // Improved test data
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientEvent clientEvent = ClientEvent.READ, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ClientEvent.READ is ClientEvent
CtField is: public static org.quickserver.net.server.ClientEvent org.quickserver.net.server.ClientEvent.READ ClientEvent READ
statement is: String message = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: blockingClientHandler.addEvent(clientEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.addEvent(clientEvent) target is: blockingClientHandler method is: addEvent(ClientEvent)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V
statement is: blockingClientHandler.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.run() target is: blockingClientHandler method is: run()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: run()V
* this is vulnerable: String string = "Hello, World!"
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.READ;
String string = "Hello, World!";
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setSelectionKey((SelectionKey) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSelectionKey((SelectionKey) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setSelectionKey(new SelectionKey(null, null, null, null, null));
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setSelectionKey(new SelectionKey(null, null, null, null, null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSelectionKey(new SelectionKey(null, null, null, null, null)) target is: blockingClientHandler method is: setSelectionKey(SelectionKey)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
SelectionKey selectionKey = null;
blockingClientHandler.setSelectionKey(selectionKey);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getBlockingMode()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean blockingMode = blockingClientHandler.getBlockingMode()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBlockingMode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the code snippet
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setBlockingMode(true);// Tests a blocking mode of true

        blockingClientHandler.setBlockingMode(false);// Tests a blocking mode of false

        blockingClientHandler.setBlockingMode("random_string");// Tests an invalid blocking mode }}

    }
}
statement is: // Improved test data for the code snippet
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setBlockingMode(true)// Tests a blocking mode of true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setBlockingMode(true)// Tests a blocking mode of true
 target is: blockingClientHandler method is: setBlockingMode(boolean)
statement is: blockingClientHandler.setBlockingMode(false)// Tests a blocking mode of false
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setBlockingMode(false)// Tests a blocking mode of false
 target is: blockingClientHandler method is: setBlockingMode(boolean)
statement is: blockingClientHandler.setBlockingMode("random_string")// Tests an invalid blocking mode }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setBlockingMode("random_string")// Tests an invalid blocking mode }}
 target is: blockingClientHandler method is: setBlockingMode(java.lang.String)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setSocketChannel((SocketChannel) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSocketChannel((SocketChannel) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setSocketChannel(SocketChannel.open(new InetSocketAddress("localhost", 8080)));
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setSocketChannel(SocketChannel.open(new InetSocketAddress("localhost", 8080))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSocketChannel(SocketChannel.open(new InetSocketAddress("localhost", 8080))) target is: blockingClientHandler method is: setSocketChannel()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
SocketChannel socketChannel = null;
blockingClientHandler.setSocketChannel(socketChannel);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: java.io.PushbackInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PushbackInputStream
statement code is: PushbackInputStream pushbackInputStream = new PushbackInputStream((InputStream) null)
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setInputStream(arg0)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PushbackInputStream pushbackInputStream = new PushbackInputStream((InputStream) null);
blockingClientHandler.setInputStream(pushbackInputStream);

* Computation finished
