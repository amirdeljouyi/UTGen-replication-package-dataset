* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.server.impl.BlockingClientHandler
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 4420
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 04:16:29.836 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.net.SocketOption
[MASTER] 04:16:29.878 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 04:16:29.880 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 04:16:29.932 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Supplier
[MASTER] 04:16:29.981 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 04:16:30.193 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 04:16:30.193 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 04:16:30.194 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 04:16:30.195 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 04:16:30.196 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 04:16:30.197 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 04:16:30.197 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 04:16:30.199 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 04:16:30.200 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 04:16:30.229 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 04:16:30.254 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 04:16:30.256 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.server.impl.BlockingClientHandler
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 845
* Using seed 1710476182606
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 114 / 845
[MASTER] 04:16:38.173 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[Progress:>                             3%] [Cov:=========>                         27%][Progress:=>                            4%] [Cov:=========>                         27%][Progress:=>                            4%] [Cov:=========>                         27%][Progress:=>                            4%] [Cov:=========>                         27%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:===>                          11%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         14%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:====>                         15%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:=========>                         28%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        18%] [Cov:==========>                        29%][Progress:=====>                        19%] [Cov:==========>                        29%][Progress:=====>                        19%] [Cov:==========>                        29%][Progress:=====>                        19%] [Cov:==========>                        29%][Progress:=====>                        19%] [Cov:==========>                        31%][Progress:=====>                        19%] [Cov:==========>                        31%][Progress:=====>                        19%] [Cov:==========>                        31%][Progress:=====>                        19%] [Cov:==========>                        31%][Progress:=====>                        19%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       20%] [Cov:==========>                        31%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       21%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       22%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:======>                       23%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      24%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:=======>                      25%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     28%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:========>                     29%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    30%] [Cov:===========>                       32%][Progress:=========>                    32%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:=========>                    33%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   34%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   35%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:==========>                   36%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  37%] [Cov:===========>                       32%][Progress:===========>                  38%] [Cov:===========>                       32%][Progress:===========>                  38%] [Cov:===========>                       32%][Progress:===========>                  38%] [Cov:===========>                       32%][Progress:===========>                  38%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 40%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 41%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 42%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:============>                 43%] [Cov:===========>                       32%][Progress:=============>                44%] [Cov:===========>                       32%][Progress:=============>                44%] [Cov:===========>                       32%][Progress:=============>                44%] [Cov:===========>                       32%][Progress:=============>                44%] [Cov:===========>                       32%][Progress:=============>                44%] [Cov:===========>                       32%][Progress:=============>                44%] [Cov:===========>                       32%][Progress:=============>                44%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                45%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:=============>                46%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:==============>               49%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              50%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              51%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:===============>              53%] [Cov:===========>                       32%][Progress:================>             54%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:================>             56%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            57%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            58%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:=================>            59%] [Cov:===========>                       32%][Progress:==================>           62%] [Cov:===========>                       32%][Progress:==================>           62%] [Cov:===========>                       32%][Progress:==================>           62%] [Cov:===========>                       32%][Progress:==================>           62%] [Cov:===========>                       32%][Progress:==================>           62%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:==================>           63%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          64%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          65%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:===================>          66%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:====================>         67%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:===========>                       32%][Progress:=====================>        70%] [Cov:============>                      35%][Progress:=====================>        73%] [Cov:============>                      35%][Progress:=====================>        73%] [Cov:============>                      35%][Progress:=====================>        73%] [Cov:============>                      35%][Progress:=====================>        73%] [Cov:============>                      35%][Progress:=====================>        73%] [Cov:============>                      35%][Progress:=====================>        73%] [Cov:============>                      35%][Progress:=====================>        73%] [Cov:============>                      35%][Progress:=====================>        73%] [Cov:============>                      35%][Progress:=====================>        73%] [Cov:============>                      35%][Progress:======================>       74%] [Cov:============>                      35%][Progress:======================>       74%] [Cov:============>                      35%][Progress:======================>       74%] [Cov:============>                      35%][Progress:======================>       74%] [Cov:============>                      35%][Progress:======================>       74%] [Cov:============>                      35%][Progress:======================>       74%] [Cov:============>                      35%][Progress:======================>       74%] [Cov:============>                      35%][Progress:======================>       74%] [Cov:============>                      35%][Progress:======================>       74%] [Cov:============>                      35%][Progress:======================>       74%] [Cov:============>                      37%][Progress:======================>       74%] [Cov:============>                      37%][Progress:======================>       74%] [Cov:============>                      37%][Progress:======================>       74%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       75%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:======================>       76%] [Cov:============>                      37%][Progress:=======================>      79%] [Cov:============>                      37%][Progress:=======================>      79%] [Cov:============>                      37%][Progress:=======================>      79%] [Cov:============>                      37%][Progress:=======================>      79%] [Cov:=============>                     38%][Progress:=======================>      79%] [Cov:=============>                     38%][Progress:=======================>      79%] [Cov:=============>                     38%][Progress:=======================>      79%] [Cov:=============>                     38%][Progress:=======================>      79%] [Cov:=============>                     38%][Progress:=======================>      79%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     80%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     81%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     82%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:========================>     83%] [Cov:=============>                     38%][Progress:=========================>    84%] [Cov:=============>                     38%][Progress:=========================>    84%] [Cov:=============>                     38%][Progress:=========================>    84%] [Cov:=============>                     38%][Progress:=========================>    84%] [Cov:=============>                     38%][Progress:=========================>    84%] [Cov:=============>                     38%][Progress:=========================>    84%] [Cov:=============>                     38%][Progress:=========================>    84%] [Cov:=============>                     38%][Progress:=========================>    84%] [Cov:=============>                     38%][Progress:=========================>    84%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    85%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:=========================>    86%] [Cov:=============>                     38%][Progress:==========================>   87%] [Cov:=============>                     38%][Progress:==========================>   87%] [Cov:=============>                     38%][Progress:==========================>   87%] [Cov:=============>                     38%][Progress:==========================>   87%] [Cov:=============>                     38%][Progress:==========================>   87%] [Cov:=============>                     38%][Progress:==========================>   87%] [Cov:=============>                     38%][Progress:==========================>   87%] [Cov:=============>                     38%][Progress:==========================>   87%] [Cov:=============>                     38%][Progress:==========================>   87%] [Cov:=============>                     38%][Progress:==========================>   87%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   88%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:==========================>   89%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  90%] [Cov:=============>                     38%][Progress:===========================>  91%] [Cov:=============>                     38%][Progress:===========================>  91%] [Cov:=============>                     38%][Progress:===========================>  91%] [Cov:=============>                     38%][Progress:===========================>  91%] [Cov:=============>                     39%][Progress:===========================>  91%] [Cov:=============>                     39%][Progress:===========================>  91%] [Cov:=============>                     39%][Progress:===========================>  93%] [Cov:=============>                     39%][Progress:============================> 96%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:=============================>99%] [Cov:=============>                     39%][Progress:==============================100%] [Cov:=============>                     39%]
* Search finished after 204s and 559 generations, 131887 statements, best individual has fitness: 583.0
* Generated before the refinement 29 tests with total length 100
statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0)
statement is: returnClientHandler()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.returnClientHandler()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.returnClientHandler();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(5000);
        blockingClientHandler.getClientHandler();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(5000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getClientHandler(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getClientHandler() target is: blockingClientHandler method is: getClientHandler()
TestCase is: int _int = 5000;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getSelectionKey()Ljava/nio/channels/SelectionKey; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SelectionKey
statement code is: SelectionKey selectionKey = blockingClientHandler.getSelectionKey()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSelectionKey();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.getSelectionKey();
        // Improved test data:
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler("127.0.0.1", 8080);
        blockingClientHandler.getSelectionKey();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getSelectionKey(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getSelectionKey() target is: blockingClientHandler method is: getSelectionKey()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: getSelectionKey()Ljava/nio/channels/SelectionKey;
statement is: // Improved test data:
BlockingClientHandler blockingClientHandler = new BlockingClientHandler("127.0.0.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getSelectionKey(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getSelectionKey() target is: blockingClientHandler method is: getSelectionKey()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: getSelectionKey()Ljava/nio/channels/SelectionKey;
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSelectionKey();
blockingClientHandler.getSelectionKey();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: finalize()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.finalize()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.finalize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler1 = new BlockingClientHandler("localhost", 8080);
        blockingClientHandler1.finalize();
        // Improved test data
        BlockingClientHandler blockingClientHandler2 = new BlockingClientHandler("192.168.1.1", 8080);
        blockingClientHandler2.finalize();
    }
}
statement is: BlockingClientHandler blockingClientHandler1 = new BlockingClientHandler("localhost", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler1.finalize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler1.finalize() target is: blockingClientHandler1 method is: finalize()
statement is: // Improved test data
BlockingClientHandler blockingClientHandler2 = new BlockingClientHandler("192.168.1.1", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler2.finalize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler2.finalize() target is: blockingClientHandler2 method is: finalize()
statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getSocketChannel()Ljava/nio/channels/SocketChannel; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SocketChannel
statement code is: SocketChannel socketChannel = blockingClientHandler.getSocketChannel()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSocketChannel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        SocketChannel socketChannel = blockingClientHandler.getSocketChannel();
        assertEquals(socketChannel.isConnected(), true);
        assertEquals(socketChannel.getLocalAddress(), new InetSocketAddress("localhost", 8080));
    }
}
statement is: // Improved test data
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SocketChannel socketChannel = blockingClientHandler.getSocketChannel(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getSocketChannel() target is: blockingClientHandler method is: getSocketChannel()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: getSocketChannel()Ljava/nio/channels/SocketChannel;
statement is: assertEquals(socketChannel.isConnected(), true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(socketChannel.isConnected(), true) target is:  method is: assertEquals(<unknown>,boolean)
statement is: assertEquals(socketChannel.getLocalAddress(), new InetSocketAddress("localhost", 8080)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(socketChannel.getLocalAddress(), new InetSocketAddress("localhost", 8080)) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getSocketChannel();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: registerForWrite()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.registerForWrite()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.registerForWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.registerForWrite();
        // Improved test data:
        // Use a more descriptive and representative integer value for the write timeout
        blockingClientHandler.setWriteTimeout(10);
        // Use a more descriptive and representative string for the IP address
        String ipAddress = "192.168.0.1";
        // Use a more descriptive and representative port number
        int portNumber = 80;
        // Use a more descriptive and representative boolean value for the TCP no delay option
        boolean tcpNoDelay = true;
        blockingClientHandler.connect(ipAddress, portNumber, tcpNoDelay);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.registerForWrite(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.registerForWrite() target is: blockingClientHandler method is: registerForWrite()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: registerForWrite()V
statement is: // Improved test data:
// Use a more descriptive and representative integer value for the write timeout
blockingClientHandler.setWriteTimeout(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
// Use a more descriptive and representative integer value for the write timeout
blockingClientHandler.setWriteTimeout(10) target is: blockingClientHandler method is: setWriteTimeout(int)
statement is: // Use a more descriptive and representative string for the IP address
String ipAddress = "192.168.0.1", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Use a more descriptive and representative port number
int portNumber = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Use a more descriptive and representative boolean value for the TCP no delay option
boolean tcpNoDelay = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: blockingClientHandler.connect(ipAddress, portNumber, tcpNoDelay), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.connect(ipAddress, portNumber, tcpNoDelay) target is: blockingClientHandler method is: connect(java.lang.String,int,boolean)
* this is vulnerable: String string = "192.168.0.1"
* this is vulnerable: int _int = 80
* this is vulnerable: boolean _boolean = true
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.registerForWrite();
String string = "192.168.0.1";
int _int = 80;
boolean _boolean = true;

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getBufferedReader()Ljava/io/BufferedReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.BufferedReader
statement code is: BufferedReader bufferedReader = blockingClientHandler.getBufferedReader()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBufferedReader();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.getBufferedReader();
        // Improved test data
        int portNumber = 0;// Dynamic port number assigned by the operating system

        String hostName = "example.com";// Dynamic hostname obtained from server's configuration file or DNS lookup

        String requestMessage = "GET / HTTP/1.1\r\nHost: example.com\r\nConnection: keep-alive\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36\r\n\r\n";// More descriptive request message with additional headers and query parameters

        String expectedResponse = "HTTP/1.1 200 OK\r\nContent-Type: text/html;charset=UTF-8\r\nContent-Length: 5\r\n\r\nHello!";// More descriptive expected response with additional headers and body content }}

    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.getBufferedReader(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.getBufferedReader() target is: blockingClientHandler method is: getBufferedReader()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: getBufferedReader()Ljava/io/BufferedReader;
statement is: // Improved test data
int portNumber = 0// Dynamic port number assigned by the operating system
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostName = "example.com"// Dynamic hostname obtained from server's configuration file or DNS lookup
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String requestMessage = "GET / HTTP/1.1\r\nHost: example.com\r\nConnection: keep-alive\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36\r\n\r\n"// More descriptive request message with additional headers and query parameters
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedResponse = "HTTP/1.1 200 OK\r\nContent-Type: text/html;charset=UTF-8\r\nContent-Length: 5\r\n\r\nHello!"// More descriptive expected response with additional headers and body content }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 0
* this is vulnerable: String string = "example.com"
* this is vulnerable: String string = "GET / HTTP/1.1\r\nHost: example.com\r\nConnection: keep-alive\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36\r\n\r\n"
* this is vulnerable: String string = "HTTP/1.1 200 OK\r\nContent-Type: text/html;charset=UTF-8\r\nContent-Length: 5\r\n\r\nHello!"
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBufferedReader();
int _int = 0;
String string = "example.com";
String string = "GET / HTTP/1.1\r\nHost: example.com\r\nConnection: keep-alive\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36\r\n\r\n";
String string = "HTTP/1.1 200 OK\r\nContent-Type: text/html;charset=UTF-8\r\nContent-Length: 5\r\n\r\nHello!";

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setClientWriteHandler("hello world");
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setClientWriteHandler("hello world"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setClientWriteHandler("hello world") target is: blockingClientHandler method is: setClientWriteHandler(java.lang.String)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
String string = "hello world";
blockingClientHandler.setClientWriteHandler((ClientWriteHandler) string);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: readInputStream()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] readInputStream = blockingClientHandler.readInputStream()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.readInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Change
        the primitive;
        to more;
        descriptive examples;
        descriptive such;
        as : 2.0 = $missing$;
        Improve the;
        values by;
        example : 3.0 = $missing$;
        Use a;
        descriptive variable;
        instead of;
    }
}
statement is: @Change
the primitive, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: to more, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: descriptive examples, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: descriptive such, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: as : 2.0 = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: Improve the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: values by, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: example : 3.0 = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: Use a, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: descriptive variable, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: instead of, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: registerForRead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.registerForRead()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.registerForRead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.registerForRead(new InetSocketAddress("192.168.0.1", 8080));
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.registerForRead(new InetSocketAddress("192.168.0.1", 8080)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.registerForRead(new InetSocketAddress("192.168.0.1", 8080)) target is: blockingClientHandler method is: registerForRead(InetSocketAddress)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setSelectionKey((SelectionKey) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSelectionKey((SelectionKey) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setSelectionKey(OP_CONNECT);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setSelectionKey(OP_CONNECT), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSelectionKey(OP_CONNECT) target is: blockingClientHandler method is: setSelectionKey()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
SelectionKey selectionKey = null;
blockingClientHandler.setSelectionKey(selectionKey);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: getBlockingMode()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean blockingMode = blockingClientHandler.getBlockingMode()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.getBlockingMode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setBlockingMode(true);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setBlockingMode(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setBlockingMode(true) target is: blockingClientHandler method is: setBlockingMode(boolean)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setSocketChannel((SocketChannel) null)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.setSocketChannel((SocketChannel) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.setSocketChannel(new SocketChannel());
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setSocketChannel(new SocketChannel()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setSocketChannel(new SocketChannel()) target is: blockingClientHandler method is: setSocketChannel(SocketChannel)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
SocketChannel socketChannel = null;
blockingClientHandler.setSocketChannel(socketChannel);

statement is: org.quickserver.net.server.impl.BlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0)
statement is: checkReturnClientHandler()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean checkReturnClientHandler = blockingClientHandler.checkReturnClientHandler()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(0);
blockingClientHandler.checkReturnClientHandler();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler(5);
        blockingClientHandler.checkReturnClientHandler();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.checkReturnClientHandler(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.checkReturnClientHandler() target is: blockingClientHandler method is: checkReturnClientHandler()
source statement: org.quickserver.net.server.impl.BlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 1
Matched Method is: checkReturnClientHandler()Z
TestCase is: int _int = 5;
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(_int);
((BlockingClientHandler) _int).checkReturnClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: updateInputOutputStreams()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.updateInputOutputStreams()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.updateInputOutputStreams();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.updateInputOutputStreams(1024, "UTF-8");// use a larger buffer size and a specific encoding }}

    }
}
statement is: // Improved test data
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.updateInputOutputStreams(1024, "UTF-8")// use a larger buffer size and a specific encoding }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.updateInputOutputStreams(1024, "UTF-8")// use a larger buffer size and a specific encoding }}
 target is: blockingClientHandler method is: updateInputOutputStreams(int,java.lang.String)
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@ca1f6ac0 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.STRING
statement is: org.evosuite.testcase.statements.AssignmentStatement@af0acf27 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.quickserver.net.server.DataMode
statement code is: blockingClientHandler.dataModeIN = dataMode
statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: java.io.PushbackInputStream(Ljava/io/InputStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PushbackInputStream
statement code is: PushbackInputStream pushbackInputStream = new PushbackInputStream(arg0, 1793)
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setInputStream(arg0)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataMode dataMode = DataMode.STRING;
blockingClientHandler.dataModeIN = dataMode;
PipedInputStream pipedInputStream = new PipedInputStream();
PushbackInputStream pushbackInputStream = new PushbackInputStream(pipedInputStream, 1793);
blockingClientHandler.setInputStream(pushbackInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        DataMode dataMode = DataMode.STRING;
        blockingClientHandler.dataModeIN = dataMode;
        PipedInputStream pipedInputStream = new PipedInputStream("Hello, World!");
        PushbackInputStream pushbackInputStream = new PushbackInputStream(pipedInputStream, 1793);
        blockingClientHandler.setInputStream(pushbackInputStream);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataMode dataMode = DataMode.STRING, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.STRING is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.STRING DataMode STRING
statement is: blockingClientHandler.dataModeIN = dataMode, class spoon.support.reflect.code.CtAssignmentImpl
statement is: PipedInputStream pipedInputStream = new PipedInputStream("Hello, World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PushbackInputStream pushbackInputStream = new PushbackInputStream(pipedInputStream, 1793), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setInputStream(pushbackInputStream), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setInputStream(pushbackInputStream) target is: blockingClientHandler method is: setInputStream(PushbackInputStream)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setInputStream(Ljava/io/InputStream;)V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataMode dataMode = DataMode.STRING;
int _int = 1793;
PushbackInputStream pushbackInputStream = new PushbackInputStream((InputStream) _int, 1793);
blockingClientHandler.setInputStream(pushbackInputStream);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@bcdd29f0 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.BINARY
statement is: org.evosuite.testcase.statements.AssignmentStatement@d1f6df8a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class org.quickserver.net.server.DataMode
statement code is: blockingClientHandler.dataModeIN = dataMode
statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setInputStream(arg0)
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataMode dataMode = DataMode.BINARY;
blockingClientHandler.dataModeIN = dataMode;
PipedInputStream pipedInputStream = new PipedInputStream();
blockingClientHandler.setInputStream(pipedInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        DataMode dataMode = DataMode.BINARY;
        blockingClientHandler.dataModeIN = dataMode;
        PipedInputStream pipedInputStream = new PipedInputStream(1024);// changed from a default constructor to one that takes an int parameter (buffer size)

        blockingClientHandler.setInputStream(pipedInputStream);
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataMode dataMode = DataMode.BINARY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.BINARY is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.BINARY DataMode BINARY
statement is: blockingClientHandler.dataModeIN = dataMode, class spoon.support.reflect.code.CtAssignmentImpl
statement is: PipedInputStream pipedInputStream = new PipedInputStream(1024)// changed from a default constructor to one that takes an int parameter (buffer size)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setInputStream(pipedInputStream), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setInputStream(pipedInputStream) target is: blockingClientHandler method is: setInputStream(PipedInputStream)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setInputStream(Ljava/io/InputStream;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
DataMode dataMode = DataMode.BINARY;
PipedInputStream pipedInputStream = null;
blockingClientHandler.setInputStream(pipedInputStream);

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.closeConnection()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.closeConnection();
        // Improved test data
        BlockingClientHandler blockingClientHandler1 = new BlockingClientHandler("Server 1", "localhost", 8080);
        blockingClientHandler1.connectToServer();
        BlockingClientHandler blockingClientHandler2 = new BlockingClientHandler("Server 2", "localhost", 8081);
        blockingClientHandler2.connectToServer();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.closeConnection(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.closeConnection() target is: blockingClientHandler method is: closeConnection()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: closeConnection()V
statement is: // Improved test data
BlockingClientHandler blockingClientHandler1 = new BlockingClientHandler("Server 1", "localhost", 8080), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler1.connectToServer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler1.connectToServer() target is: blockingClientHandler1 method is: connectToServer()
statement is: BlockingClientHandler blockingClientHandler2 = new BlockingClientHandler("Server 2", "localhost", 8081), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler2.connectToServer(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler2.connectToServer() target is: blockingClientHandler2 method is: connectToServer()
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.closeConnection();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@93df0ae6 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.ClientEvent
statement code is: ClientEvent clientEvent = ClientEvent.MAX_CON_BLOCKING
statement is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.addEvent(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@8554f2d4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: blockingClientHandler.connection = true
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.closeConnection()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.MAX_CON_BLOCKING;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.connection = true;
blockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        ClientEvent clientEvent = ClientEvent.MAX_CON_BLOCKING;
        blockingClientHandler.addEvent(clientEvent);
        blockingClientHandler.connection = true;
        blockingClientHandler.closeConnection();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientEvent clientEvent = ClientEvent.MAX_CON_BLOCKING, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ClientEvent.MAX_CON_BLOCKING is ClientEvent
CtField is: public static org.quickserver.net.server.ClientEvent org.quickserver.net.server.ClientEvent.MAX_CON_BLOCKING ClientEvent MAX_CON_BLOCKING
statement is: blockingClientHandler.addEvent(clientEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.addEvent(clientEvent) target is: blockingClientHandler method is: addEvent(ClientEvent)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V
statement is: blockingClientHandler.connection = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.closeConnection(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.closeConnection() target is: blockingClientHandler method is: closeConnection()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: closeConnection()V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.MAX_CON_BLOCKING;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.closeConnection();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.AssignmentStatement@3202ae1c type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: blockingClientHandler.connection = true
statement is: org.evosuite.runtime.mock.java.io.MockFileOutputStream(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFileOutputStream
statement code is: MockFileOutputStream mockFileOutputStream = new MockFileOutputStream("org.quickserver.net.server.impl.BlockingClientHandler")
statement is: org.evosuite.testcase.statements.AssignmentStatement@bcc21ed7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.io.OutputStream
statement code is: blockingClientHandler.out = (OutputStream) mockFileOutputStream
statement is: org.evosuite.testcase.statements.AssignmentStatement@b9fc7a1b type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: blockingClientHandler.closeOrLostNotified = true
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.closeConnection()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
blockingClientHandler.connection = true;
MockFileOutputStream mockFileOutputStream = new MockFileOutputStream("org.quickserver.net.server.impl.BlockingClientHandler");
blockingClientHandler.out = (OutputStream) mockFileOutputStream;
blockingClientHandler.closeOrLostNotified = true;
blockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        blockingClientHandler.connection = true;
        MockFileOutputStream mockFileOutputStream = new MockFileOutputStream("org.quickserver.net.server.impl.BlockingClientHandler");
        mockFileOutputStream.setBytesToReturn(new byte[]{ 1, 2, 3 });// Improved test data to include a realistic set of bytes

        blockingClientHandler.out = ((OutputStream) (mockFileOutputStream));
        blockingClientHandler.closeOrLostNotified = true;
        blockingClientHandler.closeConnection();
    }
}
statement is: // Improved test data
BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.connection = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: MockFileOutputStream mockFileOutputStream = new MockFileOutputStream("org.quickserver.net.server.impl.BlockingClientHandler"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: mockFileOutputStream.setBytesToReturn(new byte[]{ 1, 2, 3 })// Improved test data to include a realistic set of bytes
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: mockFileOutputStream.setBytesToReturn(new byte[]{ 1, 2, 3 })// Improved test data to include a realistic set of bytes
 target is: mockFileOutputStream method is: setBytesToReturn(byte[])
statement is: blockingClientHandler.out = ((OutputStream) (mockFileOutputStream)), class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.closeOrLostNotified = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.closeConnection(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.closeConnection() target is: blockingClientHandler method is: closeConnection()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: closeConnection()V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
String string = "org.quickserver.net.server.impl.BlockingClientHandler";
MockFileOutputStream mockFileOutputStream = new MockFileOutputStream(string);
blockingClientHandler.closeConnection();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: java.io.PipedOutputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedOutputStream
statement code is: PipedOutputStream pipedOutputStream = new PipedOutputStream()
statement is: java.io.PipedInputStream(Ljava/io/PipedOutputStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream(arg0, 121)
statement is: java.io.DataInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.DataInputStream
statement code is: DataInputStream dataInputStream = new DataInputStream(arg0)
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.setInputStream(arg0)
statement is: org.evosuite.testcase.statements.AssignmentStatement@f495c6cc type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: blockingClientHandler.connection = true
statement is: org.evosuite.testcase.statements.AssignmentStatement@8363a135 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: blockingClientHandler.closeOrLostNotified = true
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.closeConnection()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PipedOutputStream pipedOutputStream = new PipedOutputStream();
PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 121);
DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
blockingClientHandler.setInputStream(dataInputStream);
blockingClientHandler.connection = true;
blockingClientHandler.closeOrLostNotified = true;
blockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
        PipedOutputStream pipedOutputStream = new PipedOutputStream();
        PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 4096);
        DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
        blockingClientHandler.setInputStream(dataInputStream);
        blockingClientHandler.connection = true;
        blockingClientHandler.closeOrLostNotified = true;
        blockingClientHandler.closeConnection();
    }
}
statement is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PipedOutputStream pipedOutputStream = new PipedOutputStream(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, 4096), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataInputStream dataInputStream = new DataInputStream(pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: blockingClientHandler.setInputStream(dataInputStream), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.setInputStream(dataInputStream) target is: blockingClientHandler method is: setInputStream(DataInputStream)
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: setInputStream(Ljava/io/InputStream;)V
statement is: blockingClientHandler.connection = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.closeOrLostNotified = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: blockingClientHandler.closeConnection(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: blockingClientHandler.closeConnection() target is: blockingClientHandler method is: closeConnection()
source statement: org.quickserver.net.server.impl.BlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.BlockingClientHandlerindex is: 0
Matched Method is: closeConnection()V
TestCase is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
PipedOutputStream pipedOutputStream = new PipedOutputStream();
int _int = 4096;
PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream, _int);
DataInputStream dataInputStream = new DataInputStream(pipedInputStream);
blockingClientHandler.setInputStream(dataInputStream);
blockingClientHandler.closeConnection();

statement is: org.quickserver.net.server.impl.BlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.BlockingClientHandler
statement code is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@349777c8 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.ClientEvent
statement code is: ClientEvent clientEvent = ClientEvent.CLOSE_CON
statement is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.addEvent(arg0)
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: blockingClientHandler.run()
test data is: BlockingClientHandler blockingClientHandler = new BlockingClientHandler();
ClientEvent clientEvent = ClientEvent.CLOSE_CON;
blockingClientHandler.addEvent(clientEvent);
blockingClientHandler.run();

* Computation finished
