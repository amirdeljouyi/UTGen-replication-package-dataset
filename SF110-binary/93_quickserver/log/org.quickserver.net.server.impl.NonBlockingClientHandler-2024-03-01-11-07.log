* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: org.quickserver.net.server.impl.NonBlockingClientHandler
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/93_quickserver/evosuite-files/evosuite.properties
* Connecting to master process on port 4656
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 11:07:44.072 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.net.SocketOption
[MASTER] 11:07:44.076 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 11:07:44.081 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 11:07:44.081 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 11:07:44.112 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Supplier
[MASTER] 11:07:44.217 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 11:07:44.218 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 11:07:44.218 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 11:07:44.218 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 11:07:44.218 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 11:07:44.219 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 11:07:44.219 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 11:07:44.219 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 11:07:44.219 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 11:07:44.220 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 11:07:44.272 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 11:07:44.272 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.quickserver.net.server.impl.NonBlockingClientHandler
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1838
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1709291256781
* Starting evolution
* Initial Number of Goals in DynaMOSA = 284 / 1838
[MASTER] 11:07:46.469 [logback-1] WARN  TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[Progress:>                             1%] [Cov:========>                          25%][Progress:>                             3%] [Cov:========>                          25%][Progress:>                             3%] [Cov:========>                          25%][Progress:=>                            4%] [Cov:========>                          25%][Progress:=>                            5%] [Cov:========>                          25%][Progress:=>                            5%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:==>                           7%] [Cov:=========>                         26%][Progress:==>                           7%] [Cov:=========>                         26%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           8%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:==>                           9%] [Cov:=========>                         26%][Progress:===>                          10%] [Cov:=========>                         26%][Progress:===>                          10%] [Cov:=========>                         26%][Progress:===>                          10%] [Cov:=========>                         26%][Progress:===>                          11%] [Cov:=========>                         26%][Progress:===>                          11%] [Cov:=========>                         26%][Progress:===>                          11%] [Cov:=========>                         26%][Progress:===>                          12%] [Cov:=========>                         26%][Progress:===>                          12%] [Cov:=========>                         27%][Progress:===>                          12%] [Cov:=========>                         27%][Progress:===>                          12%] [Cov:=========>                         27%][Progress:===>                          13%] [Cov:=========>                         27%][Progress:===>                          13%] [Cov:=========>                         27%][Progress:===>                          13%] [Cov:=========>                         27%][Progress:===>                          13%] [Cov:=========>                         27%][Progress:====>                         14%] [Cov:=========>                         27%][Progress:====>                         14%] [Cov:=========>                         27%][Progress:====>                         14%] [Cov:=========>                         27%][Progress:====>                         15%] [Cov:=========>                         27%][Progress:====>                         15%] [Cov:=========>                         27%][Progress:====>                         16%] [Cov:=========>                         27%][Progress:=====>                        19%] [Cov:=========>                         27%][Progress:=====>                        19%] [Cov:=========>                         27%][Progress:=====>                        19%] [Cov:=========>                         27%][Progress:=====>                        19%] [Cov:=========>                         27%][Progress:======>                       21%] [Cov:=========>                         27%][Progress:======>                       22%] [Cov:=========>                         27%][Progress:======>                       22%] [Cov:=========>                         27%][Progress:======>                       22%] [Cov:=========>                         27%][Progress:======>                       23%] [Cov:=========>                         27%][Progress:======>                       23%] [Cov:=========>                         27%][Progress:======>                       23%] [Cov:=========>                         27%][Progress:======>                       23%] [Cov:=========>                         27%][Progress:======>                       23%] [Cov:=========>                         27%][Progress:=======>                      24%] [Cov:=========>                         27%][Progress:=======>                      24%] [Cov:=========>                         27%][Progress:=======>                      24%] [Cov:=========>                         27%][Progress:=======>                      25%] [Cov:=========>                         27%][Progress:=======>                      25%] [Cov:=========>                         27%][Progress:=======>                      26%] [Cov:=========>                         27%][Progress:=======>                      26%] [Cov:=========>                         27%][Progress:=======>                      26%] [Cov:=========>                         27%][Progress:========>                     27%] [Cov:=========>                         27%][Progress:========>                     27%] [Cov:=========>                         27%][Progress:========>                     27%] [Cov:=========>                         27%][Progress:========>                     28%] [Cov:=========>                         27%][Progress:=========>                    33%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:==========>                   34%] [Cov:=========>                         27%][Progress:===========>                  39%] [Cov:=========>                         27%][Progress:============>                 40%] [Cov:=========>                         27%][Progress:============>                 40%] [Cov:=========>                         27%][Progress:============>                 40%] [Cov:=========>                         27%][Progress:============>                 40%] [Cov:=========>                         27%][Progress:============>                 41%] [Cov:=========>                         27%][Progress:============>                 41%] [Cov:=========>                         27%][Progress:============>                 41%] [Cov:=========>                         27%][Progress:============>                 42%] [Cov:=========>                         27%][Progress:============>                 42%] [Cov:=========>                         27%][Progress:==============>               48%] [Cov:=========>                         27%][Progress:==============>               48%] [Cov:=========>                         27%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:==============>               49%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              50%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:===============>              51%] [Cov:=========>                         28%][Progress:================>             56%] [Cov:=========>                         28%][Progress:================>             56%] [Cov:=========>                         28%][Progress:=================>            57%] [Cov:=========>                         28%][Progress:=================>            57%] [Cov:=========>                         28%][Progress:=================>            58%] [Cov:=========>                         28%][Progress:=================>            58%] [Cov:=========>                         28%][Progress:=================>            58%] [Cov:=========>                         28%][Progress:=================>            58%] [Cov:=========>                         28%][Progress:=================>            58%] [Cov:=========>                         28%][Progress:=================>            59%] [Cov:=========>                         28%][Progress:=================>            59%] [Cov:=========>                         28%][Progress:==================>           60%] [Cov:=========>                         28%][Progress:==================>           63%] [Cov:=========>                         28%][Progress:==================>           63%] [Cov:=========>                         28%][Progress:===================>          64%] [Cov:=========>                         28%][Progress:===================>          65%] [Cov:=========>                         28%][Progress:===================>          65%] [Cov:=========>                         28%][Progress:===================>          66%] [Cov:=========>                         28%][Progress:===================>          66%] [Cov:=========>                         28%][Progress:===================>          66%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:====================>         67%] [Cov:=========>                         28%][Progress:=====================>        73%] [Cov:=========>                         28%][Progress:=====================>        73%] [Cov:=========>                         28%][Progress:=====================>        73%] [Cov:=========>                         28%][Progress:======================>       74%] [Cov:=========>                         28%][Progress:======================>       74%] [Cov:=========>                         28%][Progress:======================>       74%] [Cov:=========>                         28%][Progress:======================>       74%] [Cov:=========>                         28%][Progress:======================>       74%] [Cov:=========>                         28%][Progress:======================>       74%] [Cov:=========>                         28%][Progress:======================>       74%] [Cov:=========>                         28%][Progress:======================>       74%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       75%] [Cov:=========>                         28%][Progress:======================>       76%] [Cov:=========>                         28%][Progress:======================>       76%] [Cov:=========>                         28%][Progress:======================>       76%] [Cov:=========>                         28%][Progress:======================>       76%] [Cov:=========>                         28%][Progress:======================>       76%] [Cov:==========>                        29%][Progress:======================>       76%] [Cov:==========>                        29%][Progress:======================>       76%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      77%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      78%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:=======================>      79%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     80%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     81%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     82%] [Cov:==========>                        29%][Progress:========================>     83%] [Cov:==========>                        29%][Progress:========================>     83%] [Cov:==========>                        29%][Progress:========================>     83%] [Cov:==========>                        29%][Progress:=========================>    84%] [Cov:==========>                        29%][Progress:=========================>    84%] [Cov:==========>                        29%][Progress:=========================>    84%] [Cov:==========>                        29%][Progress:=========================>    84%] [Cov:==========>                        29%][Progress:=========================>    84%] [Cov:==========>                        29%][Progress:=========================>    85%] [Cov:==========>                        29%][Progress:=========================>    85%] [Cov:==========>                        29%][Progress:=========================>    85%] [Cov:==========>                        29%][Progress:=========================>    85%] [Cov:==========>                        29%][Progress:=========================>    85%] [Cov:==========>                        29%][Progress:=========================>    86%] [Cov:==========>                        29%][Progress:=========================>    86%] [Cov:==========>                        29%][Progress:=========================>    86%] [Cov:==========>                        29%][Progress:=========================>    86%] [Cov:==========>                        29%][Progress:=========================>    86%] [Cov:==========>                        29%][Progress:=========================>    86%] [Cov:==========>                        29%][Progress:=========================>    86%] [Cov:==========>                        29%][Progress:=========================>    86%] [Cov:==========>                        29%][Progress:=========================>    86%] [Cov:==========>                        29%][Progress:==========================>   87%] [Cov:==========>                        29%][Progress:==========================>   87%] [Cov:==========>                        29%][Progress:==========================>   87%] [Cov:==========>                        29%][Progress:==========================>   87%] [Cov:==========>                        29%][Progress:===========================>  92%] [Cov:==========>                        29%][Progress:===========================>  93%] [Cov:==========>                        29%][Progress:===========================>  93%] [Cov:==========>                        29%][Progress:===========================>  93%] [Cov:==========>                        29%][Progress:===========================>  93%] [Cov:==========>                        29%][Progress:===========================>  93%] [Cov:==========>                        29%][Progress:===========================>  93%] [Cov:==========>                        29%][Progress:===========================>  93%] [Cov:==========>                        29%][Progress:===========================>  93%] [Cov:==========>                        29%][Progress:============================> 94%] [Cov:==========>                        29%][Progress:============================> 94%] [Cov:==========>                        29%][Progress:============================> 94%] [Cov:==========>                        29%][Progress:============================> 94%] [Cov:==========>                        29%][Progress:============================> 94%] [Cov:==========>                        29%][Progress:============================> 95%] [Cov:==========>                        29%][Progress:============================> 95%] [Cov:==========>                        29%][Progress:============================> 95%] [Cov:==========>                        29%][Progress:============================> 95%] [Cov:==========>                        29%][Progress:============================> 95%] [Cov:==========>                        29%][Progress:============================> 95%] [Cov:==========>                        29%][Progress:============================> 96%] [Cov:==========>                        29%][Progress:============================> 96%] [Cov:==========>                        29%][Progress:============================> 96%] [Cov:==========>                        29%][Progress:============================> 96%] [Cov:==========>                        29%][Progress:============================> 96%] [Cov:==========>                        29%][Progress:============================> 96%] [Cov:==========>                        29%][Progress:============================> 96%] [Cov:==========>                        29%][Progress:============================> 96%] [Cov:==========>                        29%][Progress:============================> 96%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:=============================>97%] [Cov:==========>                        29%][Progress:==============================100%] [Cov:==========>                        29%]
* Search finished after 104s and 258 generations, 46341 statements, best individual has fitness: 1525.0
* Generated before the refinement 40 tests with total length 88
statement is: getMaxThreadAccessCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int maxThreadAccessCount = NonBlockingClientHandler.getMaxThreadAccessCount()
test data is: NonBlockingClientHandler.getMaxThreadAccessCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int maxThreadAccessCount = 10;// Original value

        // Improved test data:
        maxThreadAccessCount = 20;// More descriptive and representative of the situation being tested

        // Alternative improved test data:
        maxThreadAccessCount = 5;// Also valid and represents a different scenario }}

    }
}
statement is: int maxThreadAccessCount = 10// Original value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Improved test data:
maxThreadAccessCount = 20// More descriptive and representative of the situation being tested
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: // Alternative improved test data:
maxThreadAccessCount = 5// Also valid and represents a different scenario }}
, class spoon.support.reflect.code.CtAssignmentImpl
* this is vulnerable: int _int = 10
TestCase is: int _int = 10;

statement is: getWakeupSelectorAfterRegisterRead()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean wakeupSelectorAfterRegisterRead = NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead()
test data is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite(1000, "Hello World");// 1000 milliseconds and a String value of "Hello World" }}

    }
}
statement is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite(1000, "Hello World")// 1000 milliseconds and a String value of "Hello World" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite(1000, "Hello World")// 1000 milliseconds and a String value of "Hello World" }}
 target is: NonBlockingClientHandler method is: getWakeupSelectorAfterRegisterWrite(int,java.lang.String)
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: finalize()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.finalize()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.setMaxBufferSize(1024);
        nonBlockingClientHandler.setReadTimeout(5000);
        nonBlockingClientHandler.setWriteTimeout(5000);
        nonBlockingClientHandler.connect("localhost", 8080);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setMaxBufferSize(1024), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setMaxBufferSize(1024) target is: nonBlockingClientHandler method is: setMaxBufferSize(int)
statement is: nonBlockingClientHandler.setReadTimeout(5000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setReadTimeout(5000) target is: nonBlockingClientHandler method is: setReadTimeout(int)
statement is: nonBlockingClientHandler.setWriteTimeout(5000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setWriteTimeout(5000) target is: nonBlockingClientHandler method is: setWriteTimeout(int)
statement is: nonBlockingClientHandler.connect("localhost", 8080), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.connect("localhost", 8080) target is: nonBlockingClientHandler method is: connect(java.lang.String,int)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: getInitialHandshakeStatus()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean initialHandshakeStatus = nonBlockingClientHandler.getInitialHandshakeStatus()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        int handshakeStatus = nonBlockingClientHandler.getInitialHandshakeStatus();
        String message = "Initial handshake status is not successful";
        assertEquals(handshakeStatus, -1);// -1 indicates an unsuccessful initial handshake }}

    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int handshakeStatus = nonBlockingClientHandler.getInitialHandshakeStatus(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getInitialHandshakeStatus() target is: nonBlockingClientHandler method is: getInitialHandshakeStatus()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: getInitialHandshakeStatus()Z
statement is: String message = "Initial handshake status is not successful", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(handshakeStatus, -1)// -1 indicates an unsuccessful initial handshake }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(handshakeStatus, -1)// -1 indicates an unsuccessful initial handshake }}
 target is:  method is: assertEquals(int,int)
* this is vulnerable: String string = "Initial handshake status is not successful"
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();
String string = "Initial handshake status is not successful";

statement is: getWakeupSelectorAfterRegisterWrite()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean wakeupSelectorAfterRegisterWrite = NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite()
test data is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Before
        int wakeupSelectorAfterRegisterWrite = 100;
        // After
        int wakeupSelectorAfterRegisterWrite = 250;// ms }}

    }
}
statement is: // Before
int wakeupSelectorAfterRegisterWrite = 100, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // After
int wakeupSelectorAfterRegisterWrite = 250// ms }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 100
* this is vulnerable: int _int = 250
TestCase is: int _int = 100;
int _int = 250;

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.quickserver.net.server.TheClient()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.TheClient
statement code is: TheClient theClient = new TheClient()
statement is: org.quickserver.net.server.QuickServer(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.QuickServer
statement code is: QuickServer quickServer = new QuickServer("-ERR Pool Closed")
statement is: setServer(Lorg/quickserver/net/server/QuickServer;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: theClient.setServer(arg0)
statement is: handleClient(Lorg/quickserver/net/server/TheClient;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.handleClient(arg0)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("-ERR Pool Closed");
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        TheClient theClient = new TheClient();
        QuickServer quickServer = new QuickServer("-ERR Pool Closed");
        theClient.setServer(quickServer);
        nonBlockingClientHandler.handleClient(theClient);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TheClient theClient = new TheClient(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: QuickServer quickServer = new QuickServer("-ERR Pool Closed"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: theClient.setServer(quickServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: theClient.setServer(quickServer) target is: theClient method is: setServer(QuickServer)
source statement: org.quickserver.net.server.TheClient()V callee: VariableReference: Statement 1, type org.quickserver.net.server.TheClientindex is: 1
Matched Method is: setServer(Lorg/quickserver/net/server/QuickServer;)V
statement is: nonBlockingClientHandler.handleClient(theClient), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.handleClient(theClient) target is: nonBlockingClientHandler method is: handleClient(TheClient)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: handleClient(Lorg/quickserver/net/server/TheClient;)V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
String string = "-ERR Pool Closed";
QuickServer quickServer = new QuickServer(string);
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: getBlockingMode()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean blockingMode = nonBlockingClientHandler.getBlockingMode()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.setBlockingMode(true);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setBlockingMode(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setBlockingMode(true) target is: nonBlockingClientHandler method is: setBlockingMode(boolean)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: getThreadAccessCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount();
        assertEquals(0, threadAccessCount);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getThreadAccessCount() target is: nonBlockingClientHandler method is: getThreadAccessCount()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: getThreadAccessCount()I
statement is: assertEquals(0, threadAccessCount), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(0, threadAccessCount) target is:  method is: assertEquals(int,int)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();

statement is: setWakeupSelectorAfterRegisterWrite(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true)
test data is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true);
        // Improved test data:
        NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);// set to false for the opposite scenario }}

    }
}
statement is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true) target is: NonBlockingClientHandler method is: setWakeupSelectorAfterRegisterWrite(boolean)
Matched Method is: setWakeupSelectorAfterRegisterWrite(Z)V
statement is: // Improved test data:
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false)// set to false for the opposite scenario }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false)// set to false for the opposite scenario }}
 target is: NonBlockingClientHandler method is: setWakeupSelectorAfterRegisterWrite(boolean)
Matched Method is: setWakeupSelectorAfterRegisterWrite(Z)V
TestCase is: boolean _boolean = true;
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(_boolean);
boolean _boolean = false;
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(_boolean);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: readInputStream()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] readInputStream = nonBlockingClientHandler.readInputStream()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.readInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.readInputStream();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.readInputStream(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.readInputStream() target is: nonBlockingClientHandler method is: readInputStream()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: readInputStream()[B
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.readInputStream();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: getBufferedReader()Ljava/io/BufferedReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.BufferedReader
statement code is: BufferedReader bufferedReader = nonBlockingClientHandler.getBufferedReader()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBufferedReader();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.setBufferedReader(new BufferedReader(new InputStreamReader(new MockInputSteam("Hello World!"))));
        String input = nonBlockingClientHandler.getBufferedReader().readLine();
        System.out.println(input);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setBufferedReader(new BufferedReader(new InputStreamReader(new MockInputSteam("Hello World!")))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setBufferedReader(new BufferedReader(new InputStreamReader(new MockInputSteam("Hello World!")))) target is: nonBlockingClientHandler method is: setBufferedReader(BufferedReader)
statement is: String input = nonBlockingClientHandler.getBufferedReader().readLine(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getBufferedReader().readLine() target is: nonBlockingClientHandler.getBufferedReader() method is: readLine()
statement is: System.out.println(input), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println(input) target is: System.out method is: println(java.lang.String)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setSelectionKey((SelectionKey) null)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.setSelectionKey(new Object());// Improved test data: Set the selection key to a non-null value }}

    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setSelectionKey(new Object())// Improved test data: Set the selection key to a non-null value }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setSelectionKey(new Object())// Improved test data: Set the selection key to a non-null value }}
 target is: nonBlockingClientHandler method is: setSelectionKey(java.lang.Object)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setSelectionKey(Ljava/nio/channels/SelectionKey;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
SelectionKey selectionKey = null;
nonBlockingClientHandler.setSelectionKey(selectionKey);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@9b8613bc type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.ClientEvent
statement code is: ClientEvent clientEvent = ClientEvent.WRITE
statement is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.addEvent(arg0)
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.run()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        ClientEvent clientEvent = ClientEvent.READ;
        nonBlockingClientHandler.addEvent(clientEvent);
        nonBlockingClientHandler.run();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClientEvent clientEvent = ClientEvent.READ, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ClientEvent.READ is ClientEvent
CtField is: public static org.quickserver.net.server.ClientEvent org.quickserver.net.server.ClientEvent.WRITE ClientEvent WRITE
statement is: nonBlockingClientHandler.addEvent(clientEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.addEvent(clientEvent) target is: nonBlockingClientHandler method is: addEvent(ClientEvent)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: addEvent(Lorg/quickserver/net/server/ClientEvent;)V
statement is: nonBlockingClientHandler.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.run() target is: nonBlockingClientHandler method is: run()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: run()V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();

statement is: setMaxThreadAccessCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: NonBlockingClientHandler.setMaxThreadAccessCount(60000)
test data is: NonBlockingClientHandler.setMaxThreadAccessCount(60000);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.setMaxThreadAccessCount(100000);// Increased from 60000 to a higher value to ensure that the server can handle a larger number of concurrent requests. }}

    }
}
statement is: NonBlockingClientHandler.setMaxThreadAccessCount(100000)// Increased from 60000 to a higher value to ensure that the server can handle a larger number of concurrent requests. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.setMaxThreadAccessCount(100000)// Increased from 60000 to a higher value to ensure that the server can handle a larger number of concurrent requests. }}
 target is: NonBlockingClientHandler method is: setMaxThreadAccessCount(int)
Matched Method is: setMaxThreadAccessCount(I)V
TestCase is: int _int = 100000;
NonBlockingClientHandler.setMaxThreadAccessCount(_int);

statement is: setMaxThreadAccessCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: NonBlockingClientHandler.setMaxThreadAccessCount((-7))
test data is: NonBlockingClientHandler.setMaxThreadAccessCount((-7));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.setMaxThreadAccessCount(10);
    }
}
statement is: NonBlockingClientHandler.setMaxThreadAccessCount(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.setMaxThreadAccessCount(10) target is: NonBlockingClientHandler method is: setMaxThreadAccessCount(int)
Matched Method is: setMaxThreadAccessCount(I)V
TestCase is: int _int = 10;
NonBlockingClientHandler.setMaxThreadAccessCount(_int);

statement is: setMaxThreadAccessCount(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: NonBlockingClientHandler.setMaxThreadAccessCount((-1))
test data is: NonBlockingClientHandler.setMaxThreadAccessCount((-1));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for NonBlockingClientHandler.setMaxThreadAccessCount()
        NonBlockingClientHandler.setMaxThreadAccessCount(2);// Set the maximum number of threads that can access the client handler at any given time to 2 }}

    }
}
statement is: // Improved test data for NonBlockingClientHandler.setMaxThreadAccessCount()
NonBlockingClientHandler.setMaxThreadAccessCount(2)// Set the maximum number of threads that can access the client handler at any given time to 2 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data for NonBlockingClientHandler.setMaxThreadAccessCount()
NonBlockingClientHandler.setMaxThreadAccessCount(2)// Set the maximum number of threads that can access the client handler at any given time to 2 }}
 target is: NonBlockingClientHandler method is: setMaxThreadAccessCount(int)
Matched Method is: setMaxThreadAccessCount(I)V
TestCase is: int _int = 2;
NonBlockingClientHandler.setMaxThreadAccessCount(_int);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: returnThread()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.returnThread()
statement is: clean()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.clean()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.clean();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int timeout = 10000;// milliseconds

        String username = "johndoe";
        String password = "password123";
        boolean isSecure = false;
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(timeout, username, password, isSecure);
        nonBlockingClientHandler.returnThread();
        nonBlockingClientHandler.clean();
    }
}
statement is: // Improved test data
int timeout = 10000// milliseconds
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String username = "johndoe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String password = "password123", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isSecure = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(timeout, username, password, isSecure), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.returnThread(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.returnThread() target is: nonBlockingClientHandler method is: returnThread()
statement is: nonBlockingClientHandler.clean(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.clean() target is: nonBlockingClientHandler method is: clean()
* this is vulnerable: int _int = 10000
* this is vulnerable: String string = "johndoe"
* this is vulnerable: String string = "password123"
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 10000;
String string = "johndoe";
String string = "password123";
boolean _boolean = false;

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setInputStream((InputStream) null)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setInputStream((InputStream) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, World!".getBytes()));
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, World!".getBytes())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, World!".getBytes())) target is: nonBlockingClientHandler method is: setInputStream(ByteArrayInputStream)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setInputStream(Ljava/io/InputStream;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ObjectInputStream objectInputStream = null;
nonBlockingClientHandler.setInputStream(objectInputStream);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.AssignmentStatement@4e1a03fe type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: nonBlockingClientHandler.connection = true
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.closeConnection()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
nonBlockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private int connection = 0;// "no connection"


    public void closeConnection() {
        if (this.connection == 1) {
            System.out.println("Closing connection");
            this.connection = 0;
        } else {
            System.out.println("No connection to close");
        }
    }
}
statement is: if (this.connection == 1) {
    System.out.println("Closing connection");
    this.connection = 0;
} else {
    System.out.println("No connection to close");
}, class spoon.support.reflect.code.CtIfImpl
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: closeConnection()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.closeConnection()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int port = 80;
        String host = "localhost";
        boolean isSecure = false;
    }
}
statement is: int port = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String host = "localhost", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean isSecure = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 80
* this is vulnerable: String string = "localhost"
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 80;
String string = "localhost";
boolean _boolean = false;

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: setSecure(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setSecure(true)
statement is: closeIfSSLOutboundDone()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean closeIfSSLOutboundDone = nonBlockingClientHandler.closeIfSSLOutboundDone()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
nonBlockingClientHandler.closeIfSSLOutboundDone();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.setSecure(false);
        nonBlockingClientHandler.closeIfSSLOutboundDone();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setSecure(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setSecure(false) target is: nonBlockingClientHandler method is: setSecure(boolean)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setSecure(Z)V
statement is: nonBlockingClientHandler.closeIfSSLOutboundDone(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.closeIfSSLOutboundDone() target is: nonBlockingClientHandler method is: closeIfSSLOutboundDone()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: closeIfSSLOutboundDone()Z
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
boolean _boolean = false;
nonBlockingClientHandler.setSecure(_boolean);
nonBlockingClientHandler.closeIfSSLOutboundDone();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: closeIfSSLOutboundDone()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean closeIfSSLOutboundDone = nonBlockingClientHandler.closeIfSSLOutboundDone()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeIfSSLOutboundDone();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.closeIfSSLOutboundDone(true);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.closeIfSSLOutboundDone(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.closeIfSSLOutboundDone(true) target is: nonBlockingClientHandler method is: closeIfSSLOutboundDone(boolean)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: run()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.run()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.run();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler("localhost", 8080, 5);
        nonBlockingClientHandler.run();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler("localhost", 8080, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.run(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.run() target is: nonBlockingClientHandler method is: run()
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: checkReturnClientHandler()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean checkReturnClientHandler = nonBlockingClientHandler.checkReturnClientHandler()
statement is: checkReturnClientHandler()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean checkReturnClientHandler = nonBlockingClientHandler.checkReturnClientHandler()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.checkReturnClientHandler("127.0.0.1", 8080);
        nonBlockingClientHandler.checkReturnClientHandler("google.com", 443);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.checkReturnClientHandler("127.0.0.1", 8080), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.checkReturnClientHandler("127.0.0.1", 8080) target is: nonBlockingClientHandler method is: checkReturnClientHandler(java.lang.String,int)
statement is: nonBlockingClientHandler.checkReturnClientHandler("google.com", 443), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.checkReturnClientHandler("google.com", 443) target is: nonBlockingClientHandler method is: checkReturnClientHandler(java.lang.String,int)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: returnThread()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.returnThread()
statement is: returnClientHandler()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.returnClientHandler()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5, "abc", 123);
        nonBlockingClientHandler.returnThread();
        nonBlockingClientHandler.returnClientHandler();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(5, "abc", 123), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.returnThread(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.returnThread() target is: nonBlockingClientHandler method is: returnThread()
statement is: nonBlockingClientHandler.returnClientHandler(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.returnClientHandler() target is: nonBlockingClientHandler method is: returnClientHandler()
statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@fdb0d496 type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataMode
statement code is: DataMode dataMode = DataMode.OBJECT
statement is: org.evosuite.testcase.statements.FieldStatement@c663a1ff type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.IN
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setDataMode(arg0, arg1)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.IN;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler1 = new NonBlockingClientHandler();
        DataMode dataMode1 = DataMode.BLOCKING;
        DataType dataType1 = DataType.OUT;
        nonBlockingClientHandler1.setDataMode(dataMode1, dataType1);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler1 = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataMode dataMode1 = DataMode.BLOCKING, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataMode.BLOCKING is DataMode
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.OBJECT DataMode OBJECT
statement is: DataType dataType1 = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataMode org.quickserver.net.server.DataMode.OBJECT DataMode OBJECT
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.IN DataType IN
statement is: nonBlockingClientHandler1.setDataMode(dataMode1, dataType1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler1.setDataMode(dataMode1, dataType1) target is: nonBlockingClientHandler1 method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.IN;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: org.evosuite.testcase.statements.FieldStatement@c697d4fe type is: class org.evosuite.testcase.statements.FieldStatement return type class org.quickserver.net.server.DataType
statement code is: DataType dataType = DataType.OUT
statement is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setDataMode((DataMode) null, arg1)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, dataType);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        DataType dataType = DataType.OUT;
        nonBlockingClientHandler.setDataMode(((DataMode) (null)), dataType);
        // Improved test data:
        Integer integerExample = 10;// Instead of using a null value, this example uses an integer as the input for the DataMode parameter.

        String stringExample = "example";// This String is used as an example for the input of the DataType parameter.

        nonBlockingClientHandler.setDataMode(((DataMode) (integerExample)), dataType);
        nonBlockingClientHandler.setDataMode(((DataMode) (stringExample)), dataType);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DataType dataType = DataType.OUT, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: DataType.OUT is DataType
CtField is: public static org.quickserver.net.server.DataType org.quickserver.net.server.DataType.OUT DataType OUT
statement is: nonBlockingClientHandler.setDataMode(((DataMode) (null)), dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setDataMode(((DataMode) (null)), dataType) target is: nonBlockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: // Improved test data:
Integer integerExample = 10// Instead of using a null value, this example uses an integer as the input for the DataMode parameter.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringExample = "example"// This String is used as an example for the input of the DataType parameter.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: nonBlockingClientHandler.setDataMode(((DataMode) (integerExample)), dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setDataMode(((DataMode) (integerExample)), dataType) target is: nonBlockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
statement is: nonBlockingClientHandler.setDataMode(((DataMode) (stringExample)), dataType), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setDataMode(((DataMode) (stringExample)), dataType) target is: nonBlockingClientHandler method is: setDataMode(DataMode,DataType)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setDataMode(Lorg/quickserver/net/server/DataMode;Lorg/quickserver/net/server/DataType;)V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
DataType dataType = null;
nonBlockingClientHandler.setDataMode((DataMode) dataType, dataType);
int _int = 10;
String string = "example";
nonBlockingClientHandler.setDataMode((DataMode) _int, dataType);
nonBlockingClientHandler.setDataMode((DataMode) string, dataType);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: registerForWrite()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.registerForWrite()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerForWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.registerForWrite("Registration ABC123");// a more descriptive name for the registration }}

    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.registerForWrite("Registration ABC123")// a more descriptive name for the registration }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.registerForWrite("Registration ABC123")// a more descriptive name for the registration }}
 target is: nonBlockingClientHandler method is: registerForWrite(java.lang.String)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: getSocketChannel()Ljava/nio/channels/SocketChannel; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SocketChannel
statement code is: SocketChannel socketChannel = nonBlockingClientHandler.getSocketChannel()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getSocketChannel();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.getSocketChannel("localhost", 8080);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.getSocketChannel("localhost", 8080), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getSocketChannel("localhost", 8080) target is: nonBlockingClientHandler method is: getSocketChannel(java.lang.String,int)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setSocketChannel((SocketChannel) null)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.setSocketChannel(SocketChannel.open());
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.setSocketChannel(SocketChannel.open()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setSocketChannel(SocketChannel.open()) target is: nonBlockingClientHandler method is: setSocketChannel()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: setSocketChannel(Ljava/nio/channels/SocketChannel;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
SocketChannel socketChannel = null;
nonBlockingClientHandler.setSocketChannel(socketChannel);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: clean()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.clean()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.clean();
        // Improved test data
        int port = 80;
        String hostname = "example.com";
        nonBlockingClientHandler.connect(hostname, port);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.clean(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.clean() target is: nonBlockingClientHandler method is: clean()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: clean()V
statement is: // Improved test data
int port = 80, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String hostname = "example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: nonBlockingClientHandler.connect(hostname, port), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.connect(hostname, port) target is: nonBlockingClientHandler method is: connect(java.lang.String,int)
* this is vulnerable: int _int = 80
* this is vulnerable: String string = "example.com"
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();
int _int = 80;
String string = "example.com";

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-2209))
statement is: getSelectionKey()Ljava/nio/channels/SelectionKey; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.channels.SelectionKey
statement code is: SelectionKey selectionKey = nonBlockingClientHandler.getSelectionKey()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-2209));
nonBlockingClientHandler.getSelectionKey();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(10);
        nonBlockingClientHandler.getSelectionKey();
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.getSelectionKey(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getSelectionKey() target is: nonBlockingClientHandler method is: getSelectionKey()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler(I)V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 1
Matched Method is: getSelectionKey()Ljava/nio/channels/SelectionKey;
TestCase is: int _int = 10;
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(_int);
((NonBlockingClientHandler) _int).getSelectionKey();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: returnThread()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.returnThread()
statement is: getThreadAccessCount()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.getThreadAccessCount();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.returnThread("thread1");
        nonBlockingClientHandler.getThreadAccessCount(50);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.returnThread("thread1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.returnThread("thread1") target is: nonBlockingClientHandler method is: returnThread(java.lang.String)
statement is: nonBlockingClientHandler.getThreadAccessCount(50), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getThreadAccessCount(50) target is: nonBlockingClientHandler method is: getThreadAccessCount(int)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: setWakeupSelectorAfterRegisterRead(Z)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false)
statement is: getWakeupSelectorAfterRegisterRead()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean wakeupSelectorAfterRegisterRead = NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead()
test data is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
        NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
    }
}
statement is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false) target is: NonBlockingClientHandler method is: setWakeupSelectorAfterRegisterRead(boolean)
Matched Method is: setWakeupSelectorAfterRegisterRead(Z)V
statement is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead() target is: NonBlockingClientHandler method is: getWakeupSelectorAfterRegisterRead()
Matched Method is: getWakeupSelectorAfterRegisterRead()Z
TestCase is: boolean _boolean = false;
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(_boolean);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: allocate(I)Ljava/nio/ByteBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.ByteBuffer
statement code is: ByteBuffer allocate = ByteBuffer.allocate(201)
statement is: encrypt(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.nio.ByteBuffer
statement code is: ByteBuffer encrypt = nonBlockingClientHandler.encrypt(arg0)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ByteBuffer allocate = ByteBuffer.allocate(201);
nonBlockingClientHandler.encrypt(allocate);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        ByteBuffer allocate = ByteBuffer.allocate(2048);
        nonBlockingClientHandler.encrypt(allocate);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteBuffer allocate = ByteBuffer.allocate(2048), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ByteBuffer.allocate(2048) target is: ByteBuffer method is: allocate(int)
Matched Method is: allocate(I)Ljava/nio/ByteBuffer;
statement is: nonBlockingClientHandler.encrypt(allocate), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.encrypt(allocate) target is: nonBlockingClientHandler method is: encrypt(ByteBuffer)
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: encrypt(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
int _int = 2048;
ByteBuffer allocate = ByteBuffer.allocate(_int);
nonBlockingClientHandler.encrypt(allocate);

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: registerForRead()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.registerForRead()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerForRead();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.registerForRead();// This line registers the handler for reading data from the server }}

    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.registerForRead()// This line registers the handler for reading data from the server }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.registerForRead()// This line registers the handler for reading data from the server }}
 target is: nonBlockingClientHandler method is: registerForRead()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: registerForRead()V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerForRead();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: registerWrite()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.registerWrite()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerWrite();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.registerWrite();
        // Improved test data:
        String expectedMessage = "Hello, World!";
        int expectedResponseCode = 200;
        // Actual test:
        nonBlockingClientHandler.handleRequest(expectedMessage);
        int actualResponseCode = nonBlockingClientHandler.getResponseCode();
        assertEquals(actualResponseCode, expectedResponseCode);
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.registerWrite(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.registerWrite() target is: nonBlockingClientHandler method is: registerWrite()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: registerWrite()V
statement is: // Improved test data:
String expectedMessage = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int expectedResponseCode = 200, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Actual test:
nonBlockingClientHandler.handleRequest(expectedMessage), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Actual test:
nonBlockingClientHandler.handleRequest(expectedMessage) target is: nonBlockingClientHandler method is: handleRequest(java.lang.String)
statement is: int actualResponseCode = nonBlockingClientHandler.getResponseCode(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.getResponseCode() target is: nonBlockingClientHandler method is: getResponseCode()
statement is: assertEquals(actualResponseCode, expectedResponseCode), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(actualResponseCode, expectedResponseCode) target is:  method is: assertEquals(int,int)
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: int _int = 200
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerWrite();
String string = "Hello, World!";
int _int = 200;

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: updateInputOutputStreams()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.updateInputOutputStreams()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.updateInputOutputStreams();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Set up a mock client handler for testing purposes
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        // Update the input and output streams to simulate a real-world scenario
        nonBlockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, world!".getBytes()));
        nonBlockingClientHandler.setOutputStream(new ByteArrayOutputStream());
        // Run the test case
        nonBlockingClientHandler.updateInputOutputStreams();
    }
}
statement is: // Set up a mock client handler for testing purposes
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Update the input and output streams to simulate a real-world scenario
nonBlockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, world!".getBytes())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Update the input and output streams to simulate a real-world scenario
nonBlockingClientHandler.setInputStream(new ByteArrayInputStream("Hello, world!".getBytes())) target is: nonBlockingClientHandler method is: setInputStream(ByteArrayInputStream)
statement is: nonBlockingClientHandler.setOutputStream(new ByteArrayOutputStream()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.setOutputStream(new ByteArrayOutputStream()) target is: nonBlockingClientHandler method is: setOutputStream(ByteArrayOutputStream)
statement is: // Run the test case
nonBlockingClientHandler.updateInputOutputStreams(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Run the test case
nonBlockingClientHandler.updateInputOutputStreams() target is: nonBlockingClientHandler method is: updateInputOutputStreams()
source statement: org.quickserver.net.server.impl.NonBlockingClientHandler()V callee: VariableReference: Statement 0, type org.quickserver.net.server.impl.NonBlockingClientHandlerindex is: 0
Matched Method is: updateInputOutputStreams()V
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.updateInputOutputStreams();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: waitTillFullyWritten()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.waitTillFullyWritten()
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.waitTillFullyWritten();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        nonBlockingClientHandler.waitTillFullyWritten(new File("large_file.txt"), (1024 * 1024) * 5);// 5 MB }}

    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: nonBlockingClientHandler.waitTillFullyWritten(new File("large_file.txt"), (1024 * 1024) * 5)// 5 MB }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: nonBlockingClientHandler.waitTillFullyWritten(new File("large_file.txt"), (1024 * 1024) * 5)// 5 MB }}
 target is: nonBlockingClientHandler method is: waitTillFullyWritten(File,int)
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

statement is: org.quickserver.net.server.impl.NonBlockingClientHandler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.quickserver.net.server.impl.NonBlockingClientHandler
statement code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler()
statement is: setClientWriteHandler(Lorg/quickserver/net/server/ClientWriteHandler;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null)
test data is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
        // Handle successful write
        // Handle write error }}
    }
}
statement is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Handle successful write, class spoon.support.reflect.code.CtCommentImpl
statement is: // Handle write error }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

* test suite isTestSuite: 76
Test 0: 
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 1: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 2: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
Test 3: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();
Test 4: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 5: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("-ERR Pool Closed");
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);
Test 6: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();
Test 7: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();
Test 8: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true);
Test 9: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
try { 
  nonBlockingClientHandler.readInputStream();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // InputStream can't be null!
   //
   verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
}

Test 10: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.getBufferedReader();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Access to BufferedReader in not allowed in Non-Blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 11: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
Test 12: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();
Test 13: 
NonBlockingClientHandler.setMaxThreadAccessCount(60000);
Test 14: 
// Undeclared exception!
try { 
  NonBlockingClientHandler.setMaxThreadAccessCount((-7));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Value should be >=3 or -1
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 15: 
NonBlockingClientHandler.setMaxThreadAccessCount((-1));
Test 16: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.clean();
Test 17: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setInputStream((InputStream) null);
Test 18: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeConnection();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 19: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();
Test 20: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 21: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Client is not in secure mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 22: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.run();
Test 23: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
Test 24: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();
Test 25: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.IN;
// Undeclared exception!
try { 
  nonBlockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 26: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, dataType);
Test 27: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClientWriteHandler has not been set!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 28: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getSocketChannel();
Test 29: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
Test 30: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();
Test 31: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-2209));
// Undeclared exception!
try { 
  nonBlockingClientHandler.getSelectionKey();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 32: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.getThreadAccessCount();
Test 33: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 34: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ByteBuffer allocate = ByteBuffer.allocate(201);
try { 
  nonBlockingClientHandler.encrypt(allocate);
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 35: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForRead();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 36: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerWrite();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 37: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Null charset name
   //
   verifyException("java.nio.charset.Charset", e);
}

Test 38: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.waitTillFullyWritten();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 39: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
Test 40: 

Test 41: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 42: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();

Test 43: 

Test 44: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("-ERR Pool Closed");
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);

Test 45: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 46: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();

Test 47: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true);
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);

Test 48: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.readInputStream();

Test 49: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 50: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);

Test 51: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();

Test 52: 
NonBlockingClientHandler.setMaxThreadAccessCount(100000);

Test 53: 
NonBlockingClientHandler.setMaxThreadAccessCount(10);

Test 54: 
NonBlockingClientHandler.setMaxThreadAccessCount(2);

Test 55: 

Test 56: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setInputStream((InputStream) null);

Test 57: 

Test 58: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(false);
nonBlockingClientHandler.closeIfSSLOutboundDone();

Test 59: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 60: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 61: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.IN;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

Test 62: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) dataType, (DataType) null);
int _int = 10;
String string = "example";
nonBlockingClientHandler.setDataMode((DataMode) _int, dataType);
nonBlockingClientHandler.setDataMode((DataMode) string, dataType);

Test 63: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 64: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 65: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);

Test 66: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();

Test 67: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(10);
((NonBlockingClientHandler)10).getSelectionKey();

Test 68: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 69: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();

Test 70: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ByteBuffer allocate = ByteBuffer.allocate(2048);
nonBlockingClientHandler.encrypt(allocate);

Test 71: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerForRead();

Test 72: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerWrite();

Test 73: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.updateInputOutputStreams();

Test 74: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 75: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();


* Generated after the refinement and before minimization 76 tests with total length 153
* test suite isTestSuite: 76
Test 0: 
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 1: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 2: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
Test 3: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();
Test 4: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 5: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("-ERR Pool Closed");
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);
Test 6: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();
Test 7: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();
Test 8: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true);
Test 9: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
try { 
  nonBlockingClientHandler.readInputStream();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // InputStream can't be null!
   //
   verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
}

Test 10: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.getBufferedReader();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Access to BufferedReader in not allowed in Non-Blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 11: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
Test 12: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();
Test 13: 
NonBlockingClientHandler.setMaxThreadAccessCount(60000);
Test 14: 
// Undeclared exception!
try { 
  NonBlockingClientHandler.setMaxThreadAccessCount((-7));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Value should be >=3 or -1
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 15: 
NonBlockingClientHandler.setMaxThreadAccessCount((-1));
Test 16: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.clean();
Test 17: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setInputStream((InputStream) null);
Test 18: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeConnection();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 19: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();
Test 20: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 21: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Client is not in secure mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 22: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.run();
Test 23: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
Test 24: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();
Test 25: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.IN;
// Undeclared exception!
try { 
  nonBlockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 26: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, dataType);
Test 27: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClientWriteHandler has not been set!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 28: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getSocketChannel();
Test 29: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
Test 30: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();
Test 31: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-2209));
// Undeclared exception!
try { 
  nonBlockingClientHandler.getSelectionKey();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 32: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.getThreadAccessCount();
Test 33: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 34: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ByteBuffer allocate = ByteBuffer.allocate(201);
try { 
  nonBlockingClientHandler.encrypt(allocate);
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 35: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForRead();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 36: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerWrite();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 37: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Null charset name
   //
   verifyException("java.nio.charset.Charset", e);
}

Test 38: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.waitTillFullyWritten();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 39: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
Test 40: 

Test 41: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 42: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();

Test 43: 

Test 44: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("-ERR Pool Closed");
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);

Test 45: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 46: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();

Test 47: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true);
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);

Test 48: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.readInputStream();

Test 49: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 50: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);

Test 51: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();

Test 52: 
NonBlockingClientHandler.setMaxThreadAccessCount(100000);

Test 53: 
NonBlockingClientHandler.setMaxThreadAccessCount(10);

Test 54: 
NonBlockingClientHandler.setMaxThreadAccessCount(2);

Test 55: 

Test 56: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setInputStream((InputStream) null);

Test 57: 

Test 58: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(false);
nonBlockingClientHandler.closeIfSSLOutboundDone();

Test 59: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 60: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 61: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.IN;
nonBlockingClientHandler.setDataMode(dataMode, dataType);

Test 62: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) dataType, (DataType) null);
int _int = 10;
String string = "example";
nonBlockingClientHandler.setDataMode((DataMode) _int, dataType);
nonBlockingClientHandler.setDataMode((DataMode) string, dataType);

Test 63: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 64: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 65: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);

Test 66: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();

Test 67: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler(10);
((NonBlockingClientHandler)10).getSelectionKey();

Test 68: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 69: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();

Test 70: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ByteBuffer allocate = ByteBuffer.allocate(2048);
nonBlockingClientHandler.encrypt(allocate);

Test 71: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerForRead();

Test 72: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.registerWrite();

Test 73: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.updateInputOutputStreams();

Test 74: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();

Test 75: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();


* Minimizing test suite
* test suite isTestSuite: 40
Test 0: 
NonBlockingClientHandler.getMaxThreadAccessCount();
Test 1: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 2: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
Test 3: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getInitialHandshakeStatus();
Test 4: 
NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
Test 5: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
TheClient theClient = new TheClient();
QuickServer quickServer = new QuickServer("-ERR Pool Closed");
theClient.setServer(quickServer);
nonBlockingClientHandler.handleClient(theClient);
Test 6: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
Test 7: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getBlockingMode();
Test 8: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getThreadAccessCount();
Test 9: 
NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true);
Test 10: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
try { 
  nonBlockingClientHandler.readInputStream();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // InputStream can't be null!
   //
   verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
}

Test 11: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.getBufferedReader();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Access to BufferedReader in not allowed in Non-Blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 12: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
Test 13: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForRead();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 14: 
NonBlockingClientHandler.setMaxThreadAccessCount(10);
Test 15: 
// Undeclared exception!
try { 
  NonBlockingClientHandler.setMaxThreadAccessCount(2);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Value should be >=3 or -1
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 16: 
NonBlockingClientHandler.setMaxThreadAccessCount((-1));
Test 17: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.clean();
Test 18: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setInputStream((InputStream) null);
Test 19: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeConnection();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 20: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();
Test 21: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 22: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Client is not in secure mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 23: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent clientEvent = ClientEvent.WRITE;
nonBlockingClientHandler.addEvent(clientEvent);
nonBlockingClientHandler.run();
Test 24: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.run();
Test 25: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
Test 26: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();
Test 27: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode dataMode = DataMode.OBJECT;
DataType dataType = DataType.IN;
// Undeclared exception!
try { 
  nonBlockingClientHandler.setDataMode(dataMode, dataType);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 28: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType dataType = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, dataType);
Test 29: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClientWriteHandler has not been set!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 30: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ByteBuffer allocate = ByteBuffer.allocate(2048);
try { 
  nonBlockingClientHandler.encrypt(allocate);
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 31: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getSocketChannel();
Test 32: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
Test 33: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();
Test 34: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-2209));
// Undeclared exception!
try { 
  nonBlockingClientHandler.getSelectionKey();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 35: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.getThreadAccessCount();
Test 36: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerWrite();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 37: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Null charset name
   //
   verifyException("java.nio.charset.Charset", e);
}

Test 38: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.waitTillFullyWritten();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}

Test 39: 
NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 13%
* Total number of goals: 501
* Number of covered goals: 67
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 21%
* Total number of goals: 723
* Number of covered goals: 152
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 14%
* Total number of goals: 78
* Number of covered goals: 11
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 13%
* Total number of goals: 501
* Number of covered goals: 67
* Generated 40 tests with total length 88
* Resulting test suite's coverage: 30% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 35%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: int maxThreadAccessCount = NonBlockingClientHandler.getMaxThreadAccessCount();
assertEquals(5, maxThreadAccessCount);


** It was a parseable test case! 
refined test name is: testGetMaxThreadAccessCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean wakeupSelectorAfterRegisterRead = NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
assertTrue(wakeupSelectorAfterRegisterRead);


** It was a parseable test case! 
refined test name is: testGetWakeupSelectorAfterRegisterReadReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.finalize();
assertEquals("<ClientHandler-Pool#-1-ID:1>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testNameForNonBlockingClientHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
boolean initialHandshakeStatus = nonBlockingClientHandler.getInitialHandshakeStatus();
assertEquals("<ClientHandler-Pool#-1-ID:31>", nonBlockingClientHandler.getName());
assertFalse(initialHandshakeStatus);


** It was a parseable test case! 
refined test name is: testGetNameFromNonBlockingClientHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean wakeupSelectorAfterRegisterWrite = NonBlockingClientHandler.getWakeupSelectorAfterRegisterWrite();
assertTrue(wakeupSelectorAfterRegisterWrite);


** It was a parseable test case! 
refined test name is: testDefaultWakeupSelectorAfterRegisterWrite
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
boolean wakeupSelectorAfterRegisterRead = NonBlockingClientHandler.getWakeupSelectorAfterRegisterRead();
assertFalse(wakeupSelectorAfterRegisterRead);


** It was a parseable test case! 
refined test name is: testSetAndGetWakeupSelectorAfterRegisterRead
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
boolean blockingMode = nonBlockingClientHandler.getBlockingMode();
assertEquals("<ClientHandler-Pool#-1-ID:52>", nonBlockingClientHandler.getName());
assertFalse(blockingMode);


** It was a parseable test case! 
refined test name is: testGetNameAndBlockingMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount();
assertEquals("<ClientHandler-Pool#-1-ID:58>", nonBlockingClientHandler.getName());
assertEquals(0, threadAccessCount);


** It was a parseable test case! 
refined test name is: testGetNameAndThreadAccessCount
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(true);

** It was a parseable test case! 
refined test name is: testSetWakeupSelectorAfterRegisterWrite
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
try { 
  nonBlockingClientHandler.readInputStream();
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // InputStream can't be null!
   //
   verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testReadInputStreamThrowsExceptionOnNullInput
* Compiling Tests
refined test name is: testReadInputStreamWithNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.getBufferedReader();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Access to BufferedReader in not allowed in Non-Blocking mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testGetBufferedReaderInNonBlockingMode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSelectionKey((SelectionKey) null);
assertEquals("<ClientHandler-Pool#-1-ID:82>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testSetSelectionKeyNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForRead();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testRegisterForReadWithNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler.setMaxThreadAccessCount(10);

** It was a parseable test case! 
refined test name is: testSetMaxThreadAccessCountValidValueReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: // Undeclared exception!
try { 
  NonBlockingClientHandler.setMaxThreadAccessCount(2);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Value should be >=3 or -1
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testSetMaxThreadAccessCountInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler.setMaxThreadAccessCount((-1));

** It was a parseable test case! 
refined test name is: testSetMaxThreadAccessCountWithNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.clean();
assertEquals("<ClientHandler-Pool#-1-ID:94>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testReturnThreadAndCleanUpResources
* Compiling Tests
refined test name is: testNonBlockingClientHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setInputStream((InputStream) null);
assertEquals("<ClientHandler-Pool#-1-ID:166>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testNonNullInputStream
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.connection = true;
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeConnection();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testCloseConnectionNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.closeConnection();
assertEquals("<ClientHandler-Pool#-1-ID:204>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testCloseConnectionSetsNameUniqueValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSecure(true);
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testCloseIfSSLOutboundDoneWithoutHandshake
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.closeIfSSLOutboundDone();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // Client is not in secure mode!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testCloseIfSSLOutboundDone
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ClientEvent arg0 = ClientEvent.WRITE;
nonBlockingClientHandler.addEvent(arg0);
nonBlockingClientHandler.run();
assertTrue(nonBlockingClientHandler.getWillClean());


** It was a parseable test case! 
refined test name is: testNonBlockingClientHandlergetWillClean
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.run();
assertEquals("<ClientHandler-Pool#-1-ID:326>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testNonBlockingClientHandlerName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.checkReturnClientHandler();
boolean checkReturnClientHandler = nonBlockingClientHandler.checkReturnClientHandler();
assertEquals("<ClientHandler-Pool#-1-ID:334>", nonBlockingClientHandler.getName());
assertFalse(checkReturnClientHandler);


** It was a parseable test case! 
refined test name is: testCheckReturnClientHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
nonBlockingClientHandler.returnClientHandler();
assertEquals((-1), nonBlockingClientHandler.getThreadAccessCount());


** It was a parseable test case! 
refined test name is: testReturnThread
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataMode arg0 = DataMode.OBJECT;
DataType arg1 = DataType.IN;
// Undeclared exception!
try { 
  nonBlockingClientHandler.setDataMode(arg0, arg1);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testSetDataModeWithNullArgumentThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
DataType arg1 = DataType.OUT;
nonBlockingClientHandler.setDataMode((DataMode) null, arg1);
assertEquals("<ClientHandler-Pool#-1-ID:443>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: getCorrectNameWhenDataModeIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerForWrite();
  fail("Expecting exception: IllegalStateException");

} catch(IllegalStateException e) {
   //
   // ClientWriteHandler has not been set!
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testRegisterForWritePreconditionViolation
* Compiling Tests
refined test name is: setClientWriteHandlerTest
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
ByteBuffer arg0 = ByteBuffer.allocate(2048);
try { 
  nonBlockingClientHandler.encrypt(arg0);
  fail("Expecting exception: IOException");

} catch(IOException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testEncryptWithInvalidDataThrowsIOException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.getSocketChannel();
assertEquals("<ClientHandler-Pool#-1-ID:478>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testGetSocketChannelShouldReturnNewSocketChannel
* Compiling Tests
refined test name is: testGetSocketChannelShouldReturnNewSocketChannel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setSocketChannel((SocketChannel) null);
assertEquals("<ClientHandler-Pool#-1-ID:483>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testGetNameWhenSocketChannelIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.clean();
assertEquals("<ClientHandler-Pool#-1-ID:488>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testCleanAndGetNameNonBlockingClientHandler
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler((-2209));
// Undeclared exception!
try { 
  nonBlockingClientHandler.getSelectionKey();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testGetSelectionKeyThrowsNullPointerException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.returnThread();
int threadAccessCount = nonBlockingClientHandler.getThreadAccessCount();
assertEquals((-1), threadAccessCount);


** It was a parseable test case! 
refined test name is: testNonBlockingClientHandlerReturnsThread
* Compiling Tests
refined test name is: testGetThreadAccessCountreturnsMinusOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.registerWrite();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testRegisterWriteWithNullBufferThrowsNPE
* Compiling Tests
refined test name is: testRegisterWritewithNullWriteBuffer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.updateInputOutputStreams();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Null charset name
   //
   verifyException("java.nio.charset.Charset", e);
}


** It was a parseable test case! 
refined test name is: testUpdateInputOutputStreamsWithNullCharsetName
* Compiling Tests
refined test name is: testUpdateInputOutputStreamsWithNullCharsetName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
// Undeclared exception!
try { 
  nonBlockingClientHandler.waitTillFullyWritten();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("org.quickserver.net.server.impl.NonBlockingClientHandler", e);
}


** It was a parseable test case! 
refined test name is: testWaitTillFullyWrittenthrowsNPEWhenNoBuffer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: NonBlockingClientHandler nonBlockingClientHandler = new NonBlockingClientHandler();
nonBlockingClientHandler.setClientWriteHandler((ClientWriteHandler) null);
assertEquals("<ClientHandler-Pool#-1-ID:580>", nonBlockingClientHandler.getName());


** It was a parseable test case! 
refined test name is: testSetClientWriteHandlerNull
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:24.592 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:19:25.020 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
* Compiling Tests
[MASTER] 11:19:26.209 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:26.229 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:26.398 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:26.400 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:26.472 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:26.474 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:26.565 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:26.567 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:26.705 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:26.708 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:26.814 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:26.818 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:26.973 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:26.980 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:27.084 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:27.087 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:19:27.191 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:27.193 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:27.291 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:27.294 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:27.376 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:27.379 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:27.475 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:27.478 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:27.571 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:27.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:27.665 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:27.667 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:27.752 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:27.768 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:19:27.893 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:27.895 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:28.055 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:28.060 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:28.186 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:28.187 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:28.298 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:28.301 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:28.432 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:28.435 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:28.622 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:19:28.625 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
* Compiling Tests
[MASTER] 11:19:28.818 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:19:28.821 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
* Compiling Tests
[MASTER] 11:19:28.940 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:19:28.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
* Compiling Tests
[MASTER] 11:19:29.037 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:19:29.039 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
* Compiling Tests
[MASTER] 11:19:29.171 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:19:29.174 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
* Compiling Tests
[MASTER] 11:19:29.304 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:29.307 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
[MASTER] 11:19:29.413 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:19:29.416 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:19:30.473 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:30.501 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:31.503 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:31.517 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:19:32.129 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:32.149 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:32.741 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:32.761 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:33.250 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:33.252 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:33.364 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:33.367 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:19:33.513 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:33.529 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:19:34.554 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:34.557 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:19:35.637 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:35.657 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:36.609 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:36.612 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:19:37.121 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:37.124 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 9 called: 0 to improve: false
** Write a test suite: 16 called: 1 to improve: false
** Write a test suite: 28 called: 2 to improve: false
** Write a test suite: 30 called: 3 to improve: false
** Write a test suite: 34 called: 4 to improve: false
** Write a test suite: 35 called: 5 to improve: false
** Write a test suite: 36 called: 6 to improve: false
[MASTER] 11:19:38.455 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:19:38.477 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
** Write a test suite: 4 called: 2 to improve: false
** Write a test suite: 8 called: 3 to improve: false
** Write a test suite: 10 called: 4 to improve: false
** Write a test suite: 22 called: 5 to improve: false
** Write a test suite: 29 called: 6 to improve: false
[MASTER] 11:19:39.716 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar1144860932173329465.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
* Writing tests to file
[MASTER] 11:19:39.737 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar1144860932173329465.jar
* Writing JUnit test case 'NonBlockingClientHandler_ESTest' to evosuite-tests
** Write a test suite: 2 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
** Write a test suite: 4 called: 2 to improve: false
** Write a test suite: 8 called: 3 to improve: false
** Write a test suite: 10 called: 4 to improve: false
** Write a test suite: 22 called: 5 to improve: false
** Write a test suite: 29 called: 6 to improve: false
* Done!

* Computation finished
