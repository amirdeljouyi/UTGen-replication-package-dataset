/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 10:03:35 GMT 2024
 */

package org.templateit;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.templateit.Reference;
import org.templateit.Region;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Region_ESTest extends Region_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartReturningNull() throws Throwable  {
      // Given: A new Region object has been created
      Region region = new Region();
      
      // When: The start method is called on the Region object
      Reference start = region.start();
      
      // Then: The start method should return null
      assertNull(start);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartReturningReferenceWhereColumnIsZero() throws Throwable  {
      // Given: A reference and a region with the reference as its start
      Reference arg1 = new Reference(0, 0);
      Region region = new Region(arg1, arg1);
      
      // When: We call the start method on the region
      Reference start = region.start();
      
      // Then: The start of the region is equal to the reference we provided as its start
      assertEquals(0, start.column());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartReturningReferenceWhereColumnIsPositive() throws Throwable  {
      // Create a new reference with row and column values of 0 and 1769 respectively
      Reference arg1 = new Reference(0, 1769);
      
      // Create a new region with the given start and end references
      Region region = new Region(arg1, arg1);
      
      // Get the start reference of the region
      Reference start = region.start();
      
      // Assert that the row value of the start reference is 0
      assertEquals(0, start.row());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndReturningNull() throws Throwable  {
      // Given a non-empty region
      Region region = new Region();
      
      // When we call the end method on this region
      Reference end = region.end();
      
      // Then the result should be null
      assertNull(end);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndReturningReferenceWhereColumnIsZeroAndReferenceWhereRowIsZero() throws Throwable  {
      // Given a reference and a region
      Reference ref1 = new Reference(0, 0);
      Region region = new Region(ref1, ref1);
      
      // When we call the end() method on the region
      Reference actualEnd = region.end();
      
      // Then the end reference should be the same as the original reference
      assertSame(ref1, actualEnd);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndReturningReferenceWhereColumnIsPositive() throws Throwable  {
      // Given: a reference object and a region
      Reference reference = new Reference((-1), 2546);
      Region region = new Region(reference, reference);
      
      // When: getting the end of the region
      Reference end = region.end();
      
      // Then: the row of the end reference should be -1
      assertEquals(-1, end.row());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetEndReferenceWithReferenceWhereRowIsPositive() throws Throwable  {
      // Given a region with start and end references
      Reference startRef = new Reference(2893, (-1920));
      Reference endRef = new Reference(0, (-1));
      Region region = new Region(startRef, endRef);
      
      // When we check if the region contains a reference
      boolean contains = region.contains(endRef);
      
      // Then we expect it to contain the reference
      assertFalse(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsWithReferenceWhereColumnIsPositive() throws Throwable  {
      // Given a Region with the coordinates (0, 0) and (1023, 944), and a Reference at (1024, 945)
      Reference arg1 = new Reference(0, 0);
      Region region = new Region(arg1, arg1);
      Reference arg0 = new Reference(1024, 945);
      
      // When the method contains is called with this Reference
      boolean contains = region.contains(arg0);
      
      // Then the result should be false
      assertFalse(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetStartReference() throws Throwable  {
      // Given a Region with the same start and end reference
      Region region = new Region();
      Reference arg0 = new Reference((-1), (-1));
      region.setStartReference(arg0);
      region.setEndReference(arg0);
      
      // When we call contains() method with the same start and end reference
      boolean contains = region.contains(arg0);
      
      // Then the result should be true
      assertTrue(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsWithReferenceWhereRowIsZero() throws Throwable  {
      // Create a reference with x and y coordinates of 0
      Reference ref = new Reference(0, 0);
      
      // Create a region with the same x and y coordinates as the reference
      Region region = new Region(ref, ref);
      
      // Check if the region contains the reference
      boolean contains = region.contains(ref);
      
      // Assert that the region does contain the reference
      assertTrue(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testContainsReturningFalse() throws Throwable  {
      // rollbacked to evosuite
      Reference arg1 = new Reference(0, (-2132));
      Region region = new Region(arg1, arg1);
      Reference arg0 = new Reference((-2132), 0);
      boolean contains = region.contains(arg0);
      assertFalse(contains);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      // Given a new instance of the Region class
      Region region = new Region();
      
      // When the toString() method is called on the region
      String string = region.toString();
      
      // Then the output should be "null,null"
      assertEquals("null,null", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartReturningReferenceWhereColumnIsNegative() throws Throwable  {
      // Given
      Reference arg1 = new Reference(2893, (-1920));
      Region region = new Region(arg1, arg1);
      
      // When
      Reference start = region.start();
      
      // Then
      assertSame(arg1, start);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndReturningReferenceWhereColumnIsNegative() throws Throwable  {
      // Given a reference with a column value of -1920 and a row value of 2893
      Reference arg1 = new Reference(2893, (-1920));
      
      // When creating a region with the given reference as its start and end
      Region region = new Region(arg1, arg1);
      
      // Then the end of the region should have a column value of -1920
      assertEquals((-1920), region.end().column());
  }
}
