* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: glengineer.blocks.Block
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/40_glengineer/evosuite-files/evosuite.properties
* Connecting to master process on port 21828
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 03:01:51.674 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 03:01:51.678 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 03:01:51.708 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 03:01:51.715 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class glengineer.blocks.Block
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 125
* Using seed 1710212509172
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 68 / 125
[Progress:>                             0%] [Cov:====>                              12%][Progress:>                             1%] [Cov:==========>                        31%][Progress:>                             1%] [Cov:===========>                       33%][Progress:>                             1%] [Cov:===========>                       33%][Progress:>                             2%] [Cov:===========>                       33%][Progress:>                             2%] [Cov:============>                      35%][Progress:>                             2%] [Cov:============>                      35%][Progress:>                             2%] [Cov:============>                      35%][Progress:>                             3%] [Cov:============>                      35%][Progress:>                             3%] [Cov:============>                      35%][Progress:>                             3%] [Cov:============>                      35%][Progress:>                             3%] [Cov:============>                      35%][Progress:>                             3%] [Cov:============>                      35%][Progress:>                             3%] [Cov:============>                      35%][Progress:=>                            4%] [Cov:============>                      35%][Progress:=>                            4%] [Cov:============>                      35%][Progress:=>                            4%] [Cov:============>                      35%][Progress:=>                            4%] [Cov:============>                      35%][Progress:=>                            4%] [Cov:============>                      36%][Progress:=>                            4%] [Cov:================>                  46%][Progress:=>                            5%] [Cov:================>                  46%][Progress:=>                            5%] [Cov:====================>              58%][Progress:=>                            5%] [Cov:====================>              58%][Progress:=>                            5%] [Cov:====================>              58%][Progress:=>                            5%] [Cov:======================>            64%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:========================>          69%][Progress:=>                            6%] [Cov:========================>          69%][Progress:=>                            6%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           7%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        75%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          11%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          12%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         14%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         15%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:=========================>    86%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   87%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   88%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:==========================>   89%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  90%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  91%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  92%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:===========================>  93%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 94%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 95%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:============================> 96%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>97%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>98%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:=============================>99%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%][Progress:==============================100%] [Cov:===========================>       79%]
* Search finished after 102s and 1458 generations, 381524 statements, best individual has fitness: 21.0
* Generated before the refinement 23 tests with total length 112
statement is: org.evosuite.testcase.statements.ArrayStatement@3139054e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4a5577c2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "p"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: extractSequentialSubblocks()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<glengineer.blocks.Block>
statement code is: List<Block> extractSequentialSubblocks = horizontalBlock.extractSequentialSubblocks()
test data is: String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractSequentialSubblocks();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "a";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.extractSequentialSubblocks();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "a", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"a" Ct is: stringArray[0] = "a"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.extractSequentialSubblocks(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.extractSequentialSubblocks() target is: horizontalBlock method is: extractSequentialSubblocks()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 4
Matched Method is: extractSequentialSubblocks()Ljava/util/List;
TestCase is: String[] stringArray = new String[1];
String string = "a";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).extractSequentialSubblocks();

statement is: org.evosuite.testcase.statements.ArrayStatement@a0688dc5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8708b54 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "char position out of table"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: textAt(III)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String textAt = horizontalBlock.textAt(0, 1, 0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 1, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a test string";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.textAt(0, 1, 0);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string" Ct is: stringArray[0] = "This is a test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.textAt(0, 1, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.textAt(0, 1, 0) target is: horizontalBlock method is: textAt(int,int,int)
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 4
Matched Method is: textAt(III)Ljava/lang/String;
TestCase is: String[] stringArray = new String[1];
String string = "This is a test string";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 1;
int _int = 0;
scheme.textAt(_int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@6d01da0d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d8909f06 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "p"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: getUpperLine()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String upperLine = horizontalBlock.getUpperLine()
test data is: String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "abcdefghijklmnopqrstuvwxyz";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.getUpperLine();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "abcdefghijklmnopqrstuvwxyz", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abcdefghijklmnopqrstuvwxyz" Ct is: stringArray[0] = "abcdefghijklmnopqrstuvwxyz"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.getUpperLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.getUpperLine() target is: horizontalBlock method is: getUpperLine()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 4
Matched Method is: getUpperLine()Ljava/lang/String;
TestCase is: String[] stringArray = new String[1];
String string = "abcdefghijklmnopqrstuvwxyz";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).getUpperLine();

statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock((Scheme) null, (-1822), (-1822), (-1822), (-1822))
test data is: HorizontalBlock horizontalBlock = new HorizontalBlock((Scheme) null, (-1822), (-1822), (-1822), (-1822));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HorizontalBlock horizontalBlock = new HorizontalBlock(Scheme.LIGHT, 10, 20, 30, 40);
    }
}
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(Scheme.LIGHT, 10, 20, 30, 40), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 10;
int _int = 20;
int _int = 30;
int _int = 40;
HorizontalBlock horizontalBlock = new HorizontalBlock((Scheme) _int, _int, _int, _int, (-1822));

statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, 35, (-238), (-238), (-238))
test data is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, 35, (-238), (-238), (-238));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        VerticalBlock verticalBlock = new VerticalBlock(new Scheme("BubbleSort", "Bubble Sort Algorithm"), 1000, 10, 5, 3);
    }
}
statement is: VerticalBlock verticalBlock = new VerticalBlock(new Scheme("BubbleSort", "Bubble Sort Algorithm"), 1000, 10, 5, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 1000;
int _int = 10;
int _int = 5;
int _int = 3;
VerticalBlock verticalBlock = new VerticalBlock((Scheme) _int, _int, _int, _int, (-238));

statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, 1, 0, 0, 1)
test data is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, 1, 0, 0, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        VerticalBlock verticalBlock = new VerticalBlock(new Scheme("color", "red"), 1, 0, 0, 1);
    }
}
statement is: VerticalBlock verticalBlock = new VerticalBlock(new Scheme("color", "red"), 1, 0, 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 1;
int _int = 0;
int _int = 0;
int _int = 1;
VerticalBlock verticalBlock = new VerticalBlock((Scheme) _int, _int, _int, _int, 1);

statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, 2226, 2226, 2226, 35)
test data is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, 2226, 2226, 2226, 35);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        VerticalBlock verticalBlock = new VerticalBlock(new Scheme("Brighton"), 1000, 1000, 1000, 35);
    }
}
statement is: VerticalBlock verticalBlock = new VerticalBlock(new Scheme("Brighton"), 1000, 1000, 1000, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 1000;
int _int = 1000;
int _int = 1000;
int _int = 35;
VerticalBlock verticalBlock = new VerticalBlock((Scheme) _int, _int, _int, _int, 35);

statement is: org.evosuite.testcase.statements.ArrayStatement@9f94d8c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@caf502be type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0, 0, 0, 1, 0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 1, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "ABC";
        stringArray[1] = "DEF";
        stringArray[2] = "XYZ";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 1, 1, 2, 1);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "DEF", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"DEF" Ct is: stringArray[1] = "DEF"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[2] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 1, 1, 2, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String[] stringArray = new String[1];
String string = "ABC";
stringArray[0] = string;
String string = "DEF";
stringArray[0] = string;
String string = "XYZ";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 1;
int _int = 1;
int _int = 2;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@80654281 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c291b67 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "bo"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0, 0, 0, 0, 2)
test data is: String[] stringArray = new String[1];
stringArray[0] = "bo";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "big";
        stringArray[1] = "red";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 3, 4, 5, 7);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "big", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"big" Ct is: stringArray[0] = "big"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "red", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"red" Ct is: stringArray[1] = "red"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 3, 4, 5, 7), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String[] stringArray = new String[1];
String string = "big";
stringArray[0] = string;
String string = "red";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 3;
int _int = 4;
int _int = 5;
int _int = 7;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@d094022a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7e7cc7c5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "p"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: containsOnlyOneWord()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean containsOnlyOneWord = horizontalBlock.containsOnlyOneWord()
test data is: String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "hello";
        stringArray[1] = "world";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        Assert.assertFalse(horizontalBlock.containsOnlyOneWord());
        String[] stringArray2 = new String[3];
        stringArray2[0] = "hello";
        stringArray2[1] = "world";
        stringArray2[2] = "again";
        scheme = new Scheme(stringArray2);
        horizontalBlock = new HorizontalBlock(scheme);
        Assert.assertTrue(horizontalBlock.containsOnlyOneWord());
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray[0] = "hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "world", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"world" Ct is: stringArray[1] = "world"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Assert.assertFalse(horizontalBlock.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertFalse(horizontalBlock.containsOnlyOneWord()) target is: Assert method is: assertFalse()
statement is: String[] stringArray2 = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray2[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray2[0] = "hello"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray2[1] = "world", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"world" Ct is: stringArray2[1] = "world"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray2[2] = "again", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"again" Ct is: stringArray2[2] = "again"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: scheme = new Scheme(stringArray2), class spoon.support.reflect.code.CtAssignmentImpl
statement is: horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtAssignmentImpl
statement is: Assert.assertTrue(horizontalBlock.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertTrue(horizontalBlock.containsOnlyOneWord()) target is: Assert method is: assertTrue()
TestCase is: String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = "world";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = "world";
stringArray[0] = string;
String string = "again";
stringArray[0] = string;

statement is: org.evosuite.testcase.statements.ArrayStatement@2e027bc9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@676f16af type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "p"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0, 0, 0, 0, 1)
statement is: containsOnlyOneWord()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean containsOnlyOneWord = horizontalBlock.containsOnlyOneWord()
test data is: String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 1);
horizontalBlock.containsOnlyOneWord();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "a";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 1);
        assertTrue(horizontalBlock.containsOnlyOneWord());
        String[] stringArray2 = new String[2];
        stringArray2[0] = "hello";
        stringArray2[1] = "world";
        Scheme scheme2 = new Scheme(stringArray2);
        HorizontalBlock horizontalBlock2 = new HorizontalBlock(scheme2, 0, 0, 0, 2);
        assertFalse(horizontalBlock2.containsOnlyOneWord());
        String[] stringArray3 = new String[1];
        stringArray3[0] = "";
        Scheme scheme3 = new Scheme(stringArray3);
        HorizontalBlock horizontalBlock3 = new HorizontalBlock(scheme3, 0, 0, 0, 1);
        assertTrue(horizontalBlock3.containsOnlyOneWord());
        String[] stringArray4 = new String[2];
        stringArray4[0] = "hello";
        stringArray4[1] = "";
        Scheme scheme4 = new Scheme(stringArray4);
        HorizontalBlock horizontalBlock4 = new HorizontalBlock(scheme4, 0, 0, 0, 2);
        assertFalse(horizontalBlock4.containsOnlyOneWord());
        String[] stringArray5 = new String[1];
        stringArray5[0] = " ";
        Scheme scheme5 = new Scheme(stringArray5);
        HorizontalBlock horizontalBlock5 = new HorizontalBlock(scheme5, 0, 0, 0, 1);
        assertTrue(horizontalBlock5.containsOnlyOneWord());
        String[] stringArray6 = new String[2];
        stringArray6[0] = "hello";
        stringArray6[1] = " ";
        Scheme scheme6 = new Scheme(stringArray6);
        HorizontalBlock horizontalBlock6 = new HorizontalBlock(scheme6, 0, 0, 0, 2);
        assertFalse(horizontalBlock6.containsOnlyOneWord());
        String[] stringArray7 = new String[1];
        stringArray7[0] = "hello";
        Scheme scheme7 = new Scheme(stringArray7);
        HorizontalBlock horizontalBlock7 = new HorizontalBlock(scheme7, 0, 0, 0, 1);
        assertFalse(horizontalBlock7.containsOnlyOneWord());
        String[] stringArray8 = new String[2];
        stringArray8[0] = "hello";
        stringArray8[1] = "world";
        Scheme scheme8 = new Scheme(stringArray8);
        HorizontalBlock horizontalBlock8 = new HorizontalBlock(scheme8, 0, 0, 0, 2);
        assertFalse(horizontalBlock8.containsOnlyOneWord());
        String[] stringArray9 = new String[1];
        stringArray9[0] = "hello";
        Scheme scheme9 = new Scheme(stringArray9);
        HorizontalBlock horizontalBlock9 = new HorizontalBlock(scheme9, 0, 0, 0, 1);
        assertFalse(horizontalBlock9.containsOnlyOneWord());
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "a", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"a" Ct is: stringArray[0] = "a"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(horizontalBlock.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(horizontalBlock.containsOnlyOneWord()) target is:  method is: assertTrue(<unknown>)
statement is: String[] stringArray2 = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray2[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray2[0] = "hello"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray2[1] = "world", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"world" Ct is: stringArray2[1] = "world"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme2 = new Scheme(stringArray2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock2 = new HorizontalBlock(scheme2, 0, 0, 0, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(horizontalBlock2.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(horizontalBlock2.containsOnlyOneWord()) target is:  method is: assertFalse(<unknown>)
statement is: String[] stringArray3 = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray3[0] = "", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray3[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray3[0] = ""
target : stringArray3 class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme3 = new Scheme(stringArray3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock3 = new HorizontalBlock(scheme3, 0, 0, 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(horizontalBlock3.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(horizontalBlock3.containsOnlyOneWord()) target is:  method is: assertTrue(<unknown>)
statement is: String[] stringArray4 = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray4[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray4[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray4[0] = "hello"
target : stringArray4 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray4[1] = "", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray4[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray4[1] = ""
target : stringArray4 class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme4 = new Scheme(stringArray4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock4 = new HorizontalBlock(scheme4, 0, 0, 0, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(horizontalBlock4.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(horizontalBlock4.containsOnlyOneWord()) target is:  method is: assertFalse(<unknown>)
statement is: String[] stringArray5 = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray5[0] = " ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray5[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:" " Ct is: stringArray5[0] = " "
target : stringArray5 class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme5 = new Scheme(stringArray5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock5 = new HorizontalBlock(scheme5, 0, 0, 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(horizontalBlock5.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(horizontalBlock5.containsOnlyOneWord()) target is:  method is: assertTrue(<unknown>)
statement is: String[] stringArray6 = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray6[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray6[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray6[0] = "hello"
target : stringArray6 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray6[1] = " ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray6[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:" " Ct is: stringArray6[1] = " "
target : stringArray6 class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme6 = new Scheme(stringArray6), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock6 = new HorizontalBlock(scheme6, 0, 0, 0, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(horizontalBlock6.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(horizontalBlock6.containsOnlyOneWord()) target is:  method is: assertFalse(<unknown>)
statement is: String[] stringArray7 = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray7[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray7[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray7[0] = "hello"
target : stringArray7 class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme7 = new Scheme(stringArray7), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock7 = new HorizontalBlock(scheme7, 0, 0, 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(horizontalBlock7.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(horizontalBlock7.containsOnlyOneWord()) target is:  method is: assertFalse(<unknown>)
statement is: String[] stringArray8 = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray8[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray8[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray8[0] = "hello"
target : stringArray8 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray8[1] = "world", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray8[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"world" Ct is: stringArray8[1] = "world"
target : stringArray8 class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme8 = new Scheme(stringArray8), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock8 = new HorizontalBlock(scheme8, 0, 0, 0, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(horizontalBlock8.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(horizontalBlock8.containsOnlyOneWord()) target is:  method is: assertFalse(<unknown>)
statement is: String[] stringArray9 = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray9[0] = "hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray9[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello" Ct is: stringArray9[0] = "hello"
target : stringArray9 class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme9 = new Scheme(stringArray9), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock9 = new HorizontalBlock(scheme9, 0, 0, 0, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(horizontalBlock9.containsOnlyOneWord()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(horizontalBlock9.containsOnlyOneWord()) target is:  method is: assertFalse(<unknown>)
TestCase is: String[] stringArray = new String[1];
String string = "a";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = "world";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = "";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = " ";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = " ";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = "world";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@40b93c41 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@1fbe6395 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@ee24998f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@982e839a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = horizontalBlock.toString()
test data is: String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "abc";
        stringArray[1] = "def";
        stringArray[2] = "ghi";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.toString();
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "abc", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abc" Ct is: stringArray[0] = "abc"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "def", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"def" Ct is: stringArray[1] = "def"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "ghi", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ghi" Ct is: stringArray[2] = "ghi"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.toString(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.toString() target is: horizontalBlock method is: toString()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 5, type glengineer.blocks.HorizontalBlockindex is: 8
Matched Method is: toString()Ljava/lang/String;
TestCase is: String[] stringArray = new String[3];
String string = "abc";
stringArray[0] = string;
String string = "def";
stringArray[1] = string;
String string = "ghi";
stringArray[2] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
string.toString();

statement is: org.evosuite.testcase.statements.ArrayStatement@cbf87666 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d5776e97 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "p"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: charAt(II)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char charAt = horizontalBlock.charAt(0, 0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.charAt(0, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "😊";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.charAt(0, 0);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "😊", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"😊" Ct is: stringArray[0] = "😊"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.charAt(0, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.charAt(0, 0) target is: horizontalBlock method is: charAt(int,int)
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 4
Matched Method is: charAt(II)C
TestCase is: String[] stringArray = new String[1];
String string = "\uD83D\uDE0A";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
scheme.charAt(_int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@f62aa6fb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f9d9e87a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "char position out of table"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: containsOnlyOneWord()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean containsOnlyOneWord = horizontalBlock.containsOnlyOneWord()
test data is: String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "char position out of table";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.containsOnlyOneWord();
        // Improved test data
        String[] stringArray = new String[1];
        stringArray[0] = "table with a char out of bounds";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.containsOnlyOneWord();
        // Improved test data
        String[] stringArray = new String[1];
        stringArray[0] = "char position out of table with multiple words";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.containsOnlyOneWord();
        // Improved test data
        String[] stringArray = new String[1];
        stringArray[0] = "table with multiple words and a char out of bounds";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.containsOnlyOneWord();
        // Improved test data
        String[] stringArray = new String[1];
        stringArray[0] = "table with a char out of bounds and multiple words";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.containsOnlyOneWord();
        // Improved test data
        String[] stringArray = new String[1];
        stringArray[0] = "table with multiple words and a char out of bounds and multiple words";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.containsOnlyOneWord();
        // Improved test data
        String[] stringArray = new String[1];
        stringArray[0] = "table with a char out of bounds and multiple words and a char out of bounds";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.containsOnlyOneWord();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "char position out of table", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"char position out of table" Ct is: stringArray[0] = "char position out of table"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.containsOnlyOneWord(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.containsOnlyOneWord() target is: horizontalBlock method is: containsOnlyOneWord()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 4
Matched Method is: containsOnlyOneWord()Z
statement is: // Improved test data
String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "table with a char out of bounds", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"table with a char out of bounds" Ct is: stringArray[0] = "table with a char out of bounds"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.containsOnlyOneWord(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.containsOnlyOneWord() target is: horizontalBlock method is: containsOnlyOneWord()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 10
Matched Method is: containsOnlyOneWord()Z
statement is: // Improved test data
String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "char position out of table with multiple words", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"char position out of table with multiple words" Ct is: stringArray[0] = "char position out of table with multiple words"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.containsOnlyOneWord(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.containsOnlyOneWord() target is: horizontalBlock method is: containsOnlyOneWord()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 16
Matched Method is: containsOnlyOneWord()Z
statement is: // Improved test data
String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "table with multiple words and a char out of bounds", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"table with multiple words and a char out of bounds" Ct is: stringArray[0] = "table with multiple words and a char out of bounds"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.containsOnlyOneWord(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.containsOnlyOneWord() target is: horizontalBlock method is: containsOnlyOneWord()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 22
Matched Method is: containsOnlyOneWord()Z
statement is: // Improved test data
String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "table with a char out of bounds and multiple words", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"table with a char out of bounds and multiple words" Ct is: stringArray[0] = "table with a char out of bounds and multiple words"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.containsOnlyOneWord(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.containsOnlyOneWord() target is: horizontalBlock method is: containsOnlyOneWord()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 28
Matched Method is: containsOnlyOneWord()Z
statement is: // Improved test data
String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "table with multiple words and a char out of bounds and multiple words", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"table with multiple words and a char out of bounds and multiple words" Ct is: stringArray[0] = "table with multiple words and a char out of bounds and multiple words"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.containsOnlyOneWord(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.containsOnlyOneWord() target is: horizontalBlock method is: containsOnlyOneWord()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 34
Matched Method is: containsOnlyOneWord()Z
statement is: // Improved test data
String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "table with a char out of bounds and multiple words and a char out of bounds", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"table with a char out of bounds and multiple words and a char out of bounds" Ct is: stringArray[0] = "table with a char out of bounds and multiple words and a char out of bounds"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.containsOnlyOneWord(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.containsOnlyOneWord() target is: horizontalBlock method is: containsOnlyOneWord()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 40
Matched Method is: containsOnlyOneWord()Z
TestCase is: String[] stringArray = new String[1];
String string = "char position out of table";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with a char out of bounds";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "char position out of table with multiple words";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with multiple words and a char out of bounds";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with a char out of bounds and multiple words";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with multiple words and a char out of bounds and multiple words";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with a char out of bounds and multiple words and a char out of bounds";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();

statement is: org.evosuite.testcase.statements.ArrayStatement@779db21f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@24b978b8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "p"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: extractParallelSubblocks()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<glengineer.blocks.Block>
statement code is: List<Block> extractParallelSubblocks = horizontalBlock.extractParallelSubblocks()
test data is: String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractParallelSubblocks();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "parallel";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.extractParallelSubblocks();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "parallel", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"parallel" Ct is: stringArray[0] = "parallel"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.extractParallelSubblocks(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.extractParallelSubblocks() target is: horizontalBlock method is: extractParallelSubblocks()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 4
Matched Method is: extractParallelSubblocks()Ljava/util/List;
TestCase is: String[] stringArray = new String[1];
String string = "parallel";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).extractParallelSubblocks();

statement is: org.evosuite.testcase.statements.ArrayStatement@37710830 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@809aaaff type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@e1638ba7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@49d83dee type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.positions.CharPosition1(II)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.positions.CharPosition1
statement code is: CharPosition1 charPosition1_ = new CharPosition1(0, 0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;Lglengineer/positions/CharPosition;Lglengineer/positions/CharPosition;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0, arg2, arg2)
statement is: extractParallelSubblocks()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<glengineer.blocks.Block>
statement code is: List<Block> extractParallelSubblocks = verticalBlock.extractParallelSubblocks()
test data is: String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
CharPosition1 charPosition1_ = new CharPosition1(0, 0);
VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_);
verticalBlock.extractParallelSubblocks();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "ABC";
        stringArray[1] = "DEF";
        stringArray[2] = "GHI";
        Scheme scheme = new Scheme(stringArray);
        CharPosition1 charPosition1_ = new CharPosition1(0, 0);
        VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_);
        verticalBlock.extractParallelSubblocks();
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "DEF", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"DEF" Ct is: stringArray[1] = "DEF"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "GHI", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"GHI" Ct is: stringArray[2] = "GHI"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: CharPosition1 charPosition1_ = new CharPosition1(0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.extractParallelSubblocks(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.extractParallelSubblocks() target is: verticalBlock method is: extractParallelSubblocks()
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;Lglengineer/positions/CharPosition;Lglengineer/positions/CharPosition;)V callee: VariableReference: Statement 6, type glengineer.blocks.VerticalBlockindex is: 11
Matched Method is: extractParallelSubblocks()Ljava/util/List;
TestCase is: String[] stringArray = new String[3];
String string = "ABC";
stringArray[0] = string;
String string = "DEF";
stringArray[1] = string;
String string = "GHI";
stringArray[2] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
CharPosition1 charPosition1_ = new CharPosition1(_int, _int);
VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_);
((Block) stringArray[2]).extractParallelSubblocks();

statement is: org.evosuite.testcase.statements.ArrayStatement@6b80678c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@42a9fc03 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@bbcda373 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@e4ab5f93 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: extractSequentialSubblocks()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<glengineer.blocks.Block>
statement code is: List<Block> extractSequentialSubblocks = verticalBlock.extractSequentialSubblocks()
test data is: String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.extractSequentialSubblocks();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "abc";
        stringArray[1] = "def";
        stringArray[2] = "ghi";
        Scheme scheme = new Scheme(stringArray);
        VerticalBlock verticalBlock = new VerticalBlock(scheme);
        verticalBlock.extractSequentialSubblocks();
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "abc", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abc" Ct is: stringArray[0] = "abc"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "def", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"def" Ct is: stringArray[1] = "def"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "ghi", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ghi" Ct is: stringArray[2] = "ghi"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.extractSequentialSubblocks(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.extractSequentialSubblocks() target is: verticalBlock method is: extractSequentialSubblocks()
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 5, type glengineer.blocks.VerticalBlockindex is: 8
Matched Method is: extractSequentialSubblocks()Ljava/util/List;
TestCase is: String[] stringArray = new String[3];
String string = "abc";
stringArray[0] = string;
String string = "def";
stringArray[1] = string;
String string = "ghi";
stringArray[2] = string;
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block) string).extractSequentialSubblocks();

statement is: org.evosuite.testcase.statements.ArrayStatement@992b969f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@cf8d09ed type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@786f9f12 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@561af65c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: getUpperLine()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String upperLine = horizontalBlock.getUpperLine()
test data is: String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "ABC";
        stringArray[1] = "DEF";
        stringArray[2] = "XYZ";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.getUpperLine();
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "ABC", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ABC" Ct is: stringArray[0] = "ABC"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "DEF", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"DEF" Ct is: stringArray[1] = "DEF"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "XYZ", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"XYZ" Ct is: stringArray[2] = "XYZ"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.getUpperLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.getUpperLine() target is: horizontalBlock method is: getUpperLine()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 5, type glengineer.blocks.HorizontalBlockindex is: 8
Matched Method is: getUpperLine()Ljava/lang/String;
TestCase is: String[] stringArray = new String[3];
String string = "ABC";
stringArray[0] = string;
String string = "DEF";
stringArray[1] = string;
String string = "XYZ";
stringArray[2] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) string).getUpperLine();

statement is: org.evosuite.testcase.statements.ArrayStatement@1ece9869 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ec082146 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "p"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: subblock(IIII)Lglengineer/blocks/Block; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock subblock = (HorizontalBlock)horizontalBlock.subblock(0, 0, 1, 1)
test data is: String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 0, 1, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "p";
        stringArray[1] = "q";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.subblock(0, 0, 1, 1);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "p", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"p" Ct is: stringArray[0] = "p"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "q", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"q" Ct is: stringArray[1] = "q"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.subblock(0, 0, 1, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.subblock(0, 0, 1, 1) target is: horizontalBlock method is: subblock(int,int,int,int)
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 6
Matched Method is: subblock(IIII)Lglengineer/blocks/Block;
TestCase is: String[] stringArray = new String[1];
String string = "p";
stringArray[0] = string;
String string = "q";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
int _int = 1;
int _int = 1;
((Block) string).subblock(_int, _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@2bc77d11 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@73e0fdf1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@571bae3a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@d13fdeaf type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: subblock(IIII)Lglengineer/blocks/Block; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock subblock = (HorizontalBlock)horizontalBlock.subblock(0, 1, 0, 3)
test data is: String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 1, 0, 3);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "abc";
        stringArray[1] = "def";
        stringArray[2] = "ghi";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.subblock(0, 0, 2, 3);// Test the subblock() method with a non-trivial argument }}

    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "abc", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abc" Ct is: stringArray[0] = "abc"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "def", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"def" Ct is: stringArray[1] = "def"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "ghi", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"ghi" Ct is: stringArray[2] = "ghi"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.subblock(0, 0, 2, 3)// Test the subblock() method with a non-trivial argument }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.subblock(0, 0, 2, 3)// Test the subblock() method with a non-trivial argument }}
 target is: horizontalBlock method is: subblock(int,int,int,int)
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 5, type glengineer.blocks.HorizontalBlockindex is: 8
Matched Method is: subblock(IIII)Lglengineer/blocks/Block;
TestCase is: String[] stringArray = new String[3];
String string = "abc";
stringArray[0] = string;
String string = "def";
stringArray[1] = string;
String string = "ghi";
stringArray[2] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
int _int = 2;
int _int = 3;
((Block) string).subblock(_int, _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@2c802d42 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@877d78ba type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@377d1a20 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@14514e04 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: textAt(III)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String textAt = horizontalBlock.textAt(0, 0, 0)
test data is: String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 0, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        stringArray[2] = "Testing";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.textAt(0, 0, 0);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Testing", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Testing" Ct is: stringArray[2] = "Testing"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.textAt(0, 0, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.textAt(0, 0, 0) target is: horizontalBlock method is: textAt(int,int,int)
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 5, type glengineer.blocks.HorizontalBlockindex is: 8
Matched Method is: textAt(III)Ljava/lang/String;
TestCase is: String[] stringArray = new String[3];
String string = "Hello";
stringArray[0] = string;
String string = "World";
stringArray[1] = string;
String string = "Testing";
stringArray[2] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
int _int = 0;
((Block) string).textAt(_int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@aa0016a9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9e00a8a6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: charAt(II)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char charAt = horizontalBlock.charAt((-1), 1)
test data is: String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.charAt((-1), 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: org.evosuite.testcase.statements.ArrayStatement@e27133a1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c3bbaf47 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@e45e43c3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@578f8596 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: textAt(III)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String textAt = horizontalBlock.textAt((-533), (-1967), 0)
test data is: String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt((-533), (-1967), 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "Hello, world!";
        stringArray[1] = "Welcome to Java.";
        stringArray[2] = "This is a sample string array.";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.textAt(-533, -1967, 0);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[0] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Welcome to Java.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Welcome to Java." Ct is: stringArray[1] = "Welcome to Java."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "This is a sample string array.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample string array." Ct is: stringArray[2] = "This is a sample string array."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.textAt(-533, -1967, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.textAt(-533, -1967, 0) target is: horizontalBlock method is: textAt(int,int,int)
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 5, type glengineer.blocks.HorizontalBlockindex is: 8
Matched Method is: textAt(III)Ljava/lang/String;
i 1 Parameters size() 1 Num of Method Parameters: 3
i 2 Parameters size() 1 Num of Method Parameters: 3
TestCase is: String[] stringArray = new String[3];
String string = "Hello, world!";
stringArray[0] = string;
String string = "Welcome to Java.";
stringArray[1] = string;
String string = "This is a sample string array.";
stringArray[2] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = null;
int _int = null;
((Block) string).textAt(_int, _int, _int);

* test suite isTestSuite: 45
Test 0: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractSequentialSubblocks();
Test 1: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 1, 0);
Test 2: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 3: 
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock((Scheme) null, (-1822), (-1822), (-1822), (-1822));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: -1822,-1822, -1822,-1822.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 4: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 35, (-238), (-238), (-238));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 35,-238, -238,-238.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 5: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 1, 0, 0, 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1,0, 0,1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 6: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 2226, 2226, 2226, 35);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 2226,2226, 2226,35.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 7: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock(scheme, 0, 0, 1, 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,0, 1,0.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 8: 
String[] stringArray = new String[1];
stringArray[0] = "bo";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 2);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,0, 0,2.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 9: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 10: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 1);
// Undeclared exception!
try { 
  horizontalBlock.containsOnlyOneWord();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // cannot search in a trivial block
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 11: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.toString();
Test 12: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.charAt(0, 0);
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractParallelSubblocks();
Test 15: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
CharPosition1 charPosition1_ = new CharPosition1(0, 0);
VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_);
verticalBlock.extractParallelSubblocks();
Test 16: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.extractSequentialSubblocks();
Test 17: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 18: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 0, 1, 1);
Test 19: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 1, 0, 3);
Test 20: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 0, 0);
Test 21: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.charAt((-1), 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // char position (-1,1) out of block.
   // Block(0,0, 0,1):
   //  ####
   //  #  #
   //  ####
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 22: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.textAt((-533), (-1967), 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Improper subline coodinates.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 23: 
String[] stringArray = new String[1];
stringArray[0] = "a";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).extractSequentialSubblocks();

Test 24: 
String[] stringArray = new String[1];
stringArray[0] = "This is a test string";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
scheme.textAt(0, 1, 0);

Test 25: 
String[] stringArray = new String[1];
stringArray[0] = "abcdefghijklmnopqrstuvwxyz";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).getUpperLine();

Test 26: 
HorizontalBlock horizontalBlock = new HorizontalBlock((Scheme) 10, 20, 30, 40, (-1822));

Test 27: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) 1000, 10, 5, 3, (-238));

Test 28: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) 1, 0, 0, 1, 1);

Test 29: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) 1000, 1000, 1000, 35, 35);

Test 30: 
String[] stringArray = new String[1];
stringArray[0] = "ABC";
stringArray[0] = "DEF";
stringArray[0] = "XYZ";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 1, 1, 2, 1);

Test 31: 
String[] stringArray = new String[1];
stringArray[0] = "big";
stringArray[0] = "red";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 3, 4, 5, 7);

Test 32: 
String[] stringArray = new String[1];
stringArray[0] = "hello";
stringArray[0] = "world";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
String[] stringArray = new String[1];
stringArray[0] = "hello";
stringArray[0] = "world";
stringArray[0] = "again";

Test 33: 
String[] stringArray = new String[1];
stringArray[0] = "a";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 1);
String[] stringArray = new String[1];
stringArray[0] = "hello";
stringArray[0] = "world";
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = "";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = " ";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = " ";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = "world";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);

Test 34: 
String[] stringArray = new String[3];
stringArray[0] = "abc";
stringArray[1] = "def";
stringArray[2] = "ghi";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block)"ghi").toString();

Test 35: 
String[] stringArray = new String[1];
stringArray[0] = "\uD83D\uDE0A";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
scheme.charAt(_int, _int);

Test 36: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with a char out of bounds";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "char position out of table with multiple words";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with multiple words and a char out of bounds";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with a char out of bounds and multiple words";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with multiple words and a char out of bounds and multiple words";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with a char out of bounds and multiple words and a char out of bounds";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();

Test 37: 
String[] stringArray = new String[1];
stringArray[0] = "parallel";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).extractParallelSubblocks();

Test 38: 
String[] stringArray = new String[3];
stringArray[0] = "ABC";
stringArray[1] = "DEF";
stringArray[2] = "GHI";
Scheme scheme = new Scheme(stringArray);
CharPosition1 charPosition1_ = new CharPosition1(0, 0);
VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_);
((Block)"GHI").extractParallelSubblocks();

Test 39: 
String[] stringArray = new String[3];
stringArray[0] = "abc";
stringArray[1] = "def";
stringArray[2] = "ghi";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block)"ghi").extractSequentialSubblocks();

Test 40: 
String[] stringArray = new String[3];
stringArray[0] = "ABC";
stringArray[1] = "DEF";
stringArray[2] = "XYZ";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block)"XYZ").getUpperLine();

Test 41: 
String[] stringArray = new String[1];
stringArray[0] = "p";
stringArray[0] = "q";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block)"q").subblock(0, 0, 1, 1);

Test 42: 
String[] stringArray = new String[3];
stringArray[0] = "abc";
stringArray[1] = "def";
stringArray[2] = "ghi";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block)"ghi").subblock(0, 0, 2, 3);

Test 43: 
String[] stringArray = new String[3];
stringArray[0] = "Hello";
stringArray[1] = "World";
String string = "Testing";
stringArray[2] = "Testing";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
int _int = 0;
((Block) string).textAt(_int, _int, _int);

Test 44: 
String[] stringArray = new String[3];
stringArray[0] = "Hello, world!";
stringArray[1] = "Welcome to Java.";
String string = "This is a sample string array.";
stringArray[2] = "This is a sample string array.";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = null;
int _int = null;
((Block) string).textAt(_int, _int, _int);


* Generated after the refinement and before minimization 45 tests with total length 350
* test suite isTestSuite: 45
Test 0: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractSequentialSubblocks();
Test 1: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 1, 0);
Test 2: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 3: 
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock((Scheme) null, (-1822), (-1822), (-1822), (-1822));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: -1822,-1822, -1822,-1822.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 4: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 35, (-238), (-238), (-238));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 35,-238, -238,-238.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 5: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 1, 0, 0, 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1,0, 0,1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 6: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 2226, 2226, 2226, 35);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 2226,2226, 2226,35.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 7: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock(scheme, 0, 0, 1, 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,0, 1,0.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 8: 
String[] stringArray = new String[1];
stringArray[0] = "bo";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 2);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,0, 0,2.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 9: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 10: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 1);
// Undeclared exception!
try { 
  horizontalBlock.containsOnlyOneWord();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // cannot search in a trivial block
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 11: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.toString();
Test 12: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.charAt(0, 0);
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractParallelSubblocks();
Test 15: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
CharPosition1 charPosition1_ = new CharPosition1(0, 0);
VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_);
verticalBlock.extractParallelSubblocks();
Test 16: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.extractSequentialSubblocks();
Test 17: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 18: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 0, 1, 1);
Test 19: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 1, 0, 3);
Test 20: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 0, 0);
Test 21: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.charAt((-1), 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // char position (-1,1) out of block.
   // Block(0,0, 0,1):
   //  ####
   //  #  #
   //  ####
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 22: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.textAt((-533), (-1967), 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Improper subline coodinates.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 23: 
String[] stringArray = new String[1];
stringArray[0] = "a";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).extractSequentialSubblocks();

Test 24: 
String[] stringArray = new String[1];
stringArray[0] = "This is a test string";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
scheme.textAt(0, 1, 0);

Test 25: 
String[] stringArray = new String[1];
stringArray[0] = "abcdefghijklmnopqrstuvwxyz";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).getUpperLine();

Test 26: 
HorizontalBlock horizontalBlock = new HorizontalBlock((Scheme) 10, 20, 30, 40, (-1822));

Test 27: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) 1000, 10, 5, 3, (-238));

Test 28: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) 1, 0, 0, 1, 1);

Test 29: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) 1000, 1000, 1000, 35, 35);

Test 30: 
String[] stringArray = new String[1];
stringArray[0] = "ABC";
stringArray[0] = "DEF";
stringArray[0] = "XYZ";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 1, 1, 2, 1);

Test 31: 
String[] stringArray = new String[1];
stringArray[0] = "big";
stringArray[0] = "red";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 3, 4, 5, 7);

Test 32: 
String[] stringArray = new String[1];
stringArray[0] = "hello";
stringArray[0] = "world";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
String[] stringArray = new String[1];
stringArray[0] = "hello";
stringArray[0] = "world";
stringArray[0] = "again";

Test 33: 
String[] stringArray = new String[1];
stringArray[0] = "a";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 1);
String[] stringArray = new String[1];
stringArray[0] = "hello";
stringArray[0] = "world";
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = "";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = " ";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = " ";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
String string = "world";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 2;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "hello";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 1;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);

Test 34: 
String[] stringArray = new String[3];
stringArray[0] = "abc";
stringArray[1] = "def";
stringArray[2] = "ghi";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block)"ghi").toString();

Test 35: 
String[] stringArray = new String[1];
stringArray[0] = "\uD83D\uDE0A";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
scheme.charAt(_int, _int);

Test 36: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with a char out of bounds";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "char position out of table with multiple words";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with multiple words and a char out of bounds";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with a char out of bounds and multiple words";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with multiple words and a char out of bounds and multiple words";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();
String[] stringArray = new String[1];
String string = "table with a char out of bounds and multiple words and a char out of bounds";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).containsOnlyOneWord();

Test 37: 
String[] stringArray = new String[1];
stringArray[0] = "parallel";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).extractParallelSubblocks();

Test 38: 
String[] stringArray = new String[3];
stringArray[0] = "ABC";
stringArray[1] = "DEF";
stringArray[2] = "GHI";
Scheme scheme = new Scheme(stringArray);
CharPosition1 charPosition1_ = new CharPosition1(0, 0);
VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_);
((Block)"GHI").extractParallelSubblocks();

Test 39: 
String[] stringArray = new String[3];
stringArray[0] = "abc";
stringArray[1] = "def";
stringArray[2] = "ghi";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block)"ghi").extractSequentialSubblocks();

Test 40: 
String[] stringArray = new String[3];
stringArray[0] = "ABC";
stringArray[1] = "DEF";
stringArray[2] = "XYZ";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block)"XYZ").getUpperLine();

Test 41: 
String[] stringArray = new String[1];
stringArray[0] = "p";
stringArray[0] = "q";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block)"q").subblock(0, 0, 1, 1);

Test 42: 
String[] stringArray = new String[3];
stringArray[0] = "abc";
stringArray[1] = "def";
stringArray[2] = "ghi";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block)"ghi").subblock(0, 0, 2, 3);

Test 43: 
String[] stringArray = new String[3];
stringArray[0] = "Hello";
stringArray[1] = "World";
String string = "Testing";
stringArray[2] = "Testing";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
int _int = 0;
((Block) string).textAt(_int, _int, _int);

Test 44: 
String[] stringArray = new String[3];
stringArray[0] = "Hello, world!";
stringArray[1] = "Welcome to Java.";
String string = "This is a sample string array.";
stringArray[2] = "This is a sample string array.";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = null;
int _int = null;
((Block) string).textAt(_int, _int, _int);


* Minimizing test suite
* test suite isTestSuite: 23
Test 0: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 1, 0);
Test 1: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 2: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractSequentialSubblocks();
Test 3: 
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock((Scheme) null, (-1822), (-1822), (-1822), (-1822));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: -1822,-1822, -1822,-1822.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 4: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 35, (-238), (-238), (-238));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 35,-238, -238,-238.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 5: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 1, 0, 0, 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1,0, 0,1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 6: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 2226, 2226, 2226, 35);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 2226,2226, 2226,35.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 7: 
String[] stringArray = new String[1];
stringArray[0] = "big";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock(scheme, 3, 4, 5, 7);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 3,4, 5,7.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 8: 
String[] stringArray = new String[1];
stringArray[0] = "bo";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 2);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,0, 0,2.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 9: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 10: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 1);
// Undeclared exception!
try { 
  horizontalBlock.containsOnlyOneWord();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // cannot search in a trivial block
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 11: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.charAt((-1), 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // char position (-1,1) out of block.
   // Block(0,0, 0,1):
   //  ####
   //  #  #
   //  ####
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 12: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.toString();
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.charAt(0, 0);
Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractParallelSubblocks();
Test 16: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
CharPosition1 charPosition1_ = new CharPosition1(0, 0);
VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_);
verticalBlock.extractParallelSubblocks();
Test 17: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.extractSequentialSubblocks();
Test 18: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 19: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 0, 1, 1);
Test 20: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 1, 0, 3);
Test 21: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 0, 0);
Test 22: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.textAt((-533), (-1967), 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Improper subline coodinates.
   //
   verifyException("glengineer.blocks.Block", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 42
* Number of covered goals: 41
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 29
* Number of covered goals: 14
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Generated 23 tests with total length 112
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 52%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock((Scheme) null, (-1822), (-1822), (-1822), (-1822));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: -1822,-1822, -1822,-1822.
   //
   verifyException("glengineer.blocks.Block", e);
}


** It was a parseable test case! 
refined test name is: testIllegalArgumentExceptionForNullValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 35, (-238), (-238), (-238));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 35,-238, -238,-238.
   //
   verifyException("glengineer.blocks.Block", e);
}


** It was a parseable test case! 
refined test name is: testVerticalBlockInstantiationWithValidArguments
* Compiling Tests
refined test name is: testIllegalArgumentException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 1, 0, 0, 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1,0, 0,1.
   //
   verifyException("glengineer.blocks.Block", e);
}


** It was a parseable test case! 
refined test name is: testVerticalBlockThrowsExceptionOnIllegalArguments
* Compiling Tests
refined test name is: testCreateVerticalBlockWithInvalidScheme
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 2226, 2226, 2226, 35);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 2226,2226, 2226,35.
   //
   verifyException("glengineer.blocks.Block", e);
}


** It was a parseable test case! 
refined test name is: testIllegalArgumentExceptionWhenSchemeIsNull
* Compiling Tests
refined test name is: testThrowExceptionWhenSchemeIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:11:13.374 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:13.398 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:11:13.499 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:13.500 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:11:13.584 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:13.585 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:11:13.650 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:13.652 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 3 called: 2 to improve: false
[MASTER] 03:11:13.779 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:13.780 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
[MASTER] 03:11:13.877 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:13.878 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
[MASTER] 03:11:14.122 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 23
Test 0: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractSequentialSubblocks();
Test 1: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 1, 0);
Test 2: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 3: 
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock((Scheme) null, (-1822), (-1822), (-1822), (-1822));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: -1822,-1822, -1822,-1822.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 4: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 35, (-238), (-238), (-238));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 35,-238, -238,-238.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 5: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 1, 0, 0, 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1,0, 0,1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 6: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 2226, 2226, 2226, 35);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 2226,2226, 2226,35.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 7: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock(scheme, 0, 0, 1, 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,0, 1,0.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 8: 
String[] stringArray = new String[1];
stringArray[0] = "bo";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 2);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,0, 0,2.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 9: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 10: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 1);
// Undeclared exception!
try { 
  horizontalBlock.containsOnlyOneWord();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // cannot search in a trivial block
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 11: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.toString();
Test 12: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.charAt(0, 0);
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractParallelSubblocks();
Test 15: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
CharPosition1 charPosition1_ = new CharPosition1(0, 0);
VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_);
verticalBlock.extractParallelSubblocks();
Test 16: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.extractSequentialSubblocks();
Test 17: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 18: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 0, 1, 1);
Test 19: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 1, 0, 3);
Test 20: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 0, 0);
Test 21: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.charAt((-1), 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // char position (-1,1) out of block.
   // Block(0,0, 0,1):
   //  ####
   //  #  #
   //  ####
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 22: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.textAt((-533), (-1967), 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Improper subline coodinates.
   //
   verifyException("glengineer.blocks.Block", e);
}


* Minimizing test suite
[MASTER] 03:11:17.105 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
[MASTER] 03:11:17.146 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* test suite isTestSuite: 23
Test 0: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractSequentialSubblocks();
Test 1: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 1, 0);
Test 2: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 3: 
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock((Scheme) null, (-1822), (-1822), (-1822), (-1822));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: -1822,-1822, -1822,-1822.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 4: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 35, (-238), (-238), (-238));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 35,-238, -238,-238.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 5: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 1, 0, 0, 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1,0, 0,1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 6: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 2226, 2226, 2226, 35);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 2226,2226, 2226,35.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 7: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock(scheme, 0, 0, 1, 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,0, 1,0.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 8: 
String[] stringArray = new String[1];
stringArray[0] = "bo";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 2);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,0, 0,2.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 9: 
String[] stringArray = new String[1];
stringArray[0] = "char position out of table";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 10: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 1);
// Undeclared exception!
try { 
  horizontalBlock.containsOnlyOneWord();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // cannot search in a trivial block
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 11: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.charAt((-1), 1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // char position (-1,1) out of block.
   // Block(0,0, 0,1):
   //  ####
   //  #  #
   //  ####
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 12: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.toString();
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.charAt(0, 0);
Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractParallelSubblocks();
Test 16: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
CharPosition1 charPosition1_ = new CharPosition1(0, 0);
VerticalBlock verticalBlock = new VerticalBlock(scheme, charPosition1_, charPosition1_);
verticalBlock.extractParallelSubblocks();
Test 17: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.extractSequentialSubblocks();
Test 18: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 19: 
String[] stringArray = new String[1];
stringArray[0] = "p";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 0, 1, 1);
Test 20: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.subblock(0, 1, 0, 3);
Test 21: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 0, 0);
Test 22: 
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.textAt((-533), (-1967), 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Improper subline coodinates.
   //
   verifyException("glengineer.blocks.Block", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 42
* Number of covered goals: 41
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 29
* Number of covered goals: 14
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Generated 23 tests with total length 112
* Resulting test suite's coverage: 80% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 53%
* Compiling and checking tests
[MASTER] 03:11:24.406 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:11:25.851 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:25.852 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:11:25.890 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:25.890 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:11:25.928 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:11:25.929 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:11:25.967 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:25.968 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
[MASTER] 03:11:26.024 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:26.025 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
[MASTER] 03:11:26.078 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar2880636046079964572.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:11:26.079 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2880636046079964572.jar
* Writing tests to file
[MASTER] 03:11:26.081 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'Block_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
* Writing JUnit test case 'Block_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
* Done!

* Computation finished
