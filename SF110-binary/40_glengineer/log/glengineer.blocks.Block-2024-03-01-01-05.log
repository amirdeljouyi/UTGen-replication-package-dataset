* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: glengineer.blocks.Block
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/40_glengineer/evosuite-files/evosuite.properties
* Connecting to master process on port 6704
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:05:39.479 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:05:39.482 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:05:39.494 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:05:39.499 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class glengineer.blocks.Block
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 125
* Using seed 1709255137905
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 68 / 125
[Progress:>                             0%] [Cov:============>                      35%][Progress:>                             0%] [Cov:============>                      37%][Progress:>                             1%] [Cov:===============>                   45%][Progress:>                             1%] [Cov:================>                  47%][Progress:>                             1%] [Cov:==================>                52%][Progress:>                             1%] [Cov:==================>                53%][Progress:>                             2%] [Cov:======================>            65%][Progress:>                             2%] [Cov:=======================>           66%][Progress:>                             2%] [Cov:=======================>           68%][Progress:>                             2%] [Cov:==========================>        75%][Progress:>                             2%] [Cov:==========================>        75%][Progress:>                             3%] [Cov:==========================>        75%][Progress:>                             3%] [Cov:==========================>        75%][Progress:>                             3%] [Cov:==========================>        75%][Progress:>                             3%] [Cov:==========================>        75%][Progress:>                             3%] [Cov:==========================>        75%][Progress:>                             3%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        76%][Progress:=>                            5%] [Cov:==========================>        76%][Progress:=>                            5%] [Cov:==========================>        76%][Progress:=>                            5%] [Cov:==========================>        76%][Progress:=>                            5%] [Cov:==========================>        76%][Progress:=>                            5%] [Cov:==========================>        76%][Progress:=>                            5%] [Cov:==========================>        76%][Progress:=>                            6%] [Cov:==========================>        76%][Progress:=>                            6%] [Cov:==========================>        77%][Progress:=>                            6%] [Cov:==========================>        77%][Progress:=>                            6%] [Cov:==========================>        77%][Progress:=>                            6%] [Cov:==========================>        77%][Progress:=>                            6%] [Cov:==========================>        77%][Progress:=>                            6%] [Cov:==========================>        77%][Progress:==>                           7%] [Cov:==========================>        77%][Progress:==>                           7%] [Cov:==========================>        77%][Progress:==>                           7%] [Cov:==========================>        77%][Progress:==>                           7%] [Cov:==========================>        77%][Progress:==>                           7%] [Cov:==========================>        77%][Progress:==>                           7%] [Cov:==========================>        77%][Progress:==>                           7%] [Cov:==========================>        77%][Progress:==>                           7%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           8%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:==>                           9%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          10%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          11%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          12%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:===>                          13%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         14%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         15%] [Cov:==========================>        77%][Progress:====>                         16%] [Cov:==========================>        77%][Progress:====>                         16%] [Cov:==========================>        77%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       78%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:====>                         16%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:=====>                        19%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       20%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       21%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       22%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:======>                       23%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      24%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      25%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:=======>                      26%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     27%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    30%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    31%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    32%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:=========>                    33%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   34%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   35%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:==========>                   36%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  37%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  38%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 41%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 42%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:============>                 43%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                44%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:=============>                46%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               47%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               48%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:==============>               49%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              50%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              51%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              52%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:===============>              53%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             54%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             55%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:================>             56%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            57%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            58%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:=================>            59%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           60%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           61%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           62%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:==================>           63%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          64%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          65%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:===================>          66%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         67%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         68%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:====================>         69%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        70%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        71%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        72%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:=====================>        73%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       74%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       75%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:======================>       76%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      77%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      78%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:=======================>      79%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     80%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     81%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     82%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:========================>     83%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    84%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:===========================>       79%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    85%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:=========================>    86%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   87%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   88%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:==========================>   89%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  90%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  91%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  92%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:===========================>  93%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 94%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 95%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:============================> 96%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>97%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>98%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:=============================>99%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%][Progress:==============================100%] [Cov:============================>      80%]
* Search finished after 101s and 1440 generations, 405548 statements, best individual has fitness: 20.0
* Generated before the refinement 24 tests with total length 107
statement is: org.evosuite.testcase.statements.ArrayStatement@f636c6fa type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d4b143aa type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Block;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = verticalBlock.toString()
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "cannot search in a trivial block";
        stringArray[1] = "the query is too general";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
        verticalBlock.toString();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "cannot search in a trivial block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search in a trivial block" Ct is: stringArray[0] = "cannot search in a trivial block"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "the query is too general", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"the query is too general" Ct is: stringArray[1] = "the query is too general"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.toString(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.toString() target is: verticalBlock method is: toString()
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Block;)V callee: VariableReference: Statement 4, type glengineer.blocks.VerticalBlockindex is: 7
Matched Method is: toString()Ljava/lang/String;
TestCase is: String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
String string = "the query is too general";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
stringArray[0].toString();

statement is: org.evosuite.testcase.statements.ArrayStatement@3ff2c31d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3beeff03 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: textAt(III)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String textAt = verticalBlock.textAt(1, 4, 0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.textAt(1, 4, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "The quick brown fox jumps over the lazy dog";
        stringArray[1] = "Jumps over the lazy dog";
        stringArray[2] = "Over the lazy dog";
        Scheme scheme = new Scheme(stringArray);
        VerticalBlock verticalBlock = new VerticalBlock(scheme);
        verticalBlock.textAt(1, 4, 0);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "The quick brown fox jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox jumps over the lazy dog" Ct is: stringArray[0] = "The quick brown fox jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Jumps over the lazy dog" Ct is: stringArray[1] = "Jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Over the lazy dog" Ct is: stringArray[2] = "Over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.textAt(1, 4, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.textAt(1, 4, 0) target is: verticalBlock method is: textAt(int,int,int)
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.VerticalBlockindex is: 8
Matched Method is: textAt(III)Ljava/lang/String;
TestCase is: String[] stringArray = new String[1];
String string = "The quick brown fox jumps over the lazy dog";
stringArray[0] = string;
String string = "Jumps over the lazy dog";
stringArray[0] = string;
String string = "Over the lazy dog";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
int _int = 1;
int _int = 4;
int _int = 0;
((Block) string).textAt(_int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@1f7fea18 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8851cef1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: getUpperLine()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String upperLine = horizontalBlock.getUpperLine()
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "cannot search in a trivial block";// Changed to a more descriptive and representative string

        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.getUpperLine();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "cannot search in a trivial block"// Changed to a more descriptive and representative string
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search in a trivial block" Ct is: stringArray[0] = "cannot search in a trivial block"// Changed to a more descriptive and representative string

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.getUpperLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.getUpperLine() target is: horizontalBlock method is: getUpperLine()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 4
Matched Method is: getUpperLine()Ljava/lang/String;
TestCase is: String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).getUpperLine();

statement is: org.evosuite.testcase.statements.ArrayStatement@d6f02f05 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f6e4c895 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "aQnot seVrh in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: containsOnlyOneWord()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean containsOnlyOneWord = verticalBlock.containsOnlyOneWord()
test data is: String[] stringArray = new String[1];
stringArray[0] = "aQnot seVrh in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.containsOnlyOneWord();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "The quick brown fox jumps over the lazy dog";
        Scheme scheme = new Scheme(stringArray);
        VerticalBlock verticalBlock = new VerticalBlock(scheme);
        verticalBlock.containsOnlyOneWord();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "The quick brown fox jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox jumps over the lazy dog" Ct is: stringArray[0] = "The quick brown fox jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.containsOnlyOneWord(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.containsOnlyOneWord() target is: verticalBlock method is: containsOnlyOneWord()
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.VerticalBlockindex is: 4
Matched Method is: containsOnlyOneWord()Z
TestCase is: String[] stringArray = new String[1];
String string = "The quick brown fox jumps over the lazy dog";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block) scheme).containsOnlyOneWord();

statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, (-1229), (-1229), (-1229), (-1229))
test data is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, (-1229), (-1229), (-1229), (-1229));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        VerticalBlock verticalBlock = new VerticalBlock(new Scheme(1.0F, 1.0F), -123456789, -123456789, -123456789, -123456789);
    }
}
statement is: VerticalBlock verticalBlock = new VerticalBlock(new Scheme(1.0F, 1.0F), -123456789, -123456789, -123456789, -123456789), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, (-1229), (-1229), (-1229), (-1229));

statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock((Scheme) null, 1757, (-1), 1757, (-1))
test data is: HorizontalBlock horizontalBlock = new HorizontalBlock((Scheme) null, 1757, (-1), 1757, (-1));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HorizontalBlock horizontalBlock = new HorizontalBlock("blue", 23.4, "left", 1757, -1);
    }
}
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock("blue", 23.4, "left", 1757, -1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "blue";
double _double = 23.4;
String string = "left";
int _int = 1757;
HorizontalBlock horizontalBlock = new HorizontalBlock((Scheme) string, (int) _double, (int) string, _int, (-1));

statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, 35, 35, 14, 14)
test data is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, 35, 35, 14, 14);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        VerticalBlock verticalBlock = new VerticalBlock("Electric Blue", 35, 35, 14, 14);
    }
}
statement is: VerticalBlock verticalBlock = new VerticalBlock("Electric Blue", 35, 35, 14, 14), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "Electric Blue";
int _int = 35;
int _int = 35;
int _int = 14;
int _int = 14;
VerticalBlock verticalBlock = new VerticalBlock((Scheme) string, _int, _int, _int, _int);

statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, 124, 124, 124, (-1))
test data is: VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, 124, 124, 124, (-1));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        VerticalBlock verticalBlock = new VerticalBlock(Color.BLUE, 100, 100, 100, ((char) ('A')));
    }
}
statement is: VerticalBlock verticalBlock = new VerticalBlock(Color.BLUE, 100, 100, 100, ((char) ('A'))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 100;
int _int = 100;
int _int = 100;
char _char = 'A';
VerticalBlock verticalBlock = new VerticalBlock((Scheme) _int, _int, _int, (int) _char, (-1));

statement is: org.evosuite.testcase.statements.ArrayStatement@30000f7b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@5bb08679 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0, 1, 0, 1, 0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme, 1, 0, 1, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "This is a test string";
        stringArray[1] = "This is another test string";
        Scheme scheme = new Scheme(stringArray);
        VerticalBlock verticalBlock = new VerticalBlock(scheme, 1, 0, 1, 0);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string" Ct is: stringArray[0] = "This is a test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "This is another test string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is another test string" Ct is: stringArray[1] = "This is another test string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme, 1, 0, 1, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String[] stringArray = new String[1];
String string = "This is a test string";
stringArray[0] = string;
String string = "This is another test string";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 1;
int _int = 0;
int _int = 1;
int _int = 0;
VerticalBlock verticalBlock = new VerticalBlock(scheme, _int, _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@a50b5b2c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@379320bb type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0, 0, 32, 0, 32)
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 32, 0, 32);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "cannot search in a trivial block";
        Scheme scheme = new Scheme(stringArray);
        VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 32, 0, 32);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "cannot search in a trivial block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search in a trivial block" Ct is: stringArray[0] = "cannot search in a trivial block"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 32, 0, 32), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 32;
int _int = 0;
int _int = 32;
VerticalBlock verticalBlock = new VerticalBlock(scheme, _int, _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@1e55d19e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b5c80bb5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Block;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: containsOnlyOneWord()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean containsOnlyOneWord = verticalBlock.containsOnlyOneWord()
test data is: String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.containsOnlyOneWord();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "Hello";
        stringArray[1] = "World";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
        verticalBlock.containsOnlyOneWord();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello" Ct is: stringArray[0] = "Hello"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"World" Ct is: stringArray[1] = "World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.containsOnlyOneWord(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.containsOnlyOneWord() target is: verticalBlock method is: containsOnlyOneWord()
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Block;)V callee: VariableReference: Statement 4, type glengineer.blocks.VerticalBlockindex is: 7
Matched Method is: containsOnlyOneWord()Z
TestCase is: String[] stringArray = new String[1];
String string = "Hello";
stringArray[0] = string;
String string = "World";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
((Block) stringArray[0]).containsOnlyOneWord();

statement is: org.evosuite.testcase.statements.ArrayStatement@5374b4f4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e38d03d4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Block;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: charAt(II)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char charAt = verticalBlock.charAt(0, 0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.charAt(0, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "cannot search for a letter in a vertical block";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
        verticalBlock.charAt(-1, -1);// Testing the charAt() method with an invalid position (-1, -1) }}

    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "cannot search for a letter in a vertical block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search for a letter in a vertical block" Ct is: stringArray[0] = "cannot search for a letter in a vertical block"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.charAt(-1, -1)// Testing the charAt() method with an invalid position (-1, -1) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.charAt(-1, -1)// Testing the charAt() method with an invalid position (-1, -1) }}
 target is: verticalBlock method is: charAt(int,int)
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Block;)V callee: VariableReference: Statement 4, type glengineer.blocks.VerticalBlockindex is: 5
Matched Method is: charAt(II)C
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: String[] stringArray = new String[1];
String string = "cannot search for a letter in a vertical block";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
int _int = null;
int _int = null;
horizontalBlock.charAt(_int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@609ebf8f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@fef0a2f3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Block;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: charAt(II)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char charAt = verticalBlock.charAt(6, 0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.charAt(6, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "cannot search in an empty block";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
        verticalBlock.charAt(6, 0);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "cannot search in an empty block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search in an empty block" Ct is: stringArray[0] = "cannot search in an empty block"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.charAt(6, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.charAt(6, 0) target is: verticalBlock method is: charAt(int,int)
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Block;)V callee: VariableReference: Statement 4, type glengineer.blocks.VerticalBlockindex is: 5
Matched Method is: charAt(II)C
TestCase is: String[] stringArray = new String[1];
String string = "cannot search in an empty block";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
int _int = 6;
int _int = 0;
horizontalBlock.charAt(_int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@dc1e9183 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3d24cfa2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "8M"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Block;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: containsOnlyOneWord()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean containsOnlyOneWord = verticalBlock.containsOnlyOneWord()
test data is: String[] stringArray = new String[1];
stringArray[0] = "8M";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.containsOnlyOneWord();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "8M";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
        verticalBlock.containsOnlyOneWord();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "8M", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"8M" Ct is: stringArray[0] = "8M"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.containsOnlyOneWord(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.containsOnlyOneWord() target is: verticalBlock method is: containsOnlyOneWord()
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Block;)V callee: VariableReference: Statement 4, type glengineer.blocks.VerticalBlockindex is: 5
Matched Method is: containsOnlyOneWord()Z
TestCase is: String[] stringArray = new String[1];
String string = "8M";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
horizontalBlock.containsOnlyOneWord();

statement is: org.evosuite.testcase.statements.ArrayStatement@50b6c30d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8b0ad0a9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: extractParallelSubblocks()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<glengineer.blocks.Block>
statement code is: List<Block> extractParallelSubblocks = horizontalBlock.extractParallelSubblocks()
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractParallelSubblocks();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "cannot search in a trivial block (searching for an empty string)";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.extractParallelSubblocks();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "cannot search in a trivial block (searching for an empty string)", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search in a trivial block (searching for an empty string)" Ct is: stringArray[0] = "cannot search in a trivial block (searching for an empty string)"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.extractParallelSubblocks(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.extractParallelSubblocks() target is: horizontalBlock method is: extractParallelSubblocks()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 4
Matched Method is: extractParallelSubblocks()Ljava/util/List;
TestCase is: String[] stringArray = new String[1];
String string = "cannot search in a trivial block (searching for an empty string)";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).extractParallelSubblocks();

statement is: org.evosuite.testcase.statements.ArrayStatement@60209466 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@509103cc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0, 0, 0, 0, 0)
statement is: extractParallelSubblocks()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<glengineer.blocks.Block>
statement code is: List<Block> extractParallelSubblocks = horizontalBlock.extractParallelSubblocks()
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
horizontalBlock.extractParallelSubblocks();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "cannot search in a trivial block";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
        horizontalBlock.extractParallelSubblocks();
        // Improved test data
        String[] stringArray2 = new String[3];
        stringArray2[0] = "cannot search in a trivial block";
        stringArray2[1] = "find substring in simple text";
        stringArray2[2] = "find substring in more complex text";
        Scheme scheme2 = new Scheme(stringArray2);
        HorizontalBlock horizontalBlock2 = new HorizontalBlock(scheme2, 0, 0, 0, 0);
        horizontalBlock2.extractParallelSubblocks();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "cannot search in a trivial block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search in a trivial block" Ct is: stringArray[0] = "cannot search in a trivial block"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.extractParallelSubblocks(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.extractParallelSubblocks() target is: horizontalBlock method is: extractParallelSubblocks()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;IIII)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 8
Matched Method is: extractParallelSubblocks()Ljava/util/List;
statement is: // Improved test data
String[] stringArray2 = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray2[0] = "cannot search in a trivial block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search in a trivial block" Ct is: stringArray2[0] = "cannot search in a trivial block"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray2[1] = "find substring in simple text", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"find substring in simple text" Ct is: stringArray2[1] = "find substring in simple text"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray2[2] = "find substring in more complex text", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"find substring in more complex text" Ct is: stringArray2[2] = "find substring in more complex text"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme2 = new Scheme(stringArray2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock2 = new HorizontalBlock(scheme2, 0, 0, 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock2.extractParallelSubblocks(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock2.extractParallelSubblocks() target is: horizontalBlock2 method is: extractParallelSubblocks()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;IIII)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 22
Matched Method is: extractParallelSubblocks()Ljava/util/List;
TestCase is: String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 0;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
((Block) scheme).extractParallelSubblocks();
String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
String string = "find substring in simple text";
stringArray[0] = string;
String string = "find substring in more complex text";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 0;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
((Block) scheme).extractParallelSubblocks();

statement is: org.evosuite.testcase.statements.ArrayStatement@f6bd1aa3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@86498696 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: extractSequentialSubblocks()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<glengineer.blocks.Block>
statement code is: List<Block> extractSequentialSubblocks = horizontalBlock.extractSequentialSubblocks()
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractSequentialSubblocks();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "The quick brown fox jumps over the lazy dog";
        stringArray[1] = "jumps over the lazy dog";
        stringArray[2] = "dog";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.extractSequentialSubblocks();
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "The quick brown fox jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox jumps over the lazy dog" Ct is: stringArray[0] = "The quick brown fox jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"jumps over the lazy dog" Ct is: stringArray[1] = "jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"dog" Ct is: stringArray[2] = "dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.extractSequentialSubblocks(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.extractSequentialSubblocks() target is: horizontalBlock method is: extractSequentialSubblocks()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 8
Matched Method is: extractSequentialSubblocks()Ljava/util/List;
TestCase is: String[] stringArray = new String[1];
String string = "The quick brown fox jumps over the lazy dog";
stringArray[0] = string;
String string = "jumps over the lazy dog";
stringArray[0] = string;
String string = "dog";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) string).extractSequentialSubblocks();

statement is: org.evosuite.testcase.statements.ArrayStatement@2bb125a6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@289cda3c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0, 0, 0, 0, 0)
statement is: extractSequentialSubblocks()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<glengineer.blocks.Block>
statement code is: List<Block> extractSequentialSubblocks = verticalBlock.extractSequentialSubblocks()
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 0, 0, 0);
verticalBlock.extractSequentialSubblocks();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "A long block of text containing multiple paragraphs and sentences.";
        Scheme scheme = new Scheme(stringArray);
        VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 0, 0, 0);
        verticalBlock.extractSequentialSubblocks();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A long block of text containing multiple paragraphs and sentences.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A long block of text containing multiple paragraphs and sentences." Ct is: stringArray[0] = "A long block of text containing multiple paragraphs and sentences."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 0, 0, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.extractSequentialSubblocks(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.extractSequentialSubblocks() target is: verticalBlock method is: extractSequentialSubblocks()
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;IIII)V callee: VariableReference: Statement 3, type glengineer.blocks.VerticalBlockindex is: 8
Matched Method is: extractSequentialSubblocks()Ljava/util/List;
TestCase is: String[] stringArray = new String[1];
String string = "A long block of text containing multiple paragraphs and sentences.";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 0;
VerticalBlock verticalBlock = new VerticalBlock(scheme, _int, _int, _int, _int);
((Block) scheme).extractSequentialSubblocks();

statement is: org.evosuite.testcase.statements.ArrayStatement@b393fa1b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@62e5d4d2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;IIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0, 0, 0, 0, 0)
statement is: getUpperLine()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String upperLine = horizontalBlock.getUpperLine()
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
horizontalBlock.getUpperLine();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "cannot search in a trivial block";
        stringArray[1] = "searching in a non-trivial block";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 1, 2, 3, 4);
        horizontalBlock.getUpperLine();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "cannot search in a trivial block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search in a trivial block" Ct is: stringArray[0] = "cannot search in a trivial block"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "searching in a non-trivial block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"searching in a non-trivial block" Ct is: stringArray[1] = "searching in a non-trivial block"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 1, 2, 3, 4), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.getUpperLine(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.getUpperLine() target is: horizontalBlock method is: getUpperLine()
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;IIII)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 10
Matched Method is: getUpperLine()Ljava/lang/String;
TestCase is: String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
String string = "searching in a non-trivial block";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 1;
int _int = 2;
int _int = 3;
int _int = 4;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
((Block) string).getUpperLine();

statement is: org.evosuite.testcase.statements.ArrayStatement@98eb146f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dd4ef62a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "aQnot seVrh in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: subblock(IIII)Lglengineer/blocks/Block; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock subblock = (VerticalBlock)verticalBlock.subblock(27, 0, 30, 1)
test data is: String[] stringArray = new String[1];
stringArray[0] = "aQnot seVrh in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.subblock(27, 0, 30, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "The quick brown fox jumps over the lazy dog";
        Scheme scheme = new Scheme(stringArray);
        VerticalBlock verticalBlock = new VerticalBlock(scheme);
        verticalBlock.subblock(2, 4, 8, 12);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "The quick brown fox jumps over the lazy dog", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The quick brown fox jumps over the lazy dog" Ct is: stringArray[0] = "The quick brown fox jumps over the lazy dog"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.subblock(2, 4, 8, 12), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.subblock(2, 4, 8, 12) target is: verticalBlock method is: subblock(int,int,int,int)
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.VerticalBlockindex is: 4
Matched Method is: subblock(IIII)Lglengineer/blocks/Block;
TestCase is: String[] stringArray = new String[1];
String string = "The quick brown fox jumps over the lazy dog";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
int _int = 2;
int _int = 4;
int _int = 8;
int _int = 12;
((Block) scheme).subblock(_int, _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@73c41502 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@98abb673 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: subblock(IIII)Lglengineer/blocks/Block; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock subblock = (VerticalBlock)verticalBlock.subblock(1, 0, 1, 1)
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.subblock(1, 0, 1, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "search in a vertical block";
        Scheme scheme = new Scheme(stringArray);
        VerticalBlock verticalBlock = new VerticalBlock(scheme);
        verticalBlock.subblock(1, 0, 1, 1);
        // or
        String[] stringArray = new String[2];
        stringArray[0] = "cannot search in a trivial block";
        stringArray[1] = "search in a non-trivial block";
        Scheme scheme = new Scheme(stringArray);
        VerticalBlock verticalBlock = new VerticalBlock(scheme);
        verticalBlock.subblock(1, 0, 2, 1);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "search in a vertical block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"search in a vertical block" Ct is: stringArray[0] = "search in a vertical block"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.subblock(1, 0, 1, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.subblock(1, 0, 1, 1) target is: verticalBlock method is: subblock(int,int,int,int)
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.VerticalBlockindex is: 4
Matched Method is: subblock(IIII)Lglengineer/blocks/Block;
statement is: // or
String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "cannot search in a trivial block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search in a trivial block" Ct is: stringArray[0] = "cannot search in a trivial block"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "search in a non-trivial block", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"search in a non-trivial block" Ct is: stringArray[1] = "search in a non-trivial block"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.subblock(1, 0, 2, 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.subblock(1, 0, 2, 1) target is: verticalBlock method is: subblock(int,int,int,int)
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.VerticalBlockindex is: 16
Matched Method is: subblock(IIII)Lglengineer/blocks/Block;
TestCase is: String[] stringArray = new String[1];
String string = "search in a vertical block";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
int _int = 1;
int _int = 0;
int _int = 1;
int _int = 1;
((Block) scheme).subblock(_int, _int, _int, _int);
String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
String string = "search in a non-trivial block";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
int _int = 1;
int _int = 0;
int _int = 2;
int _int = 1;
((Block) scheme).subblock(_int, _int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@f71ee5c5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3bc72a3a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: textAt(III)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String textAt = horizontalBlock.textAt(0, 0, 0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 0, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a test string.";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.textAt(0, 0, 0);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test string.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string." Ct is: stringArray[0] = "This is a test string."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.textAt(0, 0, 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.textAt(0, 0, 0) target is: horizontalBlock method is: textAt(int,int,int)
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 4
Matched Method is: textAt(III)Ljava/lang/String;
TestCase is: String[] stringArray = new String[1];
String string = "This is a test string.";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
int _int = 0;
scheme.textAt(_int, _int, _int);

statement is: org.evosuite.testcase.statements.ArrayStatement@31eacb5c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@6be5dbb2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.VerticalBlock
statement code is: VerticalBlock verticalBlock = new VerticalBlock(arg0)
statement is: extractParallelSubblocksWithoutLines()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<glengineer.blocks.Block>
statement code is: List<Block> extractParallelSubblocksWithoutLines = verticalBlock.extractParallelSubblocksWithoutLines()
test data is: String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.extractParallelSubblocksWithoutLines();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "This is a sample string";
        Scheme scheme = new Scheme(stringArray);
        VerticalBlock verticalBlock = new VerticalBlock(scheme);
        verticalBlock.extractParallelSubblocksWithoutLines();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample string" Ct is: stringArray[0] = "This is a sample string"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: VerticalBlock verticalBlock = new VerticalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: verticalBlock.extractParallelSubblocksWithoutLines(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: verticalBlock.extractParallelSubblocksWithoutLines() target is: verticalBlock method is: extractParallelSubblocksWithoutLines()
source statement: glengineer.blocks.VerticalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.VerticalBlockindex is: 4
Matched Method is: extractParallelSubblocksWithoutLines()Ljava/util/List;
TestCase is: String[] stringArray = new String[1];
String string = "This is a sample string";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((VerticalBlock) scheme).extractParallelSubblocksWithoutLines();

statement is: org.evosuite.testcase.statements.ArrayStatement@7fe0587d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@cc28fa18 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "cannot search in a trivial block"
statement is: glengineer.blocks.Scheme([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.Scheme
statement code is: Scheme scheme = new Scheme(arg0)
statement is: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.blocks.HorizontalBlock
statement code is: HorizontalBlock horizontalBlock = new HorizontalBlock(arg0)
statement is: textAt(III)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String textAt = horizontalBlock.textAt(3111, (-1794), 3111)
test data is: String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(3111, (-1794), 3111);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "cannot search for a word in a block with a negative index";
        Scheme scheme = new Scheme(stringArray);
        HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
        horizontalBlock.textAt("blockIndex", "-negativeBlockIndex", "blockLength");
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "cannot search for a word in a block with a negative index", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"cannot search for a word in a block with a negative index" Ct is: stringArray[0] = "cannot search for a word in a block with a negative index"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: Scheme scheme = new Scheme(stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HorizontalBlock horizontalBlock = new HorizontalBlock(scheme), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: horizontalBlock.textAt("blockIndex", "-negativeBlockIndex", "blockLength"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: horizontalBlock.textAt("blockIndex", "-negativeBlockIndex", "blockLength") target is: horizontalBlock method is: textAt(java.lang.String,java.lang.String,java.lang.String)
source statement: glengineer.blocks.HorizontalBlock(Lglengineer/blocks/Scheme;)V callee: VariableReference: Statement 3, type glengineer.blocks.HorizontalBlockindex is: 4
Matched Method is: textAt(III)Ljava/lang/String;
TestCase is: String[] stringArray = new String[1];
String string = "cannot search for a word in a block with a negative index";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
String string = "blockIndex";
String string = "-negativeBlockIndex";
String string = "blockLength";
scheme.textAt((int) string, (int) string, (int) string);

* test suite isTestSuite: 48
Test 0: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.toString();
Test 1: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.textAt(1, 4, 0);
Test 2: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 3: 
String[] stringArray = new String[1];
stringArray[0] = "aQnot seVrh in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.containsOnlyOneWord();
Test 4: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, (-1229), (-1229), (-1229), (-1229));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: -1229,-1229, -1229,-1229.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 5: 
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock((Scheme) null, 1757, (-1), 1757, (-1));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1757,-1, 1757,-1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 6: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 35, 35, 14, 14);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 35,35, 14,14.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 7: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 124, 124, 124, (-1));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 124,124, 124,-1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 8: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock(scheme, 1, 0, 1, 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1,0, 1,0.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 9: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock(scheme, 0, 32, 0, 32);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,32, 0,32.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 10: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
// Undeclared exception!
try { 
  verticalBlock.containsOnlyOneWord();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // cannot search in a trivial block
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 11: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.charAt(0, 0);
Test 12: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.charAt(6, 0);
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "8M";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.containsOnlyOneWord();
Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractParallelSubblocks();
Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
horizontalBlock.extractParallelSubblocks();
Test 16: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractSequentialSubblocks();
Test 17: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 0, 0, 0);
verticalBlock.extractSequentialSubblocks();
Test 18: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
horizontalBlock.getUpperLine();
Test 19: 
String[] stringArray = new String[1];
stringArray[0] = "aQnot seVrh in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.subblock(27, 0, 30, 1);
Test 20: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.subblock(1, 0, 1, 1);
Test 21: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 0, 0);
Test 22: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
// Undeclared exception!
try { 
  verticalBlock.extractParallelSubblocksWithoutLines();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // char position (0,0) out of block.
   // Block(0,0, 0,1):
   //  ####
   //  #  #
   //  ####
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 23: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.textAt(3111, (-1794), 3111);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Improper subline coodinates.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 24: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
stringArray[0] = "the query is too general";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
((Block)"the query is too general").toString();

Test 25: 
String[] stringArray = new String[1];
stringArray[0] = "The quick brown fox jumps over the lazy dog";
stringArray[0] = "Jumps over the lazy dog";
stringArray[0] = "Over the lazy dog";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block)"Jumps over the lazy dog").textAt(1, 4, 0);

Test 26: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).getUpperLine();

Test 27: 
String[] stringArray = new String[1];
stringArray[0] = "The quick brown fox jumps over the lazy dog";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block) scheme).containsOnlyOneWord();

Test 28: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, (-1229), (-1229), (-1229), (-1229));

Test 29: 
HorizontalBlock horizontalBlock = new HorizontalBlock((Scheme) "blue", (int) 23.4, (int) "left", 1757, (-1));

Test 30: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) "Electric Blue", 35, 35, 14, 14);

Test 31: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) 100, 100, 100, (int) 'A', (-1));

Test 32: 
String[] stringArray = new String[1];
stringArray[0] = "This is a test string";
stringArray[0] = "This is another test string";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme, 1, 0, 1, 0);

Test 33: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 32, 0, 32);

Test 34: 
String[] stringArray = new String[1];
stringArray[0] = "Hello";
stringArray[0] = "World";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
((Block)"World").containsOnlyOneWord();

Test 35: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search for a letter in a vertical block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
int _int = null;
int _int = null;
horizontalBlock.charAt(_int, _int);

Test 36: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in an empty block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
horizontalBlock.charAt(6, 0);

Test 37: 
String[] stringArray = new String[1];
stringArray[0] = "8M";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
horizontalBlock.containsOnlyOneWord();

Test 38: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block (searching for an empty string)";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).extractParallelSubblocks();

Test 39: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
((Block) scheme).extractParallelSubblocks();
String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
String string = "find substring in simple text";
stringArray[0] = string;
String string = "find substring in more complex text";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 0;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
((Block) scheme).extractParallelSubblocks();

Test 40: 
String[] stringArray = new String[1];
stringArray[0] = "The quick brown fox jumps over the lazy dog";
stringArray[0] = "jumps over the lazy dog";
stringArray[0] = "dog";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block)"jumps over the lazy dog").extractSequentialSubblocks();

Test 41: 
String[] stringArray = new String[1];
stringArray[0] = "A long block of text containing multiple paragraphs and sentences.";
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 0;
VerticalBlock verticalBlock = new VerticalBlock(scheme, _int, _int, _int, _int);
((Block) scheme).extractSequentialSubblocks();

Test 42: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
String string = "searching in a non-trivial block";
stringArray[0] = "searching in a non-trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 1, 2, 3, 4);
((Block) string).getUpperLine();

Test 43: 
String[] stringArray = new String[1];
stringArray[0] = "The quick brown fox jumps over the lazy dog";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block) scheme).subblock(2, 4, 8, 12);

Test 44: 
String[] stringArray = new String[1];
stringArray[0] = "search in a vertical block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block) scheme).subblock(1, 0, 1, 1);
String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
String string = "search in a non-trivial block";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
int _int = 1;
int _int = 0;
int _int = 2;
int _int = 1;
((Block) scheme).subblock(_int, _int, _int, _int);

Test 45: 
String[] stringArray = new String[1];
stringArray[0] = "This is a test string.";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
int _int = 0;
scheme.textAt(_int, _int, _int);

Test 46: 
String[] stringArray = new String[1];
stringArray[0] = "This is a sample string";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((VerticalBlock) scheme).extractParallelSubblocksWithoutLines();

Test 47: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search for a word in a block with a negative index";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
String string = "blockIndex";
String string = "-negativeBlockIndex";
String string = "blockLength";
scheme.textAt((int) string, (int) string, (int) string);


* Generated after the refinement and before minimization 48 tests with total length 261
* test suite isTestSuite: 48
Test 0: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.toString();
Test 1: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.textAt(1, 4, 0);
Test 2: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 3: 
String[] stringArray = new String[1];
stringArray[0] = "aQnot seVrh in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.containsOnlyOneWord();
Test 4: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, (-1229), (-1229), (-1229), (-1229));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: -1229,-1229, -1229,-1229.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 5: 
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock((Scheme) null, 1757, (-1), 1757, (-1));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1757,-1, 1757,-1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 6: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 35, 35, 14, 14);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 35,35, 14,14.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 7: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 124, 124, 124, (-1));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 124,124, 124,-1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 8: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock(scheme, 1, 0, 1, 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1,0, 1,0.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 9: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock(scheme, 0, 32, 0, 32);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,32, 0,32.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 10: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
// Undeclared exception!
try { 
  verticalBlock.containsOnlyOneWord();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // cannot search in a trivial block
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 11: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.charAt(0, 0);
Test 12: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.charAt(6, 0);
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "8M";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.containsOnlyOneWord();
Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractParallelSubblocks();
Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
horizontalBlock.extractParallelSubblocks();
Test 16: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractSequentialSubblocks();
Test 17: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 0, 0, 0);
verticalBlock.extractSequentialSubblocks();
Test 18: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
horizontalBlock.getUpperLine();
Test 19: 
String[] stringArray = new String[1];
stringArray[0] = "aQnot seVrh in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.subblock(27, 0, 30, 1);
Test 20: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.subblock(1, 0, 1, 1);
Test 21: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 0, 0);
Test 22: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
// Undeclared exception!
try { 
  verticalBlock.extractParallelSubblocksWithoutLines();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // char position (0,0) out of block.
   // Block(0,0, 0,1):
   //  ####
   //  #  #
   //  ####
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 23: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.textAt(3111, (-1794), 3111);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Improper subline coodinates.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 24: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
stringArray[0] = "the query is too general";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
((Block)"the query is too general").toString();

Test 25: 
String[] stringArray = new String[1];
stringArray[0] = "The quick brown fox jumps over the lazy dog";
stringArray[0] = "Jumps over the lazy dog";
stringArray[0] = "Over the lazy dog";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block)"Jumps over the lazy dog").textAt(1, 4, 0);

Test 26: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).getUpperLine();

Test 27: 
String[] stringArray = new String[1];
stringArray[0] = "The quick brown fox jumps over the lazy dog";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block) scheme).containsOnlyOneWord();

Test 28: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) null, (-1229), (-1229), (-1229), (-1229));

Test 29: 
HorizontalBlock horizontalBlock = new HorizontalBlock((Scheme) "blue", (int) 23.4, (int) "left", 1757, (-1));

Test 30: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) "Electric Blue", 35, 35, 14, 14);

Test 31: 
VerticalBlock verticalBlock = new VerticalBlock((Scheme) 100, 100, 100, (int) 'A', (-1));

Test 32: 
String[] stringArray = new String[1];
stringArray[0] = "This is a test string";
stringArray[0] = "This is another test string";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme, 1, 0, 1, 0);

Test 33: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 32, 0, 32);

Test 34: 
String[] stringArray = new String[1];
stringArray[0] = "Hello";
stringArray[0] = "World";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
((Block)"World").containsOnlyOneWord();

Test 35: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search for a letter in a vertical block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
int _int = null;
int _int = null;
horizontalBlock.charAt(_int, _int);

Test 36: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in an empty block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
horizontalBlock.charAt(6, 0);

Test 37: 
String[] stringArray = new String[1];
stringArray[0] = "8M";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
horizontalBlock.containsOnlyOneWord();

Test 38: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block (searching for an empty string)";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block) scheme).extractParallelSubblocks();

Test 39: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
((Block) scheme).extractParallelSubblocks();
String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
String string = "find substring in simple text";
stringArray[0] = string;
String string = "find substring in more complex text";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 0;
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, _int, _int, _int, _int);
((Block) scheme).extractParallelSubblocks();

Test 40: 
String[] stringArray = new String[1];
stringArray[0] = "The quick brown fox jumps over the lazy dog";
stringArray[0] = "jumps over the lazy dog";
stringArray[0] = "dog";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
((Block)"jumps over the lazy dog").extractSequentialSubblocks();

Test 41: 
String[] stringArray = new String[1];
stringArray[0] = "A long block of text containing multiple paragraphs and sentences.";
Scheme scheme = new Scheme(stringArray);
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 0;
VerticalBlock verticalBlock = new VerticalBlock(scheme, _int, _int, _int, _int);
((Block) scheme).extractSequentialSubblocks();

Test 42: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
String string = "searching in a non-trivial block";
stringArray[0] = "searching in a non-trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 1, 2, 3, 4);
((Block) string).getUpperLine();

Test 43: 
String[] stringArray = new String[1];
stringArray[0] = "The quick brown fox jumps over the lazy dog";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block) scheme).subblock(2, 4, 8, 12);

Test 44: 
String[] stringArray = new String[1];
stringArray[0] = "search in a vertical block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((Block) scheme).subblock(1, 0, 1, 1);
String[] stringArray = new String[1];
String string = "cannot search in a trivial block";
stringArray[0] = string;
String string = "search in a non-trivial block";
stringArray[0] = string;
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
int _int = 1;
int _int = 0;
int _int = 2;
int _int = 1;
((Block) scheme).subblock(_int, _int, _int, _int);

Test 45: 
String[] stringArray = new String[1];
stringArray[0] = "This is a test string.";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
int _int = 0;
int _int = 0;
int _int = 0;
scheme.textAt(_int, _int, _int);

Test 46: 
String[] stringArray = new String[1];
stringArray[0] = "This is a sample string";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
((VerticalBlock) scheme).extractParallelSubblocksWithoutLines();

Test 47: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search for a word in a block with a negative index";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
String string = "blockIndex";
String string = "-negativeBlockIndex";
String string = "blockLength";
scheme.textAt((int) string, (int) string, (int) string);


* Minimizing test suite
* test suite isTestSuite: 24
Test 0: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.textAt(0, 0, 0);
Test 1: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.getUpperLine();
Test 2: 
String[] stringArray = new String[1];
stringArray[0] = "8M";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.containsOnlyOneWord();
Test 3: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, (-1229), (-1229), (-1229), (-1229));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: -1229,-1229, -1229,-1229.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 4: 
HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock((Scheme) null, 1757, (-1), 1757, (-1));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1757,-1, 1757,-1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 5: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 35, 35, 14, 14);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 35,35, 14,14.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 6: 
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 124, 124, 124, (-1));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 124,124, 124,-1.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 7: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock(scheme, 1, 0, 1, 0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1,0, 1,0.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 8: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock(scheme, 0, 32, 0, 32);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 0,32, 0,32.
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 9: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
// Undeclared exception!
try { 
  verticalBlock.containsOnlyOneWord();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // cannot search in a trivial block
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 10: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.toString();
Test 11: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in an empty block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.charAt(6, 0);
Test 12: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
VerticalBlock verticalBlock = new VerticalBlock(horizontalBlock);
verticalBlock.charAt(0, 0);
Test 13: 
String[] stringArray = new String[1];
stringArray[0] = "aQnot seVrh in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.containsOnlyOneWord();
Test 14: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractParallelSubblocks();
Test 15: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
horizontalBlock.extractParallelSubblocks();
Test 16: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
horizontalBlock.extractSequentialSubblocks();
Test 17: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme, 0, 0, 0, 0);
verticalBlock.extractSequentialSubblocks();
Test 18: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme, 0, 0, 0, 0);
horizontalBlock.getUpperLine();
Test 19: 
String[] stringArray = new String[1];
stringArray[0] = "aQnot seVrh in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.subblock(27, 0, 30, 1);
Test 20: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.subblock(1, 0, 1, 1);
Test 21: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
verticalBlock.textAt(1, 4, 0);
Test 22: 
String[] stringArray = new String[1];
stringArray[0] = "";
Scheme scheme = new Scheme(stringArray);
VerticalBlock verticalBlock = new VerticalBlock(scheme);
// Undeclared exception!
try { 
  verticalBlock.extractParallelSubblocksWithoutLines();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // char position (0,0) out of block.
   // Block(0,0, 0,1):
   //  ####
   //  #  #
   //  ####
   //
   verifyException("glengineer.blocks.Block", e);
}

Test 23: 
String[] stringArray = new String[1];
stringArray[0] = "cannot search in a trivial block";
Scheme scheme = new Scheme(stringArray);
HorizontalBlock horizontalBlock = new HorizontalBlock(scheme);
// Undeclared exception!
try { 
  horizontalBlock.textAt(3111, (-1794), 3111);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Improper subline coodinates.
   //
   verifyException("glengineer.blocks.Block", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 42
* Number of covered goals: 41
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 52%
* Total number of goals: 29
* Number of covered goals: 15
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Generated 24 tests with total length 105
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 47%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, (-1229), (-1229), (-1229), (-1229));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: -1229,-1229, -1229,-1229.
   //
   verifyException("glengineer.blocks.Block", e);
}


** It was a parseable test case! 
refined test name is: testConstructorThrowsExceptionWithInvalidParams
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HorizontalBlock horizontalBlock = null;
try {
  horizontalBlock = new HorizontalBlock((Scheme) null, 1757, (-1), 1757, (-1));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 1757,-1, 1757,-1.
   //
   verifyException("glengineer.blocks.Block", e);
}


** It was a parseable test case! 
refined test name is: testInvalidArgumentsForHorizontalBlock
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 35, 35, 14, 14);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 35,35, 14,14.
   //
   verifyException("glengineer.blocks.Block", e);
}


** It was a parseable test case! 
refined test name is: testVerticalBlockThrowsExceptionWhenSchemeIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: VerticalBlock verticalBlock = null;
try {
  verticalBlock = new VerticalBlock((Scheme) null, 124, 124, 124, (-1));
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // improper block definition: 124,124, 124,-1.
   //
   verifyException("glengineer.blocks.Block", e);
}


** It was a parseable test case! 
refined test name is: testConstructorWithInvalidArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:09:14.690 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3083564055305116951.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:09:14.710 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3083564055305116951.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:09:14.762 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3083564055305116951.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:09:14.763 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3083564055305116951.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:09:14.815 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3083564055305116951.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:09:14.816 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3083564055305116951.jar
[MASTER] 01:09:14.866 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3083564055305116951.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:09:14.867 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3083564055305116951.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:09:14.969 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3083564055305116951.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:09:14.970 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3083564055305116951.jar
[MASTER] 01:09:15.076 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar3083564055305116951.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
* Writing tests to file
* Writing JUnit test case 'Block_ESTest' to evosuite-tests
[MASTER] 01:09:15.077 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar3083564055305116951.jar
* Done!

* Computation finished
