* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: glengineer.agents.GroupAgent
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/40_glengineer/evosuite-files/evosuite.properties
* Connecting to master process on port 21431
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 03:11:30.387 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 03:11:30.394 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 03:11:30.396 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 03:11:32.203 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 03:11:32.829 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 03:11:32.830 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 03:11:33.582 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 03:11:33.715 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 03:11:33.716 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 03:11:33.717 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 03:11:33.718 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 03:11:33.719 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 03:11:33.720 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 03:11:33.721 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 03:11:33.722 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 03:11:33.753 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 03:11:33.765 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class glengineer.agents.GroupAgent
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 471
* Using seed 1710213087676
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 159 / 471
[Progress:>                             1%] [Cov:======>                            18%][MASTER] 03:11:36.865 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] glengineer.agents.GroupAgent.addGapAfter(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V
[Progress:>                             2%] [Cov:===========>                       32%][Progress:>                             2%] [Cov:==============>                    42%][Progress:>                             3%] [Cov:==============>                    42%][Progress:>                             3%] [Cov:===============>                   43%][Progress:>                             3%] [Cov:=================>                 50%][Progress:>                             3%] [Cov:=================>                 50%][Progress:=>                            4%] [Cov:=================>                 50%][Progress:=>                            4%] [Cov:=================>                 51%][Progress:=>                            4%] [Cov:=================>                 51%][Progress:=>                            4%] [Cov:=================>                 51%][Progress:=>                            5%] [Cov:==================>                53%][Progress:=>                            5%] [Cov:===================>               55%][Progress:==>                           8%] [Cov:===================>               55%][Progress:==>                           8%] [Cov:===================>               55%][Progress:==>                           8%] [Cov:===================>               56%][MASTER] 03:11:43.543 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.awt.FileDialog due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.awt.Dialog due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[Progress:==>                           8%] [Cov:===================>               56%][MASTER] 03:11:43.603 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[Progress:==>                           9%] [Cov:===================>               56%][Progress:==>                           9%] [Cov:===================>               56%][Progress:==>                           9%] [Cov:===================>               56%][Progress:==>                           9%] [Cov:====================>              58%][Progress:==>                           9%] [Cov:====================>              58%][Progress:==>                           9%] [Cov:====================>              58%][Progress:==>                           9%] [Cov:====================>              58%][Progress:===>                          10%] [Cov:====================>              58%][Progress:===>                          10%] [Cov:====================>              58%][Progress:===>                          10%] [Cov:====================>              58%][Progress:===>                          10%] [Cov:====================>              58%][Progress:===>                          13%] [Cov:====================>              58%][Progress:===>                          13%] [Cov:====================>              58%][Progress:====>                         14%] [Cov:====================>              58%][Progress:====>                         14%] [Cov:====================>              58%][Progress:====>                         14%] [Cov:====================>              58%][Progress:====>                         14%] [Cov:====================>              58%][Progress:====>                         14%] [Cov:====================>              58%][Progress:====>                         14%] [Cov:====================>              58%][Progress:=====>                        17%] [Cov:====================>              58%][Progress:=====>                        17%] [Cov:====================>              58%][Progress:======>                       20%] [Cov:====================>              59%][Progress:======>                       21%] [Cov:====================>              59%][Progress:======>                       21%] [Cov:====================>              59%][Progress:======>                       21%] [Cov:====================>              59%][Progress:======>                       21%] [Cov:====================>              59%][Progress:======>                       21%] [Cov:====================>              59%][Progress:======>                       21%] [Cov:====================>              59%][Progress:======>                       21%] [Cov:====================>              59%][Progress:======>                       21%] [Cov:====================>              59%][Progress:=======>                      24%] [Cov:====================>              59%][Progress:=======>                      25%] [Cov:====================>              59%][Progress:=======>                      25%] [Cov:====================>              59%][Progress:=======>                      25%] [Cov:====================>              59%][Progress:=======>                      25%] [Cov:====================>              59%][Progress:=======>                      25%] [Cov:====================>              59%][Progress:=======>                      25%] [Cov:====================>              59%][Progress:=======>                      25%] [Cov:====================>              59%][Progress:=======>                      25%] [Cov:====================>              59%][Progress:=======>                      26%] [Cov:====================>              59%][Progress:=======>                      26%] [Cov:====================>              59%][Progress:=======>                      26%] [Cov:====================>              59%][Progress:=======>                      26%] [Cov:====================>              59%][Progress:=======>                      26%] [Cov:====================>              59%][Progress:=======>                      26%] [Cov:====================>              59%][Progress:========>                     27%] [Cov:====================>              59%][Progress:========>                     27%] [Cov:====================>              59%][Progress:========>                     27%] [Cov:====================>              59%][Progress:========>                     27%] [Cov:====================>              59%][Progress:========>                     27%] [Cov:====================>              59%][Progress:========>                     27%] [Cov:====================>              59%][Progress:========>                     27%] [Cov:====================>              59%][MASTER] 03:12:02.439 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for javax.swing.JWindow due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[Progress:========>                     27%] [Cov:====================>              59%][Progress:========>                     27%] [Cov:====================>              59%][Progress:========>                     28%] [Cov:====================>              59%][Progress:========>                     28%] [Cov:====================>              59%][Progress:=========>                    31%] [Cov:====================>              59%][Progress:=========>                    31%] [Cov:====================>              59%][Progress:=========>                    31%] [Cov:====================>              59%][Progress:=========>                    31%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   34%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:===========>                  38%] [Cov:====================>              59%][Progress:===========>                  38%] [Cov:====================>              59%][Progress:===========>                  38%] [Cov:====================>              59%][Progress:===========>                  38%] [Cov:====================>              59%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:============>                 42%] [Cov:=====================>             60%][Progress:=============>                45%] [Cov:=====================>             60%][Progress:=============>                45%] [Cov:=====================>             60%][Progress:=============>                45%] [Cov:=====================>             60%][Progress:==============>               48%] [Cov:=====================>             60%][Progress:==============>               48%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              51%] [Cov:=====================>             60%][Progress:===============>              52%] [Cov:=====================>             60%][Progress:===============>              52%] [Cov:=====================>             60%][Progress:================>             55%] [Cov:=====================>             60%][Progress:================>             55%] [Cov:=====================>             60%][Progress:================>             55%] [Cov:=====================>             60%][Progress:================>             55%] [Cov:=====================>             60%][Progress:================>             55%] [Cov:=====================>             60%][Progress:================>             55%] [Cov:=====================>             60%][Progress:================>             55%] [Cov:=====================>             60%][Progress:================>             55%] [Cov:=====================>             60%][Progress:================>             55%] [Cov:=====================>             60%][Progress:================>             56%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:=================>            59%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           61%] [Cov:=====================>             60%][Progress:==================>           61%] [Cov:=====================>             60%][Progress:===================>          64%] [Cov:=====================>             60%][Progress:===================>          64%] [Cov:=====================>             60%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][MASTER] 03:12:39.474 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for java.awt.Canvas due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          65%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        70%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][MASTER] 03:12:45.755 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for javax.swing.JMenuItem due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for javax.swing.ImageIcon due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       74%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             61%][Progress:======================>       76%] [Cov:=====================>             61%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:=======================>      77%] [Cov:=====================>             62%][Progress:=======================>      77%] [Cov:=====================>             62%][Progress:=======================>      77%] [Cov:=====================>             62%][Progress:=======================>      77%] [Cov:=====================>             62%][Progress:=======================>      77%] [Cov:=====================>             62%][Progress:=======================>      77%] [Cov:=====================>             62%][Progress:=======================>      77%] [Cov:=====================>             62%][Progress:=======================>      77%] [Cov:=====================>             62%][Progress:=======================>      77%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      78%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     82%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:==========================>   89%] [Cov:======================>            63%][Progress:===========================>  90%] [Cov:======================>            63%][Progress:===========================>  90%] [Cov:======================>            63%][Progress:===========================>  90%] [Cov:======================>            63%][Progress:===========================>  90%] [Cov:======================>            63%][Progress:===========================>  90%] [Cov:======================>            63%][Progress:===========================>  93%] [Cov:======================>            63%][Progress:===========================>  93%] [Cov:======================>            63%][Progress:===========================>  93%] [Cov:======================>            63%][Progress:===========================>  93%] [Cov:======================>            63%][Progress:===========================>  93%] [Cov:======================>            63%][Progress:===========================>  93%] [Cov:======================>            63%][Progress:============================> 94%] [Cov:======================>            63%][Progress:============================> 94%] [Cov:======================>            63%][Progress:============================> 94%] [Cov:======================>            63%][Progress:============================> 94%] [Cov:======================>            63%][Progress:=============================>97%] [Cov:======================>            63%][Progress:=============================>97%] [Cov:======================>            63%][Progress:=============================>97%] [Cov:======================>            63%][Progress:=============================>97%] [Cov:======================>            63%][Progress:=============================>97%] [Cov:======================>            63%][Progress:=============================>97%] [Cov:======================>            63%][Progress:==============================100%] [Cov:======================>            63%]
* Search finished after 101s and 262 generations, 70179 statements, best individual has fitness: 138.0
* Generated before the refinement 40 tests with total length 141
statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: isComponent(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean component = topSequentialGroupAgent.isComponent((String) null)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.isComponent((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        topSequentialGroupAgent.isComponent("This is a string");
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.isComponent("This is a string"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.isComponent("This is a string") target is: topSequentialGroupAgent method is: isComponent(java.lang.String)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: isComponent(Ljava/lang/String;)Z
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "This is a string";
topSequentialGroupAgent.isComponent(string);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: getChildren()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<glengineer.agents.Agent>
statement code is: List<Agent> children = topSequentialGroupAgent.getChildren()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getChildren();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the getChildren() method of the TopSequentialGroupAgent class
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        topSequentialGroupAgent.getChildren(new String[]{ "Child1", "Child2", "Child3" });
    }
}
statement is: // Improved test data for the getChildren() method of the TopSequentialGroupAgent class
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.getChildren(new String[]{ "Child1", "Child2", "Child3" }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.getChildren(new String[]{ "Child1", "Child2", "Child3" }) target is: topSequentialGroupAgent method is: getChildren(java.lang.String[])
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: getNumberOfChildren()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfChildren = topSequentialGroupAgent.getNumberOfChildren()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getNumberOfChildren();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(new Child("Child 1", "Child 2"), 5);
        topSequentialGroupAgent.getNumberOfChildren();
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(new Child("Child 1", "Child 2"), 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.getNumberOfChildren(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.getNumberOfChildren() target is: topSequentialGroupAgent method is: getNumberOfChildren()
statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: isGap()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean gap = topSequentialGroupAgent.isGap()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.isGap();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int[] numbers = new int[]{ 1, 2, 3, 4, 5 };
        String[] strings = new String[]{ "apple", "banana", "cherry" };
        char[] chars = new char[]{ 'a', 'b', 'c' };
        boolean isGap = false;
        // Original test data
        int[] numbers = new int[]{ 1, 2, 3, 4, 5 };
        String[] strings = new String[]{ "apple", "banana", "cherry" };
        char[] chars = new char[]{ 'a', 'b', 'c' };
        boolean isGap = true;
    }
}
statement is: // Improved test data
int[] numbers = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] strings = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] chars = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: boolean isGap = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Original test data
int[] numbers = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] strings = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] chars = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: boolean isGap = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: boolean _boolean = false
* this is vulnerable: boolean _boolean = true
TestCase is: boolean _boolean = false;
boolean _boolean = true;

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GroupAgent$FunctionsOnGroupAndElementImplementation(Lglengineer/agents/GroupAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GroupAgent$FunctionsOnGroupAndElementImplementation
statement code is: GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(arg1, arg1)
statement is: addPrecedingGap(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(0)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
        groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(10);// Changed the value of addPrecedingGap to a more descriptive value that better represents the situation being tested }}

    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(10)// Changed the value of addPrecedingGap to a more descriptive value that better represents the situation being tested }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(10)// Changed the value of addPrecedingGap to a more descriptive value that better represents the situation being tested }}
 target is: groupAgent_FunctionsOnGroupAndElementImplementation method is: addPrecedingGap(int)
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

statement is: glengineer.agents.SequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.SequentialGroupAgent
statement code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent()
statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = topSequentialGroupAgent.toString()
test data is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(sequentialGroupAgent);
topSequentialGroupAgent.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int numberOfAgents = 5;
        String[] agentNames = new String[]{ "agent1", "agent2", "agent3", "agent4", "agent5" };
        for (int i = 0; i < numberOfAgents; i++) {
            SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
            sequentialGroupAgent.setName(agentNames[i]);
            topSequentialGroupAgent.addAgent(sequentialGroupAgent);
        }
        topSequentialGroupAgent.toString();
    }
}
statement is: int numberOfAgents = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] agentNames = new String[]{ "agent1", "agent2", "agent3", "agent4", "agent5" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (int i = 0; i < numberOfAgents; i++) {
    SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
    sequentialGroupAgent.setName(agentNames[i]);
    topSequentialGroupAgent.addAgent(sequentialGroupAgent);
}, class spoon.support.reflect.code.CtForImpl
statement is: topSequentialGroupAgent.toString(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.toString() target is: topSequentialGroupAgent method is: toString()
* this is vulnerable: int _int = 5
TestCase is: int _int = 5;

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.ComponentAgent(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.ComponentAgent
statement code is: ComponentAgent componentAgent = new ComponentAgent("")
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: equals(Lglengineer/agents/Agent;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = topSequentialGroupAgent.equals((Agent) arg0)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent1 = new TopSequentialGroupAgent();
        ComponentAgent componentAgent1 = new ComponentAgent("A");
        topSequentialGroupAgent1.addAgent(componentAgent1);
        topSequentialGroupAgent1.equals(((Agent) (componentAgent1)));
        TopSequentialGroupAgent topSequentialGroupAgent2 = new TopSequentialGroupAgent();
        ComponentAgent componentAgent2 = new ComponentAgent("B");
        topSequentialGroupAgent2.addAgent(componentAgent2);
        topSequentialGroupAgent2.equals(((Agent) (componentAgent2)));
        TopSequentialGroupAgent topSequentialGroupAgent3 = new TopSequentialGroupAgent();
        ComponentAgent componentAgent3 = new ComponentAgent("A");
        componentAgent3.setName("B");
        topSequentialGroupAgent3.addAgent(componentAgent3);
        topSequentialGroupAgent3.equals(((Agent) (componentAgent3)));
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent1 = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ComponentAgent componentAgent1 = new ComponentAgent("A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent1.addAgent(componentAgent1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent1.addAgent(componentAgent1) target is: topSequentialGroupAgent1 method is: addAgent(ComponentAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent1.equals(((Agent) (componentAgent1))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent1.equals(((Agent) (componentAgent1))) target is: topSequentialGroupAgent1 method is: equals(Agent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: equals(Lglengineer/agents/Agent;)Z
statement is: TopSequentialGroupAgent topSequentialGroupAgent2 = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ComponentAgent componentAgent2 = new ComponentAgent("B"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent2.addAgent(componentAgent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent2.addAgent(componentAgent2) target is: topSequentialGroupAgent2 method is: addAgent(ComponentAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 5
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent2.equals(((Agent) (componentAgent2))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent2.equals(((Agent) (componentAgent2))) target is: topSequentialGroupAgent2 method is: equals(Agent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 5
Matched Method is: equals(Lglengineer/agents/Agent;)Z
statement is: TopSequentialGroupAgent topSequentialGroupAgent3 = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ComponentAgent componentAgent3 = new ComponentAgent("A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: componentAgent3.setName("B"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: componentAgent3.setName("B") target is: componentAgent3 method is: setName(java.lang.String)
statement is: topSequentialGroupAgent3.addAgent(componentAgent3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent3.addAgent(componentAgent3) target is: topSequentialGroupAgent3 method is: addAgent(ComponentAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 10
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent3.equals(((Agent) (componentAgent3))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent3.equals(((Agent) (componentAgent3))) target is: topSequentialGroupAgent3 method is: equals(Agent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 10
Matched Method is: equals(Lglengineer/agents/Agent;)Z
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "A";
ComponentAgent componentAgent = new ComponentAgent(string);
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "B";
ComponentAgent componentAgent = new ComponentAgent(string);
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "A";
ComponentAgent componentAgent = new ComponentAgent(string);
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent((Agent) null)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        topSequentialGroupAgent.addAgent(new Agent("John Doe", 25, "johndoe@example.com"));
        topSequentialGroupAgent.addAgent(new Agent("Jane Smith", 30, "janesmith@example.com"));
    }
}
statement is: // Improved test data
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(new Agent("John Doe", 25, "johndoe@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(new Agent("John Doe", 25, "johndoe@example.com")) target is: topSequentialGroupAgent method is: addAgent(Agent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: topSequentialGroupAgent.addAgent(new Agent("Jane Smith", 30, "janesmith@example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(new Agent("Jane Smith", 30, "janesmith@example.com")) target is: topSequentialGroupAgent method is: addAgent(Agent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
Agent agent = null;
topSequentialGroupAgent.addAgent(agent);
Agent agent = null;
topSequentialGroupAgent.addAgent(agent);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GapAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: getComponent(Ljava/lang/String;)Lglengineer/agents/ComponentAgent; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.agents.ComponentAgent
statement code is: ComponentAgent component = topSequentialGroupAgent.getComponent("h2$H~j|})+bcdE%nubO")
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.getComponent("h2$H~j|})+bcdE%nubO");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GapAgent gapAgent = new GapAgent();
        topSequentialGroupAgent.addAgent(gapAgent);
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent = new GapAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(gapAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(gapAgent) target is: topSequentialGroupAgent method is: addAgent(GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GapAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: getGroup(Ljava/lang/String;Ljava/lang/String;)Lglengineer/agents/GroupAgent; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.agents.GroupAgent
statement code is: GroupAgent group = topSequentialGroupAgent.getGroup("sequential group <null,null>", "sequential group <null,null>")
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.getGroup("sequential group <null,null>", "sequential group <null,null>");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GapAgent gapAgent = new GapAgent(new double[]{ 1.0, 2.0, 3.0 }, new String[]{ "A", "B", "C" });
        topSequentialGroupAgent.addAgent(gapAgent);
        topSequentialGroupAgent.getGroup("sequential group <1.0, 2.0, 3.0>, A B C", "sequential group <1.0, 2.0, 3.0>, A B C");
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent = new GapAgent(new double[]{ 1.0, 2.0, 3.0 }, new String[]{ "A", "B", "C" }), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(gapAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(gapAgent) target is: topSequentialGroupAgent method is: addAgent(GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: topSequentialGroupAgent.getGroup("sequential group <1.0, 2.0, 3.0>, A B C", "sequential group <1.0, 2.0, 3.0>, A B C"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.getGroup("sequential group <1.0, 2.0, 3.0>, A B C", "sequential group <1.0, 2.0, 3.0>, A B C") target is: topSequentialGroupAgent method is: getGroup(java.lang.String,java.lang.String)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: getGroup(Ljava/lang/String;Ljava/lang/String;)Lglengineer/agents/GroupAgent;
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
String string = "sequential group <1.0, 2.0, 3.0>, A B C";
String string = "sequential group <1.0, 2.0, 3.0>, A B C";
topSequentialGroupAgent.getGroup(string, string);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.ComponentAgent(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.ComponentAgent
statement code is: ComponentAgent componentAgent = new ComponentAgent("z&:&~^w8y9\"q")
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: findDependingComponentByName(Ljava/lang/String;)Lglengineer/agents/ComponentAgent; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.agents.ComponentAgent
statement code is: ComponentAgent findDependingComponentByName = topSequentialGroupAgent.findDependingComponentByName("z&:&~^w8y9\"q")
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("z&:&~^w8y9\"q");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.findDependingComponentByName("z&:&~^w8y9\"q");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        ComponentAgent componentAgent = new ComponentAgent("001-A");
        topSequentialGroupAgent.addAgent(componentAgent);
        topSequentialGroupAgent.findDependingComponentByName("001-A");
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ComponentAgent componentAgent = new ComponentAgent("001-A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(componentAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(componentAgent) target is: topSequentialGroupAgent method is: addAgent(ComponentAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.findDependingComponentByName("001-A"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.findDependingComponentByName("001-A") target is: topSequentialGroupAgent method is: findDependingComponentByName(java.lang.String)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: findDependingComponentByName(Ljava/lang/String;)Lglengineer/agents/ComponentAgent;
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "001-A";
ComponentAgent componentAgent = new ComponentAgent(string);
topSequentialGroupAgent.addAgent(componentAgent);
String string = "001-A";
topSequentialGroupAgent.findDependingComponentByName(string);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GapAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: findDependingComponentByName(Ljava/lang/String;)Lglengineer/agents/ComponentAgent; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.agents.ComponentAgent
statement code is: ComponentAgent findDependingComponentByName = topSequentialGroupAgent.findDependingComponentByName("-y9S.=vsMSpE?Dms9^")
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.findDependingComponentByName("-y9S.=vsMSpE?Dms9^");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GapAgent gapAgent = new GapAgent();
        topSequentialGroupAgent.addAgent(gapAgent);
        topSequentialGroupAgent.findDependingComponentByName("Gap");
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent = new GapAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(gapAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(gapAgent) target is: topSequentialGroupAgent method is: addAgent(GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.findDependingComponentByName("Gap"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.findDependingComponentByName("Gap") target is: topSequentialGroupAgent method is: findDependingComponentByName(java.lang.String)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: findDependingComponentByName(Ljava/lang/String;)Lglengineer/agents/ComponentAgent;
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
String string = "Gap";
topSequentialGroupAgent.findDependingComponentByName(string);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.ParallelGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.ParallelGroupAgent
statement code is: ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: removeGapsFromParallelGroups()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.removeGapsFromParallelGroups()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
        topSequentialGroupAgent.addAgent(parallelGroupAgent);
        topSequentialGroupAgent.removeGapsFromParallelGroups(30, 50, 100, 200);
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(parallelGroupAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(parallelGroupAgent) target is: topSequentialGroupAgent method is: addAgent(ParallelGroupAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.removeGapsFromParallelGroups(30, 50, 100, 200), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.removeGapsFromParallelGroups(30, 50, 100, 200) target is: topSequentialGroupAgent method is: removeGapsFromParallelGroups(int,int,int,int)
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.ParallelGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.ParallelGroupAgent
statement code is: ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent()
statement is: glengineer.agents.GapAgent(III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent((-99), (-99), 487)
statement is: addGapAfter(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: parallelGroupAgent.addGapAfter(arg0, arg1)
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: removeGapsFromParallelGroups()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.removeGapsFromParallelGroups()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
GapAgent gapAgent = new GapAgent((-99), (-99), 487);
parallelGroupAgent.addGapAfter(gapAgent, topSequentialGroupAgent);
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
        GapAgent gapAgent = new GapAgent(-99, -99, 487);
        parallelGroupAgent.addGapAfter(gapAgent, topSequentialGroupAgent);
        topSequentialGroupAgent.addAgent(parallelGroupAgent);
        topSequentialGroupAgent.removeGapsFromParallelGroups();
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent = new GapAgent(-99, -99, 487), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parallelGroupAgent.addGapAfter(gapAgent, topSequentialGroupAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parallelGroupAgent.addGapAfter(gapAgent, topSequentialGroupAgent) target is: parallelGroupAgent method is: addGapAfter(GapAgent,TopSequentialGroupAgent)
source statement: glengineer.agents.ParallelGroupAgent()V callee: VariableReference: Statement 1, type glengineer.agents.ParallelGroupAgentindex is: 1
Matched Method is: addGapAfter(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.addAgent(parallelGroupAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(parallelGroupAgent) target is: topSequentialGroupAgent method is: addAgent(ParallelGroupAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.removeGapsFromParallelGroups(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.removeGapsFromParallelGroups() target is: topSequentialGroupAgent method is: removeGapsFromParallelGroups()
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: removeGapsFromParallelGroups()V
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
int _int = 487;
GapAgent gapAgent = new GapAgent(_int, (-99), 487);
parallelGroupAgent.addGapAfter(gapAgent, topSequentialGroupAgent);
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.TemporaryGapAgent(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TemporaryGapAgent
statement code is: TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("L\"S;Ds[G/tRf8=")
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: removeGapsFromParallelGroups()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.removeGapsFromParallelGroups()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        TemporaryGapAgent temporaryGapAgent1 = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
        TemporaryGapAgent temporaryGapAgent2 = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
        topSequentialGroupAgent.addAgent(temporaryGapAgent1);
        topSequentialGroupAgent.addAgent(temporaryGapAgent2);
        topSequentialGroupAgent.removeGapsFromParallelGroups();
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TemporaryGapAgent temporaryGapAgent1 = new TemporaryGapAgent("L\"S;Ds[G/tRf8="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TemporaryGapAgent temporaryGapAgent2 = new TemporaryGapAgent("L\"S;Ds[G/tRf8="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(temporaryGapAgent1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(temporaryGapAgent1) target is: topSequentialGroupAgent method is: addAgent(TemporaryGapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.addAgent(temporaryGapAgent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(temporaryGapAgent2) target is: topSequentialGroupAgent method is: addAgent(TemporaryGapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.removeGapsFromParallelGroups(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.removeGapsFromParallelGroups() target is: topSequentialGroupAgent method is: removeGapsFromParallelGroups()
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: removeGapsFromParallelGroups()V
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "L\"S;Ds[G/tRf8=";
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent(string);
String string = "L\"S;Ds[G/tRf8=";
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent(string);
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GapAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent()
statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: removeGapsFromParallelGroups()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.removeGapsFromParallelGroups()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GapAgent gapAgent = new GapAgent("gap_1", 50, 75);
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent("top_sequential_group", 50, 200);
        topSequentialGroupAgent.addAgent(gapAgent);
        topSequentialGroupAgent.addAgent(topSequentialGroupAgent);
        topSequentialGroupAgent.removeGapsFromParallelGroups();
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent = new GapAgent("gap_1", 50, 75), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent("top_sequential_group", 50, 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(gapAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(gapAgent) target is: topSequentialGroupAgent method is: addAgent(GapAgent)
statement is: topSequentialGroupAgent.addAgent(topSequentialGroupAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(topSequentialGroupAgent) target is: topSequentialGroupAgent method is: addAgent(TopSequentialGroupAgent)
statement is: topSequentialGroupAgent.removeGapsFromParallelGroups(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.removeGapsFromParallelGroups() target is: topSequentialGroupAgent method is: removeGapsFromParallelGroups()
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GapAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: removeGapsFromParallelGroups()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.removeGapsFromParallelGroups()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GapAgent gapAgent1 = new GapAgent(4, 8);
        GapAgent gapAgent2 = new GapAgent(5, 9);
        topSequentialGroupAgent.addAgent(gapAgent1);
        topSequentialGroupAgent.addAgent(gapAgent2);
        topSequentialGroupAgent.removeGapsFromParallelGroups();
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent1 = new GapAgent(4, 8), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent2 = new GapAgent(5, 9), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(gapAgent1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(gapAgent1) target is: topSequentialGroupAgent method is: addAgent(GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: topSequentialGroupAgent.addAgent(gapAgent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(gapAgent2) target is: topSequentialGroupAgent method is: addAgent(GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: topSequentialGroupAgent.removeGapsFromParallelGroups(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.removeGapsFromParallelGroups() target is: topSequentialGroupAgent method is: removeGapsFromParallelGroups()
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: removeGapsFromParallelGroups()V
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GapAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: removeGapsFromParallelGroups()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.removeGapsFromParallelGroups()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GapAgent gapAgent = new GapAgent(10, "gap");// change primitive value and String to a more descriptive example

        topSequentialGroupAgent.addAgent(gapAgent);
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        topSequentialGroupAgent.addAgent(topSequentialGroupAgent);// add another instance of the same class as an agent to test recursive behavior

        topSequentialGroupAgent.removeGapsFromParallelGroups();
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent = new GapAgent(10, "gap")// change primitive value and String to a more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(gapAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(gapAgent) target is: topSequentialGroupAgent method is: addAgent(GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(topSequentialGroupAgent)// add another instance of the same class as an agent to test recursive behavior
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(topSequentialGroupAgent)// add another instance of the same class as an agent to test recursive behavior
 target is: topSequentialGroupAgent method is: addAgent(TopSequentialGroupAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 3
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.removeGapsFromParallelGroups(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.removeGapsFromParallelGroups() target is: topSequentialGroupAgent method is: removeGapsFromParallelGroups()
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.ParallelGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.ParallelGroupAgent
statement code is: ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: mock(interface glengineer.GroupLayoutEngineer$TemporaryGapsToGaps) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface glengineer.GroupLayoutEngineer$TemporaryGapsToGaps
statement code is: GroupLayoutEngineer.TemporaryGapsToGaps groupLayoutEngineer_TemporaryGapsToGaps = mock(GroupLayoutEngineer.TemporaryGapsToGaps.class, new ViolatedAssumptionAnswer())
statement is: replaceTemporaryGapsByRealGaps(Lglengineer/GroupLayoutEngineer$TemporaryGapsToGaps;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.replaceTemporaryGapsByRealGaps(arg0)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);
GroupLayoutEngineer.TemporaryGapsToGaps groupLayoutEngineer_TemporaryGapsToGaps = mock(GroupLayoutEngineer.TemporaryGapsToGaps.class, new ViolatedAssumptionAnswer());
topSequentialGroupAgent.replaceTemporaryGapsByRealGaps(groupLayoutEngineer_TemporaryGapsToGaps);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SequentialGroup sequentialGroup = new SequentialGroup();
        ParallelGroup parallelGroup = new ParallelGroup();
        sequentialGroup.addAgent(parallelGroup);
        TemporaryGapsToGaps temporaryGapConverter = new TemporaryGapsToGaps();
        sequentialGroup.replaceTemporaryGapsByRealGaps(temporaryGapConverter);
    }
}
statement is: SequentialGroup sequentialGroup = new SequentialGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ParallelGroup parallelGroup = new ParallelGroup(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: sequentialGroup.addAgent(parallelGroup), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroup.addAgent(parallelGroup) target is: sequentialGroup method is: addAgent(ParallelGroup)
statement is: TemporaryGapsToGaps temporaryGapConverter = new TemporaryGapsToGaps(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: sequentialGroup.replaceTemporaryGapsByRealGaps(temporaryGapConverter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroup.replaceTemporaryGapsByRealGaps(temporaryGapConverter) target is: sequentialGroup method is: replaceTemporaryGapsByRealGaps(TemporaryGapsToGaps)
statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.TemporaryGapAgent(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TemporaryGapAgent
statement code is: TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("-EuZ,=ngH/+%?b!")
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: replaceTemporaryGapsByRealGaps(Lglengineer/GroupLayoutEngineer$TemporaryGapsToGaps;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.replaceTemporaryGapsByRealGaps((GroupLayoutEngineer.TemporaryGapsToGaps) null)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("-EuZ,=ngH/+%?b!");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.replaceTemporaryGapsByRealGaps((GroupLayoutEngineer.TemporaryGapsToGaps) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("-EuZ,=ngH/+%?b!");
        topSequentialGroupAgent.addAgent(temporaryGapAgent);
        topSequentialGroupAgent.replaceTemporaryGapsByRealGaps(((GroupLayoutEngineer.TemporaryGapsToGaps) (null)));
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("-EuZ,=ngH/+%?b!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(temporaryGapAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(temporaryGapAgent) target is: topSequentialGroupAgent method is: addAgent(TemporaryGapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.replaceTemporaryGapsByRealGaps(((GroupLayoutEngineer.TemporaryGapsToGaps) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.replaceTemporaryGapsByRealGaps(((GroupLayoutEngineer.TemporaryGapsToGaps) (null))) target is: topSequentialGroupAgent method is: replaceTemporaryGapsByRealGaps(GroupLayoutEngineer.TemporaryGapsToGaps)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: replaceTemporaryGapsByRealGaps(Lglengineer/GroupLayoutEngineer$TemporaryGapsToGaps;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "-EuZ,=ngH/+%?b!";
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent(string);
topSequentialGroupAgent.addAgent(temporaryGapAgent);
GroupLayoutEngineer.TemporaryGapsToGaps groupLayoutEngineer_TemporaryGapsToGaps = null;
topSequentialGroupAgent.replaceTemporaryGapsByRealGaps(groupLayoutEngineer_TemporaryGapsToGaps);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GroupAgent$FunctionsOnGroupAndElementImplementation(Lglengineer/agents/GroupAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GroupAgent$FunctionsOnGroupAndElementImplementation
statement code is: GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(arg1, arg1)
statement is: addPrecedingGap(III)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(843, 852, 1482)
statement is: addPrecedingGap(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(0)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(843, 852, 1482);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
        GroupAgent.GapInsertion gapInsertion = new GroupAgent.GapInsertion(sequentialGroupAgent, sequentialGroupAgent);
        gapInsertion.addPrecedingGap("startPosition", "endPosition");
        gapInsertion.addPrecedingGap("noGap");
    }
}
statement is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GroupAgent.GapInsertion gapInsertion = new GroupAgent.GapInsertion(sequentialGroupAgent, sequentialGroupAgent), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gapInsertion.addPrecedingGap("startPosition", "endPosition"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gapInsertion.addPrecedingGap("startPosition", "endPosition") target is: gapInsertion method is: addPrecedingGap(java.lang.String,java.lang.String)
statement is: gapInsertion.addPrecedingGap("noGap"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gapInsertion.addPrecedingGap("noGap") target is: gapInsertion method is: addPrecedingGap(java.lang.String)
statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GapAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent()
statement is: glengineer.agents.TemporaryGapAgent(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TemporaryGapAgent
statement code is: TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("")
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: addGapBefore(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addGapBefore(arg0, arg1)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addGapBefore(gapAgent, temporaryGapAgent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GapAgent gapAgent = new GapAgent(" ");// changed the integer value to a more descriptive String value

        TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("");
        topSequentialGroupAgent.addAgent(temporaryGapAgent);
        topSequentialGroupAgent.addGapBefore(gapAgent, temporaryGapAgent);// added a more descriptive String value to the gapAgent parameter }}

    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent = new GapAgent(" ")// changed the integer value to a more descriptive String value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent(""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(temporaryGapAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(temporaryGapAgent) target is: topSequentialGroupAgent method is: addAgent(TemporaryGapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.addGapBefore(gapAgent, temporaryGapAgent)// added a more descriptive String value to the gapAgent parameter }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addGapBefore(gapAgent, temporaryGapAgent)// added a more descriptive String value to the gapAgent parameter }}
 target is: topSequentialGroupAgent method is: addGapBefore(GapAgent,TemporaryGapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addGapBefore(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "";
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent(string);
topSequentialGroupAgent.addAgent(temporaryGapAgent);
TemporaryGapAgent temporaryGapAgent = null;
topSequentialGroupAgent.addGapBefore((GapAgent) temporaryGapAgent, temporaryGapAgent);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.ComponentAgent(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.ComponentAgent
statement code is: ComponentAgent componentAgent = new ComponentAgent("")
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: glengineer.agents.GapAgent(Lglengineer/agents/settings/Sizes;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent((Sizes) null)
statement is: addGapAfter(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addGapAfter(arg0, arg1)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("");
topSequentialGroupAgent.addAgent(componentAgent);
GapAgent gapAgent = new GapAgent((Sizes) null);
topSequentialGroupAgent.addGapAfter(gapAgent, componentAgent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        ComponentAgent componentAgent = new ComponentAgent("A");
        topSequentialGroupAgent.addAgent(componentAgent);
        GapAgent gapAgent = new GapAgent(((Sizes) (null)));
        topSequentialGroupAgent.addGapAfter(gapAgent, componentAgent);
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ComponentAgent componentAgent = new ComponentAgent("A"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(componentAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(componentAgent) target is: topSequentialGroupAgent method is: addAgent(ComponentAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: GapAgent gapAgent = new GapAgent(((Sizes) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addGapAfter(gapAgent, componentAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addGapAfter(gapAgent, componentAgent) target is: topSequentialGroupAgent method is: addGapAfter(GapAgent,ComponentAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addGapAfter(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "A";
ComponentAgent componentAgent = new ComponentAgent(string);
topSequentialGroupAgent.addAgent(componentAgent);
GapAgent gapAgent = new GapAgent((Sizes) null);
topSequentialGroupAgent.addGapAfter(gapAgent, componentAgent);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GapAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: addGapAfter(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addGapAfter(arg1, arg1)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.addGapAfter(gapAgent, gapAgent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GapAgent gapAgent1 = new GapAgent("Gap Agent 1", "This is a description of Gap Agent 1.");
        GapAgent gapAgent2 = new GapAgent("Gap Agent 2", "This is a description of Gap Agent 2.");
        topSequentialGroupAgent.addAgent(gapAgent1);
        topSequentialGroupAgent.addAgent(gapAgent2);
        topSequentialGroupAgent.addGapAfter(gapAgent1, gapAgent2);
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent1 = new GapAgent("Gap Agent 1", "This is a description of Gap Agent 1."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgent2 = new GapAgent("Gap Agent 2", "This is a description of Gap Agent 2."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(gapAgent1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(gapAgent1) target is: topSequentialGroupAgent method is: addAgent(GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: topSequentialGroupAgent.addAgent(gapAgent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(gapAgent2) target is: topSequentialGroupAgent method is: addAgent(GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: topSequentialGroupAgent.addGapAfter(gapAgent1, gapAgent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addGapAfter(gapAgent1, gapAgent2) target is: topSequentialGroupAgent method is: addGapAfter(GapAgent,GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addGapAfter(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
GapAgent gapAgent = null;
GapAgent gapAgent = null;
topSequentialGroupAgent.addGapAfter(gapAgent, gapAgent);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.ComponentAgent(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.ComponentAgent
statement code is: ComponentAgent componentAgent = new ComponentAgent("S ")
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: getLastName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String lastName = topSequentialGroupAgent.getLastName()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("S ");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        ComponentAgent componentAgent = new ComponentAgent("Sally");
        topSequentialGroupAgent.addAgent(componentAgent);
        topSequentialGroupAgent.getLastName();
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ComponentAgent componentAgent = new ComponentAgent("Sally"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(componentAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(componentAgent) target is: topSequentialGroupAgent method is: addAgent(ComponentAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.getLastName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.getLastName() target is: topSequentialGroupAgent method is: getLastName()
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: getLastName()Ljava/lang/String;
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "Sally";
ComponentAgent componentAgent = new ComponentAgent(string);
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: addGapBefore(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addGapBefore((GapAgent) null, (Agent) null)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addGapBefore((GapAgent) null, (Agent) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        topSequentialGroupAgent.addGapBefore(new GapAgent("gap", 2, 3), null);
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addGapBefore(new GapAgent("gap", 2, 3), null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addGapBefore(new GapAgent("gap", 2, 3), null) target is: topSequentialGroupAgent method is: addGapBefore(GapAgent,<unknown>)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addGapBefore(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = null;
GapAgent gapAgent = null;
topSequentialGroupAgent.addGapBefore(gapAgent, gapAgent);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GapAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GapAgent
statement code is: GapAgent gapAgent = new GapAgent()
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: addGapBefore(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addGapBefore(arg1, arg1)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.addGapBefore(gapAgent, gapAgent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GapAgent gapAgentA = new GapAgent("Gap Agent A", 25);
        GapAgent gapAgentB = new GapAgent("Gap Agent B", 35);
        topSequentialGroupAgent.addAgent(gapAgentA);
        topSequentialGroupAgent.addGapBefore(gapAgentA, gapAgentB);
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgentA = new GapAgent("Gap Agent A", 25), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GapAgent gapAgentB = new GapAgent("Gap Agent B", 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(gapAgentA), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(gapAgentA) target is: topSequentialGroupAgent method is: addAgent(GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: topSequentialGroupAgent.addGapBefore(gapAgentA, gapAgentB), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addGapBefore(gapAgentA, gapAgentB) target is: topSequentialGroupAgent method is: addGapBefore(GapAgent,GapAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addGapBefore(Lglengineer/agents/GapAgent;Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
GapAgent gapAgent = null;
GapAgent gapAgent = null;
topSequentialGroupAgent.addGapBefore(gapAgent, gapAgent);

statement is: glengineer.agents.SequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.SequentialGroupAgent
statement code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent()
statement is: getFirstName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String firstName = sequentialGroupAgent.getFirstName()
test data is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.getFirstName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
        // First name: John
        String firstName = "John";
        sequentialGroupAgent.setFirstName(firstName);
        // Last name: Smith
        String lastName = "Smith";
        sequentialGroupAgent.setLastName(lastName);
        // Age: 25
        int age = 25;
        sequentialGroupAgent.setAge(age);
        // Gender: Male
        String gender = "Male";
        sequentialGroupAgent.setGender(gender);
    }
}
statement is: // Improved test data
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // First name: John
String firstName = "John", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: sequentialGroupAgent.setFirstName(firstName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroupAgent.setFirstName(firstName) target is: sequentialGroupAgent method is: setFirstName(java.lang.String)
statement is: // Last name: Smith
String lastName = "Smith", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: sequentialGroupAgent.setLastName(lastName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroupAgent.setLastName(lastName) target is: sequentialGroupAgent method is: setLastName(java.lang.String)
statement is: // Age: 25
int age = 25, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: sequentialGroupAgent.setAge(age), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroupAgent.setAge(age) target is: sequentialGroupAgent method is: setAge(int)
statement is: // Gender: Male
String gender = "Male", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: sequentialGroupAgent.setGender(gender), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroupAgent.setGender(gender) target is: sequentialGroupAgent method is: setGender(java.lang.String)
* this is vulnerable: String string = "John"
* this is vulnerable: String string = "Smith"
* this is vulnerable: int _int = 25
* this is vulnerable: String string = "Male"
TestCase is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
String string = "John";
String string = "Smith";
int _int = 25;
String string = "Male";

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: getFunctionsOnGroupImplemenation()Lglengineer/agents/setters/FunctionsOnGroup; type is: class org.evosuite.testcase.statements.MethodStatement return type interface glengineer.agents.setters.FunctionsOnGroup
statement code is: FunctionsOnGroup functionsOnGroupImplemenation = topSequentialGroupAgent.getFunctionsOnGroupImplemenation()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getFunctionsOnGroupImplemenation();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        topSequentialGroupAgent.getFunctionsOnGroupImplemenation();
        // Changed the primitive values and Strings (such as integers, doubles, strings, chars) to more illustrative examples
        topSequentialGroupAgent.setId(101);// Before: 123

        topSequentialGroupAgent.setName("New Name");// Before: "ABC" }}

    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.getFunctionsOnGroupImplemenation(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.getFunctionsOnGroupImplemenation() target is: topSequentialGroupAgent method is: getFunctionsOnGroupImplemenation()
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: getFunctionsOnGroupImplemenation()Lglengineer/agents/setters/FunctionsOnGroup;
statement is: // Changed the primitive values and Strings (such as integers, doubles, strings, chars) to more illustrative examples
topSequentialGroupAgent.setId(101)// Before: 123
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed the primitive values and Strings (such as integers, doubles, strings, chars) to more illustrative examples
topSequentialGroupAgent.setId(101)// Before: 123
 target is: topSequentialGroupAgent method is: setId(int)
statement is: topSequentialGroupAgent.setName("New Name")// Before: "ABC" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.setName("New Name")// Before: "ABC" }}
 target is: topSequentialGroupAgent method is: setName(java.lang.String)
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getFunctionsOnGroupImplemenation();

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.ComponentAgent(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.ComponentAgent
statement code is: ComponentAgent componentAgent = new ComponentAgent("")
statement is: addAgent(Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: topSequentialGroupAgent.addAgent(arg0)
statement is: getLastName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String lastName = topSequentialGroupAgent.getLastName()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        ComponentAgent componentAgent = new ComponentAgent("Jane Doe");
        topSequentialGroupAgent.addAgent(componentAgent);
        topSequentialGroupAgent.getLastName();
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ComponentAgent componentAgent = new ComponentAgent("Jane Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.addAgent(componentAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.addAgent(componentAgent) target is: topSequentialGroupAgent method is: addAgent(ComponentAgent)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: addAgent(Lglengineer/agents/Agent;)V
statement is: topSequentialGroupAgent.getLastName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.getLastName() target is: topSequentialGroupAgent method is: getLastName()
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: getLastName()Ljava/lang/String;
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "Jane Doe";
ComponentAgent componentAgent = new ComponentAgent(string);
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: getLastName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String lastName = topSequentialGroupAgent.getLastName()
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getLastName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        // Improved test data: using more descriptive and representative values
        String expectedFirstName = "John";
        String expectedLastName = "Doe";
        String actualFirstName = topSequentialGroupAgent.getFirstName();
        String actualLastName = topSequentialGroupAgent.getLastName();
        assertEquals(expectedFirstName, actualFirstName);
        assertEquals(expectedLastName, actualLastName);
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data: using more descriptive and representative values
String expectedFirstName = "John", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedLastName = "Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String actualFirstName = topSequentialGroupAgent.getFirstName(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.getFirstName() target is: topSequentialGroupAgent method is: getFirstName()
statement is: String actualLastName = topSequentialGroupAgent.getLastName(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.getLastName() target is: topSequentialGroupAgent method is: getLastName()
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: getLastName()Ljava/lang/String;
statement is: assertEquals(expectedFirstName, actualFirstName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedFirstName, actualFirstName) target is:  method is: assertEquals(java.lang.String,java.lang.String)
statement is: assertEquals(expectedLastName, actualLastName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedLastName, actualLastName) target is:  method is: assertEquals(java.lang.String,java.lang.String)
* this is vulnerable: String string = "John"
* this is vulnerable: String string = "Doe"
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "John";
String string = "Doe";
topSequentialGroupAgent.getLastName();

statement is: glengineer.agents.SequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.SequentialGroupAgent
statement code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent()
statement is: LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement = LayoutStyle.ComponentPlacement.RELATED type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class javax.swing.LayoutStyle$ComponentPlacement
statement code is: LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement = LayoutStyle.ComponentPlacement.RELATED
statement is: glengineer.agents.PreferredGapAgent(Ljavax/swing/LayoutStyle$ComponentPlacement;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.PreferredGapAgent
statement code is: PreferredGapAgent preferredGapAgent = new PreferredGapAgent(arg0)
statement is: addPreferredGapAfter(Lglengineer/agents/PreferredGapAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: sequentialGroupAgent.addPreferredGapAfter(arg1, arg1)
statement is: getNumberOfChildren()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int numberOfChildren = sequentialGroupAgent.getNumberOfChildren()
test data is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement = LayoutStyle.ComponentPlacement.RELATED;
PreferredGapAgent preferredGapAgent = new PreferredGapAgent(layoutStyle_ComponentPlacement);
sequentialGroupAgent.addPreferredGapAfter(preferredGapAgent, preferredGapAgent);
sequentialGroupAgent.getNumberOfChildren();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
        LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement = ComponentPlacement.RELATED;
        PreferredGapAgent preferredGapAgent = new PreferredGapAgent(layoutStyle_ComponentPlacement);
        sequentialGroupAgent.addPreferredGapAfter(preferredGapAgent, preferredGapAgent);
        int numberOfChildren = sequentialGroupAgent.getNumberOfChildren();
    }
}
statement is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement = ComponentPlacement.RELATED, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ComponentPlacement.RELATED is ComponentPlacement
statement is: PreferredGapAgent preferredGapAgent = new PreferredGapAgent(layoutStyle_ComponentPlacement), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: glengineer.agents.PreferredGapAgent(Ljavax/swing/LayoutStyle$ComponentPlacement;)V
statement is: sequentialGroupAgent.addPreferredGapAfter(preferredGapAgent, preferredGapAgent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroupAgent.addPreferredGapAfter(preferredGapAgent, preferredGapAgent) target is: sequentialGroupAgent method is: addPreferredGapAfter(PreferredGapAgent,PreferredGapAgent)
source statement: glengineer.agents.SequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.SequentialGroupAgentindex is: 0
Matched Method is: addPreferredGapAfter(Lglengineer/agents/PreferredGapAgent;Lglengineer/agents/Agent;)V
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: int numberOfChildren = sequentialGroupAgent.getNumberOfChildren(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroupAgent.getNumberOfChildren() target is: sequentialGroupAgent method is: getNumberOfChildren()
source statement: glengineer.agents.SequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.SequentialGroupAgentindex is: 0
Matched Method is: getNumberOfChildren()I
TestCase is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
PreferredGapAgent preferredGapAgent = null;
PreferredGapAgent preferredGapAgent = null;
sequentialGroupAgent.addPreferredGapAfter(preferredGapAgent, preferredGapAgent);
sequentialGroupAgent.getNumberOfChildren();

statement is: glengineer.agents.SequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.SequentialGroupAgent
statement code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent()
statement is: mock(interface glengineer.agents.GroupCreatorAndElementAdder) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface glengineer.agents.GroupCreatorAndElementAdder
statement code is: GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(groupCreatorAndElementAdder).createSequentialGroup()
statement is: groupContent(Lglengineer/agents/GroupCreatorAndElementAdder;)Ljavax/swing/GroupLayout$Group; type is: class org.evosuite.testcase.statements.MethodStatement return type class javax.swing.GroupLayout$Group
statement code is: GroupLayout.Group groupContent = sequentialGroupAgent.groupContent(arg0)
test data is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(groupCreatorAndElementAdder).createSequentialGroup();
sequentialGroupAgent.groupContent(groupCreatorAndElementAdder);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
        GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
        doReturn(((GroupLayout.SequentialGroup) (null))).when(groupCreatorAndElementAdder).createSequentialGroup();
        sequentialGroupAgent.groupContent(new GroupCreatorAndElementAdder("My Sequential Group", 10));
    }
}
statement is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: GroupCreatorAndElementAdder argument is: GroupCreatorAndElementAdder.class
Matched Method is: mock(interface glengineer.agents.GroupCreatorAndElementAdder)
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: doReturn(((GroupLayout.SequentialGroup) (null))).when(groupCreatorAndElementAdder).createSequentialGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(((GroupLayout.SequentialGroup) (null))).when(groupCreatorAndElementAdder).createSequentialGroup() target is: doReturn(((GroupLayout.SequentialGroup) (null))).when(groupCreatorAndElementAdder) method is: createSequentialGroup()
statement is: sequentialGroupAgent.groupContent(new GroupCreatorAndElementAdder("My Sequential Group", 10)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroupAgent.groupContent(new GroupCreatorAndElementAdder("My Sequential Group", 10)) target is: sequentialGroupAgent method is: groupContent(GroupCreatorAndElementAdder)
source statement: glengineer.agents.SequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.SequentialGroupAgentindex is: 0
Matched Method is: groupContent(Lglengineer/agents/GroupCreatorAndElementAdder;)Ljavax/swing/GroupLayout$Group;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupLayout.SequentialGroup groupLayout_SequentialGroup = null;
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn(groupLayout_SequentialGroup).when(groupCreatorAndElementAdder).createSequentialGroup();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = null;
sequentialGroupAgent.groupContent(groupCreatorAndElementAdder);

statement is: glengineer.agents.SequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.SequentialGroupAgent
statement code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent()
statement is: mock(interface glengineer.agents.GroupCreatorAndElementAdder) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface glengineer.agents.GroupCreatorAndElementAdder
statement code is: GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(groupCreatorAndElementAdder).createSequentialGroup()
statement is: addContentToGroup(Ljavax/swing/GroupLayout$Group;Lglengineer/agents/GroupCreatorAndElementAdder;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: sequentialGroupAgent.addContentToGroup((GroupLayout.Group) null, arg1)
test data is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(groupCreatorAndElementAdder).createSequentialGroup();
sequentialGroupAgent.addContentToGroup((GroupLayout.Group) null, groupCreatorAndElementAdder);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
        GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
        doReturn(((GroupLayout.SequentialGroup) ("A sequence of elements"))).when(groupCreatorAndElementAdder).createSequentialGroup();
        sequentialGroupAgent.addContentToGroup("A group", groupCreatorAndElementAdder);
    }
}
statement is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: GroupCreatorAndElementAdder argument is: GroupCreatorAndElementAdder.class
Matched Method is: mock(interface glengineer.agents.GroupCreatorAndElementAdder)
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: doReturn(((GroupLayout.SequentialGroup) ("A sequence of elements"))).when(groupCreatorAndElementAdder).createSequentialGroup(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(((GroupLayout.SequentialGroup) ("A sequence of elements"))).when(groupCreatorAndElementAdder).createSequentialGroup() target is: doReturn(((GroupLayout.SequentialGroup) ("A sequence of elements"))).when(groupCreatorAndElementAdder) method is: createSequentialGroup()
statement is: sequentialGroupAgent.addContentToGroup("A group", groupCreatorAndElementAdder), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroupAgent.addContentToGroup("A group", groupCreatorAndElementAdder) target is: sequentialGroupAgent method is: addContentToGroup(java.lang.String,GroupCreatorAndElementAdder)
source statement: glengineer.agents.SequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.SequentialGroupAgentindex is: 0
Matched Method is: addContentToGroup(Ljavax/swing/GroupLayout$Group;Lglengineer/agents/GroupCreatorAndElementAdder;)V
TestCase is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupLayout.SequentialGroup groupLayout_SequentialGroup = null;
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn(groupLayout_SequentialGroup).when(groupCreatorAndElementAdder).createSequentialGroup();
String string = "A group";
sequentialGroupAgent.addContentToGroup((GroupLayout.Group) string, groupCreatorAndElementAdder);

statement is: glengineer.agents.SequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.SequentialGroupAgent
statement code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent()
statement is: findDependingGroupByNames(Ljava/lang/String;Ljava/lang/String;)Lglengineer/agents/GroupAgent; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.agents.GroupAgent
statement code is: GroupAgent findDependingGroupByNames = sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <")
test data is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
        sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <");
    }
}
statement is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <") target is: sequentialGroupAgent method is: findDependingGroupByNames(java.lang.String,java.lang.String)
source statement: glengineer.agents.SequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.SequentialGroupAgentindex is: 0
Matched Method is: findDependingGroupByNames(Ljava/lang/String;Ljava/lang/String;)Lglengineer/agents/GroupAgent;
TestCase is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
String string = "no such parallel group found: <";
String string = "no such parallel group found: <";
sequentialGroupAgent.findDependingGroupByNames(string, string);

statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: findDependingParallelGroupByNames(Ljava/lang/String;Ljava/lang/String;)Lglengineer/agents/ParallelGroupAgent; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.agents.ParallelGroupAgent
statement code is: ParallelGroupAgent findDependingParallelGroupByNames = topSequentialGroupAgent.findDependingParallelGroupByNames((String) null, (String) null)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.findDependingParallelGroupByNames((String) null, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        topSequentialGroupAgent.findDependingParallelGroupByNames("group1", "group2");
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: topSequentialGroupAgent.findDependingParallelGroupByNames("group1", "group2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: topSequentialGroupAgent.findDependingParallelGroupByNames("group1", "group2") target is: topSequentialGroupAgent method is: findDependingParallelGroupByNames(java.lang.String,java.lang.String)
source statement: glengineer.agents.TopSequentialGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.TopSequentialGroupAgentindex is: 0
Matched Method is: findDependingParallelGroupByNames(Ljava/lang/String;Ljava/lang/String;)Lglengineer/agents/ParallelGroupAgent;
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String string = "group1";
String string = "group2";
topSequentialGroupAgent.findDependingParallelGroupByNames(string, string);

statement is: glengineer.agents.SequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.SequentialGroupAgent
statement code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent()
statement is: findDependingSequentialGroupByNames(Ljava/lang/String;Ljava/lang/String;)Lglengineer/agents/SequentialGroupAgent; type is: class org.evosuite.testcase.statements.MethodStatement return type class glengineer.agents.SequentialGroupAgent
statement code is: SequentialGroupAgent findDependingSequentialGroupByNames = sequentialGroupAgent.findDependingSequentialGroupByNames((String) null, (String) null)
test data is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.findDependingSequentialGroupByNames((String) null, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Instead
        of passing;
        as the;
        first parameter;
        first you;
        pass a;
        sequence name;
        exists in;
        This will;
        that the;
        call is;
        and that;
        test is;
        the expected;
        behavior.@For
        the second;
        behavior.@For
        the instead;
        of passing;
        of you;
        pass an;
        sequence name;
        a sequence;
        that does;
        exist in;
        This will;
        to test;
    }
}
statement is: @Instead
of passing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: as the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: first parameter, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: first you, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: pass a, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: sequence name, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: exists in, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: This will, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: that the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: call is, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: and that, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: test is, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: the expected, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @For
the second, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @For
the instead, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of passing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: of you, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: pass an, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: sequence name, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: a sequence, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: that does, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: exist in, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: This will, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: to test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: glengineer.agents.TopSequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.TopSequentialGroupAgent
statement code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent()
statement is: glengineer.agents.GroupAgent$FunctionsOnGroupAndElementImplementation(Lglengineer/agents/GroupAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GroupAgent$FunctionsOnGroupAndElementImplementation
statement code is: GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(arg1, arg1)
statement is: addFollowingGap(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(2305)
test data is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(2305);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
        GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
        groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(2305);
    }
}
statement is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(2305), class spoon.support.reflect.code.CtInvocationImpl
invocation is: groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(2305) target is: groupAgent_FunctionsOnGroupAndElementImplementation method is: addFollowingGap(int)
TestCase is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

statement is: glengineer.agents.SequentialGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.SequentialGroupAgent
statement code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent()
statement is: glengineer.agents.GroupAgent$FunctionsOnGroupAndElementImplementation(Lglengineer/agents/GroupAgent;Lglengineer/agents/Agent;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.GroupAgent$FunctionsOnGroupAndElementImplementation
statement code is: GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(arg1, arg1)
statement is: addFollowingGap(III)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(4357, 4357, (-269))
test data is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(sequentialGroupAgent, sequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(4357, 4357, (-269));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
        GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(sequentialGroupAgent, sequentialGroupAgent);
        groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(4357, 4357, -269);
    }
}
statement is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(sequentialGroupAgent, sequentialGroupAgent), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(4357, 4357, -269), class spoon.support.reflect.code.CtInvocationImpl
invocation is: groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(4357, 4357, -269) target is: groupAgent_FunctionsOnGroupAndElementImplementation method is: addFollowingGap(int,int,int)
TestCase is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();

statement is: glengineer.agents.ParallelGroupAgent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class glengineer.agents.ParallelGroupAgent
statement code is: ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent()
statement is: isGroup(Ljava/lang/String;Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean group = parallelGroupAgent.isGroup("V]2d", "V]2d")
test data is: ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
parallelGroupAgent.isGroup("V]2d", "V]2d");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
        parallelGroupAgent.isGroup("V]2d", "V]2d");
        // Improved test data:
        ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
        parallelGroupAgent.isGroup("123456789", "0987654321");// Using more descriptive and representative values for the strings. }}

    }
}
statement is: ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parallelGroupAgent.isGroup("V]2d", "V]2d"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: parallelGroupAgent.isGroup("V]2d", "V]2d") target is: parallelGroupAgent method is: isGroup(java.lang.String,java.lang.String)
source statement: glengineer.agents.ParallelGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.ParallelGroupAgentindex is: 0
Matched Method is: isGroup(Ljava/lang/String;Ljava/lang/String;)Z
statement is: // Improved test data:
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: parallelGroupAgent.isGroup("123456789", "0987654321")// Using more descriptive and representative values for the strings. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: parallelGroupAgent.isGroup("123456789", "0987654321")// Using more descriptive and representative values for the strings. }}
 target is: parallelGroupAgent method is: isGroup(java.lang.String,java.lang.String)
source statement: glengineer.agents.ParallelGroupAgent()V callee: VariableReference: Statement 0, type glengineer.agents.ParallelGroupAgentindex is: 4
Matched Method is: isGroup(Ljava/lang/String;Ljava/lang/String;)Z
TestCase is: ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
String string = "V]2d";
String string = "V]2d";
parallelGroupAgent.isGroup(string, string);
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
String string = "123456789";
String string = "0987654321";
parallelGroupAgent.isGroup(string, string);

* test suite isTestSuite: 76
Test 0: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.isComponent((String) null);
Test 1: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getChildren();
Test 2: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getNumberOfChildren();
Test 3: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.isGap();
Test 4: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(0);
Test 5: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(sequentialGroupAgent);
topSequentialGroupAgent.toString();
Test 6: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);
Test 7: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
// Undeclared exception!
try { 
  topSequentialGroupAgent.addAgent((Agent) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Cannot add null agents.
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 8: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.getComponent("h2$H~j|})+bcdE%nubO");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // component h2$H~j|})+bcdE%nubO in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 9: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.getGroup("sequential group <null,null>", "sequential group <null,null>");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the group <sequential group <null,null>,sequential group <null,null>> in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 10: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("z&:&~^w8y9\"q");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.findDependingComponentByName("z&:&~^w8y9\"q");
Test 11: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.findDependingComponentByName("-y9S.=vsMSpE?Dms9^");
Test 12: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 13: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
GapAgent gapAgent = new GapAgent((-99), (-99), 487);
parallelGroupAgent.addGapAfter(gapAgent, topSequentialGroupAgent);
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 14: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 15: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 16: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.removeGapsFromParallelGroups();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // A sequence of gaps possessing different types was found in a group.
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 17: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 18: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);
GroupLayoutEngineer.TemporaryGapsToGaps groupLayoutEngineer_TemporaryGapsToGaps = mock(GroupLayoutEngineer.TemporaryGapsToGaps.class, new ViolatedAssumptionAnswer());
topSequentialGroupAgent.replaceTemporaryGapsByRealGaps(groupLayoutEngineer_TemporaryGapsToGaps);
Test 19: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("-EuZ,=ngH/+%?b!");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.replaceTemporaryGapsByRealGaps((GroupLayoutEngineer.TemporaryGapsToGaps) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 20: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(843, 852, 1482);
// Undeclared exception!
try { 
  groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the sequential group <null,null> in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 21: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addGapBefore(gapAgent, temporaryGapAgent);
Test 22: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("");
topSequentialGroupAgent.addAgent(componentAgent);
GapAgent gapAgent = new GapAgent((Sizes) null);
topSequentialGroupAgent.addGapAfter(gapAgent, componentAgent);
Test 23: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.addGapAfter(gapAgent, gapAgent);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the gap (0,0,0) in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 24: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("S ");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();
Test 25: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addGapBefore((GapAgent) null, (Agent) null);
Test 26: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.addGapBefore(gapAgent, gapAgent);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the gap (0,0,0) in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 27: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.getFirstName();
Test 28: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getFunctionsOnGroupImplemenation();
Test 29: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();
Test 30: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getLastName();
Test 31: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement = LayoutStyle.ComponentPlacement.RELATED;
PreferredGapAgent preferredGapAgent = new PreferredGapAgent(layoutStyle_ComponentPlacement);
sequentialGroupAgent.addPreferredGapAfter(preferredGapAgent, preferredGapAgent);
sequentialGroupAgent.getNumberOfChildren();
Test 32: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(groupCreatorAndElementAdder).createSequentialGroup();
sequentialGroupAgent.groupContent(groupCreatorAndElementAdder);
Test 33: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(groupCreatorAndElementAdder).createSequentialGroup();
sequentialGroupAgent.addContentToGroup((GroupLayout.Group) null, groupCreatorAndElementAdder);
Test 34: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
// Undeclared exception!
try { 
  sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 35: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
// Undeclared exception!
try { 
  topSequentialGroupAgent.findDependingParallelGroupByNames((String) null, (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 36: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
// Undeclared exception!
try { 
  sequentialGroupAgent.findDependingSequentialGroupByNames((String) null, (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 37: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(2305);
Test 38: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(sequentialGroupAgent, sequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(4357, 4357, (-269));
Test 39: 
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
// Undeclared exception!
try { 
  parallelGroupAgent.isGroup("V]2d", "V]2d");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 40: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.isComponent("This is a string");

Test 41: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

Test 42: 

Test 43: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

Test 44: 

Test 45: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("A");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("B");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("A");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);

Test 46: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
Agent agent = null;
topSequentialGroupAgent.addAgent(agent);

Test 47: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);

Test 48: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
String string = "sequential group <1.0, 2.0, 3.0>, A B C";
String string = "sequential group <1.0, 2.0, 3.0>, A B C";
topSequentialGroupAgent.getGroup(string, string);

Test 49: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("001-A");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.findDependingComponentByName("001-A");

Test 50: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.findDependingComponentByName("Gap");

Test 51: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);

Test 52: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
GapAgent gapAgent = new GapAgent(487, (-99), 487);
parallelGroupAgent.addGapAfter(gapAgent, topSequentialGroupAgent);
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

Test 53: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

Test 54: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

Test 55: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

Test 56: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);

Test 57: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("-EuZ,=ngH/+%?b!");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.replaceTemporaryGapsByRealGaps((GroupLayoutEngineer.TemporaryGapsToGaps) null);

Test 58: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addGapBefore((GapAgent) temporaryGapAgent, (Agent) null);

Test 59: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("A");
topSequentialGroupAgent.addAgent(componentAgent);
GapAgent gapAgent = new GapAgent((Sizes) null);
topSequentialGroupAgent.addGapAfter(gapAgent, componentAgent);

Test 60: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
GapAgent gapAgent = null;
GapAgent gapAgent = null;
topSequentialGroupAgent.addGapAfter(gapAgent, gapAgent);

Test 61: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("Sally");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();

Test 62: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addGapBefore((GapAgent) null, (Agent) null);

Test 63: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
GapAgent gapAgent = null;
GapAgent gapAgent = null;
topSequentialGroupAgent.addGapBefore(gapAgent, gapAgent);

Test 64: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();

Test 65: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getFunctionsOnGroupImplemenation();

Test 66: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("Jane Doe");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();

Test 67: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getLastName();

Test 68: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.addPreferredGapAfter((PreferredGapAgent) null, (Agent) null);
sequentialGroupAgent.getNumberOfChildren();

Test 69: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
sequentialGroupAgent.groupContent((GroupCreatorAndElementAdder) null);

Test 70: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
sequentialGroupAgent.addContentToGroup((GroupLayout.Group) "A group", groupCreatorAndElementAdder);

Test 71: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <");

Test 72: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.findDependingParallelGroupByNames("group1", "group2");

Test 73: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

Test 74: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();

Test 75: 
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
parallelGroupAgent.isGroup("V]2d", "V]2d");
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
String string = "123456789";
String string = "0987654321";
parallelGroupAgent.isGroup(string, string);


* Generated after the refinement and before minimization 76 tests with total length 263
* test suite isTestSuite: 76
Test 0: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.isComponent((String) null);
Test 1: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getChildren();
Test 2: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getNumberOfChildren();
Test 3: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.isGap();
Test 4: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(0);
Test 5: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(sequentialGroupAgent);
topSequentialGroupAgent.toString();
Test 6: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);
Test 7: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
// Undeclared exception!
try { 
  topSequentialGroupAgent.addAgent((Agent) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Cannot add null agents.
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 8: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.getComponent("h2$H~j|})+bcdE%nubO");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // component h2$H~j|})+bcdE%nubO in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 9: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.getGroup("sequential group <null,null>", "sequential group <null,null>");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the group <sequential group <null,null>,sequential group <null,null>> in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 10: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("z&:&~^w8y9\"q");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.findDependingComponentByName("z&:&~^w8y9\"q");
Test 11: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.findDependingComponentByName("-y9S.=vsMSpE?Dms9^");
Test 12: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 13: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
GapAgent gapAgent = new GapAgent((-99), (-99), 487);
parallelGroupAgent.addGapAfter(gapAgent, topSequentialGroupAgent);
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 14: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 15: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 16: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.removeGapsFromParallelGroups();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // A sequence of gaps possessing different types was found in a group.
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 17: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 18: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);
GroupLayoutEngineer.TemporaryGapsToGaps groupLayoutEngineer_TemporaryGapsToGaps = mock(GroupLayoutEngineer.TemporaryGapsToGaps.class, new ViolatedAssumptionAnswer());
topSequentialGroupAgent.replaceTemporaryGapsByRealGaps(groupLayoutEngineer_TemporaryGapsToGaps);
Test 19: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("-EuZ,=ngH/+%?b!");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.replaceTemporaryGapsByRealGaps((GroupLayoutEngineer.TemporaryGapsToGaps) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 20: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(843, 852, 1482);
// Undeclared exception!
try { 
  groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the sequential group <null,null> in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 21: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addGapBefore(gapAgent, temporaryGapAgent);
Test 22: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("");
topSequentialGroupAgent.addAgent(componentAgent);
GapAgent gapAgent = new GapAgent((Sizes) null);
topSequentialGroupAgent.addGapAfter(gapAgent, componentAgent);
Test 23: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.addGapAfter(gapAgent, gapAgent);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the gap (0,0,0) in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 24: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("S ");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();
Test 25: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addGapBefore((GapAgent) null, (Agent) null);
Test 26: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.addGapBefore(gapAgent, gapAgent);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the gap (0,0,0) in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 27: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.getFirstName();
Test 28: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getFunctionsOnGroupImplemenation();
Test 29: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();
Test 30: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getLastName();
Test 31: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
LayoutStyle.ComponentPlacement layoutStyle_ComponentPlacement = LayoutStyle.ComponentPlacement.RELATED;
PreferredGapAgent preferredGapAgent = new PreferredGapAgent(layoutStyle_ComponentPlacement);
sequentialGroupAgent.addPreferredGapAfter(preferredGapAgent, preferredGapAgent);
sequentialGroupAgent.getNumberOfChildren();
Test 32: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(groupCreatorAndElementAdder).createSequentialGroup();
sequentialGroupAgent.groupContent(groupCreatorAndElementAdder);
Test 33: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(groupCreatorAndElementAdder).createSequentialGroup();
sequentialGroupAgent.addContentToGroup((GroupLayout.Group) null, groupCreatorAndElementAdder);
Test 34: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
// Undeclared exception!
try { 
  sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 35: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
// Undeclared exception!
try { 
  topSequentialGroupAgent.findDependingParallelGroupByNames((String) null, (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 36: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
// Undeclared exception!
try { 
  sequentialGroupAgent.findDependingSequentialGroupByNames((String) null, (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 37: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(2305);
Test 38: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(sequentialGroupAgent, sequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(4357, 4357, (-269));
Test 39: 
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
// Undeclared exception!
try { 
  parallelGroupAgent.isGroup("V]2d", "V]2d");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 40: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.isComponent("This is a string");

Test 41: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

Test 42: 

Test 43: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

Test 44: 

Test 45: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("A");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("B");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("A");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);

Test 46: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
Agent agent = null;
topSequentialGroupAgent.addAgent(agent);

Test 47: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);

Test 48: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
String string = "sequential group <1.0, 2.0, 3.0>, A B C";
String string = "sequential group <1.0, 2.0, 3.0>, A B C";
topSequentialGroupAgent.getGroup(string, string);

Test 49: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("001-A");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.findDependingComponentByName("001-A");

Test 50: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.findDependingComponentByName("Gap");

Test 51: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);

Test 52: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
GapAgent gapAgent = new GapAgent(487, (-99), 487);
parallelGroupAgent.addGapAfter(gapAgent, topSequentialGroupAgent);
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

Test 53: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

Test 54: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

Test 55: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();

Test 56: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);

Test 57: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("-EuZ,=ngH/+%?b!");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.replaceTemporaryGapsByRealGaps((GroupLayoutEngineer.TemporaryGapsToGaps) null);

Test 58: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addGapBefore((GapAgent) temporaryGapAgent, (Agent) null);

Test 59: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("A");
topSequentialGroupAgent.addAgent(componentAgent);
GapAgent gapAgent = new GapAgent((Sizes) null);
topSequentialGroupAgent.addGapAfter(gapAgent, componentAgent);

Test 60: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
GapAgent gapAgent = null;
topSequentialGroupAgent.addAgent(gapAgent);
GapAgent gapAgent = null;
GapAgent gapAgent = null;
topSequentialGroupAgent.addGapAfter(gapAgent, gapAgent);

Test 61: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("Sally");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();

Test 62: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addGapBefore((GapAgent) null, (Agent) null);

Test 63: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent((Agent) null);
GapAgent gapAgent = null;
GapAgent gapAgent = null;
topSequentialGroupAgent.addGapBefore(gapAgent, gapAgent);

Test 64: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();

Test 65: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getFunctionsOnGroupImplemenation();

Test 66: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("Jane Doe");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();

Test 67: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getLastName();

Test 68: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.addPreferredGapAfter((PreferredGapAgent) null, (Agent) null);
sequentialGroupAgent.getNumberOfChildren();

Test 69: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
sequentialGroupAgent.groupContent((GroupCreatorAndElementAdder) null);

Test 70: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
sequentialGroupAgent.addContentToGroup((GroupLayout.Group) "A group", groupCreatorAndElementAdder);

Test 71: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <");

Test 72: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.findDependingParallelGroupByNames("group1", "group2");

Test 73: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();

Test 74: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();

Test 75: 
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
parallelGroupAgent.isGroup("V]2d", "V]2d");
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
String string = "123456789";
String string = "0987654321";
parallelGroupAgent.isGroup(string, string);


* Minimizing test suite
* test suite isTestSuite: 40
Test 0: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.getNumberOfChildren();
Test 1: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.isComponent("This is a string");
Test 2: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getChildren();
Test 3: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(groupCreatorAndElementAdder).createSequentialGroup();
sequentialGroupAgent.addContentToGroup((GroupLayout.Group) null, groupCreatorAndElementAdder);
Test 4: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.isGap();
Test 5: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(0);
Test 6: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(2305);
Test 7: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(topSequentialGroupAgent, topSequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(843, 852, 1482);
Test 8: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(sequentialGroupAgent, sequentialGroupAgent);
groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(4357, 4357, (-269));
Test 9: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("A");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.equals((Agent) componentAgent);
Test 10: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(sequentialGroupAgent);
topSequentialGroupAgent.toString();
Test 11: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
// Undeclared exception!
try { 
  topSequentialGroupAgent.addAgent((Agent) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Cannot add null agents.
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 12: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.getComponent("h2$H~j|})+bcdE%nubO");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // component h2$H~j|})+bcdE%nubO in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 13: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.getGroup("sequential group <null,null>", "sequential group <null,null>");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the group <sequential group <null,null>,sequential group <null,null>> in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 14: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.findDependingComponentByName("Gap");
Test 15: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("001-A");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.findDependingComponentByName("001-A");
Test 16: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 17: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
GapAgent gapAgent = new GapAgent(487, (-99), 487);
parallelGroupAgent.addGapAfter(gapAgent, topSequentialGroupAgent);
topSequentialGroupAgent.addAgent(parallelGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 18: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 19: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 20: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.removeGapsFromParallelGroups();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // A sequence of gaps possessing different types was found in a group.
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 21: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(topSequentialGroupAgent);
topSequentialGroupAgent.removeGapsFromParallelGroups();
Test 22: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("-EuZ,=ngH/+%?b!");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.replaceTemporaryGapsByRealGaps((GroupLayoutEngineer.TemporaryGapsToGaps) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 23: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(parallelGroupAgent);
GroupLayoutEngineer.TemporaryGapsToGaps groupLayoutEngineer_TemporaryGapsToGaps = mock(GroupLayoutEngineer.TemporaryGapsToGaps.class, new ViolatedAssumptionAnswer());
topSequentialGroupAgent.replaceTemporaryGapsByRealGaps(groupLayoutEngineer_TemporaryGapsToGaps);
Test 24: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.addGapBefore(gapAgent, gapAgent);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the gap (0,0,0) in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 25: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
TemporaryGapAgent temporaryGapAgent = new TemporaryGapAgent("");
topSequentialGroupAgent.addAgent(temporaryGapAgent);
topSequentialGroupAgent.addGapBefore(gapAgent, temporaryGapAgent);
Test 26: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("A");
topSequentialGroupAgent.addAgent(componentAgent);
GapAgent gapAgent = new GapAgent((Sizes) null);
topSequentialGroupAgent.addGapAfter(gapAgent, componentAgent);
Test 27: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent gapAgent = new GapAgent();
topSequentialGroupAgent.addAgent(gapAgent);
// Undeclared exception!
try { 
  topSequentialGroupAgent.addGapAfter(gapAgent, gapAgent);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the gap (0,0,0) in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}

Test 28: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.getFirstName();
Test 29: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getLastName();
Test 30: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();
Test 31: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addGapBefore((GapAgent) null, (Agent) null);
Test 32: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.getFunctionsOnGroupImplemenation();
Test 33: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent componentAgent = new ComponentAgent("Jane Doe");
topSequentialGroupAgent.addAgent(componentAgent);
topSequentialGroupAgent.getLastName();
Test 34: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.addPreferredGapAfter((PreferredGapAgent) null, (Agent) null);
sequentialGroupAgent.getNumberOfChildren();
Test 35: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder groupCreatorAndElementAdder = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(groupCreatorAndElementAdder).createSequentialGroup();
sequentialGroupAgent.groupContent(groupCreatorAndElementAdder);
Test 36: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
// Undeclared exception!
try { 
  sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 37: 
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
// Undeclared exception!
try { 
  topSequentialGroupAgent.findDependingParallelGroupByNames("group1", "group2");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 38: 
SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
// Undeclared exception!
try { 
  sequentialGroupAgent.findDependingSequentialGroupByNames((String) null, (String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 39: 
ParallelGroupAgent parallelGroupAgent = new ParallelGroupAgent();
// Undeclared exception!
try { 
  parallelGroupAgent.isGroup("V]2d", "V]2d");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 75%
* Total number of goals: 115
* Number of covered goals: 86
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 85%
* Total number of goals: 157
* Number of covered goals: 133
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 23%
* Total number of goals: 57
* Number of covered goals: 13
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 27
* Number of covered goals: 27
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 74%
* Total number of goals: 115
* Number of covered goals: 85
* Generated 40 tests with total length 138
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 24%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
int numberOfChildren = sequentialGroupAgent.getNumberOfChildren();
assertEquals(0, numberOfChildren);


** It was a parseable test case! 
refined test name is: testGetNumberOfChildrenWhenNoChildrenArePresent
* Compiling Tests
refined test name is: testGetNumberOfChildrenWhenNoChildren
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
boolean component = topSequentialGroupAgent.isComponent("This is a string");
assertFalse(component);


** It was a parseable test case! 
refined test name is: testIsComponentWithNonComponentString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
List<Agent> children = topSequentialGroupAgent.getChildren();
assertEquals(0, children.size());


** It was a parseable test case! 
refined test name is: testAddChild
* Compiling Tests
refined test name is: testAddChildToGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder arg1 = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(arg1).createSequentialGroup();
sequentialGroupAgent.addContentToGroup((GroupLayout.Group) null, arg1);
assertEquals(0, sequentialGroupAgent.getNumberOfChildren());


** It was a parseable test case! 
refined test name is: testAddContentToGroupNullGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
boolean gap = topSequentialGroupAgent.isGap();
assertFalse(gap);


** It was a parseable test case! 
refined test name is: testIsGapReturnsFalseWhenNoGapsExist
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent arg1 = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(arg1, arg1);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(0);

** It was a parseable test case! 
refined test name is: testAddPrecedingGapWithValueZero
* Compiling Tests
refined test name is: testAddPrecedingGapWithValueOfZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent arg1 = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(arg1, arg1);
groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(2305);

** It was a parseable test case! 
refined test name is: testAddFollowingGap
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent arg1 = new TopSequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(arg1, arg1);
groupAgent_FunctionsOnGroupAndElementImplementation.addPrecedingGap(843, 852, 1482);

** It was a parseable test case! 
refined test name is: testAddPrecedingGap
* Compiling Tests
refined test name is: testAddPrecedingGapGroupAgent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SequentialGroupAgent arg1 = new SequentialGroupAgent();
GroupAgent.FunctionsOnGroupAndElementImplementation groupAgent_FunctionsOnGroupAndElementImplementation = new GroupAgent.FunctionsOnGroupAndElementImplementation(arg1, arg1);
groupAgent_FunctionsOnGroupAndElementImplementation.addFollowingGap(4357, 4357, (-269));

** It was a parseable test case! 
refined test name is: testAddFollowingGapReturnsCorrectGapValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent arg0 = new ComponentAgent("A");
topSequentialGroupAgent.addAgent(arg0);
boolean equals = topSequentialGroupAgent.equals((Agent) arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualWithComponentAgent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SequentialGroupAgent arg0 = new SequentialGroupAgent();
TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addAgent(arg0);
String string = topSequentialGroupAgent.toString();
assertEquals("sequential group <null,null>", string);


** It was a parseable test case! 
refined test name is: testToStringSingleChildAgent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
// Undeclared exception!
try { 
  topSequentialGroupAgent.addAgent((Agent) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // Cannot add null agents.
   //
   verifyException("glengineer.agents.GroupAgent", e);
}


** It was a parseable test case! 
refined test name is: testAddingNullAgentThrowsIllegalArgumentException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent arg0 = new GapAgent();
topSequentialGroupAgent.addAgent(arg0);
// Undeclared exception!
try { 
  topSequentialGroupAgent.getComponent("h2$H~j|})+bcdE%nubO");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // component h2$H~j|})+bcdE%nubO in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}


** It was a parseable test case! 
refined test name is: testGetComponentWithInvalidName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent arg0 = new GapAgent();
topSequentialGroupAgent.addAgent(arg0);
// Undeclared exception!
try { 
  topSequentialGroupAgent.getGroup("sequential group <null,null>", "sequential group <null,null>");
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the group <sequential group <null,null>,sequential group <null,null>> in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}


** It was a parseable test case! 
refined test name is: testGetGroupThrowsExceptionWithInvalidArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent arg0 = new GapAgent();
topSequentialGroupAgent.addAgent(arg0);
ComponentAgent findDependingComponentByName = topSequentialGroupAgent.findDependingComponentByName("Gap");
assertNull(findDependingComponentByName);


** It was a parseable test case! 
refined test name is: testFindDependingComponentByNameNoMatch
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent arg0 = new ComponentAgent("001-A");
topSequentialGroupAgent.addAgent(arg0);
ComponentAgent findDependingComponentByName = topSequentialGroupAgent.findDependingComponentByName("001-A");
assertEquals("001-A", findDependingComponentByName.getLastName());


** It was a parseable test case! 
refined test name is: testFindDependingComponentByName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ParallelGroupAgent arg0 = new ParallelGroupAgent();
topSequentialGroupAgent.addAgent(arg0);
topSequentialGroupAgent.removeGapsFromParallelGroups();
assertFalse(topSequentialGroupAgent.isGap());


** It was a parseable test case! 
refined test name is: testRemoveGapsFromParallelGroupsRemovesGaps
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent arg0 = new TemporaryGapAgent("L\"S;Ds[G/tRf8=");
topSequentialGroupAgent.addAgent(arg0);
topSequentialGroupAgent.addAgent(arg0);
topSequentialGroupAgent.removeGapsFromParallelGroups();
assertEquals(1, topSequentialGroupAgent.getNumberOfChildren());


** It was a parseable test case! 
refined test name is: testAddAgentsWithSameKey
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent arg0 = new GapAgent();
topSequentialGroupAgent.addAgent(arg0);
topSequentialGroupAgent.addAgent(arg0);
// Undeclared exception!
try { 
  topSequentialGroupAgent.removeGapsFromParallelGroups();
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // A sequence of gaps possessing different types was found in a group.
   //
   verifyException("glengineer.agents.GroupAgent", e);
}


** It was a parseable test case! 
refined test name is: testRemoveGapsFromParallelGroupsWithMixedGapTypes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
TemporaryGapAgent arg0 = new TemporaryGapAgent("-EuZ,=ngH/+%?b!");
topSequentialGroupAgent.addAgent(arg0);
// Undeclared exception!
try { 
  topSequentialGroupAgent.replaceTemporaryGapsByRealGaps((GroupLayoutEngineer.TemporaryGapsToGaps) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("glengineer.agents.GroupAgent", e);
}


** It was a parseable test case! 
refined test name is: testReplaceTemporaryGapsByRealGapsWithNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent arg1 = new GapAgent();
topSequentialGroupAgent.addAgent(arg1);
// Undeclared exception!
try { 
  topSequentialGroupAgent.addGapBefore(arg1, arg1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the gap (0,0,0) in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}


** It was a parseable test case! 
refined test name is: testAddGapBeforeSameAgent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent arg0 = new GapAgent();
TemporaryGapAgent arg1 = new TemporaryGapAgent("");
topSequentialGroupAgent.addAgent(arg1);
topSequentialGroupAgent.addGapBefore(arg0, arg1);
assertEquals(2, topSequentialGroupAgent.getNumberOfChildren());


** It was a parseable test case! 
refined test name is: testGetNumberOfChildrenTwoChildren
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent arg1 = new ComponentAgent("A");
topSequentialGroupAgent.addAgent(arg1);
GapAgent arg0 = new GapAgent((Sizes) null);
topSequentialGroupAgent.addGapAfter(arg0, arg1);
assertFalse(arg1.isGap());


** It was a parseable test case! 
refined test name is: testIsNotGapComponentAgent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
GapAgent arg1 = new GapAgent();
topSequentialGroupAgent.addAgent(arg1);
// Undeclared exception!
try { 
  topSequentialGroupAgent.addGapAfter(arg1, arg1);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // the gap (0,0,0) in the sequential group <null,null> not found
   //
   verifyException("glengineer.agents.GroupAgent", e);
}


** It was a parseable test case! 
refined test name is: testAddingGapAfterThrowsExceptionWhenNoGapFound
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
String firstName = sequentialGroupAgent.getFirstName();
assertNull(firstName);


** It was a parseable test case! 
refined test name is: testGetFirstNameWithNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
String lastName = topSequentialGroupAgent.getLastName();
assertNull(lastName);


** It was a parseable test case! 
refined test name is: testGetLastNameReturnsNullWhenAgentHasNoLastName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent arg0 = new ComponentAgent("");
topSequentialGroupAgent.addAgent(arg0);
String lastName = topSequentialGroupAgent.getLastName();
assertEquals("", lastName);


** It was a parseable test case! 
refined test name is: testAddAgentshouldAddAnAgentToTheGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
topSequentialGroupAgent.addGapBefore((GapAgent) null, (Agent) null);
assertEquals(1, topSequentialGroupAgent.getNumberOfChildren());


** It was a parseable test case! 
refined test name is: testAddGapBeforeFirstChild
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
FunctionsOnGroup functionsOnGroupImplemenation = topSequentialGroupAgent.getFunctionsOnGroupImplemenation();
assertNotNull(functionsOnGroupImplemenation);


** It was a parseable test case! 
refined test name is: testGetFunctionsOnGroupImplementationNotNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
ComponentAgent arg0 = new ComponentAgent("Jane Doe");
topSequentialGroupAgent.addAgent(arg0);
String lastName = topSequentialGroupAgent.getLastName();
assertEquals("Jane Doe", lastName);


** It was a parseable test case! 
refined test name is: testGetLastName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
sequentialGroupAgent.addPreferredGapAfter((PreferredGapAgent) null, (Agent) null);
int numberOfChildren = sequentialGroupAgent.getNumberOfChildren();
assertEquals(1, numberOfChildren);


** It was a parseable test case! 
refined test name is: testAddPreferredGapAfter
* Compiling Tests
refined test name is: testAddPreferredGapAfter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
GroupCreatorAndElementAdder arg0 = mock(GroupCreatorAndElementAdder.class, new ViolatedAssumptionAnswer());
doReturn((GroupLayout.SequentialGroup) null).when(arg0).createSequentialGroup();
GroupLayout.Group groupContent = sequentialGroupAgent.groupContent(arg0);
assertNull(groupContent);


** It was a parseable test case! 
refined test name is: testGroupContentReturnsNullWhenCreationFails
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: SequentialGroupAgent sequentialGroupAgent = new SequentialGroupAgent();
// Undeclared exception!
try { 
  sequentialGroupAgent.findDependingGroupByNames("no such parallel group found: <", "no such parallel group found: <");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}


** It was a parseable test case! 
refined test name is: testFindDependingGroupByNamesNoSuchParallelGroup
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TopSequentialGroupAgent topSequentialGroupAgent = new TopSequentialGroupAgent();
// Undeclared exception!
try { 
  topSequentialGroupAgent.findDependingParallelGroupByNames("group1", "group2");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}


** It was a parseable test case! 
* Computation finished
