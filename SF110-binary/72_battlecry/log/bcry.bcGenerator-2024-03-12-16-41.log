* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: bcry.bcGenerator
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/72_battlecry/evosuite-files/evosuite.properties
* Connecting to master process on port 4380
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 16:41:41.781 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 16:41:41.783 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 16:41:41.792 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 16:41:41.948 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 16:41:41.949 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 16:41:41.950 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 16:41:43.884 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 16:41:43.933 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 16:41:43.934 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 16:41:43.934 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 16:41:43.934 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 16:41:43.934 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 16:41:43.935 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 16:41:43.935 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 16:41:43.935 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 16:41:43.948 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 16:41:43.956 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class bcry.bcGenerator
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 855
* Using seed 1710261698476
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 135 / 855
[Progress:>                             0%] [Cov:========>                          25%][Progress:>                             0%] [Cov:=========>                         28%][Progress:>                             0%] [Cov:=========>                         28%][Progress:>                             1%] [Cov:=========>                         28%][Progress:>                             1%] [Cov:=========>                         28%][Progress:>                             1%] [Cov:=========>                         28%][Progress:>                             1%] [Cov:=========>                         28%][Progress:>                             1%] [Cov:=========>                         28%][Progress:>                             1%] [Cov:=========>                         28%][Progress:>                             1%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:==>                           9%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:=========>                         28%][Progress:===>                          10%] [Cov:===================>               55%][Progress:===>                          10%] [Cov:===================>               55%][Progress:===>                          11%] [Cov:===================>               55%][Progress:===>                          12%] [Cov:===================>               55%][Progress:===>                          12%] [Cov:===================>               57%][Progress:===>                          13%] [Cov:===================>               57%][Progress:====>                         14%] [Cov:===================>               57%][Progress:====>                         15%] [Cov:====================>              59%][Progress:====>                         16%] [Cov:====================>              59%][Progress:=====>                        17%] [Cov:=====================>             60%][Progress:=====>                        17%] [Cov:=====================>             60%][Progress:=====>                        18%] [Cov:=====================>             61%][Progress:=====>                        19%] [Cov:=====================>             62%][Progress:======>                       21%] [Cov:======================>            63%][Progress:=======>                      24%] [Cov:=======================>           68%][Progress:=======>                      25%] [Cov:========================>          69%][Progress:=======>                      26%] [Cov:========================>          69%][Progress:========>                     27%] [Cov:========================>          69%][Progress:========>                     28%] [Cov:========================>          69%][Progress:========>                     29%] [Cov:========================>          69%][Progress:=========>                    31%] [Cov:========================>          69%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    32%] [Cov:========================>          70%][Progress:=========>                    33%] [Cov:========================>          70%][Progress:==========>                   34%] [Cov:========================>          70%][Progress:==========>                   35%] [Cov:========================>          70%][Progress:===========>                  37%] [Cov:========================>          70%][Progress:===========>                  38%] [Cov:========================>          70%][Progress:===========>                  39%] [Cov:========================>          70%][Progress:============>                 40%] [Cov:========================>          70%][Progress:============>                 41%] [Cov:========================>          70%][Progress:============>                 42%] [Cov:========================>          70%][Progress:============>                 43%] [Cov:========================>          70%][Progress:=============>                45%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:==============>               47%] [Cov:========================>          70%][Progress:==============>               47%] [Cov:========================>          70%][Progress:==============>               49%] [Cov:========================>          70%][Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              51%] [Cov:========================>          70%][Progress:===============>              52%] [Cov:========================>          70%][Progress:===============>              53%] [Cov:========================>          70%][Progress:================>             55%] [Cov:========================>          70%][Progress:================>             56%] [Cov:========================>          70%][Progress:=================>            57%] [Cov:========================>          70%][Progress:=================>            58%] [Cov:========================>          70%][Progress:==================>           60%] [Cov:========================>          70%][Progress:==================>           61%] [Cov:========================>          70%][Progress:==================>           63%] [Cov:========================>          70%][Progress:===================>          64%] [Cov:========================>          70%][Progress:===================>          65%] [Cov:========================>          70%][Progress:===================>          66%] [Cov:========================>          70%][Progress:====================>         67%] [Cov:========================>          70%][Progress:====================>         69%] [Cov:========================>          70%][Progress:=====================>        70%] [Cov:========================>          70%][Progress:=====================>        70%] [Cov:========================>          70%][Progress:=====================>        72%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       75%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      79%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     81%] [Cov:========================>          70%][Progress:========================>     82%] [Cov:========================>          70%][Progress:=========================>    84%] [Cov:========================>          70%][Progress:=========================>    85%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   89%] [Cov:========================>          70%][Progress:===========================>  90%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:============================> 94%] [Cov:========================>          70%][Progress:============================> 95%] [Cov:========================>          70%][Progress:=============================>97%] [Cov:========================>          70%][Progress:=============================>98%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:==============================100%] [Cov:========================>          70%]
* Search finished after 201s and 234 generations, 118922 statements, best individual has fitness: 226.0
* Generated before the refinement 15 tests with total length 83
statement is: org.evosuite.testcase.statements.ArrayStatement@98b8f6b3 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[8]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom(3092)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3092);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        Random.setNextRandom(3092);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[8] isAssignment: false Array: new boolean[]{ true, false, true, false } Elements: [true, false, true, false]
lengths: [8] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(3092), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(3092) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 3092;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@b9c170da type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[8]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom((-1721))
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1721));
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false, true };// Replaced with a more descriptive array of booleans that represents different possible values of the "booleanArray" variable.

        bcVoice _bcVoice = new bcVoice(booleanArray, null);// Replaced with a more descriptive value for the "_bcVoice" variable, using a different set of booleans to represent different possible values of the "voice" attribute.

        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);// Replaced with a more descriptive value for the "_bcModule" variable, using different string literals to represent different possible values of the "name" and "description" attributes.

        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);// Replaced with a more descriptive value for the "_bcGenerator" variable, using a different set of booleans to represent different possible values of the "voice" attribute.

        Random.setNextRandom(-1721);// Replaced with a more descriptive value for the "Random.setNextRandom()" method call, using a different integer literal as an argument.

        _bcGenerator.getLyrics();// Replaced with a more descriptive value for the "_bcGenerator" variable, using a different set of booleans to represent different possible values of the "lyrics" attribute. }}

    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false, true }// Replaced with a more descriptive array of booleans that represents different possible values of the "booleanArray" variable.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[8] isAssignment: false Array: new boolean[]{ true, false, true, false, true } Elements: [true, false, true, false, true]
lengths: [8] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, null)// Replaced with a more descriptive value for the "_bcVoice" variable, using a different set of booleans to represent different possible values of the "voice" attribute.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice)// Replaced with a more descriptive value for the "_bcModule" variable, using different string literals to represent different possible values of the "name" and "description" attributes.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice)// Replaced with a more descriptive value for the "_bcGenerator" variable, using a different set of booleans to represent different possible values of the "voice" attribute.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(-1721)// Replaced with a more descriptive value for the "Random.setNextRandom()" method call, using a different integer literal as an argument.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(-1721)// Replaced with a more descriptive value for the "Random.setNextRandom()" method call, using a different integer literal as an argument.
 target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: _bcGenerator.getLyrics()// Replaced with a more descriptive value for the "_bcGenerator" variable, using a different set of booleans to represent different possible values of the "lyrics" attribute. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics()// Replaced with a more descriptive value for the "_bcGenerator" variable, using a different set of booleans to represent different possible values of the "lyrics" attribute. }}
 target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@add6754b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[8]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom((-2752))
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2752));
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        Random.setNextRandom(-2752);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[8] isAssignment: false Array: new boolean[]{ true, false, true, false } Elements: [true, false, true, false]
lengths: [8] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(-2752), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(-2752) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@a7e415a9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[6]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom(3)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false, true };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        Random.setNextRandom(3);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false, true }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[6] isAssignment: false Array: new boolean[]{ true, false, true, false, true } Elements: [true, false, true, false, true]
lengths: [6] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(3) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 3;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@5ca01e7a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[8]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom((-2808))
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2808));
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        Random.setNextRandom(-2808);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[8] isAssignment: false Array: new boolean[]{ true, false, true, false } Elements: [true, false, true, false]
lengths: [8] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(-2808), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(-2808) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@dda513a7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[8]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom(1732)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1732);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        Random.setNextRandom(1732);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[8] isAssignment: false Array: new boolean[]{ true, false, true, false } Elements: [true, false, true, false]
lengths: [8] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(1732), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(1732) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 1732;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@71f6d4cd type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[2]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom((-1450208277))
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1450208277));
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, null);
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        Random.setNextRandom(-1450208277);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new boolean[]{ true, false } Elements: [true, false]
lengths: [2] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(-1450208277), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(-1450208277) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@dfd7926e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[6]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom(668)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(668);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false, false, true };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        Random.setNextRandom(668);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false, false, true }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[6] isAssignment: false Array: new boolean[]{ true, false, true, false, false, true } Elements: [true, false, true, false, false, true]
lengths: [6] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(668), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(668) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 668;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@2fec3ce2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[6]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom(1881)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1881);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        Random.setNextRandom(1881);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[6] isAssignment: false Array: new boolean[]{ true, false, true, false } Elements: [true, false, true, false]
lengths: [6] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(1881), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(1881) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 1881;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@da0f6338 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[8]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator((bcModule) null, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false, true, false, true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcGenerator _bcGenerator = new bcGenerator(((bcModule) (null)), _bcVoice);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false, true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[8] isAssignment: false Array: new boolean[]{ true, false, true, false, true, false, true, false } Elements: [true, false, true, false, true, false, true, false]
lengths: [8] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcGenerator _bcGenerator = new bcGenerator(((bcModule) (null)), _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
statement is: org.evosuite.testcase.statements.ArrayStatement@25399fa8 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[8]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false };
        String lyrics = "I'm a little teapot, short and stout. I am always ready to serve. When my tea is hot, I'm ready to brew. I've got a lid that is easy to hold.";
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[8] isAssignment: false Array: new boolean[]{ true, false, true, false } Elements: [true, false, true, false]
lengths: [8] []
statement is: String lyrics = "I'm a little teapot, short and stout. I am always ready to serve. When my tea is hot, I'm ready to brew. I've got a lid that is easy to hold.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "I'm a little teapot, short and stout. I am always ready to serve. When my tea is hot, I'm ready to brew. I've got a lid that is easy to hold."
TestCase is: String string = "I'm a little teapot, short and stout. I am always ready to serve. When my tea is hot, I'm ready to brew. I've got a lid that is easy to hold.";

statement is: org.evosuite.testcase.statements.ArrayStatement@40c34187 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[8]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator((bcModule) null, arg1)
statement is: getModuleInfo()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: _bcGenerator.getModuleInfo()
test data is: boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcGenerator _bcGenerator = new bcGenerator(((bcModule) (null)), _bcVoice);
        _bcGenerator.getModuleInfo();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[8] isAssignment: false Array: new boolean[]{ true, false, true, false } Elements: [true, false, true, false]
lengths: [8] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcGenerator _bcGenerator = new bcGenerator(((bcModule) (null)), _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V
statement is: _bcGenerator.getModuleInfo(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getModuleInfo() target is: _bcGenerator method is: getModuleInfo()
statement is: org.evosuite.testcase.statements.ArrayStatement@87b3a925 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[6]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getModuleInfo()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: _bcGenerator.getModuleInfo()
test data is: boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, false, true, true, false, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, null);
        bcModule _bcModule = new bcModule("PROD-APP-1", "Production application 1", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        _bcGenerator.getModuleInfo();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, false, true, true, false, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[6] isAssignment: false Array: new boolean[]{ true, false, false, true, true, false, false } Elements: [true, false, false, true, true, false, false]
lengths: [6] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("PROD-APP-1", "Production application 1", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getModuleInfo(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getModuleInfo() target is: _bcGenerator method is: getModuleInfo()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getModuleInfo()V
TestCase is: String string = "PROD-APP-1";
String string = "Production application 1";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
_bcGenerator.getModuleInfo();

statement is: org.evosuite.testcase.statements.ArrayStatement@ca0760f7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[8]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getModuleInfo()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: _bcGenerator.getModuleInfo()
test data is: boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false, true, false, true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        _bcGenerator.getModuleInfo();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false, true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[8] isAssignment: false Array: new boolean[]{ true, false, true, false, true, false, true, false } Elements: [true, false, true, false, true, false, true, false]
lengths: [8] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getModuleInfo(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getModuleInfo() target is: _bcGenerator method is: getModuleInfo()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getModuleInfo()V
TestCase is: String string = "/RXr7M>$<wy";
String string = "/RXr7M>$<wy";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
_bcGenerator.getModuleInfo();

statement is: org.evosuite.testcase.statements.ArrayStatement@5f7d70ae type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[5]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: sing(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: _bcVoice.sing("l1^*R")
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("l1^*R", "l1^*R", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
_bcVoice.sing("l1^*R");
bcModule _bcModule = new bcModule("l1^*R", "l1^*R", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false, true };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        _bcVoice.sing("l1^*R");
        bcModule _bcModule = new bcModule("l1^*R", "l1^*R", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false, true }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[5] isAssignment: false Array: new boolean[]{ true, false, true, false, true } Elements: [true, false, true, false, true]
lengths: [5] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: _bcVoice.sing("l1^*R"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcVoice.sing("l1^*R") target is: _bcVoice method is: sing(java.lang.String)
statement is: bcModule _bcModule = new bcModule("l1^*R", "l1^*R", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 4, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase Could not be added: getLyrics()Ljava/util/List;
TestCase is: String string = "l1^*R";
String string = "l1^*R";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);

* test suite isTestSuite: 28
Test 0: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3092);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 1: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1721));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 2: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2752));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 3: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 4: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2808));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 5: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1732);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 6: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1450208277));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 7: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(668);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 8: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1881);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 9: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();
Test 10: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 11: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();
Test 12: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 13: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 14: 
boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
_bcVoice.sing("l1^*R");
bcModule _bcModule = new bcModule("l1^*R", "l1^*R", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 15: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 3092;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 16: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 17: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 18: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 3;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 19: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 20: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 1732;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 21: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 22: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 668;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 23: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 1881;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 24: 

Test 25: 
String string = "Production application 1";
bcModule _bcModule = new bcModule("PROD-APP-1", "Production application 1", (bcVoice) "Production application 1");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
_bcGenerator.getModuleInfo();

Test 26: 
String string = "/RXr7M>$<wy";
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", (bcVoice) "/RXr7M>$<wy");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
_bcGenerator.getModuleInfo();

Test 27: 
String string = "l1^*R";
bcModule _bcModule = new bcModule("l1^*R", "l1^*R", (bcVoice) "l1^*R");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);


* Generated after the refinement and before minimization 28 tests with total length 148
* test suite isTestSuite: 28
Test 0: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3092);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 1: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1721));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 2: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2752));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 3: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 4: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2808));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 5: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1732);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 6: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1450208277));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 7: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(668);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 8: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1881);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 9: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();
Test 10: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 11: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();
Test 12: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 13: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 14: 
boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
_bcVoice.sing("l1^*R");
bcModule _bcModule = new bcModule("l1^*R", "l1^*R", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 15: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 3092;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 16: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 17: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 18: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 3;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 19: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 20: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 1732;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 21: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 22: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 668;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 23: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
int _int = 1881;
Random.setNextRandom(_int);
_bcGenerator.getLyrics();

Test 24: 

Test 25: 
String string = "Production application 1";
bcModule _bcModule = new bcModule("PROD-APP-1", "Production application 1", (bcVoice) "Production application 1");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
_bcGenerator.getModuleInfo();

Test 26: 
String string = "/RXr7M>$<wy";
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", (bcVoice) "/RXr7M>$<wy");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
_bcGenerator.getModuleInfo();

Test 27: 
String string = "l1^*R";
bcModule _bcModule = new bcModule("l1^*R", "l1^*R", (bcVoice) "l1^*R");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);


* Minimizing test suite
* test suite isTestSuite: 15
Test 0: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();
Test 1: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3092);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 2: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1721));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 3: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2752));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 4: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 5: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1881);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 6: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1732);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 7: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(668);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 8: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1450208277));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 9: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2808));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 10: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 11: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();
Test 12: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 13: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 14: 
boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
_bcVoice.sing("l1^*R");
bcModule _bcModule = new bcModule("l1^*R", "l1^*R", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 69%
* Total number of goals: 281
* Number of covered goals: 195
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 284
* Number of covered goals: 236
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 281
* Number of covered goals: 193
* Generated 15 tests with total length 83
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean[] arg0 = new boolean[8];
bcVoice arg1 = new bcVoice(arg0, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, arg1);
List lyrics = _bcGenerator.getLyrics();
assertEquals(0, lyrics.size());


** It was a parseable test case! 
refined test name is: testGetLyricsReturnsEmptyListWhenNoLyrics
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean[] arg0 = new boolean[8];
bcVoice arg1 = new bcVoice(arg0, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, arg1);
_bcGenerator.getModuleInfo();

** It was a parseable test case! 
refined test name is: testGetModuleInfoReturnsNonNull
* Compiling Tests
refined test name is: testGetModuleInfoReturnsNonNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 16:52:51.096 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5452901790085129722.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 16:52:51.115 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5452901790085129722.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 16:52:51.162 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5452901790085129722.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 16:52:51.163 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5452901790085129722.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
[MASTER] 16:52:51.210 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5452901790085129722.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 16:52:51.211 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5452901790085129722.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 16:52:51.268 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5452901790085129722.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 16:52:51.269 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5452901790085129722.jar
[MASTER] 16:52:52.235 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 15
Test 0: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3092);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 1: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1721));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 2: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2752));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 3: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 4: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2808));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 5: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1732);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 6: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1450208277));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 7: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(668);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 8: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1881);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 9: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();
Test 10: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 11: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();
Test 12: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 13: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 14: 
boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
_bcVoice.sing("l1^*R");
bcModule _bcModule = new bcModule("l1^*R", "l1^*R", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

* Minimizing test suite
* test suite isTestSuite: 15
Test 0: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();
Test 1: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3092);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 2: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1721));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 3: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2752));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 4: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 5: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1881);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 6: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(1732);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 7: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(668);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 8: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-1450208277));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 9: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom((-2808));
// Undeclared exception!
_bcGenerator.getLyrics();
Test 10: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 11: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();
Test 12: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 13: 
boolean[] booleanArray = new boolean[8];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("/RXr7M>$<wy", "/RXr7M>$<wy", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 14: 
boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
_bcVoice.sing("l1^*R");
bcModule _bcModule = new bcModule("l1^*R", "l1^*R", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

[MASTER] 16:53:01.969 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 69%
* Total number of goals: 281
* Number of covered goals: 195
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 284
* Number of covered goals: 236
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 281
* Number of covered goals: 193
* Generated 15 tests with total length 83
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 16:53:02.508 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
[MASTER] 16:53:29.359 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 16:53:31.243 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5452901790085129722.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 16:53:31.244 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5452901790085129722.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 16:53:31.279 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5452901790085129722.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 16:53:31.279 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5452901790085129722.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
[MASTER] 16:53:31.319 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5452901790085129722.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 16:53:31.320 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5452901790085129722.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
* Writing tests to file
* Writing JUnit test case 'bcGenerator_ESTest' to evosuite-tests
[MASTER] 16:53:31.361 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5452901790085129722.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 16:53:31.362 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5452901790085129722.jar
[MASTER] 16:53:31.364 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
** Write a test suite: 0 called: 0 to improve: false
* Writing JUnit test case 'bcGenerator_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
* Done!

* Computation finished
