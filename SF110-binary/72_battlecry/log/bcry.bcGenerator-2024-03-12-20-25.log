* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: bcry.bcGenerator
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/72_battlecry/evosuite-files/evosuite.properties
* Connecting to master process on port 9386
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 20:25:11.394 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 20:25:11.398 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 20:25:11.411 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 20:25:11.586 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 20:25:11.587 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 20:25:11.589 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 20:25:14.977 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 20:25:15.056 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 20:25:15.056 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 20:25:15.057 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 20:25:15.058 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 20:25:15.058 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 20:25:15.058 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 20:25:15.060 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 20:25:15.061 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 20:25:15.100 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 20:25:15.125 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class bcry.bcGenerator
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 855
* Using seed 1710275106455
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 135 / 855
[Progress:>                             0%] [Cov:========>                          25%][Progress:>                             1%] [Cov:========>                          25%][Progress:>                             1%] [Cov:=========>                         28%][Progress:>                             1%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             2%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:>                             3%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            4%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            5%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:=>                            6%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           7%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:=========>                         28%][Progress:==>                           8%] [Cov:===================>               55%][Progress:==>                           9%] [Cov:===================>               55%][Progress:==>                           9%] [Cov:===================>               55%][Progress:===>                          10%] [Cov:===================>               55%][Progress:===>                          11%] [Cov:===================>               57%][Progress:===>                          12%] [Cov:====================>              59%][Progress:====>                         14%] [Cov:=====================>             60%][Progress:====>                         15%] [Cov:=====================>             60%][Progress:====>                         16%] [Cov:=======================>           68%][Progress:=====>                        18%] [Cov:=======================>           68%][Progress:=====>                        19%] [Cov:========================>          69%][Progress:======>                       23%] [Cov:========================>          69%][Progress:=======>                      25%] [Cov:========================>          69%][Progress:=======>                      26%] [Cov:========================>          69%][Progress:========>                     28%] [Cov:========================>          69%][Progress:========>                     29%] [Cov:========================>          70%][Progress:=========>                    31%] [Cov:========================>          70%][Progress:==========>                   34%] [Cov:========================>          70%][Progress:==========>                   36%] [Cov:========================>          70%][Progress:===========>                  37%] [Cov:========================>          70%][Progress:===========>                  38%] [Cov:========================>          70%][Progress:============>                 40%] [Cov:========================>          70%][Progress:============>                 41%] [Cov:========================>          70%][Progress:============>                 42%] [Cov:========================>          70%][Progress:============>                 43%] [Cov:========================>          70%][Progress:=============>                44%] [Cov:========================>          70%][Progress:=============>                46%] [Cov:========================>          70%][Progress:==============>               47%] [Cov:========================>          70%][Progress:==============>               49%] [Cov:========================>          70%][Progress:===============>              50%] [Cov:========================>          70%][Progress:===============>              52%] [Cov:========================>          70%][Progress:================>             54%] [Cov:========================>          70%][Progress:================>             56%] [Cov:========================>          70%][Progress:=================>            58%] [Cov:========================>          70%][Progress:=================>            59%] [Cov:========================>          70%][Progress:==================>           62%] [Cov:========================>          70%][Progress:===================>          64%] [Cov:========================>          70%][Progress:===================>          65%] [Cov:========================>          70%][Progress:====================>         67%] [Cov:========================>          70%][Progress:====================>         69%] [Cov:========================>          70%][Progress:=====================>        71%] [Cov:========================>          70%][Progress:======================>       74%] [Cov:========================>          70%][Progress:======================>       76%] [Cov:========================>          70%][Progress:=======================>      77%] [Cov:========================>          70%][Progress:=======================>      78%] [Cov:========================>          70%][Progress:========================>     80%] [Cov:========================>          70%][Progress:========================>     81%] [Cov:========================>          70%][Progress:========================>     82%] [Cov:========================>          70%][Progress:=========================>    84%] [Cov:========================>          70%][Progress:=========================>    86%] [Cov:========================>          70%][Progress:==========================>   87%] [Cov:========================>          70%][Progress:==========================>   89%] [Cov:========================>          70%][Progress:===========================>  90%] [Cov:========================>          70%][Progress:===========================>  91%] [Cov:========================>          70%][Progress:===========================>  92%] [Cov:========================>          70%][Progress:===========================>  93%] [Cov:========================>          70%][Progress:============================> 95%] [Cov:========================>          70%][Progress:=============================>97%] [Cov:========================>          70%][Progress:=============================>99%] [Cov:========================>          70%][Progress:==============================100%] [Cov:========================>          70%]
* Search finished after 201s and 142 generations, 79840 statements, best individual has fitness: 226.0
* Generated before the refinement 15 tests with total length 82
statement is: org.evosuite.testcase.statements.ArrayStatement@f05276da type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[6]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true };
        String str = "This is a string";
        int i = 10;
        float f = 3.14F;
        char c = 'a';
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[6] isAssignment: false Array: new boolean[]{ true, false, true } Elements: [true, false, true]
lengths: [6] []
statement is: String str = "This is a string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int i = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: float f = 3.14F, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 8
Matched Method is: getLyrics()Ljava/util/List;
* this is vulnerable: int _int = 10
* this is vulnerable: float _float = 3.14F
TestCase is: boolean[] booleanArray = "This is a string";
int _int = 10;
float _float = 3.14F;
char _char = 'a';
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
((bcGenerator) _char).getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@57a11ffb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[2]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom((-1613452388))
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1613452388));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        Random.setNextRandom(-1613452388);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new boolean[]{ true, false } Elements: [true, false]
lengths: [2] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(-1613452388), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(-1613452388) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 4, type bcry.bcGeneratorindex is: 5
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@bf30f7ff type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[2]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom((-3724))
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-3724));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false };
        String[] stringArray = new String[]{ "hello", "world" };
        int[] intArray = new int[]{ 123, 456 };
        double[] doubleArray = new double[]{ 1.23, 4.56 };
        char[] charArray = new char[]{ 'a', 'b' };
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new boolean[]{ true, false } Elements: [true, false]
lengths: [2] []
statement is: String[] stringArray = new String[]{ "hello", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new String[]{ "hello", "world" } Elements: ["hello", "world"]
lengths: [2] []
statement is: int[] intArray = new int[]{ 123, 456 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new int[]{ 123, 456 } Elements: [123, 456]
lengths: [2] []
statement is: double[] doubleArray = new double[]{ 1.23, 4.56 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new double[]{ 1.23, 4.56 } Elements: [1.23, 4.56]
lengths: [2] []
statement is: char[] charArray = new char[]{ 'a', 'b' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new char[]{ 'a', 'b' } Elements: ['a', 'b']
lengths: [2] []
statement is: org.evosuite.testcase.statements.ArrayStatement@17ed537 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[2]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom((-2081))
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-2081));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false };
        String str1 = "Hello";
        String str2 = "World";
        int int1 = 5;
        int int2 = 3;
        float float1 = 3.14F;
        char char1 = 'a';
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new boolean[]{ true, false } Elements: [true, false]
lengths: [2] []
statement is: String str1 = "Hello", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String str2 = "World", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int int1 = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int int2 = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: float float1 = 3.14F, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char char1 = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "Hello"
* this is vulnerable: String string = "World"
* this is vulnerable: int _int = 5
* this is vulnerable: int _int = 3
* this is vulnerable: float _float = 3.14F
* this is vulnerable: char _char = 'a'
TestCase is: String string = "Hello";
String string = "World";
int _int = 5;
int _int = 3;
float _float = 3.14F;
char _char = 'a';

statement is: org.evosuite.testcase.statements.ArrayStatement@b7b6b7d0 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[5]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom((-327))
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-327));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        Random.setNextRandom(-327);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[5] isAssignment: false Array: new boolean[]{ true, false, true, false } Elements: [true, false, true, false]
lengths: [5] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(-327), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(-327) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 4, type bcry.bcGeneratorindex is: 5
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@c114e3f9 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[2]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom(4)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom(4);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        Random.setNextRandom(4);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new boolean[]{ true, false } Elements: [true, false]
lengths: [2] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(4) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 4, type bcry.bcGeneratorindex is: 5
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
int _int = 4;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@dd46724f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[6]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom((-1044))
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1044));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false, true, false };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        Random.setNextRandom(-1044);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false, true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[6] isAssignment: false Array: new boolean[]{ true, false, true, false } Elements: [true, false, true, false]
lengths: [6] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(-1044), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(-1044) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 4, type bcry.bcGeneratorindex is: 5
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@e71b059c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[2]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom((-222))
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-222));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false };// true represents the "on" state and false represents the "off" state

        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        Random.setNextRandom(-222);// set the random seed to a negative value to test the generation of a battle cry with a specific pattern

        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false }// true represents the "on" state and false represents the "off" state
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new boolean[]{ true, false } Elements: [true, false]
lengths: [2] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(-222)// set the random seed to a negative value to test the generation of a battle cry with a specific pattern
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(-222)// set the random seed to a negative value to test the generation of a battle cry with a specific pattern
 target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 4, type bcry.bcGeneratorindex is: 5
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@a84a7876 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[2]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "DEMO", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: setNextRandom(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: Random.setNextRandom(3404)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3404);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false };
        String battlecryGUI = "DEMO";
        bcVoice _bcVoice = new bcVoice(booleanArray, battlecryGUI);
        bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        Random.setNextRandom(3404);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new boolean[]{ true, false } Elements: [true, false]
lengths: [2] []
statement is: String battlecryGUI = "DEMO", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, battlecryGUI), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Random.setNextRandom(3404), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Random.setNextRandom(3404) target is: Random method is: setNextRandom(int)
Matched Method is: setNextRandom(I)V
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 5
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "DEMO";
bcVoice _bcVoice = new bcVoice((boolean[]) string, (battlecryGUI) null);
String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
int _int = 3404;
Random.setNextRandom(_int);
((bcGenerator) string).getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@e97e2e5c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[4]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator((bcModule) null, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[4];
        booleanArray[0] = true;
        booleanArray[1] = false;
        booleanArray[2] = true;
        booleanArray[3] = false;
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcGenerator _bcGenerator = new bcGenerator(((bcModule) (null)), _bcVoice);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: boolean[] booleanArray = new boolean[4] isAssignment: false Array: new boolean[4] Elements: []
lengths: [4] [4]
Their type are: class [Z boolean[]
statement is: booleanArray[0] = true, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : booleanArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl boolean Assignment:true Ct is: booleanArray[0] = true
target : booleanArray class spoon.support.reflect.code.CtLiteralImpl
statement is: booleanArray[1] = false, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : booleanArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl boolean Assignment:false Ct is: booleanArray[1] = false
target : booleanArray class spoon.support.reflect.code.CtLiteralImpl
statement is: booleanArray[2] = true, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : booleanArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl boolean Assignment:true Ct is: booleanArray[2] = true
target : booleanArray class spoon.support.reflect.code.CtLiteralImpl
statement is: booleanArray[3] = false, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : booleanArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl boolean Assignment:false Ct is: booleanArray[3] = false
target : booleanArray class spoon.support.reflect.code.CtLiteralImpl
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(((bcModule) (null)), _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 2, type bcry.bcGeneratorindex is: 2
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) _bcVoice, _bcVoice);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@b1ab630c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[4]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ false, true, false, true };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ false, true, false, true }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[4] isAssignment: false Array: new boolean[]{ false, true, false, true } Elements: [false, true, false, true]
lengths: [4] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 3, type bcry.bcGeneratorindex is: 3
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "tdCfsQ)_h6;T";
String string = "tdCfsQ)_h6;T";
bcModule _bcModule = new bcModule(string, string, (bcVoice) string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
_bcGenerator.getLyrics();

statement is: org.evosuite.testcase.statements.ArrayStatement@8c0c5346 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[4]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator((bcModule) null, arg1)
statement is: getModuleInfo()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: _bcGenerator.getModuleInfo()
test data is: boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ false, true, false, true };
        bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null)));
        bcGenerator _bcGenerator = new bcGenerator(((bcModule) (null)), _bcVoice);
        _bcGenerator.getModuleInfo();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ false, true, false, true }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[4] isAssignment: false Array: new boolean[]{ false, true, false, true } Elements: [false, true, false, true]
lengths: [4] []
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, ((battlecryGUI) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcVoice([ZLbcry/battlecryGUI;)V
statement is: bcGenerator _bcGenerator = new bcGenerator(((bcModule) (null)), _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V
statement is: _bcGenerator.getModuleInfo(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getModuleInfo() target is: _bcGenerator method is: getModuleInfo()
statement is: org.evosuite.testcase.statements.ArrayStatement@7179a9d5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[4]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getModuleInfo()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: _bcGenerator.getModuleInfo()
test data is: boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ false, true, false, false };
        String string1 = "This is a test string";
        String string2 = "This is another test string";
        int int1 = 5;
        int int2 = 7;
        double double1 = 3.14;
        double double2 = 2.718;
    }
}
statement is: boolean[] booleanArray = new boolean[]{ false, true, false, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[4] isAssignment: false Array: new boolean[]{ false, true, false, false } Elements: [false, true, false, false]
lengths: [4] []
statement is: String string1 = "This is a test string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String string2 = "This is another test string", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int int1 = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int int2 = 7, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double double1 = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double double2 = 2.718, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "This is a test string"
* this is vulnerable: String string = "This is another test string"
* this is vulnerable: int _int = 5
* this is vulnerable: int _int = 7
* this is vulnerable: double _double = 3.14
* this is vulnerable: double _double = 2.718
TestCase is: String string = "This is a test string";
String string = "This is another test string";
int _int = 5;
int _int = 7;
double _double = 3.14;
double _double = 2.718;

statement is: org.evosuite.testcase.statements.ArrayStatement@f5bb06f7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[2]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("DEMO", "[\":Yjbp", arg2)
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getModuleInfo()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: _bcGenerator.getModuleInfo()
test data is: boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "[\":Yjbp", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ true, false };
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        int[] intArray = new int[]{ 1, 2, 3, 4, 5 };
        char[] charArray = new char[]{ 'a', 'b', 'c', 'd' };
        float[] floatArray = new float[]{ 0.1F, 0.2F, 0.3F, 0.4F, 0.5F };
        double[] doubleArray = new double[]{ 0.1, 0.2, 0.3, 0.4, 0.5 };
    }
}
statement is: boolean[] booleanArray = new boolean[]{ true, false }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new boolean[]{ true, false } Elements: [true, false]
lengths: [2] []
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [2] []
statement is: int[] intArray = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new int[]{ 1, 2, 3, 4, 5 } Elements: [1, 2, 3, 4, 5]
lengths: [2] []
statement is: char[] charArray = new char[]{ 'a', 'b', 'c', 'd' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new char[]{ 'a', 'b', 'c', 'd' } Elements: ['a', 'b', 'c', 'd']
lengths: [2] []
statement is: float[] floatArray = new float[]{ 0.1F, 0.2F, 0.3F, 0.4F, 0.5F }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new float[]{ 0.1F, 0.2F, 0.3F, 0.4F, 0.5F } Elements: [0.1F, 0.2F, 0.3F, 0.4F, 0.5F]
lengths: [2] []
statement is: double[] doubleArray = new double[]{ 0.1, 0.2, 0.3, 0.4, 0.5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[2] isAssignment: false Array: new double[]{ 0.1, 0.2, 0.3, 0.4, 0.5 } Elements: [0.1, 0.2, 0.3, 0.4, 0.5]
lengths: [2] []
statement is: org.evosuite.testcase.statements.ArrayStatement@1cbb1e9d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Z
statement code is: boolean[] booleanArray = new boolean[4]
statement is: bcry.bcVoice([ZLbcry/battlecryGUI;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcVoice
statement code is: bcVoice _bcVoice = new bcVoice(arg0, (battlecryGUI) null)
statement is: bcry.bcModule(Ljava/lang/String;Ljava/lang/String;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcModule
statement code is: bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", arg2)
statement is: sing(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: _bcVoice.sing("tdCfsQ)_h6;T")
statement is: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class bcry.bcGenerator
statement code is: bcGenerator _bcGenerator = new bcGenerator(arg0, arg1)
statement is: getLyrics()Ljava/util/List; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.List<E>
statement code is: List lyrics = _bcGenerator.getLyrics()
test data is: boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
_bcVoice.sing("tdCfsQ)_h6;T");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        boolean[] booleanArray = new boolean[]{ false, true, false, true };
        String battlecry = "Raise your shields and let the battle begin!";
        bcVoice _bcVoice = new bcVoice(booleanArray, battlecry);
        bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
        _bcVoice.sing("tdCfsQ)_h6;T");
        bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
        String lyrics = _bcGenerator.getLyrics();
    }
}
statement is: boolean[] booleanArray = new boolean[]{ false, true, false, true }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: boolean[] booleanArray = new boolean[4] isAssignment: false Array: new boolean[]{ false, true, false, true } Elements: [false, true, false, true]
lengths: [4] []
statement is: String battlecry = "Raise your shields and let the battle begin!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: bcVoice _bcVoice = new bcVoice(booleanArray, battlecry), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: _bcVoice.sing("tdCfsQ)_h6;T"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcVoice.sing("tdCfsQ)_h6;T") target is: _bcVoice method is: sing(java.lang.String)
source statement: bcry.bcVoice([ZLbcry/battlecryGUI;)V callee: VariableReference: Statement 1, type bcry.bcVoiceindex is: 1
Matched Method is: sing(Ljava/lang/String;)V
statement is: bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String lyrics = _bcGenerator.getLyrics(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: _bcGenerator.getLyrics() target is: _bcGenerator method is: getLyrics()
source statement: bcry.bcGenerator(Lbcry/bcModule;Lbcry/bcVoice;)V callee: VariableReference: Statement 4, type bcry.bcGeneratorindex is: 7
Matched Method is: getLyrics()Ljava/util/List;
TestCase is: String string = "Raise your shields and let the battle begin!";
bcVoice _bcVoice = new bcVoice((boolean[]) string, (battlecryGUI) null);
String string = "tdCfsQ)_h6;T";
String string = "tdCfsQ)_h6;T";
bcModule _bcModule = new bcModule(string, string, _bcVoice);
String string = "tdCfsQ)_h6;T";
_bcVoice.sing(string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
((bcGenerator) _bcModule).getLyrics();

* test suite isTestSuite: 27
Test 0: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 1: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1613452388));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 2: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-3724));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 3: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-2081));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 4: 
boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-327));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 5: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom(4);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 6: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1044));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 7: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-222));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 8: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3404);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 9: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();
Test 10: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 11: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();
Test 12: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 13: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "[\":Yjbp", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 14: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
_bcVoice.sing("tdCfsQ)_h6;T");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 15: 
char _char = 'a';
bcVoice _bcVoice = new bcVoice((boolean[]) "This is a string", (battlecryGUI) null);
String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
((bcGenerator) _char).getLyrics();

Test 16: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

Test 17: 

Test 18: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

Test 19: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
int _int = 4;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

Test 20: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

Test 21: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

Test 22: 
bcVoice _bcVoice = new bcVoice((boolean[]) "DEMO", (battlecryGUI) null);
String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
int _int = 3404;
Random.setNextRandom(_int);
((bcGenerator) string).getLyrics();

Test 23: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) _bcVoice, _bcVoice);
_bcGenerator.getLyrics();

Test 24: 
String string = "tdCfsQ)_h6;T";
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", (bcVoice) "tdCfsQ)_h6;T");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
_bcGenerator.getLyrics();

Test 25: 

Test 26: 
bcVoice _bcVoice = new bcVoice((boolean[]) "Raise your shields and let the battle begin!", (battlecryGUI) null);
String string = "tdCfsQ)_h6;T";
String string = "tdCfsQ)_h6;T";
bcModule _bcModule = new bcModule(string, string, _bcVoice);
String string = "tdCfsQ)_h6;T";
_bcVoice.sing(string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
((bcGenerator) _bcModule).getLyrics();


* Generated after the refinement and before minimization 27 tests with total length 143
* test suite isTestSuite: 27
Test 0: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 1: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1613452388));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 2: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-3724));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 3: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-2081));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 4: 
boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-327));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 5: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom(4);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 6: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1044));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 7: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-222));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 8: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3404);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 9: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();
Test 10: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 11: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();
Test 12: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 13: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "[\":Yjbp", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 14: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
_bcVoice.sing("tdCfsQ)_h6;T");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 15: 
char _char = 'a';
bcVoice _bcVoice = new bcVoice((boolean[]) "This is a string", (battlecryGUI) null);
String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
((bcGenerator) _char).getLyrics();

Test 16: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

Test 17: 

Test 18: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

Test 19: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
int _int = 4;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

Test 20: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

Test 21: 
String string = "DEMO";
bcModule _bcModule = new bcModule("DEMO", "DEMO", (bcVoice) "DEMO");
int _int = null;
Random.setNextRandom(_int);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
((bcGenerator) _void).getLyrics();

Test 22: 
bcVoice _bcVoice = new bcVoice((boolean[]) "DEMO", (battlecryGUI) null);
String string = "DEMO";
String string = "DEMO";
bcModule _bcModule = new bcModule(string, string, _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
int _int = 3404;
Random.setNextRandom(_int);
((bcGenerator) string).getLyrics();

Test 23: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) _bcVoice, _bcVoice);
_bcGenerator.getLyrics();

Test 24: 
String string = "tdCfsQ)_h6;T";
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", (bcVoice) "tdCfsQ)_h6;T");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, (bcVoice) string);
_bcGenerator.getLyrics();

Test 25: 

Test 26: 
bcVoice _bcVoice = new bcVoice((boolean[]) "Raise your shields and let the battle begin!", (battlecryGUI) null);
String string = "tdCfsQ)_h6;T";
String string = "tdCfsQ)_h6;T";
bcModule _bcModule = new bcModule(string, string, _bcVoice);
String string = "tdCfsQ)_h6;T";
_bcVoice.sing(string);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
((bcGenerator) _bcModule).getLyrics();


* Minimizing test suite
* test suite isTestSuite: 15
Test 0: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();
Test 1: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 2: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1613452388));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 3: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-2081));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 4: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-3724));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 5: 
boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-327));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 6: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom(4);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 7: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1044));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 8: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-222));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 9: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3404);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 10: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 11: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();
Test 12: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "[\":Yjbp", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 13: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 14: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
_bcVoice.sing("tdCfsQ)_h6;T");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 69%
* Total number of goals: 281
* Number of covered goals: 195
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 284
* Number of covered goals: 236
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 281
* Number of covered goals: 193
* Generated 15 tests with total length 82
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean[] arg0 = new boolean[4];
bcVoice arg1 = new bcVoice(arg0, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, arg1);
List lyrics = _bcGenerator.getLyrics();
assertTrue(lyrics.isEmpty());


** It was a parseable test case! 
refined test name is: testEmptyListOfLyricsReturnedByBcGenerator
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: boolean[] arg0 = new boolean[4];
bcVoice arg1 = new bcVoice(arg0, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, arg1);
_bcGenerator.getModuleInfo();

** It was a parseable test case! 
refined test name is: testGetModuleInfoReturnsNonEmptyString
* Compiling Tests
refined test name is: testGetModuleInfoReturnsValidString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:39:35.197 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5498522978690778804.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 20:39:35.233 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5498522978690778804.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:39:35.288 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5498522978690778804.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:39:35.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5498522978690778804.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
[MASTER] 20:39:35.380 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5498522978690778804.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:39:35.381 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5498522978690778804.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:39:35.462 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5498522978690778804.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:39:35.463 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5498522978690778804.jar
[MASTER] 20:39:37.241 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 15
Test 0: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 1: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1613452388));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 2: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-3724));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 3: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-2081));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 4: 
boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-327));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 5: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom(4);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 6: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1044));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 7: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-222));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 8: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3404);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 9: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();
Test 10: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 11: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();
Test 12: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 13: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "[\":Yjbp", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 14: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
_bcVoice.sing("tdCfsQ)_h6;T");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

* Minimizing test suite
* test suite isTestSuite: 15
Test 0: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getLyrics();
Test 1: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 2: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1613452388));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 3: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-2081));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 4: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-3724));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 5: 
boolean[] booleanArray = new boolean[5];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-327));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 6: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom(4);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 7: 
boolean[] booleanArray = new boolean[6];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-1044));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 8: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
Random.setNextRandom((-222));
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 9: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "DEMO", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
Random.setNextRandom(3404);
// Undeclared exception!
_bcGenerator.getLyrics();
Test 10: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();
Test 11: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcGenerator _bcGenerator = new bcGenerator((bcModule) null, _bcVoice);
_bcGenerator.getModuleInfo();
Test 12: 
boolean[] booleanArray = new boolean[2];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("DEMO", "[\":Yjbp", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 13: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getModuleInfo();
Test 14: 
boolean[] booleanArray = new boolean[4];
bcVoice _bcVoice = new bcVoice(booleanArray, (battlecryGUI) null);
bcModule _bcModule = new bcModule("tdCfsQ)_h6;T", "tdCfsQ)_h6;T", _bcVoice);
_bcVoice.sing("tdCfsQ)_h6;T");
bcGenerator _bcGenerator = new bcGenerator(_bcModule, _bcVoice);
_bcGenerator.getLyrics();

[MASTER] 20:39:49.987 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 69%
* Total number of goals: 281
* Number of covered goals: 195
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 284
* Number of covered goals: 236
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 33%
* Total number of goals: 6
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 69%
* Total number of goals: 281
* Number of covered goals: 193
* Generated 15 tests with total length 82
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 20:39:50.846 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 0%
* Compiling and checking tests
[MASTER] 20:40:29.975 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:40:32.152 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5498522978690778804.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:40:32.153 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5498522978690778804.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:40:32.195 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5498522978690778804.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:40:32.195 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5498522978690778804.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
[MASTER] 20:40:32.243 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5498522978690778804.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:40:32.244 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5498522978690778804.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
[MASTER] 20:40:32.290 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar5498522978690778804.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:40:32.291 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar5498522978690778804.jar
* Writing tests to file
[MASTER] 20:40:32.293 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'bcGenerator_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
* Writing JUnit test case 'bcGenerator_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
* Done!

* Computation finished
