* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: edu.mscd.cs.jclo.JCLO
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/94_jclo/evosuite-files/evosuite.properties
* Connecting to master process on port 4005
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class edu.mscd.cs.jclo.JCLO
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 533
* Using seed 1710429496722
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 198 / 533
[Progress:>                             0%] [Cov:=================>                 49%][Progress:>                             0%] [Cov:=================>                 49%][Progress:>                             1%] [Cov:=================>                 49%][Progress:>                             1%] [Cov:=================>                 50%][Progress:>                             1%] [Cov:=================>                 51%][Progress:>                             1%] [Cov:==================>                52%][Progress:>                             1%] [Cov:==================>                52%][Progress:>                             1%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:===================>               55%][Progress:>                             3%] [Cov:===================>               55%][Progress:>                             3%] [Cov:===================>               55%][Progress:>                             3%] [Cov:===================>               55%][Progress:>                             3%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              58%][Progress:>                             3%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              58%][Progress:=>                            4%] [Cov:====================>              59%][Progress:=>                            4%] [Cov:====================>              59%][Progress:=>                            4%] [Cov:====================>              59%][Progress:=>                            4%] [Cov:====================>              59%][Progress:=>                            4%] [Cov:=====================>             60%][Progress:=>                            4%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=====================>             60%][Progress:==>                           7%] [Cov:=====================>             60%][Progress:==>                           7%] [Cov:=====================>             60%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           7%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           8%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:==>                           9%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          10%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          11%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          12%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:===>                          13%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         14%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         15%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:====>                         16%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        17%] [Cov:=====================>             62%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        18%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:=====>                        19%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       20%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       21%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       22%] [Cov:======================>            63%][Progress:======>                       23%] [Cov:======================>            63%][Progress:======>                       23%] [Cov:======================>            63%][Progress:======>                       23%] [Cov:======================>            63%][Progress:======>                       23%] [Cov:======================>            63%][Progress:======>                       23%] [Cov:======================>            63%][Progress:======>                       23%] [Cov:======================>            63%][Progress:======>                       23%] [Cov:======================>            63%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:======>                       23%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      24%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      25%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:=======>                      26%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     27%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     28%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:========>                     29%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    30%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    31%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    32%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:=========>                    33%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   34%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   35%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:==========>                   36%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  37%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  38%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:===========>                  39%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 40%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 41%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 42%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:============>                 43%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                44%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                45%] [Cov:======================>            64%][Progress:=============>                46%] [Cov:======================>            64%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:=============>                46%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               47%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               48%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:==============>               49%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              50%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              51%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              52%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:===============>              53%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             54%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             55%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:================>             56%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            57%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            58%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:=================>            59%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           60%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           61%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           62%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:==================>           63%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          64%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          65%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:===================>          66%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         67%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         68%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:====================>         69%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        70%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        71%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        72%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:=====================>        73%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       74%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       75%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:======================>       76%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      77%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      78%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:=======================>      79%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     80%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     81%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     82%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:========================>     83%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    84%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    85%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:=========================>    86%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   87%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   88%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:==========================>   89%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  90%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  91%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  92%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:===========================>  93%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 94%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 95%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:============================> 96%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>97%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>98%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:=============================>99%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%][Progress:==============================100%] [Cov:======================>            65%]
* Search finished after 202s and 2055 generations, 821311 statements, best individual has fitness: 195.0
* Generated before the refinement 35 tests with total length 110
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("", arg1)
statement is: getInts(Ljava/lang/String;)[I type is: class org.evosuite.testcase.statements.MethodStatement return type class [I
statement code is: int[] ints = jCLO.getInts("")
test data is: Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getInts("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO("test string", object);
        jCLO.getInts(new int[]{ 1, 2, 3, 4 });
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("test string", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getInts(new int[]{ 1, 2, 3, 4 }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getInts(new int[]{ 1, 2, 3, 4 }) target is: jCLO method is: getInts(int[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: getInts(Ljava/lang/String;)[I
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Object object = new Object();
String string = "test string";
JCLO jCLO = new JCLO(string, object);
String string = null;
((JCLO) string).getInts(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("mnt")
statement is: getChar(Ljava/lang/String;)C type is: class org.evosuite.testcase.statements.MethodStatement return type char
statement code is: char _char = jCLO.getChar("mnt")
test data is: JCLO jCLO = new JCLO("mnt");
jCLO.getChar("mnt");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the given code snippet
        JCLO jCLO = new JCLO("a long and winding road");
        jCLO.getChar("a long and winding road");
    }
}
statement is: // Improved test data for the given code snippet
JCLO jCLO = new JCLO("a long and winding road"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getChar("a long and winding road"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getChar("a long and winding road") target is: jCLO method is: getChar(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getChar(Ljava/lang/String;)C
TestCase is: String string = "a long and winding road";
JCLO jCLO = new JCLO(string);
String string = "a long and winding road";
((JCLO) string).getChar(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("")
statement is: getString(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = jCLO.getString("false")
test data is: JCLO jCLO = new JCLO("");
jCLO.getString("false");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("This is a string");
        jCLO.getString("01/01/2023");
    }
}
statement is: JCLO jCLO = new JCLO("This is a string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getString("01/01/2023"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getString("01/01/2023") target is: jCLO method is: getString(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getString(Ljava/lang/String;)Ljava/lang/String;
TestCase is: String string = "This is a string";
JCLO jCLO = new JCLO(string);
String string = "01/01/2023";
((JCLO) string).getString(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("-V[lc^%[")
statement is: getInt(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int _int = jCLO.getInt("hash")
test data is: JCLO jCLO = new JCLO("-V[lc^%[");
jCLO.getInt("hash");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private String inputString;

    public  JCLO(String inputString) {
        this.inputString = inputString;
    }

    public int getInt(String key) {
        return inputString.indexOf(key);
    }

    // Test data
    JCLO jCLO1 = new JCLO("hello world");

    // returns 6
    JCLO jCLO2 = new JCLO("abcdefghijklmnopqrstuvwxyz");
}
statement is: this.inputString = inputString, class spoon.support.reflect.code.CtAssignmentImpl
statement is: return inputString.indexOf(key), class spoon.support.reflect.code.CtReturnImpl
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("", arg1)
statement is: getShorts(Ljava/lang/String;)[S type is: class org.evosuite.testcase.statements.MethodStatement return type class [S
statement code is: short[] shorts = jCLO.getShorts("")
test data is: Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getShorts("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO("", object);
        jCLO.getShorts("1234567890");// Test data is not descriptive or representative of the situation being tested. }}

    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getShorts("1234567890")// Test data is not descriptive or representative of the situation being tested. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getShorts("1234567890")// Test data is not descriptive or representative of the situation being tested. }}
 target is: jCLO method is: getShorts(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: getShorts(Ljava/lang/String;)[S
TestCase is: Object object = new Object();
String string = "";
JCLO jCLO = new JCLO(string, object);
String string = "1234567890";
((JCLO) string).getShorts(string);

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte) (-28))
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0)
statement is: getByte(Ljava/lang/String;)B type is: class org.evosuite.testcase.statements.MethodStatement return type byte
statement code is: byte _byte = jCLO.getByte("MIN_VALUE")
test data is: Byte byte = new Byte((byte) (-28));
JCLO jCLO = new JCLO(byte);
jCLO.getByte("MIN_VALUE");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test case 1 - minimum value
        Byte = new Byte(((byte) (-128)));
        JCLO jCLO = new JCLO(byte.class);
        Assertions.assertEquals(jCLO.getByte("MIN_VALUE"), ((byte) (-128)));
        // Test case 2 - maximum value
        Byte = new Byte(((byte) (127)));
        JCLO jCLO = new JCLO(byte.class);
        Assertions.assertEquals(jCLO.getByte("MAX_VALUE"), ((byte) (127)));
        // Test case 3 - negative value
        Byte = new Byte(((byte) (-100)));
        JCLO jCLO = new JCLO(byte.class);
        Assertions.assertEquals(jCLO.getByte("NEGATIVE"), ((byte) (-100)));
        // Test case 4 - positive value
        Byte = new Byte(((byte) (100)));
        JCLO jCLO = new JCLO(byte.class);
        Assertions.assertEquals(jCLO.getByte("POSITIVE"), ((byte) (100)));
        // Test case 5 - zero value
        Byte = new Byte(((byte) (0)));
        JCLO jCLO = new JCLO(byte.class);
        Assertions.assertEquals(jCLO.getByte("ZERO"), ((byte) (0)));
    }
}
statement is: // Test case 1 - minimum value
Byte = new Byte(((byte) (-128))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO(byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V
statement is: Assertions.assertEquals(jCLO.getByte("MIN_VALUE"), ((byte) (-128))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assertions.assertEquals(jCLO.getByte("MIN_VALUE"), ((byte) (-128))) target is: Assertions method is: assertEquals(byte)
statement is: // Test case 2 - maximum value
Byte = new Byte(((byte) (127))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO(byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V
statement is: Assertions.assertEquals(jCLO.getByte("MAX_VALUE"), ((byte) (127))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assertions.assertEquals(jCLO.getByte("MAX_VALUE"), ((byte) (127))) target is: Assertions method is: assertEquals(byte)
statement is: // Test case 3 - negative value
Byte = new Byte(((byte) (-100))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO(byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V
statement is: Assertions.assertEquals(jCLO.getByte("NEGATIVE"), ((byte) (-100))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assertions.assertEquals(jCLO.getByte("NEGATIVE"), ((byte) (-100))) target is: Assertions method is: assertEquals(byte)
statement is: // Test case 4 - positive value
Byte = new Byte(((byte) (100))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO(byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V
statement is: Assertions.assertEquals(jCLO.getByte("POSITIVE"), ((byte) (100))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assertions.assertEquals(jCLO.getByte("POSITIVE"), ((byte) (100))) target is: Assertions method is: assertEquals(byte)
statement is: // Test case 5 - zero value
Byte = new Byte(((byte) (0))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO(byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V
statement is: Assertions.assertEquals(jCLO.getByte("ZERO"), ((byte) (0))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assertions.assertEquals(jCLO.getByte("ZERO"), ((byte) (0))) target is: Assertions method is: assertEquals(byte)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("-vnsLo")
statement is: getChars(Ljava/lang/String;)[C type is: class org.evosuite.testcase.statements.MethodStatement return type class [C
statement code is: char[] chars = jCLO.getChars("value")
test data is: JCLO jCLO = new JCLO("-vnsLo");
jCLO.getChars("value");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("-vnsLo");
        jCLO.getChars("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    }
}
statement is: JCLO jCLO = new JCLO("-vnsLo"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getChars("ABCDEFGHIJKLMNOPQRSTUVWXYZ"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getChars("ABCDEFGHIJKLMNOPQRSTUVWXYZ") target is: jCLO method is: getChars(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getChars(Ljava/lang/String;)[C
TestCase is: String string = "-vnsLo";
JCLO jCLO = new JCLO(string);
String string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
((JCLO) string).getChars(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("int")
statement is: getBoolean(Ljava/lang/String;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean _boolean = jCLO.getBoolean("int")
test data is: JCLO jCLO = new JCLO("int");
jCLO.getBoolean("int");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("1234567890");
        jCLO.getBoolean("abcdefghijklmnopqrstuvwxyz");
    }
}
statement is: JCLO jCLO = new JCLO("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getBoolean("abcdefghijklmnopqrstuvwxyz"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getBoolean("abcdefghijklmnopqrstuvwxyz") target is: jCLO method is: getBoolean(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getBoolean(Ljava/lang/String;)Z
TestCase is: String string = "1234567890";
JCLO jCLO = new JCLO(string);
String string = "abcdefghijklmnopqrstuvwxyz";
((JCLO) string).getBoolean(string);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("", arg1)
statement is: getDouble(Ljava/lang/String;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double _double = jCLO.getDouble((String) null)
test data is: Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getDouble((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        Object object = new Object();
        JCLO jCLO = new JCLO("", object);
        jCLO.getDouble("Test double value");
    }
}
statement is: // Improved test data:
Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getDouble("Test double value"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getDouble("Test double value") target is: jCLO method is: getDouble(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: getDouble(Ljava/lang/String;)D
TestCase is: Object object = new Object();
String string = "";
JCLO jCLO = new JCLO(string, object);
String string = "Test double value";
((JCLO) string).getDouble(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("Ve' rsOG|ob")
statement is: getFloat(Ljava/lang/String;)F type is: class org.evosuite.testcase.statements.MethodStatement return type float
statement code is: float _float = jCLO.getFloat("Ve' rsOG|ob")
test data is: JCLO jCLO = new JCLO("Ve' rsOG|ob");
jCLO.getFloat("Ve' rsOG|ob");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        JCLO jCLO = new JCLO(42);
        jCLO.getFloat(42);
    }
}
statement is: // Improved test data for the above code snippet
JCLO jCLO = new JCLO(42), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getFloat(42), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getFloat(42) target is: jCLO method is: getFloat(int)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getFloat(Ljava/lang/String;)F
TestCase is: int _int = 42;
JCLO jCLO = new JCLO(_int);
int _int = 42;
((JCLO) _int).getFloat((String) _int);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("-ve'krsob")
statement is: getStrings(Ljava/lang/String;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] strings = jCLO.getStrings("-ve'krsob")
test data is: JCLO jCLO = new JCLO("-ve'krsob");
jCLO.getStrings("-ve'krsob");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("-1234");
        jCLO.getStrings("-1234");
    }
}
statement is: JCLO jCLO = new JCLO("-1234"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getStrings("-1234"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getStrings("-1234") target is: jCLO method is: getStrings(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getStrings(Ljava/lang/String;)[Ljava/lang/String;
TestCase is: String string = "-1234";
JCLO jCLO = new JCLO(string);
String string = "-1234";
((JCLO) string).getStrings(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(".")
statement is: getFloats(Ljava/lang/String;)[F type is: class org.evosuite.testcase.statements.MethodStatement return type class [F
statement code is: float[] floats = jCLO.getFloats(".")
test data is: JCLO jCLO = new JCLO(".");
jCLO.getFloats(".");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("12345");
        jCLO.getFloats("-98765.43210");
    }
}
statement is: JCLO jCLO = new JCLO("12345"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getFloats("-98765.43210"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getFloats("-98765.43210") target is: jCLO method is: getFloats(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getFloats(Ljava/lang/String;)[F
TestCase is: String string = "12345";
JCLO jCLO = new JCLO(string);
String string = "-98765.43210";
((JCLO) string).getFloats(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("-v'ksob")
statement is: getShort(Ljava/lang/String;)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short _short = jCLO.getShort("-v'ksob")
test data is: JCLO jCLO = new JCLO("-v'ksob");
jCLO.getShort("-v'ksob");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("-v'ksob");
        jCLO.getShort("-v'ksob", ((short) (1234)));
    }
}
statement is: JCLO jCLO = new JCLO("-v'ksob"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getShort("-v'ksob", ((short) (1234))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getShort("-v'ksob", ((short) (1234))) target is: jCLO method is: getShort(java.lang.String,short)
TestCase is: String string = "-v'ksob";
JCLO jCLO = new JCLO(string);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("", arg1)
statement is: getLongs(Ljava/lang/String;)[J type is: class org.evosuite.testcase.statements.MethodStatement return type class [J
statement code is: long[] longs = jCLO.getLongs("2^tm%szNg}H^")
test data is: Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getLongs("2^tm%szNg}H^");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO("", object);
        jCLO.getLongs("2^tm%szNg}H^");
        // The following test data is more descriptive and representative of the situation being tested:
        object = new Object();
        jCLO = new JCLO("This is a sample string.", object);
        jCLO.getLongs("1000000000000000000");
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getLongs("2^tm%szNg}H^"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getLongs("2^tm%szNg}H^") target is: jCLO method is: getLongs(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: getLongs(Ljava/lang/String;)[J
statement is: // The following test data is more descriptive and representative of the situation being tested:
object = new Object(), class spoon.support.reflect.code.CtAssignmentImpl
statement is: jCLO = new JCLO("This is a sample string.", object), class spoon.support.reflect.code.CtAssignmentImpl
statement is: jCLO.getLongs("1000000000000000000"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getLongs("1000000000000000000") target is: jCLO method is: getLongs(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: getLongs(Ljava/lang/String;)[J
TestCase is: Object object = new Object();
String string = "";
JCLO jCLO = new JCLO(string, object);
String string = "2^tm%szNg}H^";
((JCLO) string).getLongs(string);
String string = "1000000000000000000";
((JCLO) string).getLongs(string);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0)
statement is: getBytes(Ljava/lang/String;)[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] bytes = jCLO.getBytes("[=boolean]")
test data is: Object object = new Object();
JCLO jCLO = new JCLO(object);
jCLO.getBytes("[=boolean]");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO(object);
        jCLO.getBytes("true");
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO(object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getBytes("true"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getBytes("true") target is: jCLO method is: getBytes(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getBytes(Ljava/lang/String;)[B
TestCase is: Object object = new Object();
JCLO jCLO = new JCLO(object);
String string = "true";
jCLO.getBytes(string);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0)
statement is: usage()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String usage = jCLO.usage()
test data is: Object object = new Object();
JCLO jCLO = new JCLO(object);
JCLO jCLO = new JCLO(jCLO);
jCLO.usage();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO(object);
        JCLO jCLO = new JCLO(jCLO);
        jCLO.usage();
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO(object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO(jCLO), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.usage(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.usage() target is: jCLO method is: usage()
TestCase is: Object object = new Object();
JCLO jCLO = new JCLO(object);
JCLO jCLO = new JCLO(jCLO);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("", arg1)
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = jCLO.toString()
test data is: Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO("This is a string value", object);
        assertEquals("This is a string value", jCLO.toString());
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("This is a string value", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals("This is a string value", jCLO.toString()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("This is a string value", jCLO.toString()) target is:  method is: assertEquals(java.lang.String,<unknown>)
TestCase is: Object object = new Object();
String string = "This is a string value";
JCLO jCLO = new JCLO(string, object);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("CASE_INSNSTIVORDE")
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = jCLO.toString()
test data is: JCLO jCLO = new JCLO("CASE_INSNSTIVORDE");
jCLO.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("CASE_INSPIRATIONALDIVERSIFICATION");
        jCLO.toString();
    }
}
statement is: JCLO jCLO = new JCLO("CASE_INSPIRATIONALDIVERSIFICATION"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.toString(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.toString() target is: jCLO method is: toString()
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: toString()Ljava/lang/String;
TestCase is: String string = "CASE_INSPIRATIONALDIVERSIFICATION";
JCLO jCLO = new JCLO(string);
string.toString();

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte) (-75))
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0)
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = jCLO.toString()
test data is: Byte byte = new Byte((byte) (-75));
JCLO jCLO = new JCLO(byte);
jCLO.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Byte = new Byte(((byte) (-128)));// Use a negative value to test the boundary condition of the Byte type

        JCLO jCLO = new JCLO(byte.class);
        jCLO.toString();
    }
}
statement is: // Improved test data
Byte = new Byte(((byte) (-128)))// Use a negative value to test the boundary condition of the Byte type
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO(byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V
statement is: jCLO.toString(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.toString() target is: jCLO method is: toString()
statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte)1)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("serialVersionUID", arg1)
statement is: usage()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String usage = jCLO.usage()
test data is: Byte byte = new Byte((byte)1);
JCLO jCLO = new JCLO("serialVersionUID", byte);
jCLO.usage();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Byte = new Byte(((byte) (123)));// replaced the primitive value with a more descriptive one

        JCLO jCLO = new JCLO("serialVersionUID", byte.class);
        jCLO.usage();
    }
}
statement is: Byte = new Byte(((byte) (123)))// replaced the primitive value with a more descriptive one
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO("serialVersionUID", byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.usage(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.usage() target is: jCLO method is: usage()
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: usage()Ljava/lang/String;
TestCase is: String string = "serialVersionUID";
JCLO jCLO = new JCLO(string, string);
jCLO.usage();

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte) (-28))
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@f8e98cf4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@315185a3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "%_%k>1"
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(arg0)
test data is: Byte byte = new Byte((byte) (-28));
JCLO jCLO = new JCLO(byte);
String[] stringArray = new String[6];
stringArray[0] = "%_%k>1";
jCLO.parse(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Byte = new Byte(((byte) (-128)));
        JCLO jCLO = new JCLO(byte.class);
        String[] stringArray = new String[6];
        stringArray[0] = "Hello, world!";
        jCLO.parse(stringArray);
    }
}
statement is: Byte = new Byte(((byte) (-128))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO(byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[0] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b166764c
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: org.evosuite.testcase.statements.ArrayStatement@1085b559 callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 0
* this is vulnerable: String string = "Hello, world!"
TestCase is: String[] stringArray = new String[6];
String string = "Hello, world!";

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: org.evosuite.testcase.statements.ArrayStatement@f8d37b2b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.String;
statement code is: String[][] stringArray = new String[0][0]
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;[[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n", arg1, arg2)
statement is: org.evosuite.testcase.statements.ArrayStatement@921459da type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e3ca8c3b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n"
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(arg0)
test data is: Object object = new Object();
String[][] stringArray = new String[0][0];
JCLO jCLO = new JCLO("-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n", object, stringArray);
String[] stringArray = new String[1];
stringArray[0] = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n";
jCLO.parse(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        String[][] stringArray = new String[0][0];
        JCLO jCLO = new JCLO("-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n", object, stringArray);
        String[] stringArray = new String[1];
        stringArray[0] = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n";
        jCLO.parse(stringArray);
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[][] stringArray = new String[0][0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0, 0] Ct is: String[][] stringArray = new String[0][0] isAssignment: false Array: new String[0][0] Elements: []
lengths: [0, 0] [0, 0]
Their type are: class [[Ljava.lang.String; String[][]
statement is: JCLO jCLO = new JCLO("-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n", object, stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[][] stringArray = new String[0][0] isAssignment: false Array: new String[1] Elements: []
lengths: [0, 0] [1]
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n" Ct is: stringArray[0] = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2c621a34
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;[[Ljava/lang/String;)V callee: VariableReference: Statement 2, type edu.mscd.cs.jclo.JCLOindex is: 3
Matched Method is: parse([Ljava/lang/String;)V
* this is vulnerable: String string = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n"
TestCase is: Object object = new Object();
String[][] stringArray = new String[0][0];
String string = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n";
JCLO jCLO = new JCLO(string, object, stringArray);
String[] stringArray = new String[1];
String string = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n";
((JCLO) string).parse(stringArray);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("-nR=tBeG")
statement is: org.evosuite.testcase.statements.ArrayStatement@45864335 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@2c514b65 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "-nR=tBeG"
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(arg0)
test data is: JCLO jCLO = new JCLO("-nR=tBeG");
String[] stringArray = new String[1];
stringArray[0] = "-nR=tBeG";
jCLO.parse(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("-nR=tBeG");
        String[] stringArray = new String[1];
        stringArray[0] = "-nR=tBeG";
        jCLO.parse(stringArray);
        // Improved test data:
        JCLO jCLO = new JCLO("-nR=testBeG");
        String[] stringArray = new String[1];
        stringArray[0] = "-nR=testBeG";
        jCLO.parse(stringArray);
        // Even more improved test data:
        JCLO jCLO = new JCLO("-nR=testingBeg");
        String[] stringArray = new String[1];
        stringArray[0] = "-nR=testingBeg";
        jCLO.parse(stringArray);
        // Most improved test data:
        JCLO jCLO = new JCLO("-nR=testBest");
        String[] stringArray = new String[1];
        stringArray[0] = "-nR=testBest";
        jCLO.parse(stringArray);
        // Final test data:
        JCLO jCLO = new JCLO("-nR=testBest");
        String[] stringArray = new String[1];
        stringArray[0] = "-nR=testBest";
        jCLO.parse(stringArray);
    }
}
statement is: JCLO jCLO = new JCLO("-nR=tBeG"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "-nR=tBeG", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"-nR=tBeG" Ct is: stringArray[0] = "-nR=tBeG"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@10204b12
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: parse([Ljava/lang/String;)V
statement is: // Improved test data:
JCLO jCLO = new JCLO("-nR=testBeG"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "-nR=testBeG", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"-nR=testBeG" Ct is: stringArray[0] = "-nR=testBeG"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@4d928ecd
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 6
Matched Method is: parse([Ljava/lang/String;)V
statement is: // Even more improved test data:
JCLO jCLO = new JCLO("-nR=testingBeg"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "-nR=testingBeg", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"-nR=testingBeg" Ct is: stringArray[0] = "-nR=testingBeg"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@487d1630
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 11
Matched Method is: parse([Ljava/lang/String;)V
statement is: // Most improved test data:
JCLO jCLO = new JCLO("-nR=testBest"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "-nR=testBest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"-nR=testBest" Ct is: stringArray[0] = "-nR=testBest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@39f72649
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 16
Matched Method is: parse([Ljava/lang/String;)V
statement is: // Final test data:
JCLO jCLO = new JCLO("-nR=testBest"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "-nR=testBest", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"-nR=testBest" Ct is: stringArray[0] = "-nR=testBest"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2f681526
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 21
Matched Method is: parse([Ljava/lang/String;)V
* this is vulnerable: String string = "-nR=tBeG"
* this is vulnerable: String string = "-nR=testBeG"
* this is vulnerable: String string = "-nR=testingBeg"
* this is vulnerable: String string = "-nR=testBest"
* this is vulnerable: String string = "-nR=testBest"
TestCase is: String string = "-nR=tBeG";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
String string = "-nR=tBeG";
((JCLO) string).parse(stringArray);
String string = "-nR=testBeG";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
String string = "-nR=testBeG";
((JCLO) string).parse(stringArray);
String string = "-nR=testingBeg";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
String string = "-nR=testingBeg";
((JCLO) string).parse(stringArray);
String string = "-nR=testBest";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
String string = "-nR=testBest";
((JCLO) string).parse(stringArray);
String string = "-nR=testBest";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
String string = "-nR=testBest";
((JCLO) string).parse(stringArray);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: org.evosuite.testcase.statements.ArrayStatement@b04f02bf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.String;
statement code is: String[][] stringArray = new String[5][1]
statement is: org.evosuite.testcase.statements.ArrayStatement@2c2f5a2e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@32df5eab type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "1isadditional"
statement is: org.evosuite.testcase.statements.AssignmentStatement@99021966 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.String;
statement code is: stringArray[0] = stringArray
statement is: org.evosuite.testcase.statements.ArrayStatement@59d2db46 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f36b2fbf type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@43bb5a62 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.String;
statement code is: stringArray[1] = stringArray
statement is: org.evosuite.testcase.statements.ArrayStatement@6ca89f70 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f978e9f1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "--"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6ed0d1d8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.String;
statement code is: stringArray[2] = stringArray
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;[[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0, arg1)
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(stringArray[2])
test data is: Object object = new Object();
String[][] stringArray = new String[5][1];
String[] stringArray = new String[3];
stringArray[0] = "1isadditional";
stringArray[0] = stringArray;
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = stringArray;
String[] stringArray = new String[5];
stringArray[0] = "--";
stringArray[2] = stringArray;
JCLO jCLO = new JCLO(object, stringArray);
jCLO.parse(stringArray[2]);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        String[][] stringArray = new String[5][1];
        stringArray[0][0] = "12345";
        stringArray[1][0] = "abcdef";
        stringArray[2][0] = "hello world";
        stringArray[3][0] = "!@#$%^&*()_+-=[]{}|;\':\"<>,./?";
        stringArray[4][0] = "This is a test string.";
        JCLO jCLO = new JCLO(object, stringArray);
        jCLO.parse(stringArray[2]);
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[][] stringArray = new String[5][1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5, 1] Ct is: String[][] stringArray = new String[5][1] isAssignment: false Array: new String[5][1] Elements: []
lengths: [5, 1] [5, 1]
Their type are: class [[Ljava.lang.String; String[][]
statement is: stringArray[0][0] = "12345", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"12345" Ct is: stringArray[0][0] = "12345"
target : stringArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1][0] = "abcdef", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"abcdef" Ct is: stringArray[1][0] = "abcdef"
target : stringArray[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2][0] = "hello world", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"hello world" Ct is: stringArray[2][0] = "hello world"
target : stringArray[2] class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3][0] = "!@#$%^&*()_+-=[]{}|;\':\"<>,./?", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"!@#$%^&*()_+-=[]{}|;\':\"<>,./?" Ct is: stringArray[3][0] = "!@#$%^&*()_+-=[]{}|;\':\"<>,./?"
target : stringArray[3] class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4][0] = "This is a test string.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string." Ct is: stringArray[4][0] = "This is a test string."
target : stringArray[4] class spoon.support.reflect.code.CtLiteralImpl
statement is: JCLO jCLO = new JCLO(object, stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.parse(stringArray[2]), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray[2]) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;[[Ljava/lang/String;)V callee: VariableReference: Statement 11, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: parse([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase Could not be added: parse([Ljava/lang/String;)V
* this is vulnerable: String[] stringArray = null
TestCase is: Object object = new Object();
String[][] stringArray = new String[5][1];
JCLO jCLO = new JCLO(object, stringArray);
String[] stringArray = null;

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0)
statement is: org.evosuite.testcase.statements.ArrayStatement@6d2df9db type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(arg0)
test data is: Object object = new Object();
JCLO jCLO = new JCLO(object);
String[] stringArray = new String[0];
jCLO.parse(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO(object);
        String[] stringArray = new String[]{ "test1", "test2", "test3" };
        jCLO.parse(stringArray);
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO(object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[]{ "test1", "test2", "test3" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "test1", "test2", "test3" } Elements: ["test1", "test2", "test3"]
lengths: [0] []
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: parse([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Object object = new Object();
JCLO jCLO = new JCLO(object);
String[] stringArray = null;
jCLO.parse(stringArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@6c4d6dc2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JCLO.main(arg0)
test data is: String[] stringArray = new String[3];
JCLO.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "Welcome";
        stringArray[1] = "to";
        stringArray[2] = "the";
        JCLO.main(stringArray);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Welcome", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Welcome" Ct is: stringArray[0] = "Welcome"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "to", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"to" Ct is: stringArray[1] = "to"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "the", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"the" Ct is: stringArray[2] = "the"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JCLO.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JCLO.main(stringArray) target is: JCLO method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[3];
JCLO.main(stringArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@d5f93c18 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@40ebbc31 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "MIN_VALUE"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JCLO.main(arg0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "MIN_VALUE";
JCLO.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "minimum value";
        JCLO.main(stringArray);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "minimum value", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"minimum value" Ct is: stringArray[0] = "minimum value"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JCLO.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JCLO.main(stringArray) target is: JCLO method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[1];
String string = "minimum value";
stringArray[0] = string;
JCLO.main(stringArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@803e0c41 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@7d8306dc type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "--version"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: JCLO.main(arg0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "--version";
JCLO.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "--help";
        stringArray[1] = "--version";
        JCLO.main(stringArray);
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "--help", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"--help" Ct is: stringArray[0] = "--help"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "--version", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"--version" Ct is: stringArray[1] = "--version"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JCLO.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: JCLO.main(stringArray) target is: JCLO method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
TestCase is: String[] stringArray = new String[1];
String string = "--help";
stringArray[0] = string;
String string = "--version";
stringArray[0] = string;
JCLO.main(stringArray);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("Tso")
statement is: getValue(Ljava/lang/String;)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object value = jCLO.getValue("CASE_INSENSITIVE_ORDER")
test data is: JCLO jCLO = new JCLO("Tso");
jCLO.getValue("CASE_INSENSITIVE_ORDER");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("Search for a specific character in a string");
        jCLO.getValue("A");// returns the index of the first occurrence of 'A' in the input string

        jCLO.getValue("B");// returns the index of the first occurrence of 'B' in the input string

        jCLO.getValue("$");// returns the index of the first occurrence of '$' in the input string

        jCLO.getValue("");// returns -1 if the input string is empty or null }}

    }
}
statement is: JCLO jCLO = new JCLO("Search for a specific character in a string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getValue("A")// returns the index of the first occurrence of 'A' in the input string
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getValue("A")// returns the index of the first occurrence of 'A' in the input string
 target is: jCLO method is: getValue(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getValue(Ljava/lang/String;)Ljava/lang/Object;
statement is: jCLO.getValue("B")// returns the index of the first occurrence of 'B' in the input string
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getValue("B")// returns the index of the first occurrence of 'B' in the input string
 target is: jCLO method is: getValue(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getValue(Ljava/lang/String;)Ljava/lang/Object;
statement is: jCLO.getValue("$")// returns the index of the first occurrence of '$' in the input string
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getValue("$")// returns the index of the first occurrence of '$' in the input string
 target is: jCLO method is: getValue(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getValue(Ljava/lang/String;)Ljava/lang/Object;
statement is: jCLO.getValue("")// returns -1 if the input string is empty or null }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getValue("")// returns -1 if the input string is empty or null }}
 target is: jCLO method is: getValue(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getValue(Ljava/lang/String;)Ljava/lang/Object;
TestCase is: String string = "Search for a specific character in a string";
JCLO jCLO = new JCLO(string);
String string = "A";
((JCLO) string).getValue(string);
String string = "B";
((JCLO) string).getValue(string);
String string = "$";
((JCLO) string).getValue(string);
String string = "";
((JCLO) string).getValue(string);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("", arg1)
statement is: getValue(Ljava/lang/String;)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object value = jCLO.getValue("T!5\"j)")
test data is: Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getValue("T!5\"j)");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO("", object);
        jCLO.getValue("This is a test string");
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getValue("This is a test string"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getValue("This is a test string") target is: jCLO method is: getValue(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: getValue(Ljava/lang/String;)Ljava/lang/Object;
TestCase is: Object object = new Object();
String string = "";
JCLO jCLO = new JCLO(string, object);
String string = "This is a test string";
((JCLO) string).getValue(string);

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte)113)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0)
statement is: getByte(Ljava/lang/String;)B type is: class org.evosuite.testcase.statements.MethodStatement return type byte
statement code is: byte _byte = jCLO.getByte("MAX_VALUE")
test data is: Byte byte = new Byte((byte)113);
JCLO jCLO = new JCLO(byte);
jCLO.getByte("MAX_VALUE");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Byte = new Byte(((byte) (-50)));
        JCLO jCLO = new JCLO(byte.class);
        jCLO.getByte("MIN_VALUE");
    }
}
statement is: Byte = new Byte(((byte) (-50))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO(byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V
statement is: jCLO.getByte("MIN_VALUE"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getByte("MIN_VALUE") target is: jCLO method is: getByte(java.lang.String)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("-v'sob")
statement is: getChars(Ljava/lang/String;)[C type is: class org.evosuite.testcase.statements.MethodStatement return type class [C
statement code is: char[] chars = jCLO.getChars("-v'sob")
test data is: JCLO jCLO = new JCLO("-v'sob");
jCLO.getChars("-v'sob");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("-v'sob");
        jCLO.getChars("-v'sob");
    }
}
statement is: JCLO jCLO = new JCLO("-v'sob"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getChars("-v'sob"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getChars("-v'sob") target is: jCLO method is: getChars(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getChars(Ljava/lang/String;)[C
TestCase is: String string = "-v'sob";
JCLO jCLO = new JCLO(string);
String string = "-v'sob";
((JCLO) string).getChars(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("0;*/s[")
statement is: getDoubles(Ljava/lang/String;)[D type is: class org.evosuite.testcase.statements.MethodStatement return type class [D
statement code is: double[] doubles = jCLO.getDoubles("0;*/s[")
test data is: JCLO jCLO = new JCLO("0;*/s[");
jCLO.getDoubles("0;*/s[");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("0;*/s[");
        jCLO.getDoubles("0;*/s[");
    }
}
statement is: JCLO jCLO = new JCLO("0;*/s["), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getDoubles("0;*/s["), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getDoubles("0;*/s[") target is: jCLO method is: getDoubles(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getDoubles(Ljava/lang/String;)[D
TestCase is: String string = "0;*/s[";
JCLO jCLO = new JCLO(string);
String string = "0;*/s[";
((JCLO) string).getDoubles(string);

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte)0)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0)
statement is: getInt(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int _int = jCLO.getInt("BYTES")
test data is: Byte byte = new Byte((byte)0);
JCLO jCLO = new JCLO(byte);
jCLO.getInt("BYTES");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        .class = new Byte(((byte) (-128)));
        jCLO = new JCLO(byte.class);
        jCLO.getInt("BYTES");
    }
}
statement is: // Improved test data
.class = new Byte(((byte) (-128))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: jCLO = new JCLO(byte.class), class spoon.support.reflect.code.CtAssignmentImpl
statement is: jCLO.getInt("BYTES"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getInt("BYTES") target is: jCLO method is: getInt(java.lang.String)
statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte)39)
statement is: org.evosuite.testcase.statements.ArrayStatement@e4d42c5e type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.String;
statement code is: String[][] stringArray = new String[8][4]
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;[[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0, arg1)
statement is: getLong(Ljava/lang/String;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long _long = jCLO.getLong("serialVersionUID")
test data is: Byte byte = new Byte((byte)39);
String[][] stringArray = new String[8][4];
JCLO jCLO = new JCLO(byte, stringArray);
jCLO.getLong("serialVersionUID");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Byte = new Byte(((byte) (127)));
        String[][] stringArray = new String[8][4];
        for (int i = 0; i < stringArray.length; i++) {
            for (int j = 0; j < stringArray[i].length; j++) {
                if ((i == 0) && (j == 0)) {
                    stringArray[i][j] = "serialVersionUID";
                } else if ((i == 1) && (j == 2)) {
                    stringArray[i][j] = "field1";
                } else if ((i == 3) && (j == 1)) {
                    stringArray[i][j] = "field2";
                } else if ((i == 4) && (j == 0)) {
                    stringArray[i][j] = "field3";
                } else {
                    stringArray[i][j] = (("value" + i) + "-") + j;
                }
            }
        }
        JCLO jCLO = new JCLO(byte.class, stringArray);
        assertEquals(127L, jCLO.getLong("serialVersionUID"));
    }
}
statement is: Byte = new Byte(((byte) (127))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: String[][] stringArray = new String[8][4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8, 4] Ct is: String[][] stringArray = new String[8][4] isAssignment: false Array: new String[8][4] Elements: []
lengths: [8, 4] [8, 4]
Their type are: class [[Ljava.lang.String; String[][]
statement is: for (int i = 0; i < stringArray.length; i++) {
    for (int j = 0; j < stringArray[i].length; j++) {
        if ((i == 0) && (j == 0)) {
            stringArray[i][j] = "serialVersionUID";
        } else if ((i == 1) && (j == 2)) {
            stringArray[i][j] = "field1";
        } else if ((i == 3) && (j == 1)) {
            stringArray[i][j] = "field2";
        } else if ((i == 4) && (j == 0)) {
            stringArray[i][j] = "field3";
        } else {
            stringArray[i][j] = (("value" + i) + "-") + j;
        }
    }
}, class spoon.support.reflect.code.CtForImpl
statement is: JCLO jCLO = new JCLO(byte.class, stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;[[Ljava/lang/String;)V
statement is: assertEquals(127L, jCLO.getLong("serialVersionUID")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(127L, jCLO.getLong("serialVersionUID")) target is:  method is: assertEquals(long,<unknown>)
TestCase is: String[][] stringArray = new String[8][4];

* test suite isTestSuite: 65
Test 0: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getInts("");
Test 1: 
JCLO jCLO = new JCLO("mnt");
// Undeclared exception!
try { 
  jCLO.getChar("mnt");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 2: 
JCLO jCLO = new JCLO("");
jCLO.getString("false");
Test 3: 
JCLO jCLO = new JCLO("-V[lc^%[");
jCLO.getInt("hash");
Test 4: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getShorts("");
Test 5: 
Byte byte = new Byte((byte) (-28));
JCLO jCLO = new JCLO(byte);
jCLO.getByte("MIN_VALUE");
Test 6: 
JCLO jCLO = new JCLO("-vnsLo");
jCLO.getChars("value");
Test 7: 
JCLO jCLO = new JCLO("int");
// Undeclared exception!
try { 
  jCLO.getBoolean("int");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 8: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
// Undeclared exception!
try { 
  jCLO.getDouble((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 9: 
JCLO jCLO = new JCLO("Ve' rsOG|ob");
// Undeclared exception!
try { 
  jCLO.getFloat("Ve' rsOG|ob");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 10: 
JCLO jCLO = new JCLO("-ve'krsob");
jCLO.getStrings("-ve'krsob");
Test 11: 
JCLO jCLO = new JCLO(".");
jCLO.getFloats(".");
Test 12: 
JCLO jCLO = new JCLO("-v'ksob");
// Undeclared exception!
try { 
  jCLO.getShort("-v'ksob");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 13: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getLongs("2^tm%szNg}H^");
Test 14: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
jCLO.getBytes("[=boolean]");
Test 15: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
JCLO jCLO = new JCLO(jCLO);
jCLO.usage();
Test 16: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.toString();
Test 17: 
JCLO jCLO = new JCLO("CASE_INSNSTIVORDE");
// Undeclared exception!
try { 
  jCLO.toString();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
Byte byte = new Byte((byte) (-75));
JCLO jCLO = new JCLO(byte);
jCLO.toString();
Test 19: 
Byte byte = new Byte((byte)1);
JCLO jCLO = new JCLO("serialVersionUID", byte);
jCLO.usage();
Test 20: 
Byte byte = new Byte((byte) (-28));
JCLO jCLO = new JCLO(byte);
String[] stringArray = new String[6];
stringArray[0] = "%_%k>1";
jCLO.parse(stringArray);
Test 21: 
Object object = new Object();
String[][] stringArray = new String[0][0];
JCLO jCLO = new JCLO("-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n", object, stringArray);
String[] stringArray = new String[1];
stringArray[0] = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n";
// Undeclared exception!
try { 
  jCLO.parse(stringArray);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // No such option: \"liases String;_$_$_$
   // __doubleDashes
   // __fields Field_$_$
   // __asEquals
   // __oject Objct
   // __prefix String
   // \"
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 22: 
JCLO jCLO = new JCLO("-nR=tBeG");
String[] stringArray = new String[1];
stringArray[0] = "-nR=tBeG";
// Undeclared exception!
try { 
  jCLO.parse(stringArray);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // No such option: \"nR\"
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 23: 
Object object = new Object();
String[][] stringArray = new String[5][1];
String[] stringArray = new String[3];
stringArray[0] = "1isadditional";
stringArray[0] = stringArray;
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = stringArray;
String[] stringArray = new String[5];
stringArray[0] = "--";
stringArray[2] = stringArray;
JCLO jCLO = new JCLO(object, stringArray);
// Undeclared exception!
try { 
  jCLO.parse(stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 24: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
String[] stringArray = new String[0];
jCLO.parse(stringArray);
Test 25: 
String[] stringArray = new String[3];
JCLO.main(stringArray);
Test 26: 
String[] stringArray = new String[1];
stringArray[0] = "MIN_VALUE";
JCLO.main(stringArray);
Test 27: 
String[] stringArray = new String[1];
stringArray[0] = "--version";
JCLO.main(stringArray);
Test 28: 
JCLO jCLO = new JCLO("Tso");
jCLO.getValue("CASE_INSENSITIVE_ORDER");
Test 29: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getValue("T!5\"j)");
Test 30: 
Byte byte = new Byte((byte)113);
JCLO jCLO = new JCLO(byte);
jCLO.getByte("MAX_VALUE");
Test 31: 
JCLO jCLO = new JCLO("-v'sob");
jCLO.getChars("-v'sob");
Test 32: 
JCLO jCLO = new JCLO("0;*/s[");
jCLO.getDoubles("0;*/s[");
Test 33: 
Byte byte = new Byte((byte)0);
JCLO jCLO = new JCLO(byte);
jCLO.getInt("BYTES");
Test 34: 
Byte byte = new Byte((byte)39);
String[][] stringArray = new String[8][4];
JCLO jCLO = new JCLO(byte, stringArray);
jCLO.getLong("serialVersionUID");
Test 35: 
Object object = new Object();
JCLO jCLO = new JCLO("test string", object);
((JCLO)"test string").getInts((String) null);

Test 36: 
JCLO jCLO = new JCLO("a long and winding road");
((JCLO)"a long and winding road").getChar("a long and winding road");

Test 37: 
JCLO jCLO = new JCLO("This is a string");
((JCLO)"This is a string").getString("01/01/2023");

Test 38: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
((JCLO)"").getShorts("1234567890");

Test 39: 
JCLO jCLO = new JCLO("-vnsLo");
((JCLO)"-vnsLo").getChars("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

Test 40: 
JCLO jCLO = new JCLO("1234567890");
((JCLO)"1234567890").getBoolean("abcdefghijklmnopqrstuvwxyz");

Test 41: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
((JCLO)"").getDouble("Test double value");

Test 42: 
JCLO jCLO = new JCLO(42);
((JCLO)42).getFloat((String) 42);

Test 43: 
JCLO jCLO = new JCLO("-1234");
((JCLO)"-1234").getStrings("-1234");

Test 44: 
JCLO jCLO = new JCLO("12345");
((JCLO)"12345").getFloats("-98765.43210");

Test 45: 
JCLO jCLO = new JCLO("-v'ksob");

Test 46: 
Object object = new Object();
String string = "";
JCLO jCLO = new JCLO("", object);
((JCLO)"").getLongs("2^tm%szNg}H^");
String string = "1000000000000000000";
((JCLO) string).getLongs(string);

Test 47: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
jCLO.getBytes("true");

Test 48: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
JCLO jCLO = new JCLO(jCLO);

Test 49: 
Object object = new Object();
JCLO jCLO = new JCLO("This is a string value", object);

Test 50: 
JCLO jCLO = new JCLO("CASE_INSPIRATIONALDIVERSIFICATION");
((JCLO)"CASE_INSPIRATIONALDIVERSIFICATION").toString();

Test 51: 
JCLO jCLO = new JCLO("serialVersionUID", "serialVersionUID");
jCLO.usage();

Test 52: 
String[] stringArray = new String[6];

Test 53: 
Object object = new Object();
String[][] stringArray = new String[0][0];
JCLO jCLO = new JCLO("-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n", object, stringArray);
String[] stringArray = new String[1];
((JCLO)"-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n").parse(stringArray);

Test 54: 
String string = "-nR=tBeG";
JCLO jCLO = new JCLO("-nR=tBeG");
String[] stringArray = new String[1];
((JCLO)"-nR=tBeG").parse(stringArray);
String string = "-nR=testBeG";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
((JCLO) string).parse(stringArray);
String string = "-nR=testingBeg";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
((JCLO) string).parse(stringArray);
String string = "-nR=testBest";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
((JCLO) string).parse(stringArray);
String string = "-nR=testBest";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
((JCLO) string).parse(stringArray);

Test 55: 
Object object = new Object();
String[][] stringArray = new String[5][1];
JCLO jCLO = new JCLO(object, stringArray);

Test 56: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
jCLO.parse((String[]) null);

Test 57: 
String[] stringArray = new String[3];
JCLO.main(stringArray);

Test 58: 
String[] stringArray = new String[1];
stringArray[0] = "minimum value";
JCLO.main(stringArray);

Test 59: 
String[] stringArray = new String[1];
stringArray[0] = "--help";
stringArray[0] = "--version";
JCLO.main(stringArray);

Test 60: 
String string = "Search for a specific character in a string";
JCLO jCLO = new JCLO("Search for a specific character in a string");
((JCLO)"Search for a specific character in a string").getValue("A");
String string = "B";
((JCLO) string).getValue(string);
String string = "$";
((JCLO) string).getValue(string);
String string = "";
((JCLO) string).getValue(string);

Test 61: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
((JCLO)"").getValue("This is a test string");

Test 62: 
JCLO jCLO = new JCLO("-v'sob");
((JCLO)"-v'sob").getChars("-v'sob");

Test 63: 
JCLO jCLO = new JCLO("0;*/s[");
((JCLO)"0;*/s[").getDoubles("0;*/s[");

Test 64: 
String[][] stringArray = new String[8][4];


* Generated after the refinement and before minimization 65 tests with total length 210
* test suite isTestSuite: 65
Test 0: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getInts("");
Test 1: 
JCLO jCLO = new JCLO("mnt");
// Undeclared exception!
try { 
  jCLO.getChar("mnt");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 2: 
JCLO jCLO = new JCLO("");
jCLO.getString("false");
Test 3: 
JCLO jCLO = new JCLO("-V[lc^%[");
jCLO.getInt("hash");
Test 4: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getShorts("");
Test 5: 
Byte byte = new Byte((byte) (-28));
JCLO jCLO = new JCLO(byte);
jCLO.getByte("MIN_VALUE");
Test 6: 
JCLO jCLO = new JCLO("-vnsLo");
jCLO.getChars("value");
Test 7: 
JCLO jCLO = new JCLO("int");
// Undeclared exception!
try { 
  jCLO.getBoolean("int");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 8: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
// Undeclared exception!
try { 
  jCLO.getDouble((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 9: 
JCLO jCLO = new JCLO("Ve' rsOG|ob");
// Undeclared exception!
try { 
  jCLO.getFloat("Ve' rsOG|ob");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 10: 
JCLO jCLO = new JCLO("-ve'krsob");
jCLO.getStrings("-ve'krsob");
Test 11: 
JCLO jCLO = new JCLO(".");
jCLO.getFloats(".");
Test 12: 
JCLO jCLO = new JCLO("-v'ksob");
// Undeclared exception!
try { 
  jCLO.getShort("-v'ksob");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 13: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getLongs("2^tm%szNg}H^");
Test 14: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
jCLO.getBytes("[=boolean]");
Test 15: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
JCLO jCLO = new JCLO(jCLO);
jCLO.usage();
Test 16: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.toString();
Test 17: 
JCLO jCLO = new JCLO("CASE_INSNSTIVORDE");
// Undeclared exception!
try { 
  jCLO.toString();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
Byte byte = new Byte((byte) (-75));
JCLO jCLO = new JCLO(byte);
jCLO.toString();
Test 19: 
Byte byte = new Byte((byte)1);
JCLO jCLO = new JCLO("serialVersionUID", byte);
jCLO.usage();
Test 20: 
Byte byte = new Byte((byte) (-28));
JCLO jCLO = new JCLO(byte);
String[] stringArray = new String[6];
stringArray[0] = "%_%k>1";
jCLO.parse(stringArray);
Test 21: 
Object object = new Object();
String[][] stringArray = new String[0][0];
JCLO jCLO = new JCLO("-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n", object, stringArray);
String[] stringArray = new String[1];
stringArray[0] = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n";
// Undeclared exception!
try { 
  jCLO.parse(stringArray);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // No such option: \"liases String;_$_$_$
   // __doubleDashes
   // __fields Field_$_$
   // __asEquals
   // __oject Objct
   // __prefix String
   // \"
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 22: 
JCLO jCLO = new JCLO("-nR=tBeG");
String[] stringArray = new String[1];
stringArray[0] = "-nR=tBeG";
// Undeclared exception!
try { 
  jCLO.parse(stringArray);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // No such option: \"nR\"
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 23: 
Object object = new Object();
String[][] stringArray = new String[5][1];
String[] stringArray = new String[3];
stringArray[0] = "1isadditional";
stringArray[0] = stringArray;
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = stringArray;
String[] stringArray = new String[5];
stringArray[0] = "--";
stringArray[2] = stringArray;
JCLO jCLO = new JCLO(object, stringArray);
// Undeclared exception!
try { 
  jCLO.parse(stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 24: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
String[] stringArray = new String[0];
jCLO.parse(stringArray);
Test 25: 
String[] stringArray = new String[3];
JCLO.main(stringArray);
Test 26: 
String[] stringArray = new String[1];
stringArray[0] = "MIN_VALUE";
JCLO.main(stringArray);
Test 27: 
String[] stringArray = new String[1];
stringArray[0] = "--version";
JCLO.main(stringArray);
Test 28: 
JCLO jCLO = new JCLO("Tso");
jCLO.getValue("CASE_INSENSITIVE_ORDER");
Test 29: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getValue("T!5\"j)");
Test 30: 
Byte byte = new Byte((byte)113);
JCLO jCLO = new JCLO(byte);
jCLO.getByte("MAX_VALUE");
Test 31: 
JCLO jCLO = new JCLO("-v'sob");
jCLO.getChars("-v'sob");
Test 32: 
JCLO jCLO = new JCLO("0;*/s[");
jCLO.getDoubles("0;*/s[");
Test 33: 
Byte byte = new Byte((byte)0);
JCLO jCLO = new JCLO(byte);
jCLO.getInt("BYTES");
Test 34: 
Byte byte = new Byte((byte)39);
String[][] stringArray = new String[8][4];
JCLO jCLO = new JCLO(byte, stringArray);
jCLO.getLong("serialVersionUID");
Test 35: 
Object object = new Object();
JCLO jCLO = new JCLO("test string", object);
((JCLO)"test string").getInts((String) null);

Test 36: 
JCLO jCLO = new JCLO("a long and winding road");
((JCLO)"a long and winding road").getChar("a long and winding road");

Test 37: 
JCLO jCLO = new JCLO("This is a string");
((JCLO)"This is a string").getString("01/01/2023");

Test 38: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
((JCLO)"").getShorts("1234567890");

Test 39: 
JCLO jCLO = new JCLO("-vnsLo");
((JCLO)"-vnsLo").getChars("ABCDEFGHIJKLMNOPQRSTUVWXYZ");

Test 40: 
JCLO jCLO = new JCLO("1234567890");
((JCLO)"1234567890").getBoolean("abcdefghijklmnopqrstuvwxyz");

Test 41: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
((JCLO)"").getDouble("Test double value");

Test 42: 
JCLO jCLO = new JCLO(42);
((JCLO)42).getFloat((String) 42);

Test 43: 
JCLO jCLO = new JCLO("-1234");
((JCLO)"-1234").getStrings("-1234");

Test 44: 
JCLO jCLO = new JCLO("12345");
((JCLO)"12345").getFloats("-98765.43210");

Test 45: 
JCLO jCLO = new JCLO("-v'ksob");

Test 46: 
Object object = new Object();
String string = "";
JCLO jCLO = new JCLO("", object);
((JCLO)"").getLongs("2^tm%szNg}H^");
String string = "1000000000000000000";
((JCLO) string).getLongs(string);

Test 47: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
jCLO.getBytes("true");

Test 48: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
JCLO jCLO = new JCLO(jCLO);

Test 49: 
Object object = new Object();
JCLO jCLO = new JCLO("This is a string value", object);

Test 50: 
JCLO jCLO = new JCLO("CASE_INSPIRATIONALDIVERSIFICATION");
((JCLO)"CASE_INSPIRATIONALDIVERSIFICATION").toString();

Test 51: 
JCLO jCLO = new JCLO("serialVersionUID", "serialVersionUID");
jCLO.usage();

Test 52: 
String[] stringArray = new String[6];

Test 53: 
Object object = new Object();
String[][] stringArray = new String[0][0];
JCLO jCLO = new JCLO("-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n", object, stringArray);
String[] stringArray = new String[1];
((JCLO)"-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n").parse(stringArray);

Test 54: 
String string = "-nR=tBeG";
JCLO jCLO = new JCLO("-nR=tBeG");
String[] stringArray = new String[1];
((JCLO)"-nR=tBeG").parse(stringArray);
String string = "-nR=testBeG";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
((JCLO) string).parse(stringArray);
String string = "-nR=testingBeg";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
((JCLO) string).parse(stringArray);
String string = "-nR=testBest";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
((JCLO) string).parse(stringArray);
String string = "-nR=testBest";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
((JCLO) string).parse(stringArray);

Test 55: 
Object object = new Object();
String[][] stringArray = new String[5][1];
JCLO jCLO = new JCLO(object, stringArray);

Test 56: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
jCLO.parse((String[]) null);

Test 57: 
String[] stringArray = new String[3];
JCLO.main(stringArray);

Test 58: 
String[] stringArray = new String[1];
stringArray[0] = "minimum value";
JCLO.main(stringArray);

Test 59: 
String[] stringArray = new String[1];
stringArray[0] = "--help";
stringArray[0] = "--version";
JCLO.main(stringArray);

Test 60: 
String string = "Search for a specific character in a string";
JCLO jCLO = new JCLO("Search for a specific character in a string");
((JCLO)"Search for a specific character in a string").getValue("A");
String string = "B";
((JCLO) string).getValue(string);
String string = "$";
((JCLO) string).getValue(string);
String string = "";
((JCLO) string).getValue(string);

Test 61: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
((JCLO)"").getValue("This is a test string");

Test 62: 
JCLO jCLO = new JCLO("-v'sob");
((JCLO)"-v'sob").getChars("-v'sob");

Test 63: 
JCLO jCLO = new JCLO("0;*/s[");
((JCLO)"0;*/s[").getDoubles("0;*/s[");

Test 64: 
String[][] stringArray = new String[8][4];


* Minimizing test suite
* test suite isTestSuite: 35
Test 0: 
Byte byte = new Byte((byte)39);
String[][] stringArray = new String[8][4];
JCLO jCLO = new JCLO(byte, stringArray);
jCLO.getLong("serialVersionUID");
Test 1: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getInts("");
Test 2: 
JCLO jCLO = new JCLO("mnt");
// Undeclared exception!
try { 
  jCLO.getChar("mnt");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 3: 
JCLO jCLO = new JCLO("");
jCLO.getString("false");
Test 4: 
JCLO jCLO = new JCLO("-V[lc^%[");
jCLO.getInt("hash");
Test 5: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getShorts("");
Test 6: 
Byte byte = new Byte((byte) (-28));
JCLO jCLO = new JCLO(byte);
jCLO.getByte("MIN_VALUE");
Test 7: 
JCLO jCLO = new JCLO("-v'sob");
jCLO.getChars("-v'sob");
Test 8: 
JCLO jCLO = new JCLO("int");
// Undeclared exception!
try { 
  jCLO.getBoolean("int");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 9: 
JCLO jCLO = new JCLO("0;*/s[");
jCLO.getDoubles("0;*/s[");
Test 10: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
// Undeclared exception!
try { 
  jCLO.getDouble((String) null);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 11: 
JCLO jCLO = new JCLO("Ve' rsOG|ob");
// Undeclared exception!
try { 
  jCLO.getFloat("Ve' rsOG|ob");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 12: 
JCLO jCLO = new JCLO("-ve'krsob");
jCLO.getStrings("-ve'krsob");
Test 13: 
JCLO jCLO = new JCLO(".");
jCLO.getFloats(".");
Test 14: 
JCLO jCLO = new JCLO("-v'ksob");
// Undeclared exception!
try { 
  jCLO.getShort("-v'ksob");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 15: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getLongs("2^tm%szNg}H^");
Test 16: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
jCLO.getBytes("true");
Test 17: 
JCLO jCLO = new JCLO("CASE_INSNSTIVORDE");
// Undeclared exception!
try { 
  jCLO.toString();
  fail("Expecting exception: ClassCastException");

} catch(ClassCastException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
Byte byte = new Byte((byte) (-75));
JCLO jCLO = new JCLO(byte);
jCLO.toString();
Test 19: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
JCLO jCLO = new JCLO(jCLO);
jCLO.usage();
Test 20: 
JCLO jCLO = new JCLO("serialVersionUID", "serialVersionUID");
jCLO.usage();
Test 21: 
Byte byte = new Byte((byte) (-28));
JCLO jCLO = new JCLO(byte);
String[] stringArray = new String[6];
stringArray[0] = "%_%k>1";
jCLO.parse(stringArray);
Test 22: 
Object object = new Object();
String[][] stringArray = new String[0][0];
JCLO jCLO = new JCLO("-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n", object, stringArray);
String[] stringArray = new String[1];
stringArray[0] = "-aliases String;...\n-doubleDashes\n-fields Field..\n-asEquals\n-oject Objct\n-prefix String\n";
// Undeclared exception!
try { 
  jCLO.parse(stringArray);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // No such option: \"liases String;_$_$_$
   // __doubleDashes
   // __fields Field_$_$
   // __asEquals
   // __oject Objct
   // __prefix String
   // \"
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 23: 
JCLO jCLO = new JCLO("-nR=tBeG");
String[] stringArray = new String[1];
stringArray[0] = "-nR=tBeG";
// Undeclared exception!
try { 
  jCLO.parse(stringArray);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // No such option: \"nR\"
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}

Test 24: 
Object object = new Object();
String[][] stringArray = new String[5][1];
String[] stringArray = new String[3];
stringArray[0] = "1isadditional";
stringArray[0] = stringArray;
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = stringArray;
String[] stringArray = new String[5];
stringArray[0] = "--";
JCLO jCLO = new JCLO(object, stringArray);
// Undeclared exception!
try { 
  jCLO.parse(stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
}

Test 25: 
Object object = new Object();
JCLO jCLO = new JCLO(object);
String[] stringArray = new String[0];
jCLO.parse(stringArray);
Test 26: 
String[] stringArray = new String[3];
JCLO.main(stringArray);
Test 27: 
String[] stringArray = new String[1];
stringArray[0] = "minimum value";
JCLO.main(stringArray);
Test 28: 
String[] stringArray = new String[1];
stringArray[0] = "--version";
JCLO.main(stringArray);
Test 29: 
JCLO jCLO = new JCLO("Tso");
jCLO.getValue("CASE_INSENSITIVE_ORDER");
Test 30: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.getValue("T!5\"j)");
Test 31: 
Byte byte = new Byte((byte)113);
JCLO jCLO = new JCLO(byte);
jCLO.getByte("MAX_VALUE");
Test 32: 
JCLO jCLO = new JCLO("-vnsLo");
jCLO.getChars("value");
Test 33: 
Byte byte = new Byte((byte)0);
JCLO jCLO = new JCLO(byte);
jCLO.getInt("BYTES");
Test 34: 
Object object = new Object();
JCLO jCLO = new JCLO("", object);
jCLO.toString();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 62%
* Total number of goals: 133
* Number of covered goals: 83
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 68%
* Total number of goals: 183
* Number of covered goals: 125
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 36%
* Total number of goals: 58
* Number of covered goals: 21
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 26
* Number of covered goals: 26
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 62%
* Total number of goals: 133
* Number of covered goals: 83
* Generated 35 tests with total length 108
* Resulting test suite's coverage: 66% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 30%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Byte arg0 = new Byte((byte)39);
String[][] arg1 = new String[8][4];
JCLO jCLO = new JCLO(arg0, arg1);
long _long = jCLO.getLong("serialVersionUID");
assertEquals((-7183698231559129828L), _long);


** It was a parseable test case! 
refined test name is: testGetSerialVersionUID
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Object arg1 = new Object();
JCLO jCLO = new JCLO("", arg1);
int[] ints = jCLO.getInts("");
assertNull(ints);


** It was a parseable test case! 
refined test name is: testGetIntsWithEmptyStringReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JCLO jCLO = new JCLO("mnt");
// Undeclared exception!
try { 
  jCLO.getChar("mnt");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}


** It was a parseable test case! 
refined test name is: testGetCharWithNullArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JCLO jCLO = new JCLO("");
String string = jCLO.getString("false");
assertNull(string);


** It was a parseable test case! 
refined test name is: testGetStringWithInvalidKeyReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JCLO jCLO = new JCLO("-V[lc^%[");
int _int = jCLO.getInt("hash");
assertEquals(0, _int);


** It was a parseable test case! 
refined test name is: testGetIntWithValidHash
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Object arg1 = new Object();
JCLO jCLO = new JCLO("", arg1);
short[] shorts = jCLO.getShorts("");
assertNull(shorts);


** It was a parseable test case! 
refined test name is: testGetShortsEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Byte arg0 = new Byte((byte) (-28));
JCLO jCLO = new JCLO(arg0);
byte _byte = jCLO.getByte("MIN_VALUE");
assertEquals((byte) (-128), _byte);


** It was a parseable test case! 
refined test name is: testGetByteWithMinValueAsArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JCLO jCLO = new JCLO("-v'sob");
char[] chars = jCLO.getChars("-v'sob");
assertNull(chars);


** It was a parseable test case! 
refined test name is: testGetCharsForOptionVSoBShouldReturnNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: JCLO jCLO = new JCLO("int");
// Undeclared exception!
try { 
  jCLO.getBoolean("int");
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("edu.mscd.cs.jclo.JCLO", e);
}


** It was a parseable test case! 
* Computation finished
