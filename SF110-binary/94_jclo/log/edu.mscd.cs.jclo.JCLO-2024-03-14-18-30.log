* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: edu.mscd.cs.jclo.JCLO
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/94_jclo/evosuite-files/evosuite.properties
* Connecting to master process on port 13304
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class edu.mscd.cs.jclo.JCLO
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 533
* Using seed 1710441015815
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 198 / 533
[Progress:>                             0%] [Cov:================>                  46%][Progress:>                             1%] [Cov:=================>                 49%][Progress:>                             1%] [Cov:=================>                 50%][Progress:>                             2%] [Cov:==================>                53%][Progress:>                             2%] [Cov:==================>                53%][Progress:>                             2%] [Cov:==================>                53%][Progress:>                             2%] [Cov:==================>                54%][Progress:>                             2%] [Cov:==================>                54%][Progress:>                             3%] [Cov:==================>                54%][Progress:>                             3%] [Cov:==================>                54%][Progress:>                             3%] [Cov:==================>                54%][Progress:>                             3%] [Cov:==================>                54%][Progress:>                             3%] [Cov:==================>                54%][Progress:>                             3%] [Cov:=====================>             60%][Progress:=>                            4%] [Cov:=====================>             60%][Progress:=>                            4%] [Cov:=====================>             60%][Progress:=>                            4%] [Cov:=====================>             61%][Progress:=>                            4%] [Cov:=====================>             61%][Progress:=>                            4%] [Cov:=====================>             61%][Progress:=>                            4%] [Cov:=====================>             61%][Progress:=>                            4%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            64%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           7%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           8%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:==>                           9%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          10%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          11%] [Cov:======================>            65%][Progress:===>                          12%] [Cov:======================>            65%][Progress:===>                          12%] [Cov:======================>            65%][Progress:===>                          12%] [Cov:======================>            65%][Progress:===>                          12%] [Cov:======================>            65%][Progress:===>                          12%] [Cov:======================>            65%][Progress:===>                          12%] [Cov:======================>            65%][Progress:===>                          12%] [Cov:======================>            65%][Progress:===>                          13%] [Cov:======================>            65%][Progress:===>                          13%] [Cov:======================>            65%][Progress:===>                          13%] [Cov:======================>            65%][Progress:===>                          13%] [Cov:======================>            65%][Progress:===>                          13%] [Cov:======================>            65%][Progress:===>                          13%] [Cov:======================>            65%][Progress:===>                          13%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         14%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         15%] [Cov:======================>            65%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:====>                         16%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        17%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        18%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:=====>                        19%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       20%] [Cov:=======================>           66%][Progress:======>                       21%] [Cov:=======================>           66%][Progress:======>                       21%] [Cov:=======================>           66%][Progress:======>                       21%] [Cov:=======================>           66%][Progress:======>                       21%] [Cov:=======================>           66%][Progress:======>                       21%] [Cov:=======================>           66%][Progress:======>                       21%] [Cov:=======================>           66%][Progress:======>                       22%] [Cov:=======================>           66%][Progress:======>                       22%] [Cov:=======================>           66%][Progress:======>                       22%] [Cov:=======================>           66%][Progress:======>                       22%] [Cov:=======================>           66%][Progress:======>                       22%] [Cov:=======================>           66%][Progress:======>                       22%] [Cov:=======================>           66%][Progress:======>                       23%] [Cov:=======================>           66%][Progress:======>                       23%] [Cov:=======================>           66%][Progress:======>                       23%] [Cov:=======================>           66%][Progress:======>                       23%] [Cov:=======================>           66%][Progress:======>                       23%] [Cov:=======================>           66%][Progress:======>                       23%] [Cov:=======================>           66%][Progress:======>                       23%] [Cov:=======================>           66%][Progress:======>                       23%] [Cov:=======================>           66%][Progress:=======>                      24%] [Cov:=======================>           66%][Progress:=======>                      24%] [Cov:=======================>           66%][Progress:=======>                      24%] [Cov:=======================>           66%][Progress:=======>                      24%] [Cov:=======================>           66%][Progress:=======>                      24%] [Cov:=======================>           66%][Progress:=======>                      24%] [Cov:=======================>           66%][Progress:=======>                      24%] [Cov:=======================>           66%][Progress:=======>                      24%] [Cov:=======================>           66%][Progress:=======>                      24%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      25%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           66%][Progress:=======>                      26%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     27%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     28%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:========>                     29%] [Cov:=======================>           66%][Progress:=========>                    30%] [Cov:=======================>           66%][Progress:=========>                    30%] [Cov:=======================>           66%][Progress:=========>                    30%] [Cov:=======================>           66%][Progress:=========>                    30%] [Cov:=======================>           66%][Progress:=========>                    30%] [Cov:=======================>           66%][Progress:=========>                    30%] [Cov:=======================>           66%][Progress:=========>                    30%] [Cov:=======================>           66%][Progress:=========>                    30%] [Cov:=======================>           66%][Progress:=========>                    30%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    31%] [Cov:=======================>           66%][Progress:=========>                    32%] [Cov:=======================>           66%][Progress:=========>                    32%] [Cov:=======================>           66%][Progress:=========>                    32%] [Cov:=======================>           66%][Progress:=========>                    32%] [Cov:=======================>           66%][Progress:=========>                    32%] [Cov:=======================>           66%][Progress:=========>                    32%] [Cov:=======================>           66%][Progress:=========>                    32%] [Cov:=======================>           66%][Progress:=========>                    32%] [Cov:=======================>           66%][Progress:=========>                    32%] [Cov:=======================>           66%][Progress:=========>                    32%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:=========>                    33%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   34%] [Cov:=======================>           66%][Progress:==========>                   35%] [Cov:=======================>           66%][Progress:==========>                   35%] [Cov:=======================>           66%][Progress:==========>                   35%] [Cov:=======================>           66%][Progress:==========>                   35%] [Cov:=======================>           66%][Progress:==========>                   35%] [Cov:=======================>           66%][Progress:==========>                   35%] [Cov:=======================>           66%][Progress:==========>                   35%] [Cov:=======================>           66%][Progress:==========>                   35%] [Cov:=======================>           66%][Progress:==========>                   35%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           66%][Progress:==========>                   36%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  37%] [Cov:=======================>           67%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:===========>                  38%] [Cov:=======================>           67%][Progress:===========>                  39%] [Cov:=======================>           67%][Progress:===========>                  39%] [Cov:=======================>           67%][Progress:===========>                  39%] [Cov:=======================>           67%][Progress:===========>                  39%] [Cov:=======================>           67%][Progress:===========>                  39%] [Cov:=======================>           67%][Progress:===========>                  39%] [Cov:=======================>           67%][Progress:===========>                  39%] [Cov:=======================>           67%][Progress:===========>                  39%] [Cov:=======================>           67%][Progress:===========>                  39%] [Cov:=======================>           67%][Progress:===========>                  39%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=======================>           67%][Progress:============>                 40%] [Cov:=======================>           67%][Progress:============>                 41%] [Cov:=======================>           67%][Progress:============>                 41%] [Cov:=======================>           67%][Progress:============>                 41%] [Cov:=======================>           67%][Progress:============>                 41%] [Cov:=======================>           67%][Progress:============>                 41%] [Cov:=======================>           67%][Progress:============>                 41%] [Cov:=======================>           67%][Progress:============>                 41%] [Cov:=======================>           67%][Progress:============>                 41%] [Cov:=======================>           67%][Progress:============>                 42%] [Cov:=======================>           67%][Progress:============>                 42%] [Cov:=======================>           67%][Progress:============>                 42%] [Cov:=======================>           67%][Progress:============>                 42%] [Cov:=======================>           67%][Progress:============>                 42%] [Cov:=======================>           67%][Progress:============>                 42%] [Cov:========================>          71%][Progress:============>                 42%] [Cov:========================>          71%][Progress:============>                 42%] [Cov:========================>          71%][Progress:============>                 43%] [Cov:========================>          71%][Progress:============>                 43%] [Cov:========================>          71%][Progress:============>                 43%] [Cov:========================>          71%][Progress:============>                 43%] [Cov:========================>          71%][Progress:============>                 43%] [Cov:========================>          71%][Progress:============>                 43%] [Cov:========================>          71%][Progress:============>                 43%] [Cov:========================>          71%][Progress:============>                 43%] [Cov:========================>          71%][Progress:============>                 43%] [Cov:========================>          71%][Progress:============>                 43%] [Cov:========================>          71%][Progress:=============>                44%] [Cov:========================>          71%][Progress:=============>                44%] [Cov:========================>          71%][Progress:=============>                44%] [Cov:========================>          71%][Progress:=============>                44%] [Cov:========================>          71%][Progress:=============>                44%] [Cov:========================>          71%][Progress:=============>                44%] [Cov:========================>          71%][Progress:=============>                44%] [Cov:========================>          71%][Progress:=============>                44%] [Cov:========================>          71%][Progress:=============>                44%] [Cov:========================>          71%][Progress:=============>                44%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                45%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:=============>                46%] [Cov:========================>          71%][Progress:==============>               47%] [Cov:========================>          71%][Progress:==============>               47%] [Cov:========================>          71%][Progress:==============>               47%] [Cov:========================>          71%][Progress:==============>               47%] [Cov:========================>          71%][Progress:==============>               47%] [Cov:========================>          71%][Progress:==============>               47%] [Cov:========================>          71%][Progress:==============>               47%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               48%] [Cov:========================>          71%][Progress:==============>               49%] [Cov:========================>          71%][Progress:==============>               49%] [Cov:========================>          71%][Progress:==============>               49%] [Cov:========================>          71%][Progress:==============>               49%] [Cov:========================>          71%][Progress:==============>               49%] [Cov:========================>          71%][Progress:==============>               49%] [Cov:========================>          71%][Progress:==============>               49%] [Cov:========================>          71%][Progress:==============>               49%] [Cov:========================>          71%][Progress:==============>               49%] [Cov:========================>          71%][Progress:===============>              50%] [Cov:========================>          71%][Progress:===============>              50%] [Cov:========================>          71%][Progress:===============>              50%] [Cov:========================>          71%][Progress:===============>              50%] [Cov:========================>          71%][Progress:===============>              50%] [Cov:========================>          71%][Progress:===============>              50%] [Cov:========================>          71%][Progress:===============>              50%] [Cov:========================>          71%][Progress:===============>              50%] [Cov:========================>          71%][Progress:===============>              50%] [Cov:========================>          71%][Progress:===============>              51%] [Cov:========================>          71%][Progress:===============>              51%] [Cov:========================>          71%][Progress:===============>              51%] [Cov:========================>          71%][Progress:===============>              51%] [Cov:========================>          71%][Progress:===============>              51%] [Cov:========================>          71%][Progress:===============>              51%] [Cov:========================>          71%][Progress:===============>              51%] [Cov:========================>          71%][Progress:===============>              52%] [Cov:========================>          71%][Progress:===============>              52%] [Cov:========================>          71%][Progress:===============>              52%] [Cov:========================>          71%][Progress:===============>              52%] [Cov:========================>          71%][Progress:===============>              52%] [Cov:========================>          71%][Progress:===============>              52%] [Cov:========================>          71%][Progress:===============>              53%] [Cov:========================>          71%][Progress:===============>              53%] [Cov:========================>          71%][Progress:===============>              53%] [Cov:========================>          71%][Progress:===============>              53%] [Cov:========================>          71%][Progress:===============>              53%] [Cov:========================>          71%][Progress:================>             54%] [Cov:========================>          71%][Progress:================>             54%] [Cov:========================>          71%][Progress:================>             54%] [Cov:========================>          71%][Progress:================>             54%] [Cov:========================>          71%][Progress:================>             54%] [Cov:========================>          71%][Progress:================>             54%] [Cov:========================>          71%][Progress:================>             54%] [Cov:========================>          71%][Progress:================>             54%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             55%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:================>             56%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            57%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:========================>          71%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            58%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        75%][Progress:=================>            59%] [Cov:==========================>        76%][Progress:=================>            59%] [Cov:==========================>        76%][Progress:=================>            59%] [Cov:==========================>        76%][Progress:=================>            59%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           60%] [Cov:==========================>        76%][Progress:==================>           61%] [Cov:==========================>        76%][Progress:==================>           61%] [Cov:==========================>        76%][Progress:==================>           61%] [Cov:==========================>        76%][Progress:==================>           61%] [Cov:==========================>        76%][Progress:==================>           61%] [Cov:==========================>        76%][Progress:==================>           61%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           62%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:==================>           63%] [Cov:==========================>        76%][Progress:===================>          64%] [Cov:==========================>        76%][Progress:===================>          64%] [Cov:==========================>        76%][Progress:===================>          64%] [Cov:==========================>        76%][Progress:===================>          64%] [Cov:==========================>        76%][Progress:===================>          64%] [Cov:==========================>        76%][Progress:===================>          64%] [Cov:==========================>        76%][Progress:===================>          64%] [Cov:==========================>        76%][Progress:===================>          65%] [Cov:==========================>        76%][Progress:===================>          65%] [Cov:==========================>        76%][Progress:===================>          65%] [Cov:==========================>        76%][Progress:===================>          65%] [Cov:==========================>        76%][Progress:===================>          65%] [Cov:==========================>        76%][Progress:===================>          65%] [Cov:==========================>        76%][Progress:===================>          65%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:===================>          66%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         67%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         68%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:====================>         69%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        70%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        71%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        72%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        76%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:=====================>        73%] [Cov:==========================>        77%][Progress:======================>       74%] [Cov:==========================>        77%][Progress:======================>       74%] [Cov:==========================>        77%][Progress:======================>       74%] [Cov:==========================>        77%][Progress:======================>       74%] [Cov:==========================>        77%][Progress:======================>       74%] [Cov:==========================>        77%][Progress:======================>       74%] [Cov:==========================>        77%][Progress:======================>       74%] [Cov:==========================>        77%][Progress:======================>       75%] [Cov:==========================>        77%][Progress:======================>       75%] [Cov:==========================>        77%][Progress:======================>       75%] [Cov:==========================>        77%][Progress:======================>       75%] [Cov:==========================>        77%][Progress:======================>       75%] [Cov:==========================>        77%][Progress:======================>       75%] [Cov:==========================>        77%][Progress:======================>       75%] [Cov:==========================>        77%][Progress:======================>       75%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:======================>       76%] [Cov:==========================>        77%][Progress:=======================>      77%] [Cov:==========================>        77%][Progress:=======================>      77%] [Cov:==========================>        77%][Progress:=======================>      77%] [Cov:==========================>        77%][Progress:=======================>      77%] [Cov:==========================>        77%][Progress:=======================>      77%] [Cov:==========================>        77%][Progress:=======================>      77%] [Cov:==========================>        77%][Progress:=======================>      77%] [Cov:==========================>        77%][Progress:=======================>      77%] [Cov:==========================>        77%][Progress:=======================>      77%] [Cov:==========================>        77%][Progress:=======================>      77%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      78%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:=======================>      79%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     80%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     81%] [Cov:==========================>        77%][Progress:========================>     82%] [Cov:==========================>        77%][Progress:========================>     82%] [Cov:==========================>        77%][Progress:========================>     82%] [Cov:==========================>        77%][Progress:========================>     82%] [Cov:==========================>        77%][Progress:========================>     82%] [Cov:==========================>        77%][Progress:========================>     82%] [Cov:==========================>        77%][Progress:========================>     82%] [Cov:==========================>        77%][Progress:========================>     82%] [Cov:==========================>        77%][Progress:========================>     82%] [Cov:==========================>        77%][Progress:========================>     82%] [Cov:==========================>        77%][Progress:========================>     83%] [Cov:==========================>        77%][Progress:========================>     83%] [Cov:==========================>        77%][Progress:========================>     83%] [Cov:==========================>        77%][Progress:========================>     83%] [Cov:==========================>        77%][Progress:========================>     83%] [Cov:==========================>        77%][Progress:========================>     83%] [Cov:==========================>        77%][Progress:========================>     83%] [Cov:==========================>        77%][Progress:========================>     83%] [Cov:==========================>        77%][Progress:========================>     83%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    84%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    85%] [Cov:==========================>        77%][Progress:=========================>    86%] [Cov:==========================>        77%][Progress:=========================>    86%] [Cov:==========================>        77%][Progress:=========================>    86%] [Cov:==========================>        77%][Progress:=========================>    86%] [Cov:==========================>        77%][Progress:=========================>    86%] [Cov:==========================>        77%][Progress:=========================>    86%] [Cov:==========================>        77%][Progress:=========================>    86%] [Cov:==========================>        77%][Progress:=========================>    86%] [Cov:==========================>        77%][Progress:=========================>    86%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   87%] [Cov:==========================>        77%][Progress:==========================>   88%] [Cov:==========================>        77%][Progress:==========================>   88%] [Cov:==========================>        77%][Progress:==========================>   88%] [Cov:==========================>        77%][Progress:==========================>   88%] [Cov:==========================>        77%][Progress:==========================>   88%] [Cov:==========================>        77%][Progress:==========================>   88%] [Cov:==========================>        77%][Progress:==========================>   88%] [Cov:==========================>        77%][Progress:==========================>   88%] [Cov:==========================>        77%][Progress:==========================>   88%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:==========================>   89%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  90%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  91%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  92%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:===========================>  93%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 94%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 95%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:============================> 96%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>97%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:==========================>        77%][Progress:=============================>98%] [Cov:===========================>       78%][Progress:=============================>98%] [Cov:===========================>       78%][Progress:=============================>98%] [Cov:===========================>       78%][Progress:=============================>98%] [Cov:===========================>       78%][Progress:=============================>98%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:=============================>99%] [Cov:===========================>       78%][Progress:==============================100%] [Cov:===========================>       78%][Progress:==============================100%] [Cov:===========================>       78%][Progress:==============================100%] [Cov:===========================>       78%][Progress:==============================100%] [Cov:===========================>       78%][Progress:==============================100%] [Cov:===========================>       78%][Progress:==============================100%] [Cov:===========================>       78%][Progress:==============================100%] [Cov:===========================>       78%][Progress:==============================100%] [Cov:===========================>       78%]
* Search finished after 202s and 923 generations, 418739 statements, best individual has fitness: 102.0
* Generated before the refinement 35 tests with total length 115
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("serialVersionUID")
statement is: getLong(Ljava/lang/String;)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long _long = jCLO.getLong("serialVersionUID")
test data is: JCLO jCLO = new JCLO("serialVersionUID");
jCLO.getLong("serialVersionUID");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private long serialVersionUID;

    public  JCLO(String serialVersionUID) {
        this.serialVersionUID = Long.parseLong(serialVersionUID);
    }

    public long getSerialVersionUID() {
        return serialVersionUID;
    }
}
statement is: this.serialVersionUID = Long.parseLong(serialVersionUID), class spoon.support.reflect.code.CtAssignmentImpl
statement is: return serialVersionUID, class spoon.support.reflect.code.CtReturnImpl
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", "valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv")
statement is: getInts(Ljava/lang/String;)[I type is: class org.evosuite.testcase.statements.MethodStatement return type class [I
statement code is: int[] ints = jCLO.getInts("jLF2bs#8Zu$q(sy:OzB")
test data is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", "valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv");
jCLO.getInts("jLF2bs#8Zu$q(sy:OzB");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", "valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv");
        jCLO.getInts("jLF2bs#8Zu$q(sy:OzB");
    }
}
statement is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", "valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getInts("jLF2bs#8Zu$q(sy:OzB"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getInts("jLF2bs#8Zu$q(sy:OzB") target is: jCLO method is: getInts(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: getInts(Ljava/lang/String;)[I
TestCase is: String string = "valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv";
String string = "valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv";
JCLO jCLO = new JCLO(string, string);
String string = "jLF2bs#8Zu$q(sy:OzB";
((JCLO) string).getInts(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("9m\"%-~aZeVgA")
statement is: getString(Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = jCLO.getString("9m\"%-~aZeVgA")
test data is: JCLO jCLO = new JCLO("9m\"%-~aZeVgA");
jCLO.getString("9m\"%-~aZeVgA");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
        jCLO.getString("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
    }
}
statement is: JCLO jCLO = new JCLO("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getString("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getString("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") target is: jCLO method is: getString(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getString(Ljava/lang/String;)Ljava/lang/String;
TestCase is: String string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
JCLO jCLO = new JCLO(string);
String string = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
((JCLO) string).getString(string);

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte)2)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0)
statement is: getInt(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int _int = jCLO.getInt("SIZE")
test data is: Byte byte = new Byte((byte)2);
JCLO jCLO = new JCLO(byte);
jCLO.getInt("SIZE");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Byte = new Byte(((byte) (10)));
        JCLO jCLO = new JCLO(byte.class);
        jCLO.getInt("SIZE");
    }
}
statement is: Byte = new Byte(((byte) (10))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO(byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V
statement is: jCLO.getInt("SIZE"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getInt("SIZE") target is: jCLO method is: getInt(java.lang.String)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("@{-Gzyu/`-4*_I`22_Y")
statement is: getShorts(Ljava/lang/String;)[S type is: class org.evosuite.testcase.statements.MethodStatement return type class [S
statement code is: short[] shorts = jCLO.getShorts("@{-Gzyu/`-4*_I`22_Y")
test data is: JCLO jCLO = new JCLO("@{-Gzyu/`-4*_I`22_Y");
jCLO.getShorts("@{-Gzyu/`-4*_I`22_Y");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("8888-1376");
        jCLO.getShorts("8888-1376");
    }
}
statement is: JCLO jCLO = new JCLO("8888-1376"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getShorts("8888-1376"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getShorts("8888-1376") target is: jCLO method is: getShorts(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getShorts(Ljava/lang/String;)[S
TestCase is: String string = "8888-1376";
JCLO jCLO = new JCLO(string);
String string = "8888-1376";
((JCLO) string).getShorts(string);

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte)25)
statement is: org.evosuite.testcase.statements.ArrayStatement@ea97a048 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.String;
statement code is: String[][] stringArray = new String[2][1]
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;[[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------", arg1, arg2)
statement is: getByte(Ljava/lang/String;)B type is: class org.evosuite.testcase.statements.MethodStatement return type byte
statement code is: byte _byte = jCLO.getByte("")
test data is: Byte byte = new Byte((byte)25);
String[][] stringArray = new String[2][1];
JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------", byte, stringArray);
jCLO.getByte("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Byte = new Byte(((byte) (25)));
        String[][] stringArray = new String[2][1];
        JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------", byte.class, stringArray);
        jCLO.getByte("");
    }
}
statement is: Byte = new Byte(((byte) (25))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: String[][] stringArray = new String[2][1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2, 1] Ct is: String[][] stringArray = new String[2][1] isAssignment: false Array: new String[2][1] Elements: []
lengths: [2, 1] [2, 1]
Their type are: class [[Ljava.lang.String; String[][]
statement is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------", byte.class, stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getByte(""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getByte("") target is: jCLO method is: getByte(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;[[Ljava/lang/String;)V callee: VariableReference: Statement 2, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: getByte(Ljava/lang/String;)B
TestCase is: String[][] stringArray = new String[2][1];
String[][] stringArray = "valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------";
JCLO jCLO = new JCLO(arg0, stringArray, stringArray);
String string = "";
jCLO.getByte(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("%[rm#:?C")
statement is: getChars(Ljava/lang/String;)[C type is: class org.evosuite.testcase.statements.MethodStatement return type class [C
statement code is: char[] chars = jCLO.getChars("%[rm#:?C")
test data is: JCLO jCLO = new JCLO("%[rm#:?C");
jCLO.getChars("%[rm#:?C");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("Hello World!");
        jCLO.getChars("Hello World!");// Expected result: ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']

        JCLO jCLO = new JCLO("12345");
        jCLO.getChars("12345");// Expected result: ['1', '2', '3', '4', '5']

        JCLO jCLO = new JCLO("Hello World!  ");
        jCLO.getChars("Hello World!  ");// Expected result: ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', ' ', ' ']

        JCLO jCLO = new JCLO("\t\n\b\f\r");
        jCLO.getChars("\t\n\b\f\r");// Expected result: ['\t', '\n', '\b', '\f', '\r'] }}

    }
}
statement is: JCLO jCLO = new JCLO("Hello World!"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getChars("Hello World!")// Expected result: ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getChars("Hello World!")// Expected result: ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']
 target is: jCLO method is: getChars(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getChars(Ljava/lang/String;)[C
statement is: JCLO jCLO = new JCLO("12345"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getChars("12345")// Expected result: ['1', '2', '3', '4', '5']
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getChars("12345")// Expected result: ['1', '2', '3', '4', '5']
 target is: jCLO method is: getChars(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 5
Matched Method is: getChars(Ljava/lang/String;)[C
statement is: JCLO jCLO = new JCLO("Hello World!  "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getChars("Hello World!  ")// Expected result: ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', ' ', ' ']
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getChars("Hello World!  ")// Expected result: ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', ' ', ' ']
 target is: jCLO method is: getChars(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 9
Matched Method is: getChars(Ljava/lang/String;)[C
statement is: JCLO jCLO = new JCLO("\t\n\b\f\r"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getChars("\t\n\b\f\r")// Expected result: ['\t', '\n', '\b', '\f', '\r'] }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getChars("\t\n\b\f\r")// Expected result: ['\t', '\n', '\b', '\f', '\r'] }}
 target is: jCLO method is: getChars(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 13
Matched Method is: getChars(Ljava/lang/String;)[C
TestCase is: String string = "Hello World!";
JCLO jCLO = new JCLO(string);
String string = "Hello World!";
((JCLO) string).getChars(string);
String string = "12345";
JCLO jCLO = new JCLO(string);
String string = "12345";
((JCLO) string).getChars(string);
String string = "Hello World!  ";
JCLO jCLO = new JCLO(string);
String string = "Hello World!  ";
((JCLO) string).getChars(string);
String string = "\t\n\b\f\r";
JCLO jCLO = new JCLO(string);
String string = "\t\n\b\f\r";
((JCLO) string).getChars(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("")
statement is: getDoubles(Ljava/lang/String;)[D type is: class org.evosuite.testcase.statements.MethodStatement return type class [D
statement code is: double[] doubles = jCLO.getDoubles("")
test data is: JCLO jCLO = new JCLO("");
jCLO.getDoubles("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO(10);
        jCLO.getDoubles(5.2, 7.3, 8.4, 9.5, 11.6);
    }
}
statement is: JCLO jCLO = new JCLO(10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getDoubles(5.2, 7.3, 8.4, 9.5, 11.6), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getDoubles(5.2, 7.3, 8.4, 9.5, 11.6) target is: jCLO method is: getDoubles(double,double,double,double,double)
TestCase is: int _int = 10;
JCLO jCLO = new JCLO(_int);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("6>In`0K3^N>_G")
statement is: getDouble(Ljava/lang/String;)D type is: class org.evosuite.testcase.statements.MethodStatement return type double
statement code is: double _double = jCLO.getDouble("6>In`0K3^N>_G")
test data is: JCLO jCLO = new JCLO("6>In`0K3^N>_G");
jCLO.getDouble("6>In`0K3^N>_G");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("6>In`0K3^N>_G");
        jCLO.getDouble("6>In`0K3^N>_G");
        // Improved test data:
        JCLO jCLO = new JCLO("123456789.0123456789");
        jCLO.getDouble("123456789.0123456789");
    }
}
statement is: JCLO jCLO = new JCLO("6>In`0K3^N>_G"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getDouble("6>In`0K3^N>_G"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getDouble("6>In`0K3^N>_G") target is: jCLO method is: getDouble(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getDouble(Ljava/lang/String;)D
statement is: // Improved test data:
JCLO jCLO = new JCLO("123456789.0123456789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getDouble("123456789.0123456789"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getDouble("123456789.0123456789") target is: jCLO method is: getDouble(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 5
Matched Method is: getDouble(Ljava/lang/String;)D
TestCase is: String string = "6>In`0K3^N>_G";
JCLO jCLO = new JCLO(string);
String string = "6>In`0K3^N>_G";
((JCLO) string).getDouble(string);
String string = "123456789.0123456789";
JCLO jCLO = new JCLO(string);
String string = "123456789.0123456789";
((JCLO) string).getDouble(string);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("%4xYiZ[/W", arg1)
statement is: getFloat(Ljava/lang/String;)F type is: class org.evosuite.testcase.statements.MethodStatement return type float
statement code is: float _float = jCLO.getFloat(";sfkVDbrJIO&s")
test data is: Object object = new Object();
JCLO jCLO = new JCLO("%4xYiZ[/W", object);
jCLO.getFloat(";sfkVDbrJIO&s");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO("ABC123", object);
        jCLO.getFloat("7890");
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("ABC123", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getFloat("7890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getFloat("7890") target is: jCLO method is: getFloat(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: getFloat(Ljava/lang/String;)F
TestCase is: Object object = new Object();
String string = "ABC123";
JCLO jCLO = new JCLO(string, object);
String string = "7890";
((JCLO) string).getFloat(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("wjY9.p)`L")
statement is: getStrings(Ljava/lang/String;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] strings = jCLO.getStrings("wjY9.p)`L")
test data is: JCLO jCLO = new JCLO("wjY9.p)`L");
jCLO.getStrings("wjY9.p)`L");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        private String name;
        this.name = name;
    }

    public String getStrings(String input) {
        return (input + " ") + name;
    }
}
statement is: return (input + " ") + name, class spoon.support.reflect.code.CtReturnImpl
statement is: private String name, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: this.name = name, class spoon.support.reflect.code.CtAssignmentImpl
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("@{-Gzyu/`*_I`2V_Y")
statement is: getFloats(Ljava/lang/String;)[F type is: class org.evosuite.testcase.statements.MethodStatement return type class [F
statement code is: float[] floats = jCLO.getFloats("@{-Gzyu/`*_I`2V_Y")
test data is: JCLO jCLO = new JCLO("@{-Gzyu/`*_I`2V_Y");
jCLO.getFloats("@{-Gzyu/`*_I`2V_Y");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("1234567890");
        jCLO.getFloats("1234567890");
    }
}
statement is: JCLO jCLO = new JCLO("1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getFloats("1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getFloats("1234567890") target is: jCLO method is: getFloats(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getFloats(Ljava/lang/String;)[F
TestCase is: String string = "1234567890";
JCLO jCLO = new JCLO(string);
String string = "1234567890";
((JCLO) string).getFloats(string);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("serialVersionUID")
statement is: getShort(Ljava/lang/String;)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short _short = jCLO.getShort("")
test data is: JCLO jCLO = new JCLO("serialVersionUID");
jCLO.getShort("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("serialVersionUID");
        jCLO.getShort("1234567890abcdef");
    }
}
statement is: JCLO jCLO = new JCLO("serialVersionUID"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getShort("1234567890abcdef"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getShort("1234567890abcdef") target is: jCLO method is: getShort(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getShort(Ljava/lang/String;)S
TestCase is: String string = "serialVersionUID";
JCLO jCLO = new JCLO(string);
String string = "1234567890abcdef";
((JCLO) string).getShort(string);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("%4xYiZ[/W", arg1)
statement is: getLongs(Ljava/lang/String;)[J type is: class org.evosuite.testcase.statements.MethodStatement return type class [J
statement code is: long[] longs = jCLO.getLongs("")
test data is: Object object = new Object();
JCLO jCLO = new JCLO("%4xYiZ[/W", object);
jCLO.getLongs("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO("This is a sample string", object);
        jCLO.getLongs("");
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("This is a sample string", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getLongs(""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getLongs("") target is: jCLO method is: getLongs(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: getLongs(Ljava/lang/String;)[J
TestCase is: Object object = new Object();
String string = "This is a sample string";
JCLO jCLO = new JCLO(string, object);
String string = "";
((JCLO) string).getLongs(string);

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte)81)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", arg1)
statement is: getBytes(Ljava/lang/String;)[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] bytes = jCLO.getBytes("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv")
test data is: Byte byte = new Byte((byte)81);
JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", byte);
jCLO.getBytes("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Byte = new Byte(((byte) (81)));
        JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", byte.class);
        jCLO.getBytes("valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv");
    }
}
statement is: Byte = new Byte(((byte) (81))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.getBytes("valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.getBytes("valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv") target is: jCLO method is: getBytes(java.lang.String)
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: getBytes(Ljava/lang/String;)[B
TestCase is: String string = "valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv";
JCLO jCLO = new JCLO(string, string);
String string = "valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv";
jCLO.getBytes(string);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("%4xYiZ[/W", arg1)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("", arg1)
statement is: usage()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String usage = jCLO.usage()
test data is: Object object = new Object();
JCLO jCLO = new JCLO("%4xYiZ[/W", object);
JCLO jCLO = new JCLO("", jCLO);
jCLO.usage();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO("hello world", object);
        JCLO jCLO = new JCLO("The quick brown fox jumps over the lazy dog.", jCLO);
        jCLO.usage();
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("hello world", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("The quick brown fox jumps over the lazy dog.", jCLO), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.usage(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.usage() target is: jCLO method is: usage()
TestCase is: Object object = new Object();
String string = "hello world";
JCLO jCLO = new JCLO(string, object);
String string = "The quick brown fox jumps over the lazy dog.";
JCLO jCLO = new JCLO(string, jCLO);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("%4xYiZ[/W", arg1)
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = jCLO.toString()
test data is: Object object = new Object();
JCLO jCLO = new JCLO("%4xYiZ[/W", object);
jCLO.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO("hello world", object);
        jCLO.toString();
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("hello world", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.toString(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.toString() target is: jCLO method is: toString()
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: toString()Ljava/lang/String;
TestCase is: Object object = new Object();
String string = "hello world";
JCLO jCLO = new JCLO(string, object);
string.toString();

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("%4xYiZ[/W", arg1)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("", arg1)
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = jCLO.toString()
test data is: Object object = new Object();
JCLO jCLO = new JCLO("%4xYiZ[/W", object);
JCLO jCLO = new JCLO("", jCLO);
jCLO.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        JCLO jCLO = new JCLO("Random String", object);
        JCLO jCLO = new JCLO("Another Random String", jCLO);
        jCLO.toString();
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("Random String", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: JCLO jCLO = new JCLO("Another Random String", jCLO), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.toString(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.toString() target is: jCLO method is: toString()
TestCase is: Object object = new Object();
String string = "Random String";
JCLO jCLO = new JCLO(string, object);
String string = "Another Random String";
JCLO jCLO = new JCLO(string, jCLO);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("serialVersionUID")
statement is: usage()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String usage = jCLO.usage()
test data is: JCLO jCLO = new JCLO("serialVersionUID");
jCLO.usage();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private String serialVersionUID;

    public  JCLO(String serialVersionUID) {
        this.serialVersionUID = serialVersionUID;
    }

    public void usage() {
        System.out.println("Usage: java JCLO <serial-version-uid>");
    }
}
statement is: this.serialVersionUID = serialVersionUID, class spoon.support.reflect.code.CtAssignmentImpl
statement is: System.out.println("Usage: java JCLO <serial-version-uid>"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("Usage: java JCLO <serial-version-uid>") target is: System.out method is: println(java.lang.String)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------", "valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------")
statement is: usage()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String usage = jCLO.usage()
test data is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------", "valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------");
jCLO.usage();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("This is a sample input string with a mix of uppercase and lowercase letters, numbers, and special characters.!@#$%^&*()_+-={}[]|:;'<>?,./~`", "This is another sample input string with a mix of uppercase and lowercase letters, numbers, and special characters.!@#$%^&*()_+-={}[]|:;'<>?,./~`");
        jCLO.usage();
    }
}
statement is: JCLO jCLO = new JCLO("This is a sample input string with a mix of uppercase and lowercase letters, numbers, and special characters.!@#$%^&*()_+-={}[]|:;'<>?,./~`", "This is another sample input string with a mix of uppercase and lowercase letters, numbers, and special characters.!@#$%^&*()_+-={}[]|:;'<>?,./~`"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.usage(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.usage() target is: jCLO method is: usage()
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: usage()Ljava/lang/String;
TestCase is: String string = "This is a sample input string with a mix of uppercase and lowercase letters, numbers, and special characters.!@#$%^&*()_+-={}[]|:;'<>?,./~`";
String string = "This is another sample input string with a mix of uppercase and lowercase letters, numbers, and special characters.!@#$%^&*()_+-={}[]|:;'<>?,./~`";
JCLO jCLO = new JCLO(string, string);
((JCLO) string).usage();

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("- = ")
statement is: org.evosuite.testcase.statements.ArrayStatement@696107e5 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f0cc111b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "- = "
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(arg0)
test data is: JCLO jCLO = new JCLO("- = ");
String[] stringArray = new String[1];
stringArray[0] = "- = ";
jCLO.parse(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("- = ");
        String[] stringArray = new String[1];
        stringArray[0] = "A complex scenario with multiple inputs and outputs";
        jCLO.parse(stringArray);
    }
}
statement is: JCLO jCLO = new JCLO("- = "), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A complex scenario with multiple inputs and outputs", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A complex scenario with multiple inputs and outputs" Ct is: stringArray[0] = "A complex scenario with multiple inputs and outputs"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@22674561
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: parse([Ljava/lang/String;)V
* this is vulnerable: String string = "A complex scenario with multiple inputs and outputs"
TestCase is: String string = "- = ";
JCLO jCLO = new JCLO(string);
String[] stringArray = new String[1];
String string = "A complex scenario with multiple inputs and outputs";
((JCLO) string).parse(stringArray);

statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: org.evosuite.testcase.statements.ArrayStatement@82857eea type is: class org.evosuite.testcase.statements.ArrayStatement return type class [[Ljava.lang.String;
statement code is: String[][] stringArray = new String[4][1]
statement is: org.evosuite.testcase.statements.ArrayStatement@a6f264b7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c8ad32ec type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@d8ff1372 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.String;
statement code is: stringArray[0] = stringArray
statement is: org.evosuite.testcase.statements.AssignmentStatement@5663bf50 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.String;
statement code is: stringArray[1] = stringArray
statement is: org.evosuite.testcase.statements.ArrayStatement@898f8259 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@34939540 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@91eeff06 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Ljava.lang.String;
statement code is: stringArray[2] = stringArray
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;[[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO(arg0, arg1)
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(arg0)
test data is: Object object = new Object();
String[][] stringArray = new String[4][1];
String[] stringArray = new String[4];
stringArray[0] = "-";
stringArray[0] = stringArray;
stringArray[1] = stringArray;
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[2] = stringArray;
JCLO jCLO = new JCLO(object, stringArray);
jCLO.parse(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        String[][] stringArray = new String[4][1];
        stringArray[0][0] = "This is a sample string";
        stringArray[1][0] = "Another sample string";
        stringArray[2][0] = "A third sample string";
        stringArray[3][0] = "A fourth sample string";
        String[] stringArray = new String[8];
        stringArray[0] = "";
        stringArray[1] = "This is a sample string with multiple words";
        stringArray[2] = "Another sample string with multiple words";
        stringArray[3] = "A third sample string with multiple words";
        stringArray[4] = "A fourth sample string with multiple words";
        stringArray[5] = "This is a sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?";
        stringArray[6] = "Another sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?";
        stringArray[7] = "A third sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?";
        JCLO jCLO = new JCLO(object, stringArray);
        jCLO.parse(stringArray);
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[][] stringArray = new String[4][1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4, 1] Ct is: String[][] stringArray = new String[4][1] isAssignment: false Array: new String[4][1] Elements: []
lengths: [4, 1] [4, 1]
Their type are: class [[Ljava.lang.String; String[][]
statement is: stringArray[0][0] = "This is a sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample string" Ct is: stringArray[0][0] = "This is a sample string"
target : stringArray[0] class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1][0] = "Another sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Another sample string" Ct is: stringArray[1][0] = "Another sample string"
target : stringArray[1] class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2][0] = "A third sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A third sample string" Ct is: stringArray[2][0] = "A third sample string"
target : stringArray[2] class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3][0] = "A fourth sample string", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3][0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A fourth sample string" Ct is: stringArray[3][0] = "A fourth sample string"
target : stringArray[3] class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[][] stringArray = new String[4][1] isAssignment: false Array: new String[8] Elements: []
lengths: [4, 1] [8]
Dimension: [8] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[8] Elements: []
lengths: [4] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"" Ct is: stringArray[0] = ""
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "This is a sample string with multiple words", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample string with multiple words" Ct is: stringArray[1] = "This is a sample string with multiple words"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Another sample string with multiple words", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Another sample string with multiple words" Ct is: stringArray[2] = "Another sample string with multiple words"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[3] = "A third sample string with multiple words", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A third sample string with multiple words" Ct is: stringArray[3] = "A third sample string with multiple words"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[4] = "A fourth sample string with multiple words", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A fourth sample string with multiple words" Ct is: stringArray[4] = "A fourth sample string with multiple words"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[5] = "This is a sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?" Ct is: stringArray[5] = "This is a sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[6] = "Another sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Another sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?" Ct is: stringArray[6] = "Another sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[7] = "A third sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A third sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?" Ct is: stringArray[7] = "A third sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;\':\"<>,./?"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: JCLO jCLO = new JCLO(object, stringArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/Object;[[Ljava/lang/String;)V callee: VariableReference: Statement 9, type edu.mscd.cs.jclo.JCLOindex is: 19
Matched Method is: parse([Ljava/lang/String;)V
TestCase is: Object object = new Object();
String[][] stringArray = new String[4][1];
String[] stringArray = new String[4];
String string = "";
stringArray[0] = string;
String string = "This is a sample string with multiple words";
stringArray[0] = string;
String string = "Another sample string with multiple words";
stringArray[0] = string;
String string = "A third sample string with multiple words";
stringArray[0] = string;
String string = "A fourth sample string with multiple words";
stringArray[0] = string;
String string = "This is a sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;':\"<>,./?";
stringArray[0] = string;
String string = "Another sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;':\"<>,./?";
stringArray[0] = string;
String string = "A third sample string with numbers and special characters!@#$%^&*()_+-=[]{}|;':\"<>,./?";
stringArray[0] = string;
JCLO jCLO = new JCLO(object, (String[][]) stringArray);
((JCLO) string).parse(stringArray);

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte) (-5))
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("BYTES", arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@b713771c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@bf8310a2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "-"
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(arg0)
test data is: Byte byte = new Byte((byte) (-5));
JCLO jCLO = new JCLO("BYTES", byte);
String[] stringArray = new String[2];
stringArray[0] = "-";
jCLO.parse(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Byte = new Byte(((byte) (127)));
        JCLO jCLO = new JCLO("BYTES", byte.class);
        String[] stringArray = new String[2];
        stringArray[0] = "a";
        jCLO.parse(stringArray);
    }
}
statement is: Byte = new Byte(((byte) (127))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO("BYTES", byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "a", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"a" Ct is: stringArray[0] = "a"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: parse([Ljava/lang/String;)V
TestCase is: String string = "BYTES";
JCLO jCLO = new JCLO(string, string);
String[] stringArray = new String[2];
String string = "a";
stringArray[0] = string;
jCLO.parse(stringArray);

statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", "valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv")
statement is: org.evosuite.testcase.statements.ArrayStatement@f1675a1f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@9b9ed45e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "-0"
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(arg0)
test data is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", "valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv");
String[] stringArray = new String[2];
stringArray[0] = "-0";
jCLO.parse(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", "valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv");
        String[] stringArray = new String[2];
        stringArray[0] = "1";
        jCLO.parse(stringArray);
    }
}
statement is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", "valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"1" Ct is: stringArray[0] = "1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@f334b812
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 0, type edu.mscd.cs.jclo.JCLOindex is: 2
Matched Method is: parse([Ljava/lang/String;)V
* this is vulnerable: String string = "1"
TestCase is: String string = "valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv";
String string = "valuellllllllllvllllllllvlvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv";
JCLO jCLO = new JCLO(string, string);
String[] stringArray = new String[2];
String string = "1";
((JCLO) string).parse(stringArray);

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte)81)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("TYPE", arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@a2f9ca50 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: org.evosuite.testcase.statements.AssignmentStatement@327717ac type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f16be270 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "No such option: \""
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(arg0)
test data is: Byte byte = new Byte((byte)81);
JCLO jCLO = new JCLO("TYPE", byte);
String[] stringArray = new String[5];
stringArray[0] = "-";
stringArray[2] = "No such option: \"";
jCLO.parse(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Byte = new Byte(((byte) (65)));
        JCLO jCLO = new JCLO("TYPE", byte.class);
        String[] stringArray = new String[5];
        stringArray[0] = "--help";
        stringArray[2] = "-option";
        jCLO.parse(stringArray);
    }
}
statement is: Byte = new Byte(((byte) (65))), class spoon.support.reflect.code.CtAssignmentImpl
statement is: JCLO jCLO = new JCLO("TYPE", byte.class), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "--help", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"--help" Ct is: stringArray[0] = "--help"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "-option", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"-option" Ct is: stringArray[2] = "-option"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: jCLO.parse(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: jCLO.parse(stringArray) target is: jCLO method is: parse(java.lang.String[])
source statement: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type edu.mscd.cs.jclo.JCLOindex is: 1
Matched Method is: parse([Ljava/lang/String;)V
TestCase is: String string = "TYPE";
JCLO jCLO = new JCLO(string, string);
String[] stringArray = new String[5];
String string = "--help";
stringArray[0] = string;
String string = "-option";
stringArray[2] = string;
jCLO.parse(stringArray);

statement is: java.lang.Byte(B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Byte
statement code is: Byte byte = new Byte((byte)81)
statement is: edu.mscd.cs.jclo.JCLO(Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class edu.mscd.cs.jclo.JCLO
statement code is: JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", arg1)
statement is: org.evosuite.testcase.statements.ArrayStatement@3e0ce787 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@10ba3b7d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "-"
statement is: org.evosuite.testcase.statements.AssignmentStatement@67445019 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "-0"
statement is: parse([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: jCLO.parse(arg0)
test data is: Byte byte = new Byte((byte)81);
JCLO jCLO = new JCLO("valuellllllllllvllllllllvlvvvvvvvvvvv---vv-v-vvvvvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvvvvvvvvvv--vvvvvvvvv--vvvvv-v\"vvvvvvvvvvvvvvv-vvvvvvvvvvvvvvvvv-vvvvvv-vvv-vvvv-v--v----v--vvvvvvvvvvvvvvvvvv-vvvvvvvvv-vvvvvvv-[vvvvvvvvvvvvv--vvvvvv-vvvv-vvvvvvvvvvvvvvv-vvvvvvv-vvvvvvvv-vvvvvvvvvvvvvvvvvvvvvvvvv-vvvvvvvvv--vvvvvvvv-vvvvv--vvv3v---v---v--------------------lv", byte);
String[] stringArray = new String[4];
stringArray[0] = "-";
stringArray[1] = "-0";
jCLO.parse(stringArray);

* Computation finished
