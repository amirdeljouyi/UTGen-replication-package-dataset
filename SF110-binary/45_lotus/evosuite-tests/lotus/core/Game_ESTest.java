/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 09:21:16 GMT 2024
 */

package lotus.core;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import lotus.UI.console.LocalConsoleUserInterface;
import lotus.core.CardCollection;
import lotus.core.Game;
import lotus.core.Player;
import lotus.core.card.BasicLand;
import lotus.core.card.Card;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Game_ESTest extends Game_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGivePriorityToCurrentPlayerThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      // Undeclared exception!
      try { 
        Game.givePriorityToCurrentPlayer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lotus.core.Game", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOtherPlayerReturningNull() throws Throwable  {
      // No Comments were added
      Player otherPlayer = Game.getOtherPlayer((Player) null);
      assertNull(otherPlayer);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPlayingPlayerReturningNonNull() throws Throwable  {
      // rollbacked to evosuite
      LocalConsoleUserInterface arg1 = new LocalConsoleUserInterface();
      CardCollection arg5 = new CardCollection();
      Game.init(arg1, arg1, ">*eT./Vy6TG*H(", "", arg5, arg5);
      Player playingPlayer = Game.getPlayingPlayer();
      assertEquals(20, playingPlayer.life);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPlayingPlayerReturningNull() throws Throwable  {
      // Arrange
      Game game = new Game();
      
      // Act
      Player playingPlayer = game.getPlayingPlayer();
      
      // Assert
      assertNull(playingPlayer);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInitWithNonEmptyList() throws Throwable  {
      // Given: A new instance of LocalConsoleUserInterface and a new instance of CardCollection
      LocalConsoleUserInterface userInterface = new LocalConsoleUserInterface();
      CardCollection collection = new CardCollection();
      
      // When: The BasicLand card is added to the CardCollection
      BasicLand basicLand = new BasicLand();
      collection.add((Card) basicLand);
      
      // Then: The size of the CardCollection should be 1
      assertEquals(1, collection.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOtherPlayerReturningNonNull() throws Throwable  {
      // Given: A LocalConsoleUserInterface and two CardCollections are created
      LocalConsoleUserInterface ui = new LocalConsoleUserInterface();
      CardCollection deck1 = new CardCollection();
      CardCollection deck2 = new CardCollection();
      
      // When: The game is initialized with the LocalConsoleUserInterface, decks, and a game mode
      Game.init(ui, ui, "E", "E", deck1, deck2);
      
      // Then: The other player's life should be 20
      Player otherPlayer = Game.getOtherPlayer((Player) null);
      assertEquals(20, otherPlayer.life);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNonPlayingPlayerReturningNonNull() throws Throwable  {
      // Given: The game is initialized with two players and a card collection
      LocalConsoleUserInterface arg1 = new LocalConsoleUserInterface();
      CardCollection arg5 = new CardCollection();
      Game.init(arg1, arg1, "Jane Doe", "1234567890", arg5, arg5);
      
      // When: A non-playing player is retrieved from the game
      Player nonPlayingPlayer = Game.getNonPlayingPlayer();
      
      // Then: The non-playing player has a life value of 20
      assertEquals(20, nonPlayingPlayer.life);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesGame() throws Throwable  {
      // rollbacked to evosuite
      Game game = new Game();
      assertEquals(0, Game.playingPlayer);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNonPlayingPlayerReturningNull() throws Throwable  {
      // Given: a player who is not playing in the game
      Player nonPlayingPlayer = Game.getNonPlayingPlayer();
      
      // When: we call the getNonPlayingPlayer method
      assertNull(nonPlayingPlayer);
      
      // Then: it should return null, as there is no player who is not playing in the game
  }
}
