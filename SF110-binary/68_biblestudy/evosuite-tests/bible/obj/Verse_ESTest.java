/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 21:30:10 GMT 2024
 */

package bible.obj;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import bible.obj.Book;
import bible.obj.Reference;
import bible.obj.Translation;
import bible.obj.TranslationReference;
import bible.obj.Verse;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Verse_ESTest extends Verse_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetText() throws Throwable  {
      // Create a verse with a negative value
      Verse verse = Verse.New((-1));
      
      // Get the text of the verse
      String text = verse.getText();
      
      // Assert that the text is null
      assertNull(text);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdTaking4Ints() throws Throwable  {
      // No Comments were added
      int GetId = Verse.GetId((-1), 1524, 1414, 1414);
      assertEquals((-1), GetId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTaking3Arguments() throws Throwable  {
      // rollbacked to evosuite
      Translation[] arg0 = new Translation[0];
      Reference arg2 = new Reference(0, 1524, 1524);
      ArrayList Get = Verse.Get(arg0, arg2, arg2);
      assertEquals(0, Get.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTaking3ArgumentsWithNonEmptyArray() throws Throwable  {
      // rollbacked to evosuite
      Translation[] arg0 = new Translation[4];
      // Undeclared exception!
      try { 
        Verse.Get(arg0, (Reference) null, (Reference) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("bible.util.Util", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTaking3ArgumentsWithNull() throws Throwable  {
      // Test that Get() method throws NullPointerException when called with null arguments
      try {
      // Call the Get() method with null arguments
      Verse.Get((Translation[]) null, (Reference) null, (Reference) null);
      
      // Fail if no exception is thrown
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      //
      // Verify that the correct exception is thrown
      //
      verifyException("bible.obj.Verse", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTaking4ArgumentsThrowsNullPointerException() throws Throwable  {
      // rollbacked to evosuite
      Translation[] arg0 = new Translation[1];
      // Undeclared exception!
      try { 
        Verse.Get(arg0, 34, 12, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("bible.obj.Verse", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTaking4Arguments() throws Throwable  {
      // Given a list of translations with no results
      Translation[] arg0 = new Translation[0];
      
      // When we search for a verse using the first letter "A"
      ArrayList Get = Verse.Get(arg0, 1, 1, 1);
      
      // Then the list returned should be empty
      assertEquals(0, Get.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetId() throws Throwable  {
      // Create a new verse with the specified ID
      Verse New = Verse.New(396);
      
      // Call the getId method to retrieve the ID of the verse
      int id = New.getId();
      
      // Assert that the returned value is equal to 0
      assertEquals(0, id);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTranslationReference() throws Throwable  {
      // rollbacked to evosuite
      Verse New = Verse.New(3911);
      TranslationReference translationReference = New.getTranslationReference();
      assertNull(translationReference);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValue() throws Throwable  {
      // rollbacked to evosuite
      Verse New = Verse.New(2982);
      String value = New.getValue();
      assertNull(value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      // Given a verse with an ID of 3911, we expect it to be not null
      Verse New = Verse.New(3911);
      assertNotNull(New);
      
      // When we call toString() on this verse
      String string = New.toString();
      
      // Then we expect the output to be a string representation of the verse,
      // which includes the ID, text, and reference of the verse
      assertEquals("bible.obj.Verse:[0 null null]", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIdTaking11And2IntsThrowsNullPointerException() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      try { 
        Verse.GetId((Translation) null, (Book) null, 5570, 5570);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("bible.obj.Verse", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetReferenceThrowsNullPointerException() throws Throwable  {
      Verse verse = Verse.New(-1);
      try {
      verse.getReference();
      fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      // Verify that the exception is thrown due to an undeclared exception
      assertTrue(e.getMessage() == null);}
  }
}
