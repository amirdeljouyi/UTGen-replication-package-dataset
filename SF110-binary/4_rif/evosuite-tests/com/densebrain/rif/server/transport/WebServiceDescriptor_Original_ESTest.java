/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 06:36:13 GMT 2024
 */

package com.densebrain.rif.server.transport;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.densebrain.rif.server.transport.WebServiceDescriptor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class WebServiceDescriptor_Original_ESTest extends WebServiceDescriptor_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypesNamespaceReturningNull() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, (String) null, (String) null);
      String typesNamespace = webServiceDescriptor.getTypesNamespace();
      assertNull(typesNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningNull() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, (String) null, (String) null);
      String targetNamespace = webServiceDescriptor.getTargetNamespace();
      assertNull(targetNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningEmptyString() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "$", "$");
      webServiceDescriptor.targetNamespace = "";
      webServiceDescriptor.getTargetNamespace();
      assertEquals("", webServiceDescriptor.getTargetNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetServiceClazz() throws Throwable  {
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor((Class) null, "mq]?\"EGDWOi6", (String) null);
      Class serviceClazz = webServiceDescriptor.getServiceClazz();
      assertNull(serviceClazz);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor((Class) null, "nB.Hm7NS~/`_FcZ'nM", "nB.Hm7NS~/`_FcZ'nM");
      WebServiceDescriptor arg0 = new WebServiceDescriptor((Class) null, "nB.Hm7NS~/`_FcZ'nM", "nB.Hm7NS~/`_FcZ'nM");
      boolean equals = webServiceDescriptor.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "yK)", "yK)");
      boolean equals = webServiceDescriptor.equals("yK)");
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "$", "$");
      boolean equals = webServiceDescriptor.equals((Object) null);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesWebServiceDescriptor0() throws Throwable  {
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor((Class) null, "I]wp N4WhjnD&Lv&4o@", (String) null);
      webServiceDescriptor.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesWebServiceDescriptor1() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "yK)", "yK)");
      webServiceDescriptor.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTargetNamespace() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "$", "$");
      webServiceDescriptor.setTargetNamespace("");
      assertEquals("", webServiceDescriptor.getTargetNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTargetNamespaceReturningNonEmptyString() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "$", "$");
      String targetNamespace = webServiceDescriptor.getTargetNamespace();
      assertEquals("$", targetNamespace);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTypesNamespace() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, ".w u", "sXo");
      assertEquals("sXo", webServiceDescriptor.getTypesNamespace());
      
      webServiceDescriptor.setTypesNamespace("");
      webServiceDescriptor.getTypesNamespace();
      assertEquals("", webServiceDescriptor.getTypesNamespace());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypesNamespaceReturningNonEmptyString() throws Throwable  {
      Class<Object> arg0 = Object.class;
      WebServiceDescriptor webServiceDescriptor = new WebServiceDescriptor(arg0, "$", "$");
      String typesNamespace = webServiceDescriptor.getTypesNamespace();
      assertEquals("$", typesNamespace);
  }
}
