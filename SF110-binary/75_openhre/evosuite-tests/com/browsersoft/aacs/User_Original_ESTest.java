/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 07:52:24 GMT 2024
 */

package com.browsersoft.aacs;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.browsersoft.aacs.User;
import java.util.NoSuchElementException;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_Original_ESTest extends User_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserNameReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getUserName();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRolesReturningSetWhereIsEmptyIsFalseAndSetWhereSizeIsPositive() throws Throwable  {
      User user = new User("log4j.debug", "log4j.debug");
      user.addRole("log4j.debug");
      user.getRoles();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningNull() throws Throwable  {
      User user = new User("@k!ol(h~QRRppjD`", "m{");
      user.setPassword((String) null);
      user.getPassword();
      assertEquals("@k!ol(h~QRRppjD`", user.getUserId());
      assertEquals("m{", user.getUserName());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningNonEmptyString() throws Throwable  {
      User user = new User();
      user.encodePassword("UoIhJx%W&%(E08jGds");
      user.getPassword();
      assertEquals("{SSHA}3rsC1kbVoIG+2Z7QnhbpVUH6ubxYWFhY", user.getPassword());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassvalidstartReturningNonEmptyString() throws Throwable  {
      User user = new User();
      user.setPassvalidstart("2sXA6FI");
      user.getPassvalidstart();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLdapContextReturningNonNull() throws Throwable  {
      User user = new User("T62<+.@L", "T62<+.@L");
      InitialLdapContext initialLdapContext = new InitialLdapContext();
      user.dctx = (LdapContext) initialLdapContext;
      user.getLdapContext();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupsReturningSetWhereIsEmptyIsFalseAndSetWhereSizeIsPositive() throws Throwable  {
      User user = new User();
      user.addGroup("sn: ");
      user.getGroups();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountryReturningNull() throws Throwable  {
      User user = new User();
      user.setCountry((String) null);
      user.getCountry();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAllowedipsReturningSetWhereIsEmptyIsFalse() throws Throwable  {
      User user = new User();
      user.addAllowedip("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n");
      user.getAllowedips();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetActivegroupsReturningSetWhereIsEmptyIsFalse() throws Throwable  {
      User user = new User("o", "o");
      user.addActivegroup("o");
      user.getActivegroups();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareToReturningNegative() throws Throwable  {
      User user = new User();
      User arg0 = new User("{sha}x%w&%(e08jgds", "4%tb9(");
      int compareTo = user.compareTo(arg0);
      assertFalse(arg0.getPasschange());
      assertEquals((-18), compareTo);
      assertEquals("4%tb9(", arg0.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareToReturningPositive() throws Throwable  {
      User user = new User("userPassword:", "EMail");
      User arg0 = new User("8+A#?H%j08)", "{sha}#y}z^d5dh*");
      int compareTo = user.compareTo(arg0);
      assertEquals("{sha}#y}z^d5dh*", arg0.getUserName());
      assertEquals(61, compareTo);
      assertFalse(arg0.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserIdReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getUserId();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testInit() throws Throwable  {
      User user = new User();
      user.init();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasswordReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getPassword();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountryReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getCountry();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSurNameReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getSurName();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetGroupsReturningNull() throws Throwable  {
      User user = new User("o", "o");
      user.getGroups();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpAddrReturningNull() throws Throwable  {
      User user = new User();
      user.getIpAddr();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateDigestWithNonEmptyArrayAndNonEmptyString() throws Throwable  {
      User user = new User("o", "o");
      boolean checkDigest = user.checkDigest("dn: cn=o, o=, c=subjectDN\ncn: o\nid: o\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n", "dn: cn=o, o=, c=subjectDN\ncn: o\nid: o\nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n");
      assertFalse(checkDigest);
      
      byte[] arg0 = new byte[1];
      String createDigest = user.createDigest(arg0, "Reading configuration from URL ");
      assertEquals("{SSHA}MESuZHZb3uvbTwjg/DAFJH/xFgIA", createDigest);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue() throws Throwable  {
      User arg0 = new User();
      arg0.setIpAddr("z5zB");
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
      assertFalse(arg0.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      User arg0 = new User();
      User user = new User("N", "N");
      boolean equals = user.equals(arg0);
      assertFalse(user.getPasschange());
      assertFalse(equals);
      assertFalse(arg0.equals((Object)user));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingString() throws Throwable  {
      User user = new User();
      user.addGroup("cn: ");
      user.addRole((String) null);
      String string = user.toString("");
      assertEquals("dn: cn=, o=, c=cn: id: sn: userPassword: role: nullgroup: cn: objectClass: topobjectClass: person", string);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetIpAddr() throws Throwable  {
      User user = new User();
      user.setIpAddr(";^LgIn=x48?[hnBvC");
      String string = user.toString();
      assertFalse(user.getPasschange());
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nip: ;^LgIn=x48?[hnBvC\nobjectClass: top\nobjectClass: person\n", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGroupAndToStringTakingNoArguments() throws Throwable  {
      User user = new User();
      user.addGroup("_imu&!>{!C/3SZ>qk");
      String string = user.toString();
      assertFalse(user.getPasschange());
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \ngroup: _imu&!>{!C/3SZ>qk\nobjectClass: top\nobjectClass: person\n", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRoleAndToStringTakingNoArguments() throws Throwable  {
      User user = new User();
      user.addRole("org.apache.xerces.util.SecuritySupport12$1");
      String string = user.toString();
      assertFalse(user.getPasschange());
      assertEquals("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nrole: org.apache.xerces.util.SecuritySupport12$1\nobjectClass: top\nobjectClass: person\n", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNThrowsNoSuchElementException0() throws Throwable  {
      User user = new User();
      // Undeclared exception!
      try { 
        user.setDN("cn=, o");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNThrowsNoSuchElementException1() throws Throwable  {
      User user = new User();
      // Undeclared exception!
      try { 
        user.setDN("cn, o");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDN() throws Throwable  {
      User user = new User();
      user.setDN("{ssha}fc<$`].");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNThrowsNoSuchElementException2() throws Throwable  {
      User user = new User();
      // Undeclared exception!
      try { 
        user.setDN("Qx#=<,c,~g}i/-s:OU");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetDNWithNull() throws Throwable  {
      User user = new User();
      user.setDN((String) null);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddAllowedip() throws Throwable  {
      User user = new User();
      user.addAllowedip("dn: cn=, o=, c=\ncn: \nid: \nsn: \nuserPassword: \nobjectClass: top\nobjectClass: person\n");
      user.addAllowedip("objectClass: person");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddActivegroupWithEmptyString() throws Throwable  {
      User user = new User();
      user.addActivegroup("");
      user.addActivegroup("");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddGroup() throws Throwable  {
      User user = new User();
      user.addGroup("FATAL");
      user.addGroup("FATAL");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAddRole() throws Throwable  {
      User user = new User();
      user.addRole("jO4p'a");
      user.addRole("jO4p'a");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesUserTaking2ArgumentsAndCallsSetPassword() throws Throwable  {
      User user = new User("@k!ol(h~QRRppjD`", "m{");
      user.setPassword((String) null);
      boolean checkPassword = user.checkPassword("fH");
      assertFalse(user.getPasschange());
      assertEquals("@k!ol(h~QRRppjD`", user.getUserId());
      assertEquals("m{", user.getUserName());
      assertFalse(checkPassword);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckPassword() throws Throwable  {
      User user = new User();
      boolean checkPassword = user.checkPassword("qS|eAh80=^b$4m-Xd4");
      assertFalse(user.getPasschange());
      assertFalse(checkPassword);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckPasswordReturningTrue() throws Throwable  {
      User user = new User();
      user.encodePassword("UoIhJx%W&%(E08jGds");
      boolean checkPassword = user.checkPassword("UoIhJx%W&%(E08jGds");
      assertEquals("{SSHA}3rsC1kbVoIG+2Z7QnhbpVUH6ubxYWFhY", user.getPassword());
      assertTrue(checkPassword);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePasswordWithNull() throws Throwable  {
      User user = new User();
      user.encodePassword((String) null);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePasswordWithEmptyString() throws Throwable  {
      User user = new User();
      user.encodePassword("");
      assertEquals("", user.getPassword());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPasschange() throws Throwable  {
      User user = new User();
      boolean passchange = user.getPasschange();
      assertFalse(passchange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSalt() throws Throwable  {
      User.setSalt("6jq*");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPassrenewal() throws Throwable  {
      User user = new User("8:IDL^+2PVNeQ+9'1{", "8:IDL^+2PVNeQ+9'1{");
      user.setPassrenewal("8:IDL^+2PVNeQ+9'1{");
      user.getPassrenewal();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIpAddrReturningEmptyString() throws Throwable  {
      User user = new User();
      user.setIpAddr("");
      user.getIpAddr();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCodeThrowsNullPointerException() throws Throwable  {
      User user = new User();
      // Undeclared exception!
      try { 
        user.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.browsersoft.aacs.User", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCountryReturningNonEmptyString() throws Throwable  {
      User user = new User("@k!ol(h~QRRppjD`", "m{");
      user.setCountry("m{");
      user.getCountry();
      assertFalse(user.getPasschange());
      assertEquals("m{", user.getUserName());
      assertEquals("@k!ol(h~QRRppjD`", user.getUserId());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEmail() throws Throwable  {
      User user = new User("org.apache.log4j.PropertyConfigurator", "0M(IF[OLlEC,r8[&(R");
      user.getEmail();
      assertEquals("org.apache.log4j.PropertyConfigurator", user.getUserId());
      assertFalse(user.getPasschange());
      assertEquals("0M(IF[OLlEC,r8[&(R", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetOrg() throws Throwable  {
      User user = new User();
      user.setOrg("cn=, o=, c=");
      user.getOrg();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetPasschange() throws Throwable  {
      User user = new User("T62<+.@L", "T62<+.@L");
      assertFalse(user.getPasschange());
      
      user.setPasschange(true);
      assertTrue(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreateDigestWithEmptyArrayAndEmptyString() throws Throwable  {
      User user = new User();
      byte[] arg0 = new byte[0];
      String createDigest = user.createDigest(arg0, "");
      assertEquals("{SHA}2jmj7l5rSw0yVb/vlWAYkK/YBwk=", createDigest);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetEmail() throws Throwable  {
      User user = new User();
      user.setEmail("{SHA}");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testUpdate() throws Throwable  {
      User arg0 = new User();
      arg0.update(arg0);
      assertFalse(arg0.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCompareToThrowsNullPointerException() throws Throwable  {
      User arg0 = new User();
      // Undeclared exception!
      try { 
        arg0.compareTo(arg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.browsersoft.aacs.User", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetUserId() throws Throwable  {
      User user = new User();
      user.setUserId("RepositorySelector must be non-null.");
      user.getUserId();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetUserName() throws Throwable  {
      User user = new User();
      user.setUserName("sn: ");
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUserNameReturningNonEmptyString() throws Throwable  {
      User user = new User("@k!ol(h~QRRppjD`", "m{");
      String userName = user.getUserName();
      assertEquals("@k!ol(h~QRRppjD`", user.getUserId());
      assertEquals("m{", userName);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassrenewalReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getPassrenewal();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCredentials() throws Throwable  {
      User user = new User();
      user.getCredentials();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOrgReturningEmptyString() throws Throwable  {
      User user = new User();
      user.getOrg();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAllowedipsReturningNull() throws Throwable  {
      User user = new User();
      user.getAllowedips();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDN() throws Throwable  {
      User user = new User("", "");
      String dN = user.getDN();
      assertEquals("cn=, o=, c=", dN);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSurName() throws Throwable  {
      User user = new User();
      user.setSurName((String) null);
      user.getSurName();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetRolesReturningNull() throws Throwable  {
      User user = new User();
      user.getRoles();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassvalidstartReturningNull() throws Throwable  {
      User user = new User("org.apache.log4j.PropertyConfigurator", "0M(IF[OLlEC,r8[&(R");
      user.setPassvalidstart((String) null);
      user.getPassvalidstart();
      assertEquals("org.apache.log4j.PropertyConfigurator", user.getUserId());
      assertFalse(user.getPasschange());
      assertEquals("0M(IF[OLlEC,r8[&(R", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetLdapContext() throws Throwable  {
      User user = new User();
      user.setLdapContext((LdapContext) null);
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEncodePassword() throws Throwable  {
      User user = new User("@k!ol(h~QRRppjD`", "m{");
      user.setPassword((String) null);
      user.encodePassword("userPassword: ");
      assertEquals("@k!ol(h~QRRppjD`", user.getUserId());
      assertEquals("m{", user.getUserName());
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLdapContextReturningNull() throws Throwable  {
      User user = new User("o", "o");
      user.getLdapContext();
      assertFalse(user.getPasschange());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCheckDigest() throws Throwable  {
      User user = new User();
      boolean checkDigest = user.checkDigest("{sha}&", "{sha}&");
      assertFalse(user.getPasschange());
      assertFalse(checkDigest);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetPassvalidstartReturningEmptyString() throws Throwable  {
      User user = new User("org.apache.log4j.PropertyConfigurator", "0M(IF[OLlEC,r8[&(R");
      user.getPassvalidstart();
      assertFalse(user.getPasschange());
      assertEquals("org.apache.log4j.PropertyConfigurator", user.getUserId());
      assertEquals("0M(IF[OLlEC,r8[&(R", user.getUserName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetActivegroupsReturningNull() throws Throwable  {
      User user = new User();
      user.getActivegroups();
      assertFalse(user.getPasschange());
  }
}
