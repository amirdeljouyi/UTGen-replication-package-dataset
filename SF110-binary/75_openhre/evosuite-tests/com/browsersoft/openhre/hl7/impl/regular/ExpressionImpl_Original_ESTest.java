/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 02:15:18 GMT 2024
 */

package com.browsersoft.openhre.hl7.impl.regular;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;
import com.browsersoft.openhre.hl7.api.regular.ExpressionPart;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionElementMapperImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionPartImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExpressionImpl_Original_ESTest extends ExpressionImpl_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNumberOfElementTypesReturningPositive() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.setNumberOfElementTypes(1747);
      int numberOfElementTypes = expressionImpl.getNumberOfElementTypes();
      assertEquals(1747, numberOfElementTypes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemReturningExpressionPartWhereGetTypeIsPositive() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      ExpressionPartImpl arg0 = new ExpressionPartImpl();
      expressionImpl.addItem(arg0);
      arg0.setType(2951);
      ExpressionPart item = expressionImpl.getItem(0);
      assertSame(item, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemReturningExpressionPartWhereGetTypeIsNegative() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      ExpressionPartImpl arg0 = new ExpressionPartImpl();
      arg0.setType((-1321));
      expressionImpl.addItem(arg0);
      ExpressionPart item = expressionImpl.getItem(0);
      assertEquals((-1321), item.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemReturningExpressionPartWhereGetElementIDIsNegative() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      ExpressionPartImpl arg0 = new ExpressionPartImpl();
      arg0.setElementID((-2219));
      expressionImpl.addItem(arg0);
      ExpressionPart item = expressionImpl.getItem(0);
      assertSame(item, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingNoArgumentsReturningNonEmptyString() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.readFromStringForDebug("R+o+]L]y");
      expressionImpl.toString();
      assertEquals(2, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingNoArgumentsReturningEmptyString() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      String string = expressionImpl.toString();
      assertEquals("", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingExpressionElementMapperReturningNonEmptyString() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.readFromStringForDebug("R+o+]L]y");
      ExpressionElementMapperImpl arg0 = new ExpressionElementMapperImpl();
      expressionImpl.toString((ExpressionElementMapper) arg0);
      assertEquals(2, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadFromStringForDebugWithNonEmptyString() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.readFromStringForDebug("y+?VDk\"$4&j%xSz}");
      ExpressionElementMapperImpl arg0 = new ExpressionElementMapperImpl();
      expressionImpl.toString((ExpressionElementMapper) arg0);
      assertEquals(3, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingExpressionElementMapperWithExpressionElementMapperWhereSizeIsZero() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.readFromStringForDebug(" ,6Z<\"*{o$dr7D");
      ExpressionElementMapperImpl arg0 = new ExpressionElementMapperImpl();
      expressionImpl.toString((ExpressionElementMapper) arg0);
      assertEquals(3, expressionImpl.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingExpressionElementMapperWithNull() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.readFromStringForDebug("[");
      expressionImpl.toString((ExpressionElementMapper) null);
      assertEquals(1, expressionImpl.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemReturningExpressionPartWhereGetElementIDIsPositive() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.readFromStringForDebug("R+o+]L]y");
      expressionImpl.removeItem(0);
      expressionImpl.removeItem(0);
      expressionImpl.getItem(0);
      assertEquals(2, expressionImpl.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveItem() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.removeItem(0);
      assertEquals(0, expressionImpl.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveItemWithNegative() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.removeItem((-594));
      assertEquals(0, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetItemWithZero() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.readFromStringForDebug("R+o+]L]y");
      expressionImpl.setItem(0, (ExpressionPart) null);
      assertEquals(4, expressionImpl.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetItemWithPositive() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.setItem(1898, (ExpressionPart) null);
      assertEquals(0, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetItemWithNegative() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.setItem((-3000), (ExpressionPart) null);
      assertEquals(0, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItem() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      ExpressionPart item = expressionImpl.getItem(0);
      assertNull(item);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemWithNegative() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      ExpressionPart item = expressionImpl.getItem((-594));
      assertNull(item);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSizeReturningZero() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      int size = expressionImpl.size();
      assertEquals(0, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClearAll() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.clearAll();
      assertEquals(0, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSizeReturningPositive() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.addItem((ExpressionPart) null);
      int size = expressionImpl.size();
      assertEquals(1, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNumberOfElementTypesReturningNegative() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.setNumberOfElementTypes((-8388608));
      int numberOfElementTypes = expressionImpl.getNumberOfElementTypes();
      assertEquals((-8388608), numberOfElementTypes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNumberOfElementTypesReturningZero() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      int numberOfElementTypes = expressionImpl.getNumberOfElementTypes();
      assertEquals(0, numberOfElementTypes);
  }
}
