/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 02:15:18 GMT 2024
 */

package com.browsersoft.openhre.hl7.impl.regular;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.browsersoft.openhre.hl7.api.regular.ExpressionElementMapper;
import com.browsersoft.openhre.hl7.api.regular.ExpressionPart;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionElementMapperImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionImpl;
import com.browsersoft.openhre.hl7.impl.regular.ExpressionPartImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExpressionImpl_ESTest extends ExpressionImpl_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSizeReturningPositive() throws Throwable  {
      // Create a new instance of ExpressionImpl
      ExpressionImpl expression = new ExpressionImpl();
      
      // Add a null item to the expression
      expression.addItem((ExpressionPart) null);
      
      // Check the size of the expression
      int expectedSize = 1;
      assertEquals(expectedSize, expression.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNumberOfElementTypesReturningNegative() throws Throwable  {
      ExpressionImpl expressionImpl = new ExpressionImpl();
      // Given a negative integer value for the number of element types
      expressionImpl.setNumberOfElementTypes(-8388608);
      int numberOfElementTypes = expressionImpl.getNumberOfElementTypes();
      // When the getNumberOfElementTypes() method is called with this value
      // Then it should return the same negative integer value
      assertEquals(-8388608, numberOfElementTypes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemReturningExpressionPartWhereGetTypeIsPositive() throws Throwable  {
      // Create a new instance of ExpressionImpl
      ExpressionImpl expressionImpl = new ExpressionImpl();
      
      // Read "R+o+]L]y" from the string and add it to the expression
      expressionImpl.readFromStringForDebug("R+o+]L]y");
      
      // Remove the first two items in the expression, which are 'R' and '+'
      expressionImpl.removeItem(0);
      expressionImpl.removeItem(0);
      
      // Read "R+o+]L]y" from the string again to ensure it is still valid
      expressionImpl.readFromStringForDebug("R+o+]L]y");
      
      // Remove the third and fourth items in the expression, which are 'o' and '+'
      expressionImpl.removeItem(1);
      expressionImpl.removeItem(2);
      
      // Get the size of the expression, which should be 4
      int size = expressionImpl.size();
      
      // Assert that the size of the expression is equal to 4
      assertEquals(4, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemReturningExpressionPartWhereGetTypeIsNegative() throws Throwable  {
      // Given
      ExpressionImpl expression = new ExpressionImpl();
      ExpressionPartImpl arg0 = new ExpressionPartImpl();
      arg0.setType(-1321);
      
      // When
      expression.addItem(arg0);
      
      // Then
      assertEquals(-1321, expression.getItem(0).getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemReturningExpressionPartWhereGetElementIDIsNegative() throws Throwable  {
      // Given a new ExpressionImpl object and an ExpressionPartImpl object
      ExpressionImpl expressionImpl = new ExpressionImpl();
      ExpressionPartImpl arg0 = new ExpressionPartImpl();
      arg0.setElementID((-2219));
      
      // When adding the ExpressionPartImpl to the ExpressionImpl object
      expressionImpl.addItem(arg0);
      
      // Then the item at index 0 should be the same as the input argument
      ExpressionPart item = expressionImpl.getItem(0);
      assertSame(item, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSizeReturningZero() throws Throwable  {
      // Given a newly created instance of ExpressionImpl
      ExpressionImpl expressionImpl = new ExpressionImpl();
      
      // When we retrieve its size
      int size = expressionImpl.size();
      
      // Then we expect it to be 0 (empty)
      assertEquals(0, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingNoArgumentsReturningNonEmptyString() throws Throwable  {
      // Given a string representation of an expression
      String input = "R+o+]L]y";
      
      // When the string is read into an ExpressionImpl object
      ExpressionImpl expression = new ExpressionImpl();
      expression.readFromStringForDebug(input);
      
      // Then the resulting ExpressionImpl object should have the correct size
      assertEquals(4, expression.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToStringTakingNoArgumentsReturningEmptyString() throws Throwable  {
      // Given: an instance of ExpressionImpl
      ExpressionImpl expression = new ExpressionImpl();
      
      // When: the toString method is called on the instance
      String string = expression.toString();
      
      // Then: the result should be an empty string
      assertEquals("", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadFromStringForDebugAndToStringTakingExpressionElementMapperAndToStringTakingExpressionElementMapperWithExpressionElementMapperWhereSizeIsZero0() throws Throwable  {
      // Given an instance of ExpressionImpl
      ExpressionImpl expression = new ExpressionImpl();
      
      // When we read the string "R+o+]L]" for debugging purposes
      expression.readFromStringForDebug("R+o+]L]y");
      
      // And we create a new instance of ExpressionElementMapperImpl
      ExpressionElementMapperImpl mapper = new ExpressionElementMapperImpl();
      
      // Then we call the toString method on the expression and pass in the mapper
      String result = expression.toString(mapper);
      
      // And assert that the number of element types is equal to 2
      assertEquals(2, expression.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadFromStringForDebugAndToStringTakingExpressionElementMapperAndToStringTakingExpressionElementMapperWithNull0() throws Throwable  {
      // No Comments were added
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.readFromStringForDebug("[");
      expressionImpl.toString((ExpressionElementMapper) null);
      assertEquals(1, expressionImpl.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadFromStringForDebugAndToStringTakingExpressionElementMapperAndToStringTakingExpressionElementMapperWithExpressionElementMapperWhereSizeIsZero1() throws Throwable  {
      // rollbacked to evosuite
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.readFromStringForDebug("y+z*4&j%xSz}");
      ExpressionElementMapperImpl arg0 = new ExpressionElementMapperImpl();
      expressionImpl.toString((ExpressionElementMapper) arg0);
      assertEquals(2, expressionImpl.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemReturningExpressionPartWhereGetElementIDIsPositive() throws Throwable  {
      // Given a ExpressionImpl object initialized with the string "R+o+]L]"
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.readFromStringForDebug("R+o+]L]y");
      
      // When we remove two items from the list
      expressionImpl.removeItem(0);
      expressionImpl.removeItem(0);
      
      // Then the list size should be 2
      assertEquals(2, expressionImpl.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveItem() throws Throwable  {
      // rollbacked to evosuite
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.removeItem(0);
      assertEquals(0, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testRemoveItemWithNegative() throws Throwable  {
      // rollbacked to evosuite
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.removeItem((-594));
      assertEquals(0, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetItem() throws Throwable  {
      // Given an empty ExpressionImpl instance
      ExpressionImpl expression = new ExpressionImpl();
      
      // When setting a null item at index 0
      expression.setItem(0, (ExpressionPart) null);
      
      // Then the number of element types should be 0
      assertEquals(0, expression.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetItemWithNegative() throws Throwable  {
      // Given a negative number and no ExpressionPart,
      // When the setItem method is called with the number and null,
      // Then the number of element types should be zero.
      
      ExpressionImpl expressionImpl = new ExpressionImpl();
      expressionImpl.setItem(-3000, (ExpressionPart) null);
      assertEquals(0, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItem() throws Throwable  {
      // rollbacked to evosuite
      ExpressionImpl expressionImpl = new ExpressionImpl();
      ExpressionPart item = expressionImpl.getItem(123456789);
      assertNull(item);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadFromStringForDebugAndToStringTakingExpressionElementMapperAndToStringTakingExpressionElementMapperWithNull1() throws Throwable  {
      // Create a new instance of the ExpressionImpl class
      ExpressionImpl expression = new ExpressionImpl();
      
      // Read the string "{}" into the expression object
      expression.readFromStringForDebug("{");
      
      // Convert the expression to a string using the default mapper
      String actualResult = expression.toString((ExpressionElementMapper) null);
      
      // Assert that the size of the expression is 1
      assertEquals(1, expression.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetItemWithNegative() throws Throwable  {
      // No Comments were added
      ExpressionImpl expressionImpl = new ExpressionImpl();
      ExpressionPart item = expressionImpl.getItem((-594));
      assertNull(item);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClearAll() throws Throwable  {
      // Given: an empty expression implementation instance
      ExpressionImpl expressionImpl = new ExpressionImpl();
      
      // When: the expression is cleared
      expressionImpl.clearAll();
      
      // Then: the number of element types should be zero
      assertEquals(0, expressionImpl.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadFromStringForDebugAndSetItem() throws Throwable  {
      // Create a new instance of the ExpressionImpl class
      ExpressionImpl expression = new ExpressionImpl();
      
      // Read from string for debug
      expression.readFromStringForDebug("R+o+]L]y");
      
      // Set the item at index 0 to null
      expression.setItem(0, null);
      
      // Assert that there are two different element types in the expression
      assertEquals(2, expression.getNumberOfElementTypes());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNumberOfElementTypesReturningPositive() throws Throwable  {
      // Given: A new ExpressionImpl instance with a set of element types
      ExpressionImpl expression = new ExpressionImpl();
      expression.setNumberOfElementTypes(123456);
      
      // When: The number of element types is requested
      int numberOfElementTypes = expression.getNumberOfElementTypes();
      
      // Then: The correct value should be returned
      assertEquals(123456, numberOfElementTypes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetNumberOfElementTypesReturningZero() throws Throwable  {
      // Given: A new ExpressionImpl object is created and its number of element types is queried
      ExpressionImpl expression = new ExpressionImpl();
      int expectedNumberOfElementTypes = 0;
      
      // When: The getNumberOfElementTypes method is called on the expression object
      int actualNumberOfElementTypes = expression.getNumberOfElementTypes();
      
      // Then: The number of element types should be equal to the expected value
      assertEquals(expectedNumberOfElementTypes, actualNumberOfElementTypes);
  }
}
