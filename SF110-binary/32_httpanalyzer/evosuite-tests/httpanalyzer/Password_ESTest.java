/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 05:20:32 GMT 2024
 */

package httpanalyzer;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import httpanalyzer.Password;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Password_ESTest extends Password_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashMD5() throws Throwable  {
      String hashMD5 = Password.hashMD5("");
      // Assert that the hashed password is equal to a known value
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", hashMD5);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCryptWithEmptyString() throws Throwable  {
      // Given an empty password and a salt
      String password = "";
      String salt = "d41d8cd98f00b204e9800998ecf8427e";
      
      // When the crypt method is called with these arguments
      String encryptedPassword = Password.crypt(password, salt);
      
      // Then an exception is thrown
      assertThrows(IllegalArgumentException.class, () -> {
      Password.crypt("", "d41d8cd98f00b204e9800998ecf8427e");});
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCryptThrowsTooManyResourcesException() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      Password.crypt("password", "d41d8cd98f00b204e9800998ecf8427e");
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesPassword() throws Throwable  {
      // No Comments were added
      Password password = new Password();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCryptWithNonEmptyString() throws Throwable  {
      // No Comments were added
      // Undeclared exception!
      Password.crypt("MySecretPassword!", "EncryptedPassword");
  }
}
