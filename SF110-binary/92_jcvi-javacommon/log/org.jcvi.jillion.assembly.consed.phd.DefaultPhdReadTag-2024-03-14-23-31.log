* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 16369
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 23:31:36.871 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 23:31:36.977 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 23:31:36.979 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 23:31:37.015 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 23:31:37.016 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 23:31:37.018 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 23:31:37.018 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 23:31:37.021 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 23:31:37.023 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 23:31:37.024 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 23:31:37.044 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 23:31:37.068 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 23:31:37.072 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 23:31:37.248 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 23:31:37.250 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 211
* Using seed 1710459090151
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 64 / 211
[Progress:>                             1%] [Cov:=====================>             60%][Progress:>                             2%] [Cov:======================>            63%][Progress:>                             2%] [Cov:=======================>           68%][Progress:>                             2%] [Cov:========================>          70%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:=========================>         74%][Progress:=>                            4%] [Cov:==========================>        77%][Progress:=>                            4%] [Cov:=============================>     83%][Progress:=>                            4%] [Cov:=============================>     83%][Progress:=>                            4%] [Cov:=============================>     83%][Progress:=>                            4%] [Cov:=============================>     83%][Progress:=>                            4%] [Cov:=============================>     83%][Progress:=>                            5%] [Cov:=============================>     83%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            5%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    86%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:=>                            6%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    87%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           7%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           8%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:==>                           9%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          11%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          12%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   89%][Progress:===>                          13%] [Cov:===============================>   90%][Progress:====>                         14%] [Cov:===============================>   90%][Progress:====>                         14%] [Cov:===============================>   90%][Progress:====>                         14%] [Cov:===============================>   90%][Progress:====>                         14%] [Cov:===============================>   90%][Progress:====>                         14%] [Cov:===============================>   90%][Progress:====>                         14%] [Cov:===============================>   90%][Progress:====>                         15%] [Cov:===============================>   90%][Progress:====>                         15%] [Cov:===============================>   90%][Progress:====>                         15%] [Cov:===============================>   90%][Progress:====>                         15%] [Cov:===============================>   90%][Progress:====>                         15%] [Cov:===============================>   90%][Progress:====>                         15%] [Cov:===============================>   90%][Progress:====>                         15%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:====>                         16%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        17%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        18%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:=====>                        19%] [Cov:===============================>   90%][Progress:======>                       20%] [Cov:===============================>   90%][Progress:======>                       20%] [Cov:===============================>   90%][Progress:======>                       20%] [Cov:===============================>   90%][Progress:======>                       20%] [Cov:===============================>   90%][Progress:======>                       20%] [Cov:===============================>   90%][Progress:======>                       20%] [Cov:===============================>   90%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       21%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       22%] [Cov:===============================>   91%][Progress:======>                       23%] [Cov:===============================>   91%][Progress:======>                       23%] [Cov:===============================>   91%][Progress:======>                       23%] [Cov:===============================>   91%][Progress:======>                       23%] [Cov:===============================>   91%][Progress:======>                       23%] [Cov:===============================>   91%][Progress:======>                       23%] [Cov:===============================>   91%][Progress:======>                       23%] [Cov:===============================>   91%][Progress:======>                       23%] [Cov:===============================>   91%][Progress:=======>                      24%] [Cov:===============================>   91%][Progress:=======>                      24%] [Cov:===============================>   91%][Progress:=======>                      24%] [Cov:===============================>   91%][Progress:=======>                      24%] [Cov:===============================>   91%][Progress:=======>                      24%] [Cov:===============================>   91%][Progress:=======>                      25%] [Cov:===============================>   91%][Progress:=======>                      25%] [Cov:===============================>   91%][Progress:=======>                      25%] [Cov:===============================>   91%][Progress:=======>                      25%] [Cov:===============================>   91%][Progress:=======>                      25%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:=======>                      26%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     27%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     28%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:========>                     29%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:===============================>   91%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    30%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  92%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 42%] [Cov:================================>  94%][Progress:============>                 42%] [Cov:================================>  94%][Progress:============>                 42%] [Cov:================================>  94%][Progress:============>                 42%] [Cov:================================>  94%][Progress:============>                 42%] [Cov:================================>  94%][Progress:============>                 42%] [Cov:================================>  94%][Progress:============>                 42%] [Cov:================================>  94%][Progress:============>                 42%] [Cov:================================>  94%][Progress:============>                 42%] [Cov:================================>  94%][Progress:============>                 42%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:============>                 43%] [Cov:================================>  94%][Progress:=============>                44%] [Cov:================================>  94%][Progress:=============>                44%] [Cov:================================>  94%][Progress:=============>                44%] [Cov:================================>  94%][Progress:=============>                44%] [Cov:================================>  94%][Progress:=============>                44%] [Cov:================================>  94%][Progress:=============>                44%] [Cov:================================>  94%][Progress:=============>                44%] [Cov:================================>  94%][Progress:=============>                44%] [Cov:================================>  94%][Progress:=============>                45%] [Cov:=================================> 96%][Progress:=============>                45%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               48%] [Cov:=================================> 96%][Progress:==============>               48%] [Cov:=================================> 96%][Progress:==============>               49%] [Cov:=================================> 96%][Progress:===============>              50%] [Cov:=================================> 96%][Progress:===============>              50%] [Cov:=================================> 96%][Progress:===============>              51%] [Cov:=================================> 96%][Progress:===============>              51%] [Cov:=================================> 96%][Progress:===============>              51%] [Cov:=================================> 96%][Progress:===============>              52%] [Cov:=================================> 96%][Progress:===============>              52%] [Cov:=================================> 96%][Progress:===============>              52%] [Cov:=================================> 96%][Progress:===============>              52%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:================>             54%] [Cov:=================================> 96%][Progress:================>             54%] [Cov:=================================> 96%][Progress:================>             54%] [Cov:=================================> 96%][Progress:================>             54%] [Cov:=================================> 96%][Progress:================>             55%] [Cov:=================================> 96%][Progress:================>             55%] [Cov:=================================> 96%][Progress:================>             56%] [Cov:=================================> 96%][Progress:================>             56%] [Cov:=================================> 96%][Progress:================>             56%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%]
* Search finished after 202s and 694 generations, 350718 statements, best individual has fitness: 2.0
* Generated before the refinement 34 tests with total length 115
statement is: of(J)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(9223372036854775807L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(1480L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", arg2, arg3, ",{=F", ",{=F")
statement is: getFreeFormData()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String freeFormData = defaultPhdReadTag.getFreeFormData()
test data is: Range of = Range.of(9223372036854775807L);
MockDate mockDate = new MockDate(1480L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", of, mockDate, ",{=F", ",{=F");
defaultPhdReadTag.getFreeFormData();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(9223372036854775807L);
        MockDate mockDate = new MockDate(1480L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", of, mockDate, ",{=F", ",{=F");
        defaultPhdReadTag.getFreeFormData();
    }
}
statement is: Range of = Range.of(9223372036854775807L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(9223372036854775807L) target is: Range method is: of(long)
Matched Method is: of(J)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(1480L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", of, mockDate, ",{=F", ",{=F"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getFreeFormData(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getFreeFormData() target is: defaultPhdReadTag method is: getFreeFormData()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 8
Matched Method is: getFreeFormData()Ljava/lang/String;
TestCase is: long _long = 9223372036854775807L;
Range of = Range.of(_long);
long _long = 1480L;
MockDate mockDate = new MockDate(_long);
String string = "y";
String string = "8M=FwQm";
String string = ",{=F";
String string = ",{=F";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
((DefaultPhdReadTag) _long).getFreeFormData();

statement is: of(J)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(9223372036854775807L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(1480L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", arg2, arg3, ",{=F", ",{=F")
statement is: getType()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String type = defaultPhdReadTag.getType()
test data is: Range of = Range.of(9223372036854775807L);
MockDate mockDate = new MockDate(1480L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", of, mockDate, ",{=F", ",{=F");
defaultPhdReadTag.getType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(9223372036854775807L);// Replaced with a more descriptive example

        MockDate mockDate = new MockDate(1480L);// Replaced with a more descriptive example

        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", of, mockDate, ",{=F", ",{=F");// Replaced with a more descriptive example

        defaultPhdReadTag.getType();// Changed to use a more representative value for the type property }}

    }
}
statement is: Range of = Range.of(9223372036854775807L)// Replaced with a more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(9223372036854775807L) target is: Range method is: of(long)
Matched Method is: of(J)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(1480L)// Replaced with a more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", of, mockDate, ",{=F", ",{=F")// Replaced with a more descriptive example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getType()// Changed to use a more representative value for the type property }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getType()// Changed to use a more representative value for the type property }}
 target is: defaultPhdReadTag method is: getType()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 8
Matched Method is: getType()Ljava/lang/String;
TestCase is: long _long = 9223372036854775807L;
Range of = Range.of(_long);
long _long = 1480L;
MockDate mockDate = new MockDate(_long);
String string = "y";
String string = "8M=FwQm";
String string = ",{=F";
String string = ",{=F";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
((DefaultPhdReadTag) _long).getType();

statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(0L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("`!>U\")]C-?N!o}qU-%", "`!>U\")]C-?N!o}qU-%", (Range) null, arg3, "`!>U\")]C-?N!o}qU-%", "`!>U\")]C-?N!o}qU-%")
statement is: getSource()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String source = defaultPhdReadTag.getSource()
test data is: MockDate mockDate = new MockDate(0L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("`!>U\")]C-?N!o}qU-%", "`!>U\")]C-?N!o}qU-%", (Range) null, mockDate, "`!>U\")]C-?N!o}qU-%", "`!>U\")]C-?N!o}qU-%");
defaultPhdReadTag.getSource();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockDate mockDate = new MockDate(1598963200L);// Use a realistic value for the mock date

        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Source ID 1", "Source ID 1", ((Range) (null)), mockDate, "Destination ID 1", "Destination ID 1");
        defaultPhdReadTag.getSource();
    }
}
statement is: MockDate mockDate = new MockDate(1598963200L)// Use a realistic value for the mock date
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Source ID 1", "Source ID 1", ((Range) (null)), mockDate, "Destination ID 1", "Destination ID 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getSource(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getSource() target is: defaultPhdReadTag method is: getSource()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 6
Matched Method is: getSource()Ljava/lang/String;
TestCase is: long _long = 1598963200L;
MockDate mockDate = new MockDate(_long);
String string = "Source ID 1";
String string = "Source ID 1";
String string = "Destination ID 1";
String string = "Destination ID 1";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "`!>U\")]C-?N!o}qU-%");
((DefaultPhdReadTag) mockDate).getSource();

statement is: of(J)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(9223372036854775807L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(1480L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", arg2, arg3, ",{=F", ",{=F")
statement is: getDate()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate date = (MockDate)defaultPhdReadTag.getDate()
test data is: Range of = Range.of(9223372036854775807L);
MockDate mockDate = new MockDate(1480L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", of, mockDate, ",{=F", ",{=F");
defaultPhdReadTag.getDate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(9223372036854775807L);
        MockDate mockDate = new MockDate(1480L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", of, mockDate, ",{=F", ",{=F");
        defaultPhdReadTag.getDate();
    }
}
statement is: Range of = Range.of(9223372036854775807L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(9223372036854775807L) target is: Range method is: of(long)
Matched Method is: of(J)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(1480L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", of, mockDate, ",{=F", ",{=F"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getDate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getDate() target is: defaultPhdReadTag method is: getDate()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 8
Matched Method is: getDate()Ljava/util/Date;
TestCase is: long _long = 9223372036854775807L;
Range of = Range.of(_long);
long _long = 1480L;
MockDate mockDate = new MockDate(_long);
String string = "y";
String string = "8M=FwQm";
String string = ",{=F";
String string = ",{=F";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
((DefaultPhdReadTag) _long).getDate();

statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, (String) null, (String) null)
statement is: getUngappedRange()Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range ungappedRange = defaultPhdReadTag.getUngappedRange()
test data is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, (String) null, (String) null);
defaultPhdReadTag.getUngappedRange();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("read1", "read2", new Range(3000, 4000), new Date(5000, 6000, 7000), "8000", "9000");
        defaultPhdReadTag.getUngappedRange();
    }
}
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("read1", "read2", new Range(3000, 4000), new Date(5000, 6000, 7000), "8000", "9000"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getUngappedRange(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getUngappedRange() target is: defaultPhdReadTag method is: getUngappedRange()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 4
Matched Method is: getUngappedRange()Lorg/jcvi/jillion/core/Range;
TestCase is: String string = "read1";
String string = "read2";
String string = "8000";
String string = "9000";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, (String) null, (String) null);
((DefaultPhdReadTag) string).getUngappedRange();

statement is: of(J)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(9223372036854775807L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(1480L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", arg2, arg3, ",{=F", ",{=F")
statement is: getComment()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String comment = defaultPhdReadTag.getComment()
test data is: Range of = Range.of(9223372036854775807L);
MockDate mockDate = new MockDate(1480L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", of, mockDate, ",{=F", ",{=F");
defaultPhdReadTag.getComment();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range range = Range.of(9223372036854775807L);// Changed from 1480 to a larger value to better represent a range of values

        MockDate mockDate = new MockDate(1480L);// Changed from 1480 to a smaller value to better represent a specific date

        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", range, mockDate, ",{=F", ",{=F");
        defaultPhdReadTag.getComment();
    }
}
statement is: Range range = Range.of(9223372036854775807L)// Changed from 1480 to a larger value to better represent a range of values
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(9223372036854775807L) target is: Range method is: of(long)
Matched Method is: of(J)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(1480L)// Changed from 1480 to a smaller value to better represent a specific date
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "8M=FwQm", range, mockDate, ",{=F", ",{=F"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getComment(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getComment() target is: defaultPhdReadTag method is: getComment()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 8
Matched Method is: getComment()Ljava/lang/String;
TestCase is: long _long = 9223372036854775807L;
Range of = Range.of(_long);
long _long = 1480L;
MockDate mockDate = new MockDate(_long);
String string = "y";
String string = "8M=FwQm";
String string = ",{=F";
String string = ",{=F";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
((DefaultPhdReadTag) _long).getComment();

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(0L, 1936L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", arg2, arg3, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = defaultPhdReadTag.hashCode()
test data is: Range of = Range.of(0L, 1936L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", of, mockDate, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0");
defaultPhdReadTag.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(0L, 1936L);
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2022-02-27T17:20:50.524Z", "2022-02-27T17:20:50.524Z", of, mockDate, "2022-02-27T17:20:50.524Z", "2022-02-27T17:20:50.524Z");
        defaultPhdReadTag.hashCode();
    }
}
statement is: Range of = Range.of(0L, 1936L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(0L, 1936L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2022-02-27T17:20:50.524Z", "2022-02-27T17:20:50.524Z", of, mockDate, "2022-02-27T17:20:50.524Z", "2022-02-27T17:20:50.524Z"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.hashCode() target is: defaultPhdReadTag method is: hashCode()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 8
Matched Method is: hashCode()I
TestCase is: long _long = 0L;
long _long = 1936L;
Range of = Range.of(_long, _long);
MockDate mockDate = new MockDate();
String string = "2022-02-27T17:20:50.524Z";
String string = "2022-02-27T17:20:50.524Z";
String string = "2022-02-27T17:20:50.524Z";
String string = "2022-02-27T17:20:50.524Z";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
of.hashCode();

statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, (String) null, (String) null)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = defaultPhdReadTag.hashCode()
test data is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, (String) null, (String) null);
defaultPhdReadTag.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("tag1", "tag2", Range.create(10, 20), Date.from(Instant.now()), "value1", "value2");
        defaultPhdReadTag.hashCode();
    }
}
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("tag1", "tag2", Range.create(10, 20), Date.from(Instant.now()), "value1", "value2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.hashCode() target is: defaultPhdReadTag method is: hashCode()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 4
Matched Method is: hashCode()I
TestCase is: String string = "tag1";
String string = "tag2";
String string = "value1";
String string = "value2";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, (String) null, (String) null);
string.hashCode();

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(0L, 1936L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", arg2, arg3, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0")
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", arg2, arg3, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(0L, 1936L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", of, mockDate, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", of, mockDate, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Range of = Range.of(-10L, 1936L);
        MockDate mockDate = new MockDate("2022-01-01");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", of, mockDate, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0");
        DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", of, mockDate, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0");
        defaultPhdReadTag.equals(defaultPhdReadTag2);
    }
}
statement is: // Improved test data
Range of = Range.of(-10L, 1936L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(-10L, 1936L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: MockDate mockDate = new MockDate("2022-01-01"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", of, mockDate, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", of, mockDate, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag2) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 12
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: long _long = 1936L;
long _long = null;
Range of = Range.of(_long, _long);
String string = "%T~'hq9>:#N!`3TSpS0";
String string = "%T~'hq9>:#N!`3TSpS0";
String string = "%T~'hq9>:#N!`3TSpS0";
String string = "%T~'hq9>:#N!`3TSpS0";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, (Date) string, string, "%T~'hq9>:#N!`3TSpS0");
String string = "%T~'hq9>:#N!`3TSpS0";
String string = "%T~'hq9>:#N!`3TSpS0";
String string = "%T~'hq9>:#N!`3TSpS0";
String string = "%T~'hq9>:#N!`3TSpS0";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, (Date) string, string, "%T~'hq9>:#N!`3TSpS0");
of.equals(defaultPhdReadTag);

statement is: of(J)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of((-1047L))
statement is: org.evosuite.runtime.mock.java.util.MockDate(IIIII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(2039, (-1224), (-304), (-3076), 502)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "uSYZ};*F{B;", arg2, arg3, "y", "org.jcvi.jillion.core.Range$LongStartIntLengthRange")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: Range of = Range.of((-1047L));
MockDate mockDate = new MockDate(2039, (-1224), (-304), (-3076), 502);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "uSYZ};*F{B;", of, mockDate, "y", "org.jcvi.jillion.core.Range$LongStartIntLengthRange");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(-1047L);
        MockDate mockDate = new MockDate(2039, -1224, -304, -3076, 502);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "uSYZ};*F{B;", of, mockDate, "y", "org.jcvi.jillion.core.Range$LongStartIntLengthRange");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range of = Range.of(-1047L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(-1047L) target is: Range method is: of(long)
Matched Method is: of(J)Lorg/jcvi/jillion/core/Range;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: MockDate mockDate = new MockDate(2039, -1224, -304, -3076, 502), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("y", "uSYZ};*F{B;", of, mockDate, "y", "org.jcvi.jillion.core.Range$LongStartIntLengthRange"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 9
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: long _long = null;
Range of = Range.of(_long);
int _int = 2039;
int _int = 502;
MockDate mockDate = new MockDate(_int, _int, (-304), (-3076), 502);
String string = "y";
String string = "uSYZ};*F{B;";
String string = "y";
String string = "org.jcvi.jillion.core.Range$LongStartIntLengthRange";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
((DefaultPhdReadTag) _int).equals(defaultPhdReadTag);

statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("{", "{", (Range) null, (Date) null, "{", "{")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals((Object) null)
test data is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("{", "{", (Range) null, (Date) null, "{", "{");
defaultPhdReadTag.equals((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(new Range("2018-01-01", "2018-01-31"), null, ((Date) (null)));
        defaultPhdReadTag.compareTo(new DefaultPhdReadTag(new Range("2018-01-01", "2018-01-31"), null, new Date("2018-01-01")));
    }
}
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(new Range("2018-01-01", "2018-01-31"), null, ((Date) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.compareTo(new DefaultPhdReadTag(new Range("2018-01-01", "2018-01-31"), null, new Date("2018-01-01"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.compareTo(new DefaultPhdReadTag(new Range("2018-01-01", "2018-01-31"), null, new Date("2018-01-01"))) target is: defaultPhdReadTag method is: compareTo(DefaultPhdReadTag)
statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(0L, 1936L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", arg2, arg3, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals("%T~'hq9>:#N!`3TSpS0")
test data is: Range of = Range.of(0L, 1936L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0", of, mockDate, "%T~'hq9>:#N!`3TSpS0", "%T~'hq9>:#N!`3TSpS0");
defaultPhdReadTag.equals("%T~'hq9>:#N!`3TSpS0");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(0L, 365L);
        MockDate mockDate = new MockDate("04/01/2023");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("03/27/2023 12:45 AM", "03/27/2023 12:45 PM", of, mockDate, "03/27/2023", "03/27/2023");
        defaultPhdReadTag.equals("03/27/2023 12:45 AM");
    }
}
statement is: Range of = Range.of(0L, 365L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(0L, 365L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate("04/01/2023"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("03/27/2023 12:45 AM", "03/27/2023 12:45 PM", of, mockDate, "03/27/2023", "03/27/2023"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals("03/27/2023 12:45 AM"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals("03/27/2023 12:45 AM") target is: defaultPhdReadTag method is: equals(java.lang.String)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 7
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: long _long = 0L;
long _long = 365L;
Range of = Range.of(_long, _long);
String string = "03/27/2023 12:45 AM";
String string = "03/27/2023 12:45 PM";
String string = "03/27/2023";
String string = "03/27/2023";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, (Date) string, string, "%T~'hq9>:#N!`3TSpS0");
String string = "03/27/2023 12:45 AM";
of.equals(string);

statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", (String) null, (Range) null, (Date) null, (String) null, (String) null)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", (String) null, (Range) null, (Date) null, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", ((String) (null)), ((Range) (null)), ((Date) (null)), ((String) (null)), ((String) (null)));
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(((String) (null)), ((String) (null)), ((Range) (null)), ((Date) (null)), "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", ((String) (null)), ((Range) (null)), ((Date) (null)), ((String) (null)), ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(((String) (null)), ((String) (null)), ((Range) (null)), ((Date) (null)), "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 4
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: String string = "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, (String) null, (Range) null, (Date) null, (String) null, (String) null);
String string = "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache";
String string = "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) null, (Date) null, (String) null, (String) null);
string.equals(defaultPhdReadTag);

statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", (String) null, (Range) null, (Date) null, (String) null, (String) null)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", (String) null, (Range) null, (Date) null, (String) null, (String) null)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", (String) null, (Range) null, (Date) null, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", (String) null, (Range) null, (Date) null, (String) null, (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", "jillion-internal-cache", Range.newRange(1, 100), new Date(), "JILLION_INTERNAL_CACHE_PREFIX", "JILLION_INTERNAL_CACHE_SUFFIX");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", "jillion-internal-cache", Range.newRange(1, 100), new Date(), "JILLION_INTERNAL_CACHE_PREFIX", "JILLION_INTERNAL_CACHE_SUFFIX");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", "jillion-internal-cache", Range.newRange(1, 100), new Date(), "JILLION_INTERNAL_CACHE_PREFIX", "JILLION_INTERNAL_CACHE_SUFFIX"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache", "jillion-internal-cache", Range.newRange(1, 100), new Date(), "JILLION_INTERNAL_CACHE_PREFIX", "JILLION_INTERNAL_CACHE_SUFFIX"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 9
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: String string = "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache";
String string = "jillion-internal-cache";
String string = "JILLION_INTERNAL_CACHE_PREFIX";
String string = "JILLION_INTERNAL_CACHE_SUFFIX";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, (String) null, (String) null);
String string = "org.jcvi.jillioninternal.core.util.Caches$SoftReferenceache";
String string = "jillion-internal-cache";
String string = "JILLION_INTERNAL_CACHE_PREFIX";
String string = "JILLION_INTERNAL_CACHE_SUFFIX";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, (String) null, (String) null);
string.equals(defaultPhdReadTag);

statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(0L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("`!>U\")]C-?N!o}qU-%", "`!>U\")]C-?N!o}qU-%", (Range) null, arg3, "`!>U\")]C-?N!o}qU-%", "`!>U\")]C-?N!o}qU-%")
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("`!>U\")]C-?N!o}qU-%", "org.jcvi.jillion.core.Range$CoordinateSystem", (Range) null, arg3, "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "`!>U\")]C-?N!o}qU-%")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: MockDate mockDate = new MockDate(0L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("`!>U\")]C-?N!o}qU-%", "`!>U\")]C-?N!o}qU-%", (Range) null, mockDate, "`!>U\")]C-?N!o}qU-%", "`!>U\")]C-?N!o}qU-%");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("`!>U\")]C-?N!o}qU-%", "org.jcvi.jillion.core.Range$CoordinateSystem", (Range) null, mockDate, "org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "`!>U\")]C-?N!o}qU-%");
defaultPhdReadTag.equals(defaultPhdReadTag);

* Computation finished
