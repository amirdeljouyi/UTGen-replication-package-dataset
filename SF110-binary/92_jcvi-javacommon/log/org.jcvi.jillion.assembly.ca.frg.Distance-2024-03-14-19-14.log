* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.jcvi.jillion.assembly.ca.frg.Distance
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 21828
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.ca.frg.Distance
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 187
* Using seed 1710443669717
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 118 / 187
[Progress:>                             1%] [Cov:================================>  92%][Progress:>                             1%] [Cov:================================>  92%][Progress:>                             2%] [Cov:================================>  94%][Progress:>                             2%] [Cov:================================>  94%][Progress:>                             3%] [Cov:================================>  94%][Progress:>                             3%] [Cov:================================>  94%][Progress:=>                            4%] [Cov:================================>  94%][Progress:=>                            4%] [Cov:=================================> 96%][Progress:=>                            5%] [Cov:=================================> 96%][Progress:=>                            5%] [Cov:=================================> 96%][Progress:=>                            5%] [Cov:=================================> 96%][Progress:=>                            5%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%]
* Search finished after 202s and 729 generations, 226923 statements, best individual has fitness: 6.0
* Generated before the refinement 31 tests with total length 63
statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F)
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = distance.toString()
test data is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(45, -90, 2732.1F, 2732.1F);
        buildDistance.toString();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(45, -90, 2732.1F, 2732.1F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(45, -90, 2732.1F, 2732.1F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: buildDistance.toString(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.toString() target is: buildDistance method is: toString()
source statement: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 4
Matched Method is: toString()Ljava/lang/String;
TestCase is: int _int = 45;
float _float = 2732.1F;
float _float = 2732.1F;
float _float = null;
Distance.buildDistance(_int, (int) _float, _float, _float);
((Distance) _int).toString();

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = distance.hashCode()
test data is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(50, -60, 900.0F, 800.0F);
        buildDistance.hashCode();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(50, -60, 900.0F, 800.0F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(50, -60, 900.0F, 800.0F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: buildDistance.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.hashCode() target is: buildDistance method is: hashCode()
source statement: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 4
Matched Method is: hashCode()I
TestCase is: int _int = 50;
float _float = 900.0F;
float _float = 800.0F;
float _float = null;
Distance.buildDistance(_int, (int) _float, _float, _float);
((Distance) _int).hashCode();

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F)
statement is: transformIntoCeleraAssemblerDistance(Lorg/jcvi/jillion/assembly/ca/frg/Distance;)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = distance.equals(arg0)
test data is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(buildDistance);
transformIntoCeleraAssemblerDistance.equals(buildDistance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data for Distance class
        // Build a distance object with negative values
        Distance buildDistance = Distance.buildDistance(-18, -18, 2732.1F, 2732.1F);
        // Transform the distance into Celera Assembler distance
        Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(buildDistance);
        // Test that the transformed distance is equal to the original distance
        assertEquals(buildDistance, transformIntoCeleraAssemblerDistance);
    }
}
statement is: // Test data for Distance class
// Build a distance object with negative values
Distance buildDistance = Distance.buildDistance(-18, -18, 2732.1F, 2732.1F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(-18, -18, 2732.1F, 2732.1F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: // Transform the distance into Celera Assembler distance
Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(buildDistance), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.transformIntoCeleraAssemblerDistance(buildDistance) target is: Distance method is: transformIntoCeleraAssemblerDistance(Distance)
Matched Method is: transformIntoCeleraAssemblerDistance(Lorg/jcvi/jillion/assembly/ca/frg/Distance;)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: // Test that the transformed distance is equal to the original distance
assertEquals(buildDistance, transformIntoCeleraAssemblerDistance), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test that the transformed distance is equal to the original distance
assertEquals(buildDistance, transformIntoCeleraAssemblerDistance) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: float _float = 2732.1F;
float _float = 2732.1F;
float _float = null;
float _float = null;
Distance buildDistance = Distance.buildDistance((int) _float, (int) _float, _float, _float);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(2404, 2404)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: Distance buildDistance = Distance.buildDistance(2404, 2404);
buildDistance.equals(buildDistance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(1000, 500);
        buildDistance.equals(buildDistance);
    }
}
statement is: Distance buildDistance = Distance.buildDistance(1000, 500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(1000, 500) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: buildDistance.equals(buildDistance), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.equals(buildDistance) target is: buildDistance method is: equals(Distance)
source statement: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 2
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: int _int = 1000;
int _int = 500;
Distance buildDistance = Distance.buildDistance(_int, _int);
((Distance) _int).equals(buildDistance);

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = distance.equals((Object) null)
test data is: Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.equals((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(40, 5, "3.2 miles", "59.8 km");
        buildDistance.equals(((Object) (null)));
    }
}
statement is: Distance buildDistance = Distance.buildDistance(40, 5, "3.2 miles", "59.8 km"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(40, 5, "3.2 miles", "59.8 km") target is: Distance method is: buildDistance(int,int,java.lang.String,java.lang.String)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: buildDistance.equals(((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.equals(((Object) (null))) target is: buildDistance method is: equals(java.lang.Object)
source statement: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 4
Matched Method is: equals(Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 40;
int _int = 5;
String string = "3.2 miles";
String string = "59.8 km";
Distance.buildDistance(_int, _int, (float) string, (float) string);
Object object = null;
((Distance) _int).equals(object);

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F))
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = distance.equals(arg0)
test data is: Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
Object object = new Object();
buildDistance.equals(object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(-332, 64, ((float) (64)), -1541.3F);
        Object object = new Object();
        buildDistance.equals(object);
    }
}
statement is: Distance buildDistance = Distance.buildDistance(-332, 64, ((float) (64)), -1541.3F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(-332, 64, ((float) (64)), -1541.3F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: buildDistance.equals(object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.equals(object) target is: buildDistance method is: equals(java.lang.Object)
source statement: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 4
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: int _int = 64;
int _int = 64;
int _int = null;
float _float = null;
Distance.buildDistance(_int, _int, (float) _int, _float);
Object object = new Object();
((Distance) _int).equals(object);

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(2402, 2402)
statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(2402, 0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = distance.equals(arg0)
test data is: Distance buildDistance = Distance.buildDistance(2402, 2402);
Distance buildDistance = Distance.buildDistance(2402, 0);
buildDistance.equals(buildDistance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance1 = Distance.buildDistance(2402, 2402);
        Distance buildDistance2 = Distance.buildDistance(3500, 0);
        assertTrue(buildDistance1.equals(buildDistance2));
    }
}
statement is: Distance buildDistance1 = Distance.buildDistance(2402, 2402), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(2402, 2402) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: Distance buildDistance2 = Distance.buildDistance(3500, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(3500, 0) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: assertTrue(buildDistance1.equals(buildDistance2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(buildDistance1.equals(buildDistance2)) target is:  method is: assertTrue(<unknown>)
TestCase is: int _int = 2402;
int _int = 2402;
Distance.buildDistance(_int, _int);
int _int = 3500;
int _int = 0;
Distance.buildDistance(_int, _int);

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-4594), (-1))
statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(3, (-1))
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = distance.equals(arg0)
test data is: Distance buildDistance = Distance.buildDistance((-4594), (-1));
Distance buildDistance = Distance.buildDistance(3, (-1));
buildDistance.equals(buildDistance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance1 = Distance.buildDistance(-4594, -1);
        Distance buildDistance2 = Distance.buildDistance(3, -1);
        buildDistance1.equals(buildDistance2);
    }
}
statement is: Distance buildDistance1 = Distance.buildDistance(-4594, -1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(-4594, -1) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: Distance buildDistance2 = Distance.buildDistance(3, -1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(3, -1) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: buildDistance1.equals(buildDistance2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance1.equals(buildDistance2) target is: buildDistance1 method is: equals(Distance)
TestCase is: int _int = null;
int _int = null;
Distance.buildDistance(_int, _int);
int _int = 3;
int _int = null;
Distance.buildDistance(_int, _int);

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F))
statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(64, 64, (float) 64, (float) 64)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = distance.equals(arg0)
test data is: Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
Distance buildDistance = Distance.buildDistance(64, 64, (float) 64, (float) 64);
buildDistance.equals(buildDistance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Arrange
        double x1 = 3;
        double y1 = 4;
        double z1 = 5;
        double x2 = 7;
        double y2 = 8;
        double z2 = 9;
        // Act
        Distance distance = Distance.buildDistance(x1, y1, z1, x2, y2, z2);
        // Assert
        assertEquals(Math.sqrt((((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1))) + ((z2 - z1) * (z2 - z1))), distance, 1.0E-6);
    }
}
statement is: // Arrange
double x1 = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y1 = 4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double z1 = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double x2 = 7, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double y2 = 8, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double z2 = 9, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Act
Distance distance = Distance.buildDistance(x1, y1, z1, x2, y2, z2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(x1, y1, z1, x2, y2, z2) target is: Distance method is: buildDistance(double,double,double,double,double,double)
statement is: // Assert
assertEquals(Math.sqrt((((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1))) + ((z2 - z1) * (z2 - z1))), distance, 1.0E-6), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert
assertEquals(Math.sqrt((((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1))) + ((z2 - z1) * (z2 - z1))), distance, 1.0E-6) target is:  method is: assertEquals(double,<unknown>,double)
* this is vulnerable: int _int = 3
* this is vulnerable: int _int = 4
* this is vulnerable: int _int = 5
* this is vulnerable: int _int = 7
* this is vulnerable: int _int = 8
* this is vulnerable: int _int = 9
TestCase is: int _int = 3;
int _int = 4;
int _int = 5;
int _int = 7;
int _int = 8;
int _int = 9;

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F)
statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = distance.equals(arg0)
test data is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.equals(buildDistance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(-18, -18, 2732.1F, 2732.1F);
        Distance buildDistance = Distance.buildDistance(-18, -18, 2732.1F, 2732.1F);
        buildDistance.equals(buildDistance);
    }
}
statement is: Distance buildDistance = Distance.buildDistance(-18, -18, 2732.1F, 2732.1F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(-18, -18, 2732.1F, 2732.1F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: Distance buildDistance = Distance.buildDistance(-18, -18, 2732.1F, 2732.1F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(-18, -18, 2732.1F, 2732.1F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: buildDistance.equals(buildDistance), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.equals(buildDistance) target is: buildDistance method is: equals(Distance)
TestCase is: float _float = 2732.1F;
float _float = 2732.1F;
float _float = null;
float _float = null;
Distance.buildDistance((int) _float, (int) _float, _float, _float);
float _float = 2732.1F;
float _float = 2732.1F;
float _float = null;
float _float = null;
Distance.buildDistance((int) _float, (int) _float, _float, _float);

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F)
statement is: getMean()F type is: class org.evosuite.testcase.statements.MethodStatement return type float
statement code is: float mean = distance.getMean()
test data is: Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.getMean();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(-90, -180, -2253.1895F, -69.69F);
        buildDistance.getMean();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(-90, -180, -2253.1895F, -69.69F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(-90, -180, -2253.1895F, -69.69F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 0 Parameters size() 0 Num of Method Parameters: 4
i 1 Parameters size() 0 Num of Method Parameters: 4
i 2 Parameters size() 0 Num of Method Parameters: 4
i 3 Parameters size() 0 Num of Method Parameters: 4
statement is: buildDistance.getMean(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getMean() target is: buildDistance method is: getMean()
source statement: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 4
Matched Method is: getMean()F
TestCase is: int _int = null;
int _int = null;
float _float = null;
float _float = null;
Distance.buildDistance(_int, _int, _float, _float);
((Distance) _int).getMean();

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-1744), (-1744))
statement is: getStdDev()F type is: class org.evosuite.testcase.statements.MethodStatement return type float
statement code is: float stdDev = distance.getStdDev()
test data is: Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getStdDev();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(10, 10);
        buildDistance.getStdDev();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(10, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(10, 10) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: buildDistance.getStdDev(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getStdDev() target is: buildDistance method is: getStdDev()
source statement: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 2
Matched Method is: getStdDev()F
TestCase is: int _int = 10;
int _int = 10;
Distance.buildDistance(_int, _int);
((Distance) _int).getStdDev();

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-1744), (-1744))
statement is: getMin()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int min = distance.getMin()
test data is: Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMin();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(90, 90);
        buildDistance.getMin();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(90, 90), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(90, 90) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: buildDistance.getMin(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getMin() target is: buildDistance method is: getMin()
source statement: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 2
Matched Method is: getMin()I
TestCase is: int _int = 90;
int _int = 90;
Distance.buildDistance(_int, _int);
((Distance) _int).getMin();

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-1744), (-1744))
statement is: getMax()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int max = distance.getMax()
test data is: Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMax();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(20, 35);
        buildDistance.getMax();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(20, 35), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(20, 35) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: buildDistance.getMax(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getMax() target is: buildDistance method is: getMax()
source statement: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 2
Matched Method is: getMax()I
TestCase is: int _int = 20;
int _int = 35;
Distance.buildDistance(_int, _int);
((Distance) _int).getMax();

statement is: buildDistance(FF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((float) (-1468), (-421.66666F))
test data is: Distance.buildDistance((float) (-1468), (-421.66666F));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance.buildDistance(((float) (10)), 42);
    }
}
statement is: Distance.buildDistance(((float) (10)), 42), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(((float) (10)), 42) target is: Distance method is: buildDistance(float,int)
Matched Method is: buildDistance(FF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
TestCase is: int _int = 10;
int _int = 42;
Distance.buildDistance((float) _int, (float) _int);

statement is: buildDistance(FF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((float) 0, (float) 0)
test data is: Distance.buildDistance((float) 0, (float) 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance.buildDistance(((float) (5.3)), ((float) (7.2)));
    }
}
statement is: Distance.buildDistance(((float) (5.3)), ((float) (7.2))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(((float) (5.3)), ((float) (7.2))) target is: Distance method is: buildDistance(float,float)
Matched Method is: buildDistance(FF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
TestCase is: double _double = 5.3;
double _double = 7.2;
Distance.buildDistance((float) _double, (float) _double);

statement is: buildDistance(FF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(1.015F, 0.0F)
test data is: Distance.buildDistance(1.015F, 0.0F);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Distance.buildDistance(123.456F, 987.654F);
    }
}
statement is: // Improved test data
Distance.buildDistance(123.456F, 987.654F), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
Distance.buildDistance(123.456F, 987.654F) target is: Distance method is: buildDistance(float,float)
Matched Method is: buildDistance(FF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
TestCase is: float _float = 123.456F;
float _float = 987.654F;
Distance.buildDistance(_float, _float);

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(0, 0)
statement is: getMax()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int max = distance.getMax()
test data is: Distance buildDistance = Distance.buildDistance(0, 0);
buildDistance.getMax();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(100.5, 50.2);
        buildDistance.getMax();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(100.5, 50.2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(100.5, 50.2) target is: Distance method is: buildDistance(double,double)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: buildDistance.getMax(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getMax() target is: buildDistance method is: getMax()
source statement: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 2
Matched Method is: getMax()I
TestCase is: double _double = 100.5;
double _double = 50.2;
Distance.buildDistance((int) _double, (int) _double);
((Distance) _double).getMax();

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(0, 0, 1187.361F, 1187.361F)
statement is: transformIntoCeleraAssemblerDistance(Lorg/jcvi/jillion/assembly/ca/frg/Distance;)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0)
test data is: Distance buildDistance = Distance.buildDistance(0, 0, 1187.361F, 1187.361F);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(-90, -180, 221.4273F, 221.4273F);
        Distance.transformIntoCeleraAssemblerDistance(buildDistance);
    }
}
statement is: Distance buildDistance = Distance.buildDistance(-90, -180, 221.4273F, 221.4273F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(-90, -180, 221.4273F, 221.4273F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: Distance.transformIntoCeleraAssemblerDistance(buildDistance), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.transformIntoCeleraAssemblerDistance(buildDistance) target is: Distance method is: transformIntoCeleraAssemblerDistance(Distance)
Matched Method is: transformIntoCeleraAssemblerDistance(Lorg/jcvi/jillion/assembly/ca/frg/Distance;)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
TestCase is: float _float = 221.4273F;
float _float = 221.4273F;
float _float = null;
float _float = null;
Distance buildDistance = Distance.buildDistance((int) _float, (int) _float, _float, _float);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-1744), (-1744), (-1.0F), (-1.0F))
test data is: Distance.buildDistance((-1744), (-1744), (-1.0F), (-1.0F));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance.buildDistance(Integer.MIN_VALUE, Integer.MAX_VALUE, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY);
    }
}
statement is: Distance.buildDistance(Integer.MIN_VALUE, Integer.MAX_VALUE, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(Integer.MIN_VALUE, Integer.MAX_VALUE, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 0 Parameters size() 0 Num of Method Parameters: 4
i 1 Parameters size() 0 Num of Method Parameters: 4
i 2 Parameters size() 0 Num of Method Parameters: 4
i 3 Parameters size() 0 Num of Method Parameters: 4
TestCase is: int _int = null;
int _int = null;
float _float = null;
float _float = null;
Distance.buildDistance(_int, _int, _float, _float);

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(2742, 2742, 0.0F, 1874.9637F)
statement is: getStdDev()F type is: class org.evosuite.testcase.statements.MethodStatement return type float
statement code is: float stdDev = distance.getStdDev()
test data is: Distance buildDistance = Distance.buildDistance(2742, 2742, 0.0F, 1874.9637F);
buildDistance.getStdDev();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(1000, 1000, 0.0F, 1874.9637F);
        buildDistance.getStdDev();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(1000, 1000, 0.0F, 1874.9637F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(1000, 1000, 0.0F, 1874.9637F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: buildDistance.getStdDev(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getStdDev() target is: buildDistance method is: getStdDev()
source statement: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 4
Matched Method is: getStdDev()F
TestCase is: int _int = 1000;
int _int = 1000;
float _float = 0.0F;
float _float = 1874.9637F;
Distance.buildDistance(_int, _int, _float, _float);
((Distance) _int).getStdDev();

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(0, 1964, 321.1125F, (float) 0)
test data is: Distance.buildDistance(0, 1964, 321.1125F, (float) 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance.buildDistance(1, 1964, 321.1125F, ((float) (0)));
    }
}
statement is: Distance.buildDistance(1, 1964, 321.1125F, ((float) (0))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(1, 1964, 321.1125F, ((float) (0))) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
TestCase is: int _int = 1;
int _int = 1964;
float _float = 321.1125F;
int _int = 0;
Distance.buildDistance(_int, _int, _float, (float) _int);

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F))
statement is: getMax()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int max = distance.getMax()
test data is: Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
buildDistance.getMax();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(-332, 64, ((float) (64)), -1541.3F);
        buildDistance.getMax();
        // Improved test data:
        Distance buildDistance = Distance.buildDistance(300, 64, ((float) (64)), -1541.3);
        buildDistance.getMax();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(-332, 64, ((float) (64)), -1541.3F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(-332, 64, ((float) (64)), -1541.3F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: buildDistance.getMax(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getMax() target is: buildDistance method is: getMax()
source statement: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 4
Matched Method is: getMax()I
statement is: // Improved test data:
Distance buildDistance = Distance.buildDistance(300, 64, ((float) (64)), -1541.3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(300, 64, ((float) (64)), -1541.3) target is: Distance method is: buildDistance(int,int,float,double)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 3 Parameters size() 3 Num of Method Parameters: 4
statement is: buildDistance.getMax(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getMax() target is: buildDistance method is: getMax()
source statement: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 10
Matched Method is: getMax()I
TestCase is: int _int = 64;
int _int = 64;
int _int = null;
float _float = null;
Distance.buildDistance(_int, _int, (float) _int, _float);
((Distance) _int).getMax();
int _int = 300;
int _int = 64;
int _int = 64;
float _float = null;
Distance.buildDistance(_int, _int, (float) _int, _float);
((Distance) _int).getMax();

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-1744), (-1744))
statement is: getMean()F type is: class org.evosuite.testcase.statements.MethodStatement return type float
statement code is: float mean = distance.getMean()
test data is: Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMean();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(20, 30);
        buildDistance.getMean();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(20, 30), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(20, 30) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: buildDistance.getMean(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getMean() target is: buildDistance method is: getMean()
source statement: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 2
Matched Method is: getMean()F
TestCase is: int _int = 20;
int _int = 30;
Distance.buildDistance(_int, _int);
((Distance) _int).getMean();

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((-1), (-4594), 0.0F, 2253.1895F)
statement is: getMean()F type is: class org.evosuite.testcase.statements.MethodStatement return type float
statement code is: float mean = distance.getMean()
test data is: Distance buildDistance = Distance.buildDistance((-1), (-4594), 0.0F, 2253.1895F);
buildDistance.getMean();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(-1, -4594, 0.0F, 2253.1895F);
        buildDistance.getMean();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(-1, -4594, 0.0F, 2253.1895F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(-1, -4594, 0.0F, 2253.1895F) target is: Distance method is: buildDistance(int,int,float,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 2 Parameters size() 2 Num of Method Parameters: 4
i 3 Parameters size() 2 Num of Method Parameters: 4
statement is: buildDistance.getMean(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getMean() target is: buildDistance method is: getMean()
source statement: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 4
Matched Method is: getMean()F
TestCase is: float _float = 0.0F;
float _float = 2253.1895F;
float _float = null;
float _float = null;
Distance.buildDistance((int) _float, (int) _float, _float, _float);
((Distance) _float).getMean();

statement is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F)
statement is: getMin()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int min = distance.getMin()
test data is: Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.getMin();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(100, 4, "Infinity", 99.99F);
        buildDistance.getMin();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(100, 4, "Infinity", 99.99F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(100, 4, "Infinity", 99.99F) target is: Distance method is: buildDistance(int,int,java.lang.String,float)
Matched Method is: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: buildDistance.getMin(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getMin() target is: buildDistance method is: getMin()
source statement: buildDistance(IIFF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 4
Matched Method is: getMin()I
TestCase is: int _int = 100;
int _int = 4;
String string = "Infinity";
float _float = 99.99F;
Distance.buildDistance(_int, _int, (float) string, _float);
((Distance) _int).getMin();

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(0, 0)
statement is: getMin()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int min = distance.getMin()
test data is: Distance buildDistance = Distance.buildDistance(0, 0);
buildDistance.getMin();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(1000, 2000);
        buildDistance.getMin();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(1000, 2000), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(1000, 2000) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: buildDistance.getMin(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getMin() target is: buildDistance method is: getMin()
source statement: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 2
Matched Method is: getMin()I
TestCase is: int _int = 1000;
int _int = 2000;
Distance.buildDistance(_int, _int);
((Distance) _int).getMin();

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(273, (-1744))
statement is: getStdDev()F type is: class org.evosuite.testcase.statements.MethodStatement return type float
statement code is: float stdDev = distance.getStdDev()
test data is: Distance buildDistance = Distance.buildDistance(273, (-1744));
buildDistance.getStdDev();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(345, -1255);
        buildDistance.getStdDev();
    }
}
statement is: Distance buildDistance = Distance.buildDistance(345, -1255), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(345, -1255) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: buildDistance.getStdDev(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: buildDistance.getStdDev() target is: buildDistance method is: getStdDev()
source statement: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.ca.frg.Distanceindex is: 2
Matched Method is: getStdDev()F
TestCase is: int _int = 345;
int _int = null;
Distance.buildDistance(_int, _int);
((Distance) _int).getStdDev();

statement is: buildDistance(FF)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance((float) (-1), 178.4F)
statement is: transformIntoCeleraAssemblerDistance(Lorg/jcvi/jillion/assembly/ca/frg/Distance;)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0)
test data is: Distance buildDistance = Distance.buildDistance((float) (-1), 178.4F);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(((float) (-1)), 178.4F);
        Distance.transformIntoCeleraAssemblerDistance(buildDistance);
    }
}
statement is: Distance buildDistance = Distance.buildDistance(((float) (-1)), 178.4F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(((float) (-1)), 178.4F) target is: Distance method is: buildDistance(float,float)
Matched Method is: buildDistance(FF)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
i 1 Parameters size() 1 Num of Method Parameters: 2
statement is: Distance.transformIntoCeleraAssemblerDistance(buildDistance), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.transformIntoCeleraAssemblerDistance(buildDistance) target is: Distance method is: transformIntoCeleraAssemblerDistance(Distance)
Matched Method is: transformIntoCeleraAssemblerDistance(Lorg/jcvi/jillion/assembly/ca/frg/Distance;)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
TestCase is: float _float = 178.4F;
float _float = null;
Distance buildDistance = Distance.buildDistance(_float, _float);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(0, 0)
statement is: transformIntoCeleraAssemblerDistance(Lorg/jcvi/jillion/assembly/ca/frg/Distance;)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0)
test data is: Distance buildDistance = Distance.buildDistance(0, 0);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        Distance buildDistance = Distance.buildDistance(10, 5);
        Distance.transformIntoCeleraAssemblerDistance(buildDistance);
    }
}
statement is: // Improved test data
Distance buildDistance = Distance.buildDistance(10, 5), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(10, 5) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: Distance.transformIntoCeleraAssemblerDistance(buildDistance), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.transformIntoCeleraAssemblerDistance(buildDistance) target is: Distance method is: transformIntoCeleraAssemblerDistance(Distance)
Matched Method is: transformIntoCeleraAssemblerDistance(Lorg/jcvi/jillion/assembly/ca/frg/Distance;)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
TestCase is: int _int = 10;
int _int = 5;
Distance buildDistance = Distance.buildDistance(_int, _int);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

statement is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance buildDistance = Distance.buildDistance(2529, (-1))
statement is: transformIntoCeleraAssemblerDistance(Lorg/jcvi/jillion/assembly/ca/frg/Distance;)Lorg/jcvi/jillion/assembly/ca/frg/Distance; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.assembly.ca.frg.Distance
statement code is: Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0)
test data is: Distance buildDistance = Distance.buildDistance(2529, (-1));
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Distance buildDistance = Distance.buildDistance(5000, 2500);
        Distance.transformIntoCeleraAssemblerDistance(buildDistance);
    }
}
statement is: Distance buildDistance = Distance.buildDistance(5000, 2500), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.buildDistance(5000, 2500) target is: Distance method is: buildDistance(int,int)
Matched Method is: buildDistance(II)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
statement is: Distance.transformIntoCeleraAssemblerDistance(buildDistance), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Distance.transformIntoCeleraAssemblerDistance(buildDistance) target is: Distance method is: transformIntoCeleraAssemblerDistance(Distance)
Matched Method is: transformIntoCeleraAssemblerDistance(Lorg/jcvi/jillion/assembly/ca/frg/Distance;)Lorg/jcvi/jillion/assembly/ca/frg/Distance;
TestCase is: int _int = 5000;
int _int = 2500;
Distance buildDistance = Distance.buildDistance(_int, _int);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

* test suite isTestSuite: 62
Test 0: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.toString();
Test 1: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.hashCode();
Test 2: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(buildDistance);
transformIntoCeleraAssemblerDistance.equals(buildDistance);
Test 3: 
Distance buildDistance = Distance.buildDistance(2404, 2404);
buildDistance.equals(buildDistance);
Test 4: 
Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.equals((Object) null);
Test 5: 
Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
Object object = new Object();
buildDistance.equals(object);
Test 6: 
Distance buildDistance = Distance.buildDistance(2402, 2402);
Distance buildDistance = Distance.buildDistance(2402, 0);
buildDistance.equals(buildDistance);
Test 7: 
Distance buildDistance = Distance.buildDistance((-4594), (-1));
Distance buildDistance = Distance.buildDistance(3, (-1));
buildDistance.equals(buildDistance);
Test 8: 
Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
Distance buildDistance = Distance.buildDistance(64, 64, (float) 64, (float) 64);
buildDistance.equals(buildDistance);
Test 9: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.equals(buildDistance);
Test 10: 
Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.getMean();
Test 11: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getStdDev();
Test 12: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMin();
Test 13: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMax();
Test 14: 
Distance.buildDistance((float) (-1468), (-421.66666F));
Test 15: 
Distance.buildDistance((float) 0, (float) 0);
Test 16: 
Distance.buildDistance(1.015F, 0.0F);
Test 17: 
Distance buildDistance = Distance.buildDistance(0, 0);
buildDistance.getMax();
Test 18: 
Distance buildDistance = Distance.buildDistance(0, 0, 1187.361F, 1187.361F);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);
Test 19: 
Distance.buildDistance((-1744), (-1744), (-1.0F), (-1.0F));
Test 20: 
Distance buildDistance = Distance.buildDistance(2742, 2742, 0.0F, 1874.9637F);
buildDistance.getStdDev();
Test 21: 
Distance.buildDistance(0, 1964, 321.1125F, (float) 0);
Test 22: 
Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
buildDistance.getMax();
Test 23: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMean();
Test 24: 
Distance buildDistance = Distance.buildDistance((-1), (-4594), 0.0F, 2253.1895F);
buildDistance.getMean();
Test 25: 
Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.getMin();
Test 26: 
Distance buildDistance = Distance.buildDistance(0, 0);
buildDistance.getMin();
Test 27: 
Distance buildDistance = Distance.buildDistance(273, (-1744));
buildDistance.getStdDev();
Test 28: 
Distance buildDistance = Distance.buildDistance((float) (-1), 178.4F);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);
Test 29: 
Distance buildDistance = Distance.buildDistance(0, 0);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);
Test 30: 
Distance buildDistance = Distance.buildDistance(2529, (-1));
Distance.transformIntoCeleraAssemblerDistance(buildDistance);
Test 31: 
int _int = 45;
Distance.buildDistance(45, (int) 2732.1F, 2732.1F, (float) (Float) null);
((Distance) _int).toString();

Test 32: 
int _int = 50;
Distance.buildDistance(50, (int) 900.0F, 800.0F, (float) (Float) null);
((Distance) _int).hashCode();

Test 33: 
Distance buildDistance = Distance.buildDistance((int) 2732.1F, (int) 2732.1F, (float) (Float) null, (float) (Float) null);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

Test 34: 
Distance buildDistance = Distance.buildDistance(1000, 500);
((Distance)1000).equals(buildDistance);

Test 35: 
int _int = 40;
Distance.buildDistance(40, 5, (float) "3.2 miles", (float) "59.8 km");
Object object = null;
((Distance) _int).equals(object);

Test 36: 
int _int = 64;
Distance.buildDistance(64, 64, (float) (Float) null, (float) (Float) null);
Object object = new Object();
((Distance) _int).equals(object);

Test 37: 
Distance.buildDistance(2402, 2402);
Distance.buildDistance(3500, 0);

Test 38: 
Distance.buildDistance((int) (Integer) null, (int) (Integer) null);
int _int = 3;
int _int = null;
Distance.buildDistance(_int, _int);

Test 39: 

Test 40: 
Distance.buildDistance((int) 2732.1F, (int) 2732.1F, (float) (Float) null, (float) (Float) null);
float _float = 2732.1F;
float _float = 2732.1F;
float _float = null;
float _float = null;
Distance.buildDistance((int) _float, (int) _float, _float, _float);

Test 41: 
int _int = null;
Distance.buildDistance((int) (Integer) null, (int) (Integer) null, (float) (Float) null, (float) (Float) null);
((Distance) _int).getMean();

Test 42: 
Distance.buildDistance(10, 10);
((Distance)10).getStdDev();

Test 43: 
Distance.buildDistance(90, 90);
((Distance)90).getMin();

Test 44: 
Distance.buildDistance(20, 35);
((Distance)20).getMax();

Test 45: 
Distance.buildDistance((float) 10, (float) 42);

Test 46: 
Distance.buildDistance((float) 5.3, (float) 7.2);

Test 47: 
Distance.buildDistance(123.456F, 987.654F);

Test 48: 
double _double = 100.5;
Distance.buildDistance((int) 100.5, (int) 50.2);
((Distance) _double).getMax();

Test 49: 
Distance buildDistance = Distance.buildDistance((int) 221.4273F, (int) 221.4273F, (float) (Float) null, (float) (Float) null);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

Test 50: 
Distance.buildDistance((int) (Integer) null, (int) (Integer) null, (float) (Float) null, (float) (Float) null);

Test 51: 
Distance.buildDistance(1000, 1000, 0.0F, 1874.9637F);
((Distance)1000).getStdDev();

Test 52: 
Distance.buildDistance(1, 1964, 321.1125F, (float) 0);

Test 53: 
int _int = 64;
Distance.buildDistance(64, 64, (float) (Float) null, (float) (Float) null);
((Distance) _int).getMax();
int _int = 300;
int _int = 64;
int _int = 64;
float _float = null;
Distance.buildDistance(_int, _int, (float) _int, _float);
((Distance) _int).getMax();

Test 54: 
Distance.buildDistance(20, 30);
((Distance)20).getMean();

Test 55: 
float _float = 0.0F;
Distance.buildDistance((int) 0.0F, (int) 2253.1895F, (float) (Float) null, (float) (Float) null);
((Distance) _float).getMean();

Test 56: 
int _int = 100;
Distance.buildDistance(100, 4, (float) "Infinity", 99.99F);
((Distance) _int).getMin();

Test 57: 
Distance.buildDistance(1000, 2000);
((Distance)1000).getMin();

Test 58: 
int _int = 345;
Distance.buildDistance(345, (int) (Integer) null);
((Distance) _int).getStdDev();

Test 59: 
Distance buildDistance = Distance.buildDistance(178.4F, (float) (Float) null);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

Test 60: 
Distance buildDistance = Distance.buildDistance(10, 5);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

Test 61: 
Distance buildDistance = Distance.buildDistance(5000, 2500);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);


* Generated after the refinement and before minimization 62 tests with total length 142
* test suite isTestSuite: 62
Test 0: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.toString();
Test 1: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.hashCode();
Test 2: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(buildDistance);
transformIntoCeleraAssemblerDistance.equals(buildDistance);
Test 3: 
Distance buildDistance = Distance.buildDistance(2404, 2404);
buildDistance.equals(buildDistance);
Test 4: 
Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.equals((Object) null);
Test 5: 
Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
Object object = new Object();
buildDistance.equals(object);
Test 6: 
Distance buildDistance = Distance.buildDistance(2402, 2402);
Distance buildDistance = Distance.buildDistance(2402, 0);
buildDistance.equals(buildDistance);
Test 7: 
Distance buildDistance = Distance.buildDistance((-4594), (-1));
Distance buildDistance = Distance.buildDistance(3, (-1));
buildDistance.equals(buildDistance);
Test 8: 
Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
Distance buildDistance = Distance.buildDistance(64, 64, (float) 64, (float) 64);
buildDistance.equals(buildDistance);
Test 9: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.equals(buildDistance);
Test 10: 
Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.getMean();
Test 11: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getStdDev();
Test 12: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMin();
Test 13: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMax();
Test 14: 
Distance.buildDistance((float) (-1468), (-421.66666F));
Test 15: 
Distance.buildDistance((float) 0, (float) 0);
Test 16: 
Distance.buildDistance(1.015F, 0.0F);
Test 17: 
Distance buildDistance = Distance.buildDistance(0, 0);
buildDistance.getMax();
Test 18: 
Distance buildDistance = Distance.buildDistance(0, 0, 1187.361F, 1187.361F);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);
Test 19: 
Distance.buildDistance((-1744), (-1744), (-1.0F), (-1.0F));
Test 20: 
Distance buildDistance = Distance.buildDistance(2742, 2742, 0.0F, 1874.9637F);
buildDistance.getStdDev();
Test 21: 
Distance.buildDistance(0, 1964, 321.1125F, (float) 0);
Test 22: 
Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
buildDistance.getMax();
Test 23: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMean();
Test 24: 
Distance buildDistance = Distance.buildDistance((-1), (-4594), 0.0F, 2253.1895F);
buildDistance.getMean();
Test 25: 
Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.getMin();
Test 26: 
Distance buildDistance = Distance.buildDistance(0, 0);
buildDistance.getMin();
Test 27: 
Distance buildDistance = Distance.buildDistance(273, (-1744));
buildDistance.getStdDev();
Test 28: 
Distance buildDistance = Distance.buildDistance((float) (-1), 178.4F);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);
Test 29: 
Distance buildDistance = Distance.buildDistance(0, 0);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);
Test 30: 
Distance buildDistance = Distance.buildDistance(2529, (-1));
Distance.transformIntoCeleraAssemblerDistance(buildDistance);
Test 31: 
int _int = 45;
Distance.buildDistance(45, (int) 2732.1F, 2732.1F, (float) (Float) null);
((Distance) _int).toString();

Test 32: 
int _int = 50;
Distance.buildDistance(50, (int) 900.0F, 800.0F, (float) (Float) null);
((Distance) _int).hashCode();

Test 33: 
Distance buildDistance = Distance.buildDistance((int) 2732.1F, (int) 2732.1F, (float) (Float) null, (float) (Float) null);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

Test 34: 
Distance buildDistance = Distance.buildDistance(1000, 500);
((Distance)1000).equals(buildDistance);

Test 35: 
int _int = 40;
Distance.buildDistance(40, 5, (float) "3.2 miles", (float) "59.8 km");
Object object = null;
((Distance) _int).equals(object);

Test 36: 
int _int = 64;
Distance.buildDistance(64, 64, (float) (Float) null, (float) (Float) null);
Object object = new Object();
((Distance) _int).equals(object);

Test 37: 
Distance.buildDistance(2402, 2402);
Distance.buildDistance(3500, 0);

Test 38: 
Distance.buildDistance((int) (Integer) null, (int) (Integer) null);
int _int = 3;
int _int = null;
Distance.buildDistance(_int, _int);

Test 39: 

Test 40: 
Distance.buildDistance((int) 2732.1F, (int) 2732.1F, (float) (Float) null, (float) (Float) null);
float _float = 2732.1F;
float _float = 2732.1F;
float _float = null;
float _float = null;
Distance.buildDistance((int) _float, (int) _float, _float, _float);

Test 41: 
int _int = null;
Distance.buildDistance((int) (Integer) null, (int) (Integer) null, (float) (Float) null, (float) (Float) null);
((Distance) _int).getMean();

Test 42: 
Distance.buildDistance(10, 10);
((Distance)10).getStdDev();

Test 43: 
Distance.buildDistance(90, 90);
((Distance)90).getMin();

Test 44: 
Distance.buildDistance(20, 35);
((Distance)20).getMax();

Test 45: 
Distance.buildDistance((float) 10, (float) 42);

Test 46: 
Distance.buildDistance((float) 5.3, (float) 7.2);

Test 47: 
Distance.buildDistance(123.456F, 987.654F);

Test 48: 
double _double = 100.5;
Distance.buildDistance((int) 100.5, (int) 50.2);
((Distance) _double).getMax();

Test 49: 
Distance buildDistance = Distance.buildDistance((int) 221.4273F, (int) 221.4273F, (float) (Float) null, (float) (Float) null);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

Test 50: 
Distance.buildDistance((int) (Integer) null, (int) (Integer) null, (float) (Float) null, (float) (Float) null);

Test 51: 
Distance.buildDistance(1000, 1000, 0.0F, 1874.9637F);
((Distance)1000).getStdDev();

Test 52: 
Distance.buildDistance(1, 1964, 321.1125F, (float) 0);

Test 53: 
int _int = 64;
Distance.buildDistance(64, 64, (float) (Float) null, (float) (Float) null);
((Distance) _int).getMax();
int _int = 300;
int _int = 64;
int _int = 64;
float _float = null;
Distance.buildDistance(_int, _int, (float) _int, _float);
((Distance) _int).getMax();

Test 54: 
Distance.buildDistance(20, 30);
((Distance)20).getMean();

Test 55: 
float _float = 0.0F;
Distance.buildDistance((int) 0.0F, (int) 2253.1895F, (float) (Float) null, (float) (Float) null);
((Distance) _float).getMean();

Test 56: 
int _int = 100;
Distance.buildDistance(100, 4, (float) "Infinity", 99.99F);
((Distance) _int).getMin();

Test 57: 
Distance.buildDistance(1000, 2000);
((Distance)1000).getMin();

Test 58: 
int _int = 345;
Distance.buildDistance(345, (int) (Integer) null);
((Distance) _int).getStdDev();

Test 59: 
Distance buildDistance = Distance.buildDistance(178.4F, (float) (Float) null);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

Test 60: 
Distance buildDistance = Distance.buildDistance(10, 5);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

Test 61: 
Distance buildDistance = Distance.buildDistance(5000, 2500);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);


* Minimizing test suite
* test suite isTestSuite: 31
Test 0: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.toString();
Test 1: 
Distance buildDistance = Distance.buildDistance(10, 5);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);
Test 2: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.hashCode();
Test 3: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMin();
Test 4: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMax();
Test 5: 
Distance buildDistance = Distance.buildDistance((float) (-1), 178.4F);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);
Test 6: 
Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.equals((Object) null);
Test 7: 
Distance buildDistance = Distance.buildDistance(2404, 2404);
buildDistance.equals(buildDistance);
Test 8: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.equals(buildDistance);
Test 9: 
Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
Object object = new Object();
buildDistance.equals(object);
Test 10: 
Distance buildDistance = Distance.buildDistance(2402, 2402);
Distance buildDistance = Distance.buildDistance(2402, 0);
buildDistance.equals(buildDistance);
Test 11: 
Distance buildDistance = Distance.buildDistance((-4594), (-1));
Distance buildDistance = Distance.buildDistance(3, (-1));
buildDistance.equals(buildDistance);
Test 12: 
Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
Distance buildDistance = Distance.buildDistance(64, 64, (float) 64, (float) 64);
buildDistance.equals(buildDistance);
Test 13: 
Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(buildDistance);
transformIntoCeleraAssemblerDistance.equals(buildDistance);
Test 14: 
Distance buildDistance = Distance.buildDistance((-1), (-4594), 0.0F, 2253.1895F);
buildDistance.getMean();
Test 15: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getStdDev();
Test 16: 
Distance.buildDistance((float) (-1468), (-421.66666F));
Test 17: 
Distance.buildDistance((float) 0, (float) 0);
Test 18: 
Distance.buildDistance(1.015F, 0.0F);
Test 19: 
Distance buildDistance = Distance.buildDistance(0, 0);
buildDistance.getMax();
Test 20: 
Distance.buildDistance(0, 0, 1187.361F, 1187.361F);
Test 21: 
Distance.buildDistance((-1744), (-1744), (-1.0F), (-1.0F));
Test 22: 
Distance.buildDistance(0, 1964, 321.1125F, (float) 0);
Test 23: 
Distance buildDistance = Distance.buildDistance((-332), 64, (float) 64, (-1541.3F));
buildDistance.getMax();
Test 24: 
Distance buildDistance = Distance.buildDistance((-1744), (-1744));
buildDistance.getMean();
Test 25: 
Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.getMean();
Test 26: 
Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
buildDistance.getMin();
Test 27: 
Distance buildDistance = Distance.buildDistance(0, 0);
buildDistance.getMin();
Test 28: 
Distance buildDistance = Distance.buildDistance(273, (-1744));
buildDistance.getStdDev();
Test 29: 
Distance buildDistance = Distance.buildDistance(2742, 2742, 0.0F, 1874.9637F);
buildDistance.getStdDev();
Test 30: 
Distance buildDistance = Distance.buildDistance(0, 0);
Distance.transformIntoCeleraAssemblerDistance(buildDistance);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 51
* Number of covered goals: 51
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 91%
* Total number of goals: 69
* Number of covered goals: 63
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Generated 31 tests with total length 62
* Resulting test suite's coverage: 98% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 70%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
String string = buildDistance.toString();
assertEquals("2732.100, std: 2732.100", string);
assertEquals((-18), buildDistance.getMin());
assertEquals((-18), buildDistance.getMax());


** It was a parseable test case! 
refined test name is: testBuildDistanceToString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Distance arg0 = Distance.buildDistance(10, 5);
Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0);
assertEquals(5, transformIntoCeleraAssemblerDistance.getMax());
assertEquals((-0.8333333F), transformIntoCeleraAssemblerDistance.getStdDev(), 0.01F);
assertEquals(7.5F, transformIntoCeleraAssemblerDistance.getMean(), 0.01F);
assertEquals(10, transformIntoCeleraAssemblerDistance.getMin());


** It was a parseable test case! 
refined test name is: testTransformIntoCeleraAssemblerDistanceValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Distance buildDistance = Distance.buildDistance((-18), (-18), 2732.1F, 2732.1F);
buildDistance.hashCode();
assertEquals(2732.1F, buildDistance.getStdDev(), 0.01F);
assertEquals((-18), buildDistance.getMin());
assertEquals(2732.1F, buildDistance.getMean(), 0.01F);
assertEquals((-18), buildDistance.getMax());


** It was a parseable test case! 
refined test name is: testHashCode
* Compiling Tests
refined test name is: testGetMax
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Distance buildDistance = Distance.buildDistance((-1744), (-1744));
int min = buildDistance.getMin();
assertEquals((-1744.0F), buildDistance.getMean(), 0.01F);
assertEquals((-1744), min);
assertEquals((-1744), buildDistance.getMax());
assertEquals(0.0F, buildDistance.getStdDev(), 0.01F);


** It was a parseable test case! 
refined test name is: testGetNegativeValuesForMinMaxMeanAndStdDev
* Compiling Tests
refined test name is: testNegativeDistanceValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Distance buildDistance = Distance.buildDistance((-1744), (-1744));
int max = buildDistance.getMax();
assertEquals((-1744.0F), buildDistance.getMean(), 0.01F);
assertEquals((-1744), max);
assertEquals((-1744), buildDistance.getMin());
assertEquals(0.0F, buildDistance.getStdDev(), 0.01F);


** It was a parseable test case! 
refined test name is: testGetMethods
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Distance arg0 = Distance.buildDistance((float) (-1), 178.4F);
Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0);
assertEquals(534, arg0.getMax());
assertEquals(178.4F, arg0.getStdDev(), 0.01F);
assertEquals((-1.0F), transformIntoCeleraAssemblerDistance.getMean(), 0.01F);
assertEquals((-0.6716666F), transformIntoCeleraAssemblerDistance.getStdDev(), 0.01F);
assertEquals((-536), arg0.getMin());


** It was a parseable test case! 
refined test name is: testTransformIntoCeleraAssemblerDistance
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Distance buildDistance = Distance.buildDistance(97, 3, 2253.1895F, 69.69F);
boolean equals = buildDistance.equals((Object) null);
assertEquals(3, buildDistance.getMax());
assertEquals(97, buildDistance.getMin());
assertEquals(69.69F, buildDistance.getStdDev(), 0.01F);
assertFalse(equals);
assertEquals(2253.1895F, buildDistance.getMean(), 0.01F);


** It was a parseable test case! 
refined test name is: testDistanceObjectEquality
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Distance arg0 = Distance.buildDistance(2404, 2404);
boolean equals = arg0.equals(arg0);
assertEquals(2404, arg0.getMin());
assertEquals(2404.0F, arg0.getMean(), 0.01F);
assertEquals(2404, arg0.getMax());
assertTrue(equals);
assertEquals(0.0F, arg0.getStdDev(), 0.01F);


** It was a parseable test case! 
* Computation finished
