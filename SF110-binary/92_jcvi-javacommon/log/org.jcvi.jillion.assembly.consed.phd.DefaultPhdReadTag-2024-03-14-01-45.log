* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/92_jcvi-javacommon/evosuite-files/evosuite.properties
* Connecting to master process on port 3894
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:45:25.928 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:45:26.000 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:45:26.001 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:45:26.011 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 01:45:26.012 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 01:45:26.014 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 01:45:26.015 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 01:45:26.017 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 01:45:26.018 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 01:45:26.019 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 01:45:26.024 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 01:45:26.026 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 01:45:26.029 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:45:26.076 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:45:26.084 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 211
* Using seed 1710380722935
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 64 / 211
[Progress:>                             1%] [Cov:=======================>           66%][Progress:>                             2%] [Cov:========================>          71%][Progress:>                             2%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:============================>      80%][Progress:>                             3%] [Cov:============================>      80%][Progress:>                             3%] [Cov:============================>      81%][Progress:=>                            4%] [Cov:============================>      81%][Progress:=>                            4%] [Cov:============================>      81%][Progress:=>                            4%] [Cov:============================>      81%][Progress:=>                            4%] [Cov:============================>      82%][Progress:=>                            4%] [Cov:============================>      82%][Progress:=>                            5%] [Cov:============================>      82%][Progress:=>                            5%] [Cov:============================>      82%][Progress:=>                            5%] [Cov:============================>      82%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            5%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:=>                            6%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           8%] [Cov:=============================>     84%][Progress:==>                           8%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:==============================>    86%][Progress:===>                          11%] [Cov:==============================>    86%][Progress:===>                          12%] [Cov:==============================>    86%][Progress:===>                          12%] [Cov:==============================>    86%][Progress:===>                          12%] [Cov:==============================>    86%][Progress:===>                          12%] [Cov:==============================>    86%][Progress:===>                          12%] [Cov:==============================>    86%][Progress:===>                          12%] [Cov:==============================>    86%][Progress:===>                          12%] [Cov:==============================>    86%][Progress:===>                          12%] [Cov:==============================>    86%][Progress:===>                          13%] [Cov:==============================>    86%][Progress:===>                          13%] [Cov:==============================>    86%][Progress:===>                          13%] [Cov:==============================>    86%][Progress:===>                          13%] [Cov:==============================>    86%][Progress:===>                          13%] [Cov:==============================>    86%][Progress:===>                          13%] [Cov:==============================>    86%][Progress:===>                          13%] [Cov:==============================>    86%][Progress:====>                         14%] [Cov:==============================>    86%][Progress:====>                         14%] [Cov:==============================>    86%][Progress:====>                         14%] [Cov:==============================>    87%][Progress:====>                         14%] [Cov:==============================>    87%][Progress:====>                         14%] [Cov:==============================>    87%][Progress:====>                         14%] [Cov:==============================>    87%][Progress:====>                         14%] [Cov:==============================>    87%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         14%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:==============================>    88%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         15%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:===============================>   91%][Progress:====>                         16%] [Cov:================================>  93%][Progress:====>                         16%] [Cov:================================>  93%][Progress:====>                         16%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        17%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        18%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  93%][Progress:=====>                        19%] [Cov:================================>  94%][Progress:=====>                        19%] [Cov:================================>  94%][Progress:=====>                        19%] [Cov:================================>  94%][Progress:=====>                        19%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       20%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       21%] [Cov:================================>  94%][Progress:======>                       22%] [Cov:================================>  94%][Progress:======>                       22%] [Cov:================================>  94%][Progress:======>                       22%] [Cov:================================>  94%][Progress:======>                       22%] [Cov:================================>  94%][Progress:======>                       22%] [Cov:================================>  94%][Progress:======>                       22%] [Cov:================================>  94%][Progress:======>                       22%] [Cov:================================>  94%][Progress:======>                       22%] [Cov:================================>  94%][Progress:======>                       22%] [Cov:================================>  94%][Progress:======>                       23%] [Cov:================================>  94%][Progress:======>                       23%] [Cov:================================>  94%][Progress:======>                       23%] [Cov:================================>  94%][Progress:======>                       23%] [Cov:================================>  94%][Progress:======>                       23%] [Cov:================================>  94%][Progress:======>                       23%] [Cov:================================>  94%][Progress:=======>                      24%] [Cov:================================>  94%][Progress:=======>                      24%] [Cov:================================>  94%][Progress:=======>                      24%] [Cov:================================>  94%][Progress:=======>                      24%] [Cov:================================>  94%][Progress:=======>                      24%] [Cov:================================>  94%][Progress:=======>                      24%] [Cov:================================>  94%][Progress:=======>                      24%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      25%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:=======>                      26%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     27%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     28%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:========>                     29%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    30%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    31%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    32%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:=========>                    33%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   34%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   35%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:==========>                   36%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  37%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  38%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:===========>                  39%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 40%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:================================>  94%][Progress:============>                 41%] [Cov:=================================> 95%][Progress:============>                 41%] [Cov:=================================> 95%][Progress:============>                 41%] [Cov:=================================> 95%][Progress:============>                 41%] [Cov:=================================> 95%][Progress:============>                 41%] [Cov:=================================> 95%][Progress:============>                 41%] [Cov:=================================> 95%][Progress:============>                 41%] [Cov:=================================> 95%][Progress:============>                 41%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 42%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:============>                 43%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                44%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                45%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:=============>                46%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               47%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               48%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:==============>               49%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              50%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              51%] [Cov:=================================> 95%][Progress:===============>              52%] [Cov:=================================> 95%][Progress:===============>              52%] [Cov:=================================> 95%][Progress:===============>              52%] [Cov:=================================> 95%][Progress:===============>              52%] [Cov:=================================> 95%][Progress:===============>              52%] [Cov:=================================> 95%][Progress:===============>              52%] [Cov:=================================> 95%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             55%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:================>             56%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            57%] [Cov:=================================> 97%][Progress:=================>            58%] [Cov:=================================> 97%][Progress:=================>            58%] [Cov:=================================> 97%][Progress:=================>            58%] [Cov:=================================> 97%][Progress:=================>            58%] [Cov:=================================> 97%][Progress:=================>            58%] [Cov:=================================> 97%][Progress:=================>            58%] [Cov:=================================> 97%][Progress:=================>            58%] [Cov:=================================> 97%][Progress:=================>            58%] [Cov:=================================> 97%][Progress:=================>            58%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:=================>            59%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           60%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          65%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:===================>          66%] [Cov:=================================> 97%][Progress:====================>         67%] [Cov:=================================> 97%][Progress:====================>         67%] [Cov:=================================> 97%][Progress:====================>         67%] [Cov:=================================> 97%][Progress:====================>         67%] [Cov:=================================> 97%][Progress:====================>         67%] [Cov:=================================> 97%][Progress:====================>         67%] [Cov:=================================> 97%][Progress:====================>         67%] [Cov:=================================> 97%][Progress:====================>         68%] [Cov:=================================> 97%][Progress:====================>         68%] [Cov:=================================> 97%][Progress:====================>         68%] [Cov:=================================> 97%][Progress:====================>         68%] [Cov:=================================> 97%][Progress:====================>         68%] [Cov:=================================> 97%][Progress:====================>         69%] [Cov:=================================> 97%][Progress:====================>         69%] [Cov:=================================> 97%][Progress:====================>         69%] [Cov:=================================> 97%][Progress:====================>         69%] [Cov:=================================> 97%][Progress:====================>         69%] [Cov:=================================> 97%][Progress:====================>         69%] [Cov:=================================> 97%][Progress:=====================>        70%] [Cov:=================================> 97%][Progress:=====================>        70%] [Cov:=================================> 97%][Progress:=====================>        70%] [Cov:=================================> 97%][Progress:=====================>        70%] [Cov:=================================> 97%][Progress:=====================>        70%] [Cov:=================================> 97%][Progress:=====================>        70%] [Cov:=================================> 97%][Progress:=====================>        70%] [Cov:=================================> 97%][Progress:=====================>        70%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      77%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      78%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:=======================>      79%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     80%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     81%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  90%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%]
* Search finished after 101s and 1143 generations, 550374 statements, best individual has fitness: 2.0
* Generated before the refinement 34 tests with total length 134
statement is: org.evosuite.runtime.mock.java.util.MockDate(III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-1100), (-1100), (-1100))
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, "kV\"oUP=A{2Xr", "4(2.2desF?!tp")
statement is: getFreeFormData()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String freeFormData = defaultPhdReadTag.getFreeFormData()
test data is: MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getFreeFormData();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockDate mockDate = new MockDate(2021, 12, 31);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Testing", "ABC-123", Range.of(1, 100), mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
        defaultPhdReadTag.getFreeFormData();
    }
}
statement is: MockDate mockDate = new MockDate(2021, 12, 31), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Testing", "ABC-123", Range.of(1, 100), mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getFreeFormData(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getFreeFormData() target is: defaultPhdReadTag method is: getFreeFormData()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 8
Matched Method is: getFreeFormData()Ljava/lang/String;
TestCase is: int _int = 2021;
int _int = 12;
int _int = 31;
MockDate mockDate = new MockDate(_int, _int, _int);
String string = "Testing";
String string = "ABC-123";
String string = "kV\"oUP=A{2Xr";
String string = "4(2.2desF?!tp";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "4(2.2desF?!tp");
((DefaultPhdReadTag) _int).getFreeFormData();

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6965L, 6965L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(83L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", arg2, arg3, "\"h8DX.uKec;", "O4(2.2desF?!tp")
statement is: getType()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String type = defaultPhdReadTag.getType()
test data is: Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8DX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(100L, 100L);
        MockDate mockDate = new MockDate(83L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8DX.uKec;", "O4(2.2desF?!tp");
        defaultPhdReadTag.getType();
    }
}
statement is: Range of = Range.of(100L, 100L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(100L, 100L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(83L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8DX.uKec;", "O4(2.2desF?!tp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getType() target is: defaultPhdReadTag method is: getType()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 9
Matched Method is: getType()Ljava/lang/String;
TestCase is: long _long = 100L;
long _long = 100L;
Range of = Range.of(_long, _long);
long _long = 83L;
MockDate mockDate = new MockDate(_long);
String string = "O4(2.2desF?!tp";
String string = "&";
String string = "\"h8DX.uKec;";
String string = "O4(2.2desF?!tp";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
((DefaultPhdReadTag) of).getType();

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6965L, 6965L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(83L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", arg2, arg3, "\"h8AX.uKec;", "O4(2.2desF?!tp")
statement is: getSource()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String source = defaultPhdReadTag.getSource()
test data is: Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getSource();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(6965L, 6965L);
        MockDate mockDate = new MockDate(83L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
        // Changed the source value to a more descriptive string that is representative of the situation being tested
        defaultPhdReadTag.getSource();// Returns "O4(2.2desF?!tp" }}

    }
}
statement is: Range of = Range.of(6965L, 6965L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(6965L, 6965L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(83L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Changed the source value to a more descriptive string that is representative of the situation being tested
defaultPhdReadTag.getSource()// Returns "O4(2.2desF?!tp" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed the source value to a more descriptive string that is representative of the situation being tested
defaultPhdReadTag.getSource()// Returns "O4(2.2desF?!tp" }}
 target is: defaultPhdReadTag method is: getSource()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 9
Matched Method is: getSource()Ljava/lang/String;
TestCase is: long _long = 6965L;
long _long = 6965L;
Range of = Range.of(_long, _long);
long _long = 83L;
MockDate mockDate = new MockDate(_long);
String string = "O4(2.2desF?!tp";
String string = "&";
String string = "\"h8AX.uKec;";
String string = "O4(2.2desF?!tp";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
((DefaultPhdReadTag) of).getSource();

statement is: org.evosuite.runtime.mock.java.util.MockDate(III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-2496), (-2496), 0)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, arg3, "", "")
statement is: getDate()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate date = (MockDate)defaultPhdReadTag.getDate()
test data is: MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getDate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockDate mockDate = new MockDate(2019, 1, 1);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("my-tag", "my-value", null, mockDate, "", "");
        defaultPhdReadTag.getDate();
    }
}
statement is: MockDate mockDate = new MockDate(2019, 1, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("my-tag", "my-value", null, mockDate, "", ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getDate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getDate() target is: defaultPhdReadTag method is: getDate()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 8
Matched Method is: getDate()Ljava/util/Date;
TestCase is: int _int = 2019;
int _int = 1;
int _int = 1;
MockDate mockDate = new MockDate(_int, _int, _int);
String string = "my-tag";
String string = "my-value";
String string = "";
String string = "";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "");
((DefaultPhdReadTag) _int).getDate();

statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null)
statement is: getUngappedRange()Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range ungappedRange = defaultPhdReadTag.getUngappedRange()
test data is: MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.getUngappedRange();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2019-04-30", "2019-05-07", ((Range) (null)), mockDate, "1", "1");
        defaultPhdReadTag.getUngappedRange();
    }
}
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2019-04-30", "2019-05-07", ((Range) (null)), mockDate, "1", "1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getUngappedRange(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getUngappedRange() target is: defaultPhdReadTag method is: getUngappedRange()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 5
Matched Method is: getUngappedRange()Lorg/jcvi/jillion/core/Range;
TestCase is: MockDate mockDate = new MockDate();
String string = "2019-04-30";
String string = "2019-05-07";
String string = "1";
String string = "1";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, (String) null);
((DefaultPhdReadTag) string).getUngappedRange();

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6965L, 6965L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(83L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", arg2, arg3, "\"h8AX.uKec;", "O4(2.2desF?!tp")
statement is: getComment()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String comment = defaultPhdReadTag.getComment()
test data is: Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getComment();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(9567L, 9567L);
        MockDate mockDate = new MockDate(134L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("84hg2304", "~", of, mockDate, "kjhg2304", "84hg2304");
        defaultPhdReadTag.getComment();
    }
}
statement is: Range of = Range.of(9567L, 9567L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(9567L, 9567L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(134L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("84hg2304", "~", of, mockDate, "kjhg2304", "84hg2304"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getComment(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getComment() target is: defaultPhdReadTag method is: getComment()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 9
Matched Method is: getComment()Ljava/lang/String;
TestCase is: long _long = 9567L;
long _long = 9567L;
Range of = Range.of(_long, _long);
long _long = 134L;
MockDate mockDate = new MockDate(_long);
String string = "84hg2304";
String string = "~";
String string = "kjhg2304";
String string = "84hg2304";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
((DefaultPhdReadTag) of).getComment();

statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = defaultPhdReadTag.hashCode()
test data is: MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockDate mockDate = new MockDate("2021-12-25");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("S1234567", "Patient Name", Range.of(1, 2), mockDate, "Dr. John Doe", "Room Number");
        defaultPhdReadTag.hashCode();
    }
}
statement is: MockDate mockDate = new MockDate("2021-12-25"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("S1234567", "Patient Name", Range.of(1, 2), mockDate, "Dr. John Doe", "Room Number"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.hashCode() target is: defaultPhdReadTag method is: hashCode()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 4
Matched Method is: hashCode()I
TestCase is: String string = "S1234567";
String string = "Patient Name";
String string = "Dr. John Doe";
String string = "Room Number";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, (String) null, (String) null);
string.hashCode();

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6965L, 6965L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", arg2, (Date) null, "AvT@(iCx", "&")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = defaultPhdReadTag.hashCode()
test data is: Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
defaultPhdReadTag.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(6965L, 7005L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, ((Date) (null)), "AvT@(iCx", "&");
        defaultPhdReadTag.hashCode();
    }
}
statement is: Range of = Range.of(6965L, 7005L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(6965L, 7005L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, ((Date) (null)), "AvT@(iCx", "&"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.hashCode() target is: defaultPhdReadTag method is: hashCode()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 7
Matched Method is: hashCode()I
TestCase is: long _long = 6965L;
long _long = 7005L;
Range of = Range.of(_long, _long);
String string = "&";
String string = "&";
String string = "AvT@(iCx";
String string = "&";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, (Date) string, string, "&");
((DefaultPhdReadTag) _long).hashCode();

statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, arg3, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*")
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, arg3, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", ((Range) (null)), mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
        DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", ((Range) (null)), mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
        defaultPhdReadTag.equals(defaultPhdReadTag2);
    }
}
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", ((Range) (null)), mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", ((Range) (null)), mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag2) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 10
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: MockDate mockDate = new MockDate();
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "r@:KgyoH_w\"J|*v*");
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "r@:KgyoH_w\"J|*v*");
string.equals(defaultPhdReadTag);

statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", (Range) null, arg3, "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", (Range) null, mockDate, "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    @ParameterizedTest
    @ValueSource(strings = { "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange" })
    public void testEquals_sameTags(String tag1, String tag2) {
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag(tag1, mockDate);
        DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag(tag2, mockDate);
        boolean expectedResult = true;
        boolean actualResult = defaultPhdReadTag1.equals(defaultPhdReadTag2);
        assertEquals(expectedResult, actualResult);
    }
}
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag(tag1, mockDate), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag(tag2, mockDate), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: boolean expectedResult = true, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean actualResult = defaultPhdReadTag1.equals(defaultPhdReadTag2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag1.equals(defaultPhdReadTag2) target is: defaultPhdReadTag1 method is: equals(DefaultPhdReadTag)
statement is: assertEquals(expectedResult, actualResult), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedResult, actualResult) target is:  method is: assertEquals(boolean,boolean)
* this is vulnerable: boolean _boolean = true
TestCase is: MockDate mockDate = new MockDate();
boolean _boolean = true;

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6965L, 6965L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(83L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", arg2, arg3, "AvT@(iCx", (String) null)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals((Object) null)
test data is: Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
defaultPhdReadTag.equals((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(6965L, 6965L);// This represents a range that includes only one value (6965)

        MockDate mockDate = new MockDate(83L);// This represents a date in the past (January 1st, 1983)

        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", ((String) (null)));// This represents a tag with a name that starts with the letter 'E' and ends with the letter 'x', and contains a date in the past.

        defaultPhdReadTag.equals(((Object) (null)));// This represents a scenario where the tag is compared to null, which will return false. }}

    }
}
statement is: Range of = Range.of(6965L, 6965L)// This represents a range that includes only one value (6965)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(6965L, 6965L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(83L)// This represents a date in the past (January 1st, 1983)
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", ((String) (null)))// This represents a tag with a name that starts with the letter 'E' and ends with the letter 'x', and contains a date in the past.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(((Object) (null)))// This represents a scenario where the tag is compared to null, which will return false. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(((Object) (null)))// This represents a scenario where the tag is compared to null, which will return false. }}
 target is: defaultPhdReadTag method is: equals(java.lang.Object)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 8
Matched Method is: equals(Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: long _long = 6965L;
long _long = 6965L;
Range of = Range.of(_long, _long);
long _long = 83L;
MockDate mockDate = new MockDate(_long);
String string = "E!<i]ZkO;w!T+bV)ff)";
String string = "&";
String string = "AvT@(iCx";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
Object object = null;
of.equals(object);

statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, arg3, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals("r@:KgyoH_w\"J|*v*")
test data is: MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals("r@:KgyoH_w\"J|*v*");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1234567890", "1234567890", ((Range) (null)), mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
        defaultPhdReadTag.equals("1234567890");
    }
}
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1234567890", "1234567890", ((Range) (null)), mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals("1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals("1234567890") target is: defaultPhdReadTag method is: equals(java.lang.String)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 5
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: MockDate mockDate = new MockDate();
String string = "1234567890";
String string = "1234567890";
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "r@:KgyoH_w\"J|*v*");
String string = "1234567890";
string.equals(string);

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of((-1L), (-1L))
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-1719L))
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", arg2, arg3, "4(2.2desF?!tp", (String) null)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", arg2, arg3, (String) null, "ABC,dJd/5xL|EH>_")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range range = Range.of(-1L, -1L);
        MockDate mockDate = new MockDate(-1719L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", range, mockDate, "4(2.2desF?!tp", ((String) (null)));
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", range, mockDate, ((String) (null)), "ABC,dJd/5xL|EH>_");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range range = Range.of(-1L, -1L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(-1L, -1L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: MockDate mockDate = new MockDate(-1719L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", range, mockDate, "4(2.2desF?!tp", ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", range, mockDate, ((String) (null)), "ABC,dJd/5xL|EH>_"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
TestCase is: long _long = null;
long _long = null;
Range of = Range.of(_long, _long);
MockDate mockDate = new MockDate((-1719L));
String string = "4(2.2desF?!tp";
String string = "ABC,dJd/5xL|EH>_";
String string = "4(2.2desF?!tp";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
String string = "4(2.2desF?!tp";
String string = "ABC,dJd/5xL|EH>_";
String string = "ABC,dJd/5xL|EH>_";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of((-1L), (-1L))
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-1719L))
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", arg2, arg3, "4(2.2desF?!tp", (String) null)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", arg2, arg3, (String) null, "ABC,dJd/5xL|EH>_")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(-1234567890L, -987654321L);
        MockDate mockDate = new MockDate(-987654321L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("A", "B", of, mockDate, "C", ((String) (null)));
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("A", "B", of, mockDate, ((String) (null)), "C");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range of = Range.of(-1234567890L, -987654321L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(-1234567890L, -987654321L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: MockDate mockDate = new MockDate(-987654321L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("A", "B", of, mockDate, "C", ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("A", "B", of, mockDate, ((String) (null)), "C"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 11
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: long _long = null;
long _long = null;
Range of = Range.of(_long, _long);
MockDate mockDate = new MockDate((-1719L));
String string = "A";
String string = "B";
String string = "C";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
String string = "A";
String string = "B";
String string = "C";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
of.equals(defaultPhdReadTag);

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6965L, 6965L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", arg2, (Date) null, "AvT@(iCx", "&")
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "SB", arg2, (Date) null, "AvT@(iCx", "nng")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "SB", of, (Date) null, "AvT@(iCx", "nng");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range range = Range.of(6965L, 6965L);
        DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("&", "&", of, ((Date) (null)), "AvT@(iCx", "&");
        DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("", "SB", of, ((Date) (null)), "AvT@(iCx", "nng");
        assertTrue(defaultPhdReadTag1.equals(defaultPhdReadTag2));
    }
}
statement is: Range range = Range.of(6965L, 6965L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(6965L, 6965L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("&", "&", of, ((Date) (null)), "AvT@(iCx", "&"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("", "SB", of, ((Date) (null)), "AvT@(iCx", "nng"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(defaultPhdReadTag1.equals(defaultPhdReadTag2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(defaultPhdReadTag1.equals(defaultPhdReadTag2)) target is:  method is: assertTrue(<unknown>)
TestCase is: long _long = 6965L;
long _long = 6965L;
Range.of(_long, _long);
String string = "&";
String string = "&";
String string = "AvT@(iCx";
String string = "&";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, "AvT@(iCx", "&");
String string = "";
String string = "SB";
String string = "AvT@(iCx";
String string = "nng";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, "AvT@(iCx", "&");

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6965L, 6965L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "&", arg2, (Date) null, "AvT@(iCx", (String) null)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "&", arg2, arg3, "AvT@(iCx", "z5!A2f54Mml0gp")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "&", of, (Date) null, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "&", of, mockDate, "AvT@(iCx", "z5!A2f54Mml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(6965L, 6965L);
        MockDate mockDate = new MockDate("2023-04-18T08:30:00Z");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Birthday", "&", of, mockDate, "John Doe", "Jane Doe");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range of = Range.of(6965L, 6965L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(6965L, 6965L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate("2023-04-18T08:30:00Z"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Birthday", "&", of, mockDate, "John Doe", "Jane Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 7
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: long _long = 6965L;
long _long = 6965L;
Range of = Range.of(_long, _long);
String string = "Birthday";
String string = "&";
String string = "John Doe";
String string = "Jane Doe";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, (Date) string, string, (String) null);
of.equals(defaultPhdReadTag);

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6965L, 6965L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(83L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", arg2, arg3, "\"h8AX.uKec;", "\"h8AX.uKec;")
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", arg2, arg3, "\"h8AX.uKec;", "\"h8AX.uKec;")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(12345L, 67890L);
        MockDate mockDate = new MockDate(83L);
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range of = Range.of(12345L, 67890L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(12345L, 67890L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(83L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
TestCase is: long _long = 12345L;
long _long = 67890L;
Range of = Range.of(_long, _long);
long _long = 83L;
MockDate mockDate = new MockDate(_long);
MockDate mockDate = new MockDate();
String string = "&";
String string = "O4(2.2desF?!tp";
String string = "\"h8AX.uKec;";
String string = "\"h8AX.uKec;";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
String string = "vS@QB<0";
String string = "vS@QB<0";
String string = "\"h8AX.uKec;";
String string = "\"h8AX.uKec;";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6965L, 6965L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(83L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", arg2, arg3, "AvT@(iCx", (String) null)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", arg2, arg3, "AvT@(iCx", "z5!A2f54M\"ml0gp")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", of, mockDate, "AvT@(iCx", "z5!A2f54M\"ml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(6965L, 6965L);
        MockDate mockDate = new MockDate(83L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", ((String) (null)));
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", of, mockDate, "AvT@(iCx", "z5!A2f54M\"ml0gp");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range of = Range.of(6965L, 6965L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(6965L, 6965L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(83L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", of, mockDate, "AvT@(iCx", "z5!A2f54M\"ml0gp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 13
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: long _long = 6965L;
long _long = 6965L;
Range of = Range.of(_long, _long);
long _long = 83L;
MockDate mockDate = new MockDate(_long);
String string = "E!<i]ZkO;w!T+bV)ff)";
String string = "&";
String string = "AvT@(iCx";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
String string = "1xc~3uyim`<jk9f";
String string = "\"h8AX.uKec;";
String string = "AvT@(iCx";
String string = "z5!A2f54M\"ml0gp";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
of.equals(defaultPhdReadTag);

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(7000L, 7000L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, arg2, arg3, "4C7U]l< RQC*\"@P=", (String) null)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, arg2, arg3, "4C7U]l< RQC*\"@P=", (String) null)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(7000L, 7000L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(7000L, 7000L);
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("Patient 1", "Diagnosis 1", of, mockDate, "4C7U]l< RQ\u007fC*\u007f\"@P=", "Medication 1");
        DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("Patient 2", "Diagnosis 2", of, mockDate, "4C7U]l< RQ\u007fC*\u007f\"@P=", "Medication 2");
        defaultPhdReadTag1.equals(defaultPhdReadTag2);
    }
}
statement is: Range of = Range.of(7000L, 7000L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(7000L, 7000L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("Patient 1", "Diagnosis 1", of, mockDate, "4C7U]l< RQ\u007fC*\u007f\"@P=", "Medication 1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("Patient 2", "Diagnosis 2", of, mockDate, "4C7U]l< RQ\u007fC*\u007f\"@P=", "Medication 2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag1.equals(defaultPhdReadTag2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag1.equals(defaultPhdReadTag2) target is: defaultPhdReadTag1 method is: equals(DefaultPhdReadTag)
TestCase is: long _long = 7000L;
long _long = 7000L;
Range of = Range.of(_long, _long);
MockDate mockDate = new MockDate();
String string = "Patient 1";
String string = "Diagnosis 1";
String string = "4C7U]l< RQC*\"@P=";
String string = "Medication 1";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
String string = "Patient 2";
String string = "Diagnosis 2";
String string = "4C7U]l< RQC*\"@P=";
String string = "Medication 2";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);

statement is: of(J)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6949L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", arg2, arg3, "kV\"UPA{2r", "kV\"UPA{2r")
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", (String) null, arg2, arg3, "kV\"UPA{2r", "kV\"UPA{2r")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(6949L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", (String) null, of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(6949L);
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("01-01-2023", ((String) (null)), of, mockDate, "01-01-2023", "01-01-2023");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range of = Range.of(6949L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(6949L) target is: Range method is: of(long)
Matched Method is: of(J)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("01-01-2023", ((String) (null)), of, mockDate, "01-01-2023", "01-01-2023"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
TestCase is: long _long = 6949L;
Range of = Range.of(_long);
MockDate mockDate = new MockDate();
String string = "kV\"UPA{2r";
String string = "kV\"UPA{2r";
String string = "kV\"UPA{2r";
String string = "kV\"UPA{2r";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
String string = "01-01-2023";
String string = "01-01-2023";
String string = "01-01-2023";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, (String) of, (Range) mockDate, (Date) string, string, string);

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6965L, 6965L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(83L)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", arg2, arg3, "\"h8AX.uKec;", "O4(2.2desF?!tp")
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", arg2, arg3, "\"h8AX.uKec;", "O4(2.2desF?!tp")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range range = Range.of(6965L, 6965L);
        MockDate mockDate = new MockDate(83L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2018-05-08", "&", range, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", range, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range range = Range.of(6965L, 6965L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(6965L, 6965L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(83L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2018-05-08", "&", range, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", range, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 14
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: long _long = 6965L;
long _long = 6965L;
Range of = Range.of(_long, _long);
long _long = 83L;
MockDate mockDate = new MockDate(_long);
String string = "2018-05-08";
String string = "&";
String string = "\"h8AX.uKec;";
String string = "O4(2.2desF?!tp";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
String string = "\"h8AX.uKec;";
String string = "O4(2.2desF?!tp";
String string = "\"h8AX.uKec;";
String string = "O4(2.2desF?!tp";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
of.equals(defaultPhdReadTag);

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6967L, 6967L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQC*\"@P=", (String) null, arg2, arg3, (String) null, (String) null)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, arg2, arg3, (String) null, (String) null)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQC*\"@P=", (String) null, of, mockDate, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, (String) null, (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(6967L, 6967L);
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQ\u007fC*\u007f\"@P=", ((String) (null)), of, mockDate, ((String) (null)), ((String) (null)));
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(((String) (null)), ((String) (null)), of, mockDate, ((String) (null)), ((String) (null)));
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range of = Range.of(6967L, 6967L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(6967L, 6967L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQ\u007fC*\u007f\"@P=", ((String) (null)), of, mockDate, ((String) (null)), ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(((String) (null)), ((String) (null)), of, mockDate, ((String) (null)), ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
TestCase is: long _long = 6967L;
long _long = 6967L;
Range of = Range.of(_long, _long);
MockDate mockDate = new MockDate();
String string = "4C7U]l< RQC*\"@P=";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, (String) of, (Range) mockDate, (Date) _long, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) of, (String) mockDate, (Range) mockDate, (Date) _long, (String) null, (String) null);

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6967L, 6967L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", (String) null, arg2, arg3, "kV\"oUP=A{2Xr", (String) null)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, arg2, arg3, "kV\"oUP=A{2Xr", (String) null)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(6967L, 6967L);
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", "Test Tag Name", of, mockDate, "kV\"oUP=A{2Xr", "Test Tag Description");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Test Tag Name", "Test Tag Description", of, mockDate, "kV\"oUP=A{2Xr", "Test Tag Description");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range of = Range.of(6967L, 6967L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(6967L, 6967L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", "Test Tag Name", of, mockDate, "kV\"oUP=A{2Xr", "Test Tag Description"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Test Tag Name", "Test Tag Description", of, mockDate, "kV\"oUP=A{2Xr", "Test Tag Description"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 13
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: long _long = 6967L;
long _long = 6967L;
Range of = Range.of(_long, _long);
MockDate mockDate = new MockDate();
String string = "kV\"oUP=A{2Xr";
String string = "Test Tag Name";
String string = "kV\"oUP=A{2Xr";
String string = "Test Tag Description";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
String string = "Test Tag Name";
String string = "Test Tag Description";
String string = "kV\"oUP=A{2Xr";
String string = "Test Tag Description";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
of.equals(defaultPhdReadTag);

statement is: of(J)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(7009L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, arg3, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*")
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", arg2, arg3, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(7009L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", of, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range range = Range.of(7009L);
        MockDate mockDate = new MockDate("2023-04-15T18:30:00Z");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", range, mockDate, "Blood Pressure Monitor", "John Doe");
        defaultPhdReadTag.equals(defaultPhdReadTag);
    }
}
statement is: Range range = Range.of(7009L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(7009L) target is: Range method is: of(long)
Matched Method is: of(J)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate("2023-04-15T18:30:00Z"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", range, mockDate, "Blood Pressure Monitor", "John Doe"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.equals(defaultPhdReadTag), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.equals(defaultPhdReadTag) target is: defaultPhdReadTag method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 6
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: long _long = 7009L;
Range of = Range.of(_long);
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
String string = "Blood Pressure Monitor";
String string = "John Doe";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, (Date) string, string, "r@:KgyoH_w\"J|*v*");
string.equals(defaultPhdReadTag);

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(6981L, 6981L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", arg2, arg3, "", "")
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, arg3, "", "")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = defaultPhdReadTag.equals(arg0)
test data is: Range of = Range.of(6981L, 6981L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "", "");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.equals(defaultPhdReadTag);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(100L, 100L);
        MockDate mockDate = new MockDate();
        DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("John Doe", "JD001", of, mockDate, "1234 Main St.", "New York");
        DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("Jane Smith", "JS001", ((Range) (null)), mockDate, "1234 Main St.", "New York");
        defaultPhdReadTag1.equals(defaultPhdReadTag2);
    }
}
statement is: Range of = Range.of(100L, 100L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(100L, 100L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("John Doe", "JD001", of, mockDate, "1234 Main St.", "New York"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("Jane Smith", "JS001", ((Range) (null)), mockDate, "1234 Main St.", "New York"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag1.equals(defaultPhdReadTag2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag1.equals(defaultPhdReadTag2) target is: defaultPhdReadTag1 method is: equals(DefaultPhdReadTag)
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 13
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: long _long = 100L;
long _long = 100L;
Range of = Range.of(_long, _long);
MockDate mockDate = new MockDate();
String string = "John Doe";
String string = "JD001";
String string = "1234 Main St.";
String string = "New York";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, string);
String string = "Jane Smith";
String string = "JS001";
String string = "1234 Main St.";
String string = "New York";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, string);
of.equals(defaultPhdReadTag);

statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "")
statement is: getComment()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String comment = defaultPhdReadTag.getComment()
test data is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getComment();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("PhD", "Student", ((Range) (null)), ((Date) (null)), "University of California", "San Francisco");
        defaultPhdReadTag.getComment();
    }
}
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("PhD", "Student", ((Range) (null)), ((Date) (null)), "University of California", "San Francisco"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getComment(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getComment() target is: defaultPhdReadTag method is: getComment()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 4
Matched Method is: getComment()Ljava/lang/String;
TestCase is: String string = "PhD";
String string = "Student";
String string = "University of California";
String string = "San Francisco";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, "", "");
((DefaultPhdReadTag) string).getComment();

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of((-1L), (-1L))
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-1719L))
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", arg2, arg3, (String) null, "ABC,dJd/5xL|EH>_")
statement is: getComment()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String comment = defaultPhdReadTag.getComment()
test data is: Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.getComment();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(-100L, -100L);
        MockDate mockDate = new MockDate(-10000L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, ((String) (null)), "ABC,dJd/5xL|EH>_");
        defaultPhdReadTag.getComment();
    }
}
statement is: Range of = Range.of(-100L, -100L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(-100L, -100L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
i 0 Parameters size() 0 Num of Method Parameters: 2
i 1 Parameters size() 0 Num of Method Parameters: 2
statement is: MockDate mockDate = new MockDate(-10000L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, ((String) (null)), "ABC,dJd/5xL|EH>_"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getComment(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getComment() target is: defaultPhdReadTag method is: getComment()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 7
Matched Method is: getComment()Ljava/lang/String;
TestCase is: long _long = null;
long _long = null;
Range of = Range.of(_long, _long);
MockDate mockDate = new MockDate((-1719L));
String string = "4(2.2desF?!tp";
String string = "ABC,dJd/5xL|EH>_";
String string = "ABC,dJd/5xL|EH>_";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, "ABC,dJd/5xL|EH>_");
((DefaultPhdReadTag) of).getComment();

statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", (Range) null, (Date) null, "", "")
statement is: getDate()Ljava/util/Date; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.util.Date
statement code is: Date date = defaultPhdReadTag.getDate()
test data is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getDate();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", ((Range) (null)), ((Date) (null)), "2023-04-15T18:30:00Z", "");
        defaultPhdReadTag.getDate();
    }
}
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", ((Range) (null)), ((Date) (null)), "2023-04-15T18:30:00Z", ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getDate(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getDate() target is: defaultPhdReadTag method is: getDate()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 4
Matched Method is: getDate()Ljava/util/Date;
TestCase is: String string = "org.jcvi.jillion.core.Range$EmptyByteRange";
String string = "org.jcvi.jillion.core.Range$EmptyByteRange";
String string = "2023-04-15T18:30:00Z";
String string = "";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, "", "");
((DefaultPhdReadTag) string).getDate();

statement is: org.evosuite.runtime.mock.java.util.MockDate(III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-2496), (-2496), 0)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, arg3, "", "")
statement is: getFreeFormData()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String freeFormData = defaultPhdReadTag.getFreeFormData()
test data is: MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getFreeFormData();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockDate mockDate = new MockDate(-2496, -2496, 0);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Joe", "Smith", ((Range) (null)), mockDate, "123 Main St.", "Anytown, USA");
        defaultPhdReadTag.getFreeFormData();
    }
}
statement is: MockDate mockDate = new MockDate(-2496, -2496, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Joe", "Smith", ((Range) (null)), mockDate, "123 Main St.", "Anytown, USA"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getFreeFormData(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getFreeFormData() target is: defaultPhdReadTag method is: getFreeFormData()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 6
Matched Method is: getFreeFormData()Ljava/lang/String;
TestCase is: int _int = 0;
MockDate mockDate = new MockDate(_int, (-2496), 0);
String string = "Joe";
String string = "Smith";
String string = "123 Main St.";
String string = "Anytown, USA";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "");
((DefaultPhdReadTag) mockDate).getFreeFormData();

statement is: Range.CoordinateSystem range_CoordinateSystem = Range.CoordinateSystem.RESIDUE_BASED type is: class org.evosuite.testcase.statements.EnumPrimitiveStatement return type class org.jcvi.jillion.core.Range$CoordinateSystem
statement code is: Range.CoordinateSystem range_CoordinateSystem = Range.CoordinateSystem.RESIDUE_BASED
statement is: of(Lorg/jcvi/jillion/core/Range$CoordinateSystem;JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(arg0, 0L, 0L)
statement is: org.evosuite.runtime.mock.java.util.MockDate(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-3298L))
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", arg2, arg3, (String) null, (String) null)
statement is: getFreeFormData()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String freeFormData = defaultPhdReadTag.getFreeFormData()
test data is: Range.CoordinateSystem range_CoordinateSystem = Range.CoordinateSystem.RESIDUE_BASED;
Range of = Range.of(range_CoordinateSystem, 0L, 0L);
MockDate mockDate = new MockDate((-3298L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, (String) null, (String) null);
defaultPhdReadTag.getFreeFormData();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Given
        Range.CoordinateSystem rangeCoordinateSystem = CoordinateSystem.RESIDUE_BASED;
        Long fromValue = 0L;
        Long toValue = -3298L;
        MockDate mockDate = new MockDate(-3298L);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", Range.of(rangeCoordinateSystem, fromValue, toValue), mockDate, ((String) (null)), ((String) (null)));
        // When
        String freeFormData = defaultPhdReadTag.getFreeFormData();
        // Then
        assertEquals("some_free_form_data", freeFormData);
    }
}
statement is: // Given
Range.CoordinateSystem rangeCoordinateSystem = CoordinateSystem.RESIDUE_BASED, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: CoordinateSystem.RESIDUE_BASED is CoordinateSystem
statement is: Long fromValue = 0L, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Long toValue = -3298L, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -3298L
statement is: MockDate mockDate = new MockDate(-3298L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", Range.of(rangeCoordinateSystem, fromValue, toValue), mockDate, ((String) (null)), ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // When
String freeFormData = defaultPhdReadTag.getFreeFormData(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getFreeFormData() target is: defaultPhdReadTag method is: getFreeFormData()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 3, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 4
Matched Method is: getFreeFormData()Ljava/lang/String;
statement is: // Then
assertEquals("some_free_form_data", freeFormData), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Then
assertEquals("some_free_form_data", freeFormData) target is:  method is: assertEquals(java.lang.String,java.lang.String)
* this is vulnerable: long _long = 0L
TestCase is: long _long = 0L;
MockDate mockDate = new MockDate((-3298L));
String string = "";
String string = "";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, (String) null, (String) null);
((DefaultPhdReadTag) string).getFreeFormData();

statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "")
statement is: getSource()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String source = defaultPhdReadTag.getSource()
test data is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getSource();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("01/01/2023", "ABC-1234", new Range(5, 10), new Date(), "John Doe", "johndoe@example.com");
        defaultPhdReadTag.getSource();
    }
}
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("01/01/2023", "ABC-1234", new Range(5, 10), new Date(), "John Doe", "johndoe@example.com"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getSource(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getSource() target is: defaultPhdReadTag method is: getSource()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 4
Matched Method is: getSource()Ljava/lang/String;
TestCase is: String string = "01/01/2023";
String string = "ABC-1234";
String string = "John Doe";
String string = "johndoe@example.com";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, "", "");
((DefaultPhdReadTag) string).getSource();

statement is: org.evosuite.runtime.mock.java.util.MockDate(III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate((-1100), (-1100), (-1100))
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, "kV\"oUP=A{2Xr", "4(2.2desF?!tp")
statement is: getSource()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String source = defaultPhdReadTag.getSource()
test data is: MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getSource();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockDate mockDate = new MockDate(-1100, -1100, -1100);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2023-02-28", "UTC", Range.closed(-1100, -1100), mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
        defaultPhdReadTag.getSource();
    }
}
statement is: MockDate mockDate = new MockDate(-1100, -1100, -1100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2023-02-28", "UTC", Range.closed(-1100, -1100), mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getSource(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getSource() target is: defaultPhdReadTag method is: getSource()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 5
Matched Method is: getSource()Ljava/lang/String;
TestCase is: MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
String string = "2023-02-28";
String string = "UTC";
String string = "kV\"oUP=A{2Xr";
String string = "4(2.2desF?!tp";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "4(2.2desF?!tp");
((DefaultPhdReadTag) string).getSource();

statement is: of(JJ)Lorg/jcvi/jillion/core/Range; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.jcvi.jillion.core.Range
statement code is: Range of = Range.of(1L, 1L)
statement is: org.evosuite.runtime.mock.java.util.MockDate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate()
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", arg2, arg3, "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS")
statement is: getType()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String type = defaultPhdReadTag.getType()
test data is: Range of = Range.of(1L, 1L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS");
defaultPhdReadTag.getType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Range of = Range.of(10L, 20L);
        MockDate mockDate = new MockDate("2023-02-28T14:58:29Z");
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("John Doe", "jdoe@example.com", of, mockDate, "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS");
        defaultPhdReadTag.getType();
    }
}
statement is: Range of = Range.of(10L, 20L), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Range.of(10L, 20L) target is: Range method is: of(long,long)
Matched Method is: of(JJ)Lorg/jcvi/jillion/core/Range;
statement is: MockDate mockDate = new MockDate("2023-02-28T14:58:29Z"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("John Doe", "jdoe@example.com", of, mockDate, "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getType() target is: defaultPhdReadTag method is: getType()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 2, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 7
Matched Method is: getType()Ljava/lang/String;
TestCase is: long _long = 10L;
long _long = 20L;
Range of = Range.of(_long, _long);
String string = "John Doe";
String string = "jdoe@example.com";
String string = "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange";
String string = "N|U<r/LjS";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, (Date) string, string, "N|U<r/LjS");
((DefaultPhdReadTag) of).getType();

statement is: org.evosuite.runtime.mock.java.util.MockDate(III)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.util.MockDate
statement code is: MockDate mockDate = new MockDate(2, 1295, 1024)
statement is: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag
statement code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, "y.Xd{nCU@?", "y.Xd{nCU@?")
statement is: getType()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String type = defaultPhdReadTag.getType()
test data is: MockDate mockDate = new MockDate(2, 1295, 1024);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "y.Xd{nCU@?", "y.Xd{nCU@?");
defaultPhdReadTag.getType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockDate mockDate = new MockDate(2019, 4, 3);
        DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("tagName", "tagDescription", ((Range) (null)), mockDate, "y.Xd{nCU@?", "y.Xd{nCU@?");
        defaultPhdReadTag.getType();
    }
}
statement is: MockDate mockDate = new MockDate(2019, 4, 3), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("tagName", "tagDescription", ((Range) (null)), mockDate, "y.Xd{nCU@?", "y.Xd{nCU@?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: defaultPhdReadTag.getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: defaultPhdReadTag.getType() target is: defaultPhdReadTag method is: getType()
source statement: org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag(Ljava/lang/String;Ljava/lang/String;Lorg/jcvi/jillion/core/Range;Ljava/util/Date;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 1, type org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTagindex is: 8
Matched Method is: getType()Ljava/lang/String;
TestCase is: int _int = 2019;
int _int = 4;
int _int = 3;
MockDate mockDate = new MockDate(_int, _int, _int);
String string = "tagName";
String string = "tagDescription";
String string = "y.Xd{nCU@?";
String string = "y.Xd{nCU@?";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "y.Xd{nCU@?");
((DefaultPhdReadTag) _int).getType();

* test suite isTestSuite: 68
Test 0: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getFreeFormData();
Test 1: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8DX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getType();
Test 2: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getSource();
Test 3: 
MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getDate();
Test 4: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.getUngappedRange();
Test 5: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getComment();
Test 6: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.hashCode();
Test 7: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
defaultPhdReadTag.hashCode();
Test 8: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 9: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", (Range) null, mockDate, "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 10: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
defaultPhdReadTag.equals((Object) null);
Test 11: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals("r@:KgyoH_w\"J|*v*");
Test 12: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 13: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 14: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "SB", of, (Date) null, "AvT@(iCx", "nng");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 15: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "&", of, (Date) null, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "&", of, mockDate, "AvT@(iCx", "z5!A2f54Mml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 16: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 17: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", of, mockDate, "AvT@(iCx", "z5!A2f54M\"ml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 18: 
Range of = Range.of(7000L, 7000L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 19: 
Range of = Range.of(6949L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", (String) null, of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 20: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 21: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQC*\"@P=", (String) null, of, mockDate, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, (String) null, (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 22: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 23: 
Range of = Range.of(7009L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", of, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 24: 
Range of = Range.of(6981L, 6981L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "", "");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 25: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getComment();
Test 26: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.getComment();
Test 27: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getDate();
Test 28: 
MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getFreeFormData();
Test 29: 
Range.CoordinateSystem range_CoordinateSystem = Range.CoordinateSystem.RESIDUE_BASED;
Range of = Range.of(range_CoordinateSystem, 0L, 0L);
MockDate mockDate = new MockDate((-3298L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, (String) null, (String) null);
defaultPhdReadTag.getFreeFormData();
Test 30: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getSource();
Test 31: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getSource();
Test 32: 
Range of = Range.of(1L, 1L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS");
defaultPhdReadTag.getType();
Test 33: 
MockDate mockDate = new MockDate(2, 1295, 1024);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "y.Xd{nCU@?", "y.Xd{nCU@?");
defaultPhdReadTag.getType();
Test 34: 
int _int = 12;
MockDate mockDate = new MockDate(2021, 12, 31);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Testing", "ABC-123", (Range) mockDate, (Date) "kV\"oUP=A{2Xr", "4(2.2desF?!tp", "4(2.2desF?!tp");
((DefaultPhdReadTag) _int).getFreeFormData();

Test 35: 
Range of = Range.of(100L, 100L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8DX.uKec;", "O4(2.2desF?!tp");
((DefaultPhdReadTag) of).getType();

Test 36: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
((DefaultPhdReadTag) of).getSource();

Test 37: 
int _int = 1;
MockDate mockDate = new MockDate(2019, 1, 1);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("my-tag", "my-value", (Range) mockDate, (Date) "", "", "");
((DefaultPhdReadTag) _int).getDate();

Test 38: 
MockDate mockDate = new MockDate();
String string = "2019-04-30";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2019-04-30", "2019-05-07", (Range) mockDate, (Date) "1", "1", (String) null);
((DefaultPhdReadTag) string).getUngappedRange();

Test 39: 
Range of = Range.of(9567L, 9567L);
MockDate mockDate = new MockDate(134L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("84hg2304", "~", of, mockDate, "kjhg2304", "84hg2304");
((DefaultPhdReadTag) of).getComment();

Test 40: 
String string = "Patient Name";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("S1234567", "Patient Name", (Range) "Dr. John Doe", (Date) "Room Number", (String) null, (String) null);
string.hashCode();

Test 41: 
long _long = 7005L;
Range of = Range.of(6965L, 7005L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) "AvT@(iCx", "&", "&");
((DefaultPhdReadTag) _long).hashCode();

Test 42: 
MockDate mockDate = new MockDate();
String string = "r@:KgyoH_w\"J|*v*";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) mockDate, (Date) "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "r@:KgyoH_w\"J|*v*");
string.equals(defaultPhdReadTag);

Test 43: 
MockDate mockDate = new MockDate();

Test 44: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
of.equals((Object) null);

Test 45: 
MockDate mockDate = new MockDate();
String string = "1234567890";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1234567890", "1234567890", (Range) mockDate, (Date) "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
String string = "1234567890";
string.equals(string);

Test 46: 
Range of = Range.of((long) (Long) null, (long) (Long) null);
MockDate mockDate = new MockDate((-1719L));
String string = "4(2.2desF?!tp";
String string = "ABC,dJd/5xL|EH>_";
String string = "4(2.2desF?!tp";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
String string = "4(2.2desF?!tp";
String string = "ABC,dJd/5xL|EH>_";
String string = "ABC,dJd/5xL|EH>_";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);

Test 47: 
Range of = Range.of((long) (Long) null, (long) (Long) null);
MockDate mockDate = new MockDate((-1719L));
String string = "A";
String string = "B";
String string = "C";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
String string = "A";
String string = "B";
String string = "C";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
of.equals(defaultPhdReadTag);

Test 48: 
Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", (Range) "AvT@(iCx", (Date) "&", "AvT@(iCx", "&");
String string = "";
String string = "SB";
String string = "AvT@(iCx";
String string = "nng";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, "AvT@(iCx", "&");

Test 49: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Birthday", "&", of, (Date) "John Doe", "Jane Doe", (String) null);
of.equals(defaultPhdReadTag);

Test 50: 
Range of = Range.of(12345L, 67890L);
MockDate mockDate = new MockDate(83L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");

Test 51: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", of, mockDate, "AvT@(iCx", "z5!A2f54M\"ml0gp");
of.equals(defaultPhdReadTag);

Test 52: 
Range of = Range.of(7000L, 7000L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Patient 1", "Diagnosis 1", of, mockDate, "4C7U]l< RQC*\"@P=", "Medication 1");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Patient 2", "Diagnosis 2", of, mockDate, "4C7U]l< RQC*\"@P=", "Medication 2");

Test 53: 
Range of = Range.of(6949L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("01-01-2023", (String) of, (Range) mockDate, (Date) "01-01-2023", "01-01-2023", "kV\"UPA{2r");

Test 54: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2018-05-08", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
of.equals(defaultPhdReadTag);

Test 55: 
long _long = 6967L;
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQC*\"@P=", (String) of, (Range) mockDate, (Date) 6967L, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) of, (String) mockDate, (Range) mockDate, (Date) _long, (String) null, (String) null);

Test 56: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", "Test Tag Name", of, mockDate, "kV\"oUP=A{2Xr", "Test Tag Description");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Test Tag Name", "Test Tag Description", of, mockDate, "kV\"oUP=A{2Xr", "Test Tag Description");
of.equals(defaultPhdReadTag);

Test 57: 
Range of = Range.of(7009L);
String string = "r@:KgyoH_w\"J|*v*";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", of, (Date) "Blood Pressure Monitor", "John Doe", "r@:KgyoH_w\"J|*v*");
string.equals(defaultPhdReadTag);

Test 58: 
Range of = Range.of(100L, 100L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("John Doe", "JD001", of, mockDate, "1234 Main St.", "New York");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Jane Smith", "JS001", (Range) mockDate, (Date) "1234 Main St.", "New York", "New York");
of.equals(defaultPhdReadTag);

Test 59: 
String string = "PhD";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("PhD", "Student", (Range) "University of California", (Date) "San Francisco", "", "");
((DefaultPhdReadTag) string).getComment();

Test 60: 
Range of = Range.of((long) (Long) null, (long) (Long) null);
MockDate mockDate = new MockDate((-1719L));
String string = "4(2.2desF?!tp";
String string = "ABC,dJd/5xL|EH>_";
String string = "ABC,dJd/5xL|EH>_";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, "ABC,dJd/5xL|EH>_");
((DefaultPhdReadTag) of).getComment();

Test 61: 
String string = "org.jcvi.jillion.core.Range$EmptyByteRange";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", (Range) "2023-04-15T18:30:00Z", (Date) "", "", "");
((DefaultPhdReadTag) string).getDate();

Test 62: 
MockDate mockDate = new MockDate(0, (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Joe", "Smith", (Range) mockDate, (Date) "123 Main St.", "Anytown, USA", "");
((DefaultPhdReadTag) mockDate).getFreeFormData();

Test 63: 
MockDate mockDate = new MockDate((-3298L));
String string = "";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) mockDate, (Date) "", (String) null, (String) null);
((DefaultPhdReadTag) string).getFreeFormData();

Test 64: 
String string = "01/01/2023";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("01/01/2023", "ABC-1234", (Range) "John Doe", (Date) "johndoe@example.com", "", "");
((DefaultPhdReadTag) string).getSource();

Test 65: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
String string = "2023-02-28";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2023-02-28", "UTC", (Range) mockDate, (Date) "kV\"oUP=A{2Xr", "4(2.2desF?!tp", "4(2.2desF?!tp");
((DefaultPhdReadTag) string).getSource();

Test 66: 
Range of = Range.of(10L, 20L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("John Doe", "jdoe@example.com", of, (Date) "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS", "N|U<r/LjS");
((DefaultPhdReadTag) of).getType();

Test 67: 
int _int = 4;
MockDate mockDate = new MockDate(2019, 4, 3);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("tagName", "tagDescription", (Range) mockDate, (Date) "y.Xd{nCU@?", "y.Xd{nCU@?", "y.Xd{nCU@?");
((DefaultPhdReadTag) _int).getType();


* Generated after the refinement and before minimization 68 tests with total length 291
* test suite isTestSuite: 68
Test 0: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getFreeFormData();
Test 1: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8DX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getType();
Test 2: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getSource();
Test 3: 
MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getDate();
Test 4: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.getUngappedRange();
Test 5: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getComment();
Test 6: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.hashCode();
Test 7: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
defaultPhdReadTag.hashCode();
Test 8: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 9: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", (Range) null, mockDate, "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 10: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
defaultPhdReadTag.equals((Object) null);
Test 11: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals("r@:KgyoH_w\"J|*v*");
Test 12: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 13: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 14: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "SB", of, (Date) null, "AvT@(iCx", "nng");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 15: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "&", of, (Date) null, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "&", of, mockDate, "AvT@(iCx", "z5!A2f54Mml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 16: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 17: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", of, mockDate, "AvT@(iCx", "z5!A2f54M\"ml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 18: 
Range of = Range.of(7000L, 7000L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 19: 
Range of = Range.of(6949L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", (String) null, of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 20: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 21: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQC*\"@P=", (String) null, of, mockDate, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, (String) null, (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 22: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 23: 
Range of = Range.of(7009L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", of, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 24: 
Range of = Range.of(6981L, 6981L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "", "");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 25: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getComment();
Test 26: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.getComment();
Test 27: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getDate();
Test 28: 
MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getFreeFormData();
Test 29: 
Range.CoordinateSystem range_CoordinateSystem = Range.CoordinateSystem.RESIDUE_BASED;
Range of = Range.of(range_CoordinateSystem, 0L, 0L);
MockDate mockDate = new MockDate((-3298L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, (String) null, (String) null);
defaultPhdReadTag.getFreeFormData();
Test 30: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getSource();
Test 31: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getSource();
Test 32: 
Range of = Range.of(1L, 1L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS");
defaultPhdReadTag.getType();
Test 33: 
MockDate mockDate = new MockDate(2, 1295, 1024);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "y.Xd{nCU@?", "y.Xd{nCU@?");
defaultPhdReadTag.getType();
Test 34: 
int _int = 12;
MockDate mockDate = new MockDate(2021, 12, 31);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Testing", "ABC-123", (Range) mockDate, (Date) "kV\"oUP=A{2Xr", "4(2.2desF?!tp", "4(2.2desF?!tp");
((DefaultPhdReadTag) _int).getFreeFormData();

Test 35: 
Range of = Range.of(100L, 100L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8DX.uKec;", "O4(2.2desF?!tp");
((DefaultPhdReadTag) of).getType();

Test 36: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
((DefaultPhdReadTag) of).getSource();

Test 37: 
int _int = 1;
MockDate mockDate = new MockDate(2019, 1, 1);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("my-tag", "my-value", (Range) mockDate, (Date) "", "", "");
((DefaultPhdReadTag) _int).getDate();

Test 38: 
MockDate mockDate = new MockDate();
String string = "2019-04-30";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2019-04-30", "2019-05-07", (Range) mockDate, (Date) "1", "1", (String) null);
((DefaultPhdReadTag) string).getUngappedRange();

Test 39: 
Range of = Range.of(9567L, 9567L);
MockDate mockDate = new MockDate(134L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("84hg2304", "~", of, mockDate, "kjhg2304", "84hg2304");
((DefaultPhdReadTag) of).getComment();

Test 40: 
String string = "Patient Name";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("S1234567", "Patient Name", (Range) "Dr. John Doe", (Date) "Room Number", (String) null, (String) null);
string.hashCode();

Test 41: 
long _long = 7005L;
Range of = Range.of(6965L, 7005L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) "AvT@(iCx", "&", "&");
((DefaultPhdReadTag) _long).hashCode();

Test 42: 
MockDate mockDate = new MockDate();
String string = "r@:KgyoH_w\"J|*v*";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) mockDate, (Date) "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
String string = "r@:KgyoH_w\"J|*v*";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) mockDate, (Date) string, string, "r@:KgyoH_w\"J|*v*");
string.equals(defaultPhdReadTag);

Test 43: 
MockDate mockDate = new MockDate();

Test 44: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
of.equals((Object) null);

Test 45: 
MockDate mockDate = new MockDate();
String string = "1234567890";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1234567890", "1234567890", (Range) mockDate, (Date) "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
String string = "1234567890";
string.equals(string);

Test 46: 
Range of = Range.of((long) (Long) null, (long) (Long) null);
MockDate mockDate = new MockDate((-1719L));
String string = "4(2.2desF?!tp";
String string = "ABC,dJd/5xL|EH>_";
String string = "4(2.2desF?!tp";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
String string = "4(2.2desF?!tp";
String string = "ABC,dJd/5xL|EH>_";
String string = "ABC,dJd/5xL|EH>_";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);

Test 47: 
Range of = Range.of((long) (Long) null, (long) (Long) null);
MockDate mockDate = new MockDate((-1719L));
String string = "A";
String string = "B";
String string = "C";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
String string = "A";
String string = "B";
String string = "C";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, (String) null);
of.equals(defaultPhdReadTag);

Test 48: 
Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", (Range) "AvT@(iCx", (Date) "&", "AvT@(iCx", "&");
String string = "";
String string = "SB";
String string = "AvT@(iCx";
String string = "nng";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, (Range) string, (Date) string, "AvT@(iCx", "&");

Test 49: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Birthday", "&", of, (Date) "John Doe", "Jane Doe", (String) null);
of.equals(defaultPhdReadTag);

Test 50: 
Range of = Range.of(12345L, 67890L);
MockDate mockDate = new MockDate(83L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");

Test 51: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", of, mockDate, "AvT@(iCx", "z5!A2f54M\"ml0gp");
of.equals(defaultPhdReadTag);

Test 52: 
Range of = Range.of(7000L, 7000L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Patient 1", "Diagnosis 1", of, mockDate, "4C7U]l< RQC*\"@P=", "Medication 1");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Patient 2", "Diagnosis 2", of, mockDate, "4C7U]l< RQC*\"@P=", "Medication 2");

Test 53: 
Range of = Range.of(6949L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("01-01-2023", (String) of, (Range) mockDate, (Date) "01-01-2023", "01-01-2023", "kV\"UPA{2r");

Test 54: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2018-05-08", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
of.equals(defaultPhdReadTag);

Test 55: 
long _long = 6967L;
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQC*\"@P=", (String) of, (Range) mockDate, (Date) 6967L, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) of, (String) mockDate, (Range) mockDate, (Date) _long, (String) null, (String) null);

Test 56: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", "Test Tag Name", of, mockDate, "kV\"oUP=A{2Xr", "Test Tag Description");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Test Tag Name", "Test Tag Description", of, mockDate, "kV\"oUP=A{2Xr", "Test Tag Description");
of.equals(defaultPhdReadTag);

Test 57: 
Range of = Range.of(7009L);
String string = "r@:KgyoH_w\"J|*v*";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", of, (Date) "Blood Pressure Monitor", "John Doe", "r@:KgyoH_w\"J|*v*");
string.equals(defaultPhdReadTag);

Test 58: 
Range of = Range.of(100L, 100L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("John Doe", "JD001", of, mockDate, "1234 Main St.", "New York");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Jane Smith", "JS001", (Range) mockDate, (Date) "1234 Main St.", "New York", "New York");
of.equals(defaultPhdReadTag);

Test 59: 
String string = "PhD";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("PhD", "Student", (Range) "University of California", (Date) "San Francisco", "", "");
((DefaultPhdReadTag) string).getComment();

Test 60: 
Range of = Range.of((long) (Long) null, (long) (Long) null);
MockDate mockDate = new MockDate((-1719L));
String string = "4(2.2desF?!tp";
String string = "ABC,dJd/5xL|EH>_";
String string = "ABC,dJd/5xL|EH>_";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(string, string, of, mockDate, string, "ABC,dJd/5xL|EH>_");
((DefaultPhdReadTag) of).getComment();

Test 61: 
String string = "org.jcvi.jillion.core.Range$EmptyByteRange";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", (Range) "2023-04-15T18:30:00Z", (Date) "", "", "");
((DefaultPhdReadTag) string).getDate();

Test 62: 
MockDate mockDate = new MockDate(0, (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("Joe", "Smith", (Range) mockDate, (Date) "123 Main St.", "Anytown, USA", "");
((DefaultPhdReadTag) mockDate).getFreeFormData();

Test 63: 
MockDate mockDate = new MockDate((-3298L));
String string = "";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) mockDate, (Date) "", (String) null, (String) null);
((DefaultPhdReadTag) string).getFreeFormData();

Test 64: 
String string = "01/01/2023";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("01/01/2023", "ABC-1234", (Range) "John Doe", (Date) "johndoe@example.com", "", "");
((DefaultPhdReadTag) string).getSource();

Test 65: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
String string = "2023-02-28";
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("2023-02-28", "UTC", (Range) mockDate, (Date) "kV\"oUP=A{2Xr", "4(2.2desF?!tp", "4(2.2desF?!tp");
((DefaultPhdReadTag) string).getSource();

Test 66: 
Range of = Range.of(10L, 20L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("John Doe", "jdoe@example.com", of, (Date) "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS", "N|U<r/LjS");
((DefaultPhdReadTag) of).getType();

Test 67: 
int _int = 4;
MockDate mockDate = new MockDate(2019, 4, 3);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("tagName", "tagDescription", (Range) mockDate, (Date) "y.Xd{nCU@?", "y.Xd{nCU@?", "y.Xd{nCU@?");
((DefaultPhdReadTag) _int).getType();


* Minimizing test suite
* test suite isTestSuite: 34
Test 0: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getFreeFormData();
Test 1: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8DX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getType();
Test 2: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getSource();
Test 3: 
MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getDate();
Test 4: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.getUngappedRange();
Test 5: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getComment();
Test 6: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
defaultPhdReadTag.hashCode();
Test 7: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.hashCode();
Test 8: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals("r@:KgyoH_w\"J|*v*");
Test 9: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", (Range) null, mockDate, "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 10: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
defaultPhdReadTag.equals((Object) null);
Test 11: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 12: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 13: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQC*\"@P=", (String) null, of, mockDate, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, (String) null, (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 14: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 15: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "SB", of, (Date) null, "AvT@(iCx", "nng");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 16: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "&", of, (Date) null, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "&", of, mockDate, "AvT@(iCx", "z5!A2f54Mml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 17: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 18: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", of, mockDate, "AvT@(iCx", "z5!A2f54M\"ml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 19: 
Range of = Range.of(6949L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", (String) null, of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 20: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 21: 
Range of = Range.of(7000L, 7000L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 22: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 23: 
Range of = Range.of(7009L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", of, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 24: 
Range of = Range.of(6981L, 6981L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "", "");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 25: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getComment();
Test 26: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.getComment();
Test 27: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getDate();
Test 28: 
MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getFreeFormData();
Test 29: 
Range.CoordinateSystem range_CoordinateSystem = Range.CoordinateSystem.RESIDUE_BASED;
Range of = Range.of(range_CoordinateSystem, 0L, 0L);
MockDate mockDate = new MockDate((-3298L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, (String) null, (String) null);
defaultPhdReadTag.getFreeFormData();
Test 30: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getSource();
Test 31: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getSource();
Test 32: 
Range of = Range.of(1L, 1L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS");
defaultPhdReadTag.getType();
Test 33: 
MockDate mockDate = new MockDate(2, 1295, 1024);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "y.Xd{nCU@?", "y.Xd{nCU@?");
defaultPhdReadTag.getType();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 61
* Number of covered goals: 61
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 61
* Number of covered goals: 61
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 89%
* Total number of goals: 19
* Number of covered goals: 17
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 61
* Number of covered goals: 61
* Generated 34 tests with total length 134
* Resulting test suite's coverage: 98% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 25%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockDate arg3 = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
String freeFormData = defaultPhdReadTag.getFreeFormData();
assertNotNull(freeFormData);
assertEquals("kV\"oUP=A{2Xr", defaultPhdReadTag.getComment());
assertEquals("4(2.2desF?!tp", freeFormData);


** It was a parseable test case! 
refined test name is: testGetFreeFormData
* Compiling Tests
refined test name is: testGetFreeFormDataReturnsNonNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6965L, 6965L);
MockDate arg3 = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", arg2, arg3, "\"h8DX.uKec;", "O4(2.2desF?!tp");
String type = defaultPhdReadTag.getType();
assertEquals("&", defaultPhdReadTag.getSource());
assertEquals("O4(2.2desF?!tp", type);
assertEquals("\"h8DX.uKec;", defaultPhdReadTag.getComment());
assertEquals("O4(2.2desF?!tp", defaultPhdReadTag.getFreeFormData());


** It was a parseable test case! 
refined test name is: testGettersAndAssertions
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6965L, 6965L);
MockDate arg3 = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", arg2, arg3, "\"h8AX.uKec;", "O4(2.2desF?!tp");
String source = defaultPhdReadTag.getSource();
assertEquals("O4(2.2desF?!tp", defaultPhdReadTag.getFreeFormData());
assertEquals("\"h8AX.uKec;", defaultPhdReadTag.getComment());
assertEquals("O4(2.2desF?!tp", defaultPhdReadTag.getType());
assertEquals("&", source);


** It was a parseable test case! 
refined test name is: testDefaultPhdReadTagCreation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockDate arg3 = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, arg3, "", "");
Date date = defaultPhdReadTag.getDate();
assertEquals("Sat Dec 31 00:00:00 GMT 806", date.toString());


** It was a parseable test case! 
refined test name is: testGetDateReturnsCorrectDate
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockDate arg3 = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
Range ungappedRange = defaultPhdReadTag.getUngappedRange();
assertNull(ungappedRange);


** It was a parseable test case! 
refined test name is: testGetUngappedRangeWithNullDate
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6965L, 6965L);
MockDate arg3 = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", arg2, arg3, "\"h8AX.uKec;", "O4(2.2desF?!tp");
String comment = defaultPhdReadTag.getComment();
assertEquals("&", defaultPhdReadTag.getSource());
assertEquals("\"h8AX.uKec;", comment);
assertEquals("O4(2.2desF?!tp", defaultPhdReadTag.getType());
assertEquals("O4(2.2desF?!tp", defaultPhdReadTag.getFreeFormData());


** It was a parseable test case! 
refined test name is: testDefaultPhdReadTagGetCommentAndSource
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", arg2, (Date) null, "AvT@(iCx", "&");
defaultPhdReadTag.hashCode();
assertEquals("AvT@(iCx", defaultPhdReadTag.getComment());
assertEquals("&", defaultPhdReadTag.getType());
assertEquals("&", defaultPhdReadTag.getSource());


** It was a parseable test case! 
refined test name is: testHashCodeDefaultPhdReadTag
* Compiling Tests
refined test name is: testHashCodeAndOtherMethods
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockDate arg3 = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
defaultPhdReadTag.hashCode();

** It was a parseable test case! 
refined test name is: testHashCodeShouldBeBasedOnDateFieldOnly
* Compiling Tests
refined test name is: testHashCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockDate arg3 = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, arg3, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
boolean equals = defaultPhdReadTag.equals("r@:KgyoH_w\"J|*v*");
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithNullRangeAndDifferentId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockDate arg3 = new MockDate();
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", (Range) null, arg3, "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange");
boolean equals = arg0.equals(arg0);
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualssameObjectreturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6965L, 6965L);
MockDate arg3 = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", arg2, arg3, "AvT@(iCx", (String) null);
boolean equals = defaultPhdReadTag.equals((Object) null);
assertEquals("AvT@(iCx", defaultPhdReadTag.getComment());
assertEquals("E!<i]ZkO;w!T+bV)ff)", defaultPhdReadTag.getType());
assertFalse(equals);
assertEquals("&", defaultPhdReadTag.getSource());


** It was a parseable test case! 
refined test name is: testEqualityOfDefaultPhdReadTagsWithSameValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockDate arg3 = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, arg3, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, arg3, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
boolean equals = defaultPhdReadTag.equals(arg0);
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualsMethodForDefaultPhdReadTag
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of((-1L), (-1L));
MockDate arg3 = new MockDate((-1719L));
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", arg2, arg3, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", arg2, arg3, (String) null, "ABC,dJd/5xL|EH>_");
boolean equals = defaultPhdReadTag.equals(arg0);
assertEquals("4(2.2desF?!tp", defaultPhdReadTag.getType());
assertEquals("ABC,dJd/5xL|EH>_", arg0.getSource());
assertEquals("ABC,dJd/5xL|EH>_", defaultPhdReadTag.getFreeFormData());
assertEquals("4(2.2desF?!tp", arg0.getComment());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualityOfDefaultPhdReadTags
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6967L, 6967L);
MockDate arg3 = new MockDate();
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("4C7U]l< RQC*\"@P=", (String) null, arg2, arg3, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, arg2, arg3, (String) null, (String) null);
boolean equals = defaultPhdReadTag.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualswhenArgumentsAreDifferentreturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of((-1L), (-1L));
MockDate arg3 = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", arg2, arg3, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", arg2, arg3, (String) null, "ABC,dJd/5xL|EH>_");
boolean equals = defaultPhdReadTag.equals(arg0);
assertEquals("ABC,dJd/5xL|EH>_", defaultPhdReadTag.getSource());
assertFalse(equals);
assertEquals("ABC,dJd/5xL|EH>_", arg0.getFreeFormData());
assertEquals("4(2.2desF?!tp", defaultPhdReadTag.getComment());
assertEquals("4(2.2desF?!tp", arg0.getType());


** It was a parseable test case! 
refined test name is: testEqualswithNonNullFields
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", arg2, (Date) null, "AvT@(iCx", "&");
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("", "SB", arg2, (Date) null, "AvT@(iCx", "nng");
boolean equals = defaultPhdReadTag.equals(arg0);
assertEquals("", arg0.getType());
assertFalse(equals);
assertEquals("SB", arg0.getSource());
assertEquals("AvT@(iCx", arg0.getComment());
assertEquals("nng", arg0.getFreeFormData());


** It was a parseable test case! 
refined test name is: testDefaultPhdReadTagEqualsWithDifferentObjects
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6965L, 6965L);
MockDate arg3 = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "&", arg2, (Date) null, "AvT@(iCx", (String) null);
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "&", arg2, arg3, "AvT@(iCx", "z5!A2f54Mml0gp");
boolean equals = defaultPhdReadTag.equals(arg0);
assertEquals("z5!A2f54Mml0gp", arg0.getFreeFormData());
assertFalse(equals);
assertEquals("&", arg0.getSource());
assertEquals("AvT@(iCx", arg0.getComment());
assertEquals("1xc~3uyim`<jk9f", arg0.getType());


** It was a parseable test case! 
refined test name is: testDefaultPhdReadTagequals
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6965L, 6965L);
MockDate arg3 = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", arg2, arg3, "AvT@(iCx", (String) null);
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", arg2, arg3, "AvT@(iCx", "z5!A2f54M\"ml0gp");
boolean equals = defaultPhdReadTag.equals(arg0);
assertEquals("z5!A2f54M\"ml0gp", arg0.getFreeFormData());
assertEquals("AvT@(iCx", arg0.getComment());
assertEquals("\"h8AX.uKec;", arg0.getSource());
assertFalse(equals);
assertEquals("1xc~3uyim`<jk9f", arg0.getType());


** It was a parseable test case! 
refined test name is: testEqualsSameValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6949L);
MockDate arg3 = new MockDate();
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", arg2, arg3, "kV\"UPA{2r", "kV\"UPA{2r");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", (String) null, arg2, arg3, "kV\"UPA{2r", "kV\"UPA{2r");
boolean equals = defaultPhdReadTag.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsNotEqualDifferentValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6965L, 6965L);
MockDate arg3 = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", arg2, arg3, "\"h8AX.uKec;", "O4(2.2desF?!tp");
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", arg2, arg3, "\"h8AX.uKec;", "O4(2.2desF?!tp");
boolean equals = defaultPhdReadTag.equals(arg0);
assertEquals("O4(2.2desF?!tp", arg0.getFreeFormData());
assertEquals("&", defaultPhdReadTag.getSource());
assertEquals("\"h8AX.uKec;", defaultPhdReadTag.getComment());
assertEquals("O4(2.2desF?!tp", defaultPhdReadTag.getType());
assertFalse(equals);
assertEquals("\"h8AX.uKec;", arg0.getType());
assertEquals("O4(2.2desF?!tp", defaultPhdReadTag.getFreeFormData());


** It was a parseable test case! 
refined test name is: testDefaultPhdReadTagEquals
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(7000L, 7000L);
MockDate arg3 = new MockDate();
DefaultPhdReadTag arg0 = new DefaultPhdReadTag((String) null, (String) null, arg2, arg3, "4C7U]l< RQC*\"@P=", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, arg2, arg3, "4C7U]l< RQC*\"@P=", (String) null);
boolean equals = defaultPhdReadTag.equals(arg0);
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualsSameValuesReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6967L, 6967L);
MockDate arg3 = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", (String) null, arg2, arg3, "kV\"oUP=A{2Xr", (String) null);
DefaultPhdReadTag arg0 = new DefaultPhdReadTag((String) null, (String) null, arg2, arg3, "kV\"oUP=A{2Xr", (String) null);
boolean equals = defaultPhdReadTag.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsDifferentRange
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(7009L);
MockDate arg3 = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, arg3, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", arg2, arg3, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
boolean equals = defaultPhdReadTag.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithDifferentRangeAndMockDate
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of(6981L, 6981L);
MockDate arg3 = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", arg2, arg3, "", "");
DefaultPhdReadTag arg0 = new DefaultPhdReadTag("", "", (Range) null, arg3, "", "");
boolean equals = defaultPhdReadTag.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testUnequalObjectsWithDifferentProperties
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
String comment = defaultPhdReadTag.getComment();
assertEquals("", comment);


** It was a parseable test case! 
refined test name is: testGetCommentNoCommentSetReturnsEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range arg2 = Range.of((-1L), (-1L));
MockDate arg3 = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", arg2, arg3, (String) null, "ABC,dJd/5xL|EH>_");
String comment = defaultPhdReadTag.getComment();
assertEquals("ABC,dJd/5xL|EH>_", defaultPhdReadTag.getSource());
assertEquals("4(2.2desF?!tp", defaultPhdReadTag.getType());
assertNull(comment);
assertEquals("ABC,dJd/5xL|EH>_", defaultPhdReadTag.getFreeFormData());


** It was a parseable test case! 
refined test name is: testGettersAndSetters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getDate();
assertEquals("", defaultPhdReadTag.getFreeFormData());
assertEquals("org.jcvi.jillion.core.Range$EmptyByteRange", defaultPhdReadTag.getSource());
assertEquals("org.jcvi.jillion.core.Range$EmptyByteRange", defaultPhdReadTag.getType());
assertEquals("", defaultPhdReadTag.getComment());


** It was a parseable test case! 
refined test name is: testGetDateReturnsEmptyStringWhenNullRangeProvided
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockDate arg3 = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, arg3, "", "");
String freeFormData = defaultPhdReadTag.getFreeFormData();
assertEquals("", freeFormData);


** It was a parseable test case! 
refined test name is: testGetFreeFormDataReturnsEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Range.CoordinateSystem arg0 = Range.CoordinateSystem.RESIDUE_BASED;
Range arg2 = Range.of(arg0, 0L, 0L);
MockDate arg3 = new MockDate((-3298L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", arg2, arg3, (String) null, (String) null);
String freeFormData = defaultPhdReadTag.getFreeFormData();
assertNull(freeFormData);


** It was a parseable test case! 
refined test name is: testGetFreeFormDataReturnsNullWhenNoDataProvided
[MASTER] 05:37:35.063 [logback-1] WARN  TestSuiteGenerator - JUnit checking timed out
[MASTER] 05:37:35.434 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 34
Test 0: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getFreeFormData();
Test 1: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8DX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getType();
Test 2: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getSource();
Test 3: 
MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getDate();
Test 4: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.getUngappedRange();
Test 5: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getComment();
Test 6: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.hashCode();
Test 7: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
defaultPhdReadTag.hashCode();
Test 8: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 9: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", (Range) null, mockDate, "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 10: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
defaultPhdReadTag.equals((Object) null);
Test 11: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals("r@:KgyoH_w\"J|*v*");
Test 12: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 13: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 14: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "SB", of, (Date) null, "AvT@(iCx", "nng");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 15: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "&", of, (Date) null, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "&", of, mockDate, "AvT@(iCx", "z5!A2f54Mml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 16: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 17: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", of, mockDate, "AvT@(iCx", "z5!A2f54M\"ml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 18: 
Range of = Range.of(7000L, 7000L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 19: 
Range of = Range.of(6949L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", (String) null, of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 20: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 21: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQC*\"@P=", (String) null, of, mockDate, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, (String) null, (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 22: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 23: 
Range of = Range.of(7009L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", of, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 24: 
Range of = Range.of(6981L, 6981L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "", "");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 25: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getComment();
Test 26: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.getComment();
Test 27: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getDate();
Test 28: 
MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getFreeFormData();
Test 29: 
Range.CoordinateSystem range_CoordinateSystem = Range.CoordinateSystem.RESIDUE_BASED;
Range of = Range.of(range_CoordinateSystem, 0L, 0L);
MockDate mockDate = new MockDate((-3298L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, (String) null, (String) null);
defaultPhdReadTag.getFreeFormData();
Test 30: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getSource();
Test 31: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getSource();
Test 32: 
Range of = Range.of(1L, 1L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS");
defaultPhdReadTag.getType();
Test 33: 
MockDate mockDate = new MockDate(2, 1295, 1024);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "y.Xd{nCU@?", "y.Xd{nCU@?");
defaultPhdReadTag.getType();

* Minimizing test suite
* test suite isTestSuite: 34
Test 0: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getFreeFormData();
Test 1: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8DX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getType();
Test 2: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getSource();
Test 3: 
MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getDate();
Test 4: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.getUngappedRange();
Test 5: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.getComment();
Test 6: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
defaultPhdReadTag.hashCode();
Test 7: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, (String) null, (String) null);
defaultPhdReadTag.hashCode();
Test 8: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals("r@:KgyoH_w\"J|*v*");
Test 9: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", (Range) null, mockDate, "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange", "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 10: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
defaultPhdReadTag.equals((Object) null);
Test 11: 
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 12: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 13: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4C7U]l< RQC*\"@P=", (String) null, of, mockDate, (String) null, (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, (String) null, (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 14: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, "4(2.2desF?!tp", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 15: 
Range of = Range.of(6965L, 6965L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "&", of, (Date) null, "AvT@(iCx", "&");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "SB", of, (Date) null, "AvT@(iCx", "nng");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 16: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "&", of, (Date) null, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "&", of, mockDate, "AvT@(iCx", "z5!A2f54Mml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 17: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("&", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("vS@QB<0", "vS@QB<0", of, mockDate, "\"h8AX.uKec;", "\"h8AX.uKec;");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 18: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("E!<i]ZkO;w!T+bV)ff)", "&", of, mockDate, "AvT@(iCx", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("1xc~3uyim`<jk9f", "\"h8AX.uKec;", of, mockDate, "AvT@(iCx", "z5!A2f54M\"ml0gp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 19: 
Range of = Range.of(6949L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", "kV\"UPA{2r", of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"UPA{2r", (String) null, of, mockDate, "kV\"UPA{2r", "kV\"UPA{2r");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 20: 
Range of = Range.of(6965L, 6965L);
MockDate mockDate = new MockDate(83L);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("O4(2.2desF?!tp", "&", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("\"h8AX.uKec;", "O4(2.2desF?!tp", of, mockDate, "\"h8AX.uKec;", "O4(2.2desF?!tp");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 21: 
Range of = Range.of(7000L, 7000L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "4C7U]l< RQC*\"@P=", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 22: 
Range of = Range.of(6967L, 6967L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("kV\"oUP=A{2Xr", (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, of, mockDate, "kV\"oUP=A{2Xr", (String) null);
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 23: 
Range of = Range.of(7009L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", (Range) null, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*", of, mockDate, "r@:KgyoH_w\"J|*v*", "r@:KgyoH_w\"J|*v*");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 24: 
Range of = Range.of(6981L, 6981L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "", "");
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.equals(defaultPhdReadTag);
Test 25: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getComment();
Test 26: 
Range of = Range.of((-1L), (-1L));
MockDate mockDate = new MockDate((-1719L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("4(2.2desF?!tp", "ABC,dJd/5xL|EH>_", of, mockDate, (String) null, "ABC,dJd/5xL|EH>_");
defaultPhdReadTag.getComment();
Test 27: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.core.Range$EmptyByteRange", "org.jcvi.jillion.core.Range$EmptyByteRange", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getDate();
Test 28: 
MockDate mockDate = new MockDate((-2496), (-2496), 0);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, mockDate, "", "");
defaultPhdReadTag.getFreeFormData();
Test 29: 
Range.CoordinateSystem range_CoordinateSystem = Range.CoordinateSystem.RESIDUE_BASED;
Range of = Range.of(range_CoordinateSystem, 0L, 0L);
MockDate mockDate = new MockDate((-3298L));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, (String) null, (String) null);
defaultPhdReadTag.getFreeFormData();
Test 30: 
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", (Range) null, (Date) null, "", "");
defaultPhdReadTag.getSource();
Test 31: 
MockDate mockDate = new MockDate((-1100), (-1100), (-1100));
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "kV\"oUP=A{2Xr", "4(2.2desF?!tp");
defaultPhdReadTag.getSource();
Test 32: 
Range of = Range.of(1L, 1L);
MockDate mockDate = new MockDate();
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "", of, mockDate, "org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange", "N|U<r/LjS");
defaultPhdReadTag.getType();
Test 33: 
MockDate mockDate = new MockDate(2, 1295, 1024);
DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, mockDate, "y.Xd{nCU@?", "y.Xd{nCU@?");
defaultPhdReadTag.getType();

[MASTER] 05:37:41.455 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 61
* Number of covered goals: 61
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 61
* Number of covered goals: 61
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 89%
* Total number of goals: 19
* Number of covered goals: 17
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 61
* Number of covered goals: 61
* Generated 34 tests with total length 134
* Resulting test suite's coverage: 98% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 05:37:41.567 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 29%
[MASTER] 05:37:44.588 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.235 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.273 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.317 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.318 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.367 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.368 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.414 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.415 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.467 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.468 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.520 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 05:37:46.521 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.579 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.583 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.637 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.639 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.690 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.691 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.749 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 05:37:46.750 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.840 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.841 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.897 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.898 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:46.958 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:46.959 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.012 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.012 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.116 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.118 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.217 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.217 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.265 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.265 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.326 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.327 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.372 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.372 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.571 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.572 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.624 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.625 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.667 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.668 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.739 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.740 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.821 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.822 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.886 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.887 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.926 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:47.926 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
[MASTER] 05:37:47.998 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:47.999 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:48.077 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:48.078 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:48.121 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:48.123 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:48.188 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:48.192 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:48.244 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:48.245 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:48.288 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:48.289 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 05:37:48.329 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:48.330 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
[MASTER] 05:37:48.697 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:48.698 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
[MASTER] 05:37:49.012 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/tmp/EvoSuite_pathingJar8743762407965042860.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 05:37:49.013 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8743762407965042860.jar
* Writing tests to file
[MASTER] 05:37:49.015 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'DefaultPhdReadTag_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 25 called: 4 to improve: false
** Write a test suite: 26 called: 5 to improve: false
** Write a test suite: 32 called: 6 to improve: false
* Writing JUnit test case 'DefaultPhdReadTag_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
* Done!

* Computation finished
