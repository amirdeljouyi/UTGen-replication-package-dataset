/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 06:10:12 GMT 2024
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultPhdReadTag_ESTest extends DefaultPhdReadTag_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningNull() throws Throwable  {
      // Given: A DefaultPhdReadTag object with a non-null date field
      MockDate arg3 = new MockDate((-1134), 0, (-1134), (-1134), 0, 3051);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
      
      // When: The getType() method is called on the DefaultPhdReadTag object
      String type = defaultPhdReadTag.getType();
      
      // Then: The type field of the DefaultPhdReadTag object should be null
      assertNull(type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningEmptyString() throws Throwable  {
      // rollbacked to evosuite
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "Null Range used in range comparison operation.", (Range) null, (Date) null, (String) null, "org.jcvi.jillion.core.Range$EmptyLongRange");
      String type = defaultPhdReadTag.getType();
      assertNotNull(type);
      assertEquals("Null Range used in range comparison operation.", defaultPhdReadTag.getSource());
      assertEquals("org.jcvi.jillion.core.Range$EmptyLongRange", defaultPhdReadTag.getFreeFormData());
      assertEquals("", type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSourceReturningNull() throws Throwable  {
      // Set up a MockDate that is invalid, with all fields set to -1134
      MockDate mockDate = new MockDate(-1134, 0, -1134, -1134, 0, 3051);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(null, null, null, mockDate, null, null);
      
      // Call the getSource method on the defaultPhdReadTag object
      String source = defaultPhdReadTag.getSource();
      
      // Verify that the returned value is null
      assertNull(source);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSourceReturningNonEmptyString() throws Throwable  {
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.core.Range$ShortRange", (Range) null, (Date) null, "Null Range used in range comparison operation.", (String) null);
      
      // Get the source of the DefaultPhdReadTag object
      String source = defaultPhdReadTag.getSource();
      
      // Assert that the comment of the DefaultPhdReadTag object is as expected
      assertEquals("Null Range used in range comparison operation.", defaultPhdReadTag.getComment());
      
      // Assert that the source of the DefaultPhdReadTag object is not null
      assertNotNull(source);
      
      // Assert that the type of the DefaultPhdReadTag object is as expected
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getType());
      
      // Assert that the source of the DefaultPhdReadTag object is as expected
      assertEquals("org.jcvi.jillion.core.Range$ShortRange", source);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFreeFormDataReturningNull() throws Throwable  {
      // No Comments were added
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.core.Range$ShortRange", (Range) null, (Date) null, "Null Range used in range comparison operation.", (String) null);
      String freeFormData = defaultPhdReadTag.getFreeFormData();
      assertEquals("org.jcvi.jillion.core.Range$ShortRange", defaultPhdReadTag.getSource());
      assertNull(freeFormData);
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getType());
      assertEquals("Null Range used in range comparison operation.", defaultPhdReadTag.getComment());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFreeFormDataReturningEmptyString() throws Throwable  {
      // Arrange
      Range.CoordinateSystem arg0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range arg2 = Range.of(arg0, (-448L), (-448L));
      MockDate arg3 = new MockDate((-448L));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "McvWg8n", arg2, arg3, "McvWg8n", "");
      
      // Act
      String freeFormData = defaultPhdReadTag.getFreeFormData();
      
      // Assert
      assertEquals("", freeFormData);
      assertEquals("", defaultPhdReadTag.getType());
      assertEquals("McvWg8n", defaultPhdReadTag.getSource());
      assertEquals("McvWg8n", defaultPhdReadTag.getComment());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNull() throws Throwable  {
      // rollbacked to evosuite
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.core.Range$ShortRange", (Range) null, (Date) null, "Null Range used in range comparison operation.", (String) null);
      defaultPhdReadTag.getDate();
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getType());
      assertEquals("Null Range used in range comparison operation.", defaultPhdReadTag.getComment());
      assertEquals("org.jcvi.jillion.core.Range$ShortRange", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentReturningNonEmptyString() throws Throwable  {
      // rollbacked to evosuite
      Range arg2 = Range.of((-1054L));
      MockDate arg3 = new MockDate((-2040276815), (-2040276815), (-3170));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset", arg2, arg3, "given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset");
      String comment = defaultPhdReadTag.getComment();
      assertEquals("given length %d would make range [%d - ? ] beyond max allowed end offset", comment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentReturningEmptyString() throws Throwable  {
      // Given: A DefaultPhdReadTag instance with a null value for the comment field
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(null, null, null, new MockDate(-1134, 0, -1134, -1134, 0, 3051), "", "");
      
      // When: The getComment() method is called on the instance
      String comment = defaultPhdReadTag.getComment();
      
      // Then: The comment field should be empty
      assertEquals("", comment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue0() throws Throwable  {
      // Given two DefaultPhdReadTag objects with the same data
      Range range = Range.of(1295L, 1295L);
      MockDate date = new MockDate(1295L);
      DefaultPhdReadTag tag1 = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", range, date, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      DefaultPhdReadTag tag2 = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", range, date, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      
      // When we compare the two objects with equals() method
      boolean equal = tag1.equals(tag2);
      
      // Then we expect them to be equal
      assertTrue(equal);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse0() throws Throwable  {
      // Arrange
      Range arg2 = Range.of(1295L, 1295L);
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", (Range) null, arg3, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", arg2, arg3, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      
      // Act
      boolean equals = defaultPhdReadTag.equals(arg0);
      
      // Assert
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse1() throws Throwable  {
      // Given
      Range range1 = Range.of(1295L, 1295L);
      Range range2 = Range.of(1300L, 1300L);
      MockDate date = new MockDate();
      DefaultPhdReadTag tag1 = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", range1, date, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      DefaultPhdReadTag tag2 = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", range2, date, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      
      // When
      boolean equals = tag1.equals(tag2);
      
      // Then
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse2() throws Throwable  {
      // Given two DefaultPhdReadTags with the same values
      MockDate mockDate = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, mockDate, ":|d&]);>", ":|d&]);>");
      DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, mockDate, ":|d&]);>", ":|d&]);>");
      
      // When we compare the two tags using equals() method
      boolean areEqual = defaultPhdReadTag1.equals(defaultPhdReadTag2);
      
      // Then they should be equal
      assertTrue(areEqual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse3() throws Throwable  {
      // Given
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(null, "@1LO8", null, arg3, "@1LO8", "@1LO8");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("@1LO8", "@1LO8", null, arg3, "@1LO8", "@1LO8");
      
      // When
      boolean equals = defaultPhdReadTag.equals(arg0);
      
      // Then
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse4() throws Throwable  {
      // Set up mock object for Date class
      MockDate arg3 = new MockDate();
      
      // Create two DefaultPhdReadTag objects with different values
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("}':|0 Foa", "}':|0 Foa", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      
      // Test that the equals() method returns false when comparing two different DefaultPhdReadTag objects
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals(":|d&]);>", defaultPhdReadTag.getComment()); // Check that the comment attribute is set correctly on both objects
      assertEquals("}':|0 Foa", defaultPhdReadTag.getType()); // Check that the type attribute is set correctly on both objects
      assertEquals("}':|0 Foa", defaultPhdReadTag.getSource()); // Check that the source attribute is set correctly on both objects
      assertEquals(":|d&]);>", defaultPhdReadTag.getFreeFormData()); // Check that the freeFormData attribute is set correctly on both objects
      assertFalse(equals); // Test that the equals() method returns false when comparing two different DefaultPhdReadTag objects
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse5() throws Throwable  {
      // Given two DefaultPhdReadTag objects, arg0 and defaultPhdReadTag
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag(">x", ">x", (Range) null, arg3, ">x", ">x");
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, ">x", ">x");
      
      // When the equals method is called on these two objects
      boolean equals = defaultPhdReadTag.equals(arg0);
      
      // Then the result should be false, as the two objects have different values for their tags and dates
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse6() throws Throwable  {
      // rollbacked to evosuite
      Range arg2 = Range.of((-1054L));
      MockDate arg3 = new MockDate((-2040276815), (-2040276815), (-3170));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "RBVv@gmQX1d*2", arg2, arg3, "", "bngGK-Zv5 2");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "d'", arg2, arg3, "", ", |_|");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
      assertEquals("d'", arg0.getSource());
      assertEquals(", |_|", arg0.getFreeFormData());
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", arg0.getType());
      assertEquals("", arg0.getComment());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse7() throws Throwable  {
      // Given
      Range range = Range.ofLength(1313L);
      MockDate date = new MockDate(1313L);
      DefaultPhdReadTag tag1 = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", range, date, (String) null, (String) null);
      DefaultPhdReadTag tag2 = new DefaultPhdReadTag("", "value can not be <0", range, date, (String) null, "_Z5(PyGFF&OA:");
      
      // When
      boolean areEqual = tag1.equals(tag2);
      
      // Then
      assertFalse(areEqual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse8() throws Throwable  {
      // Given two DefaultPhdReadTag objects with different values
      Range arg2 = Range.of(1234L, 1234L);
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("_Z5UPyGFF&:", "_Z5UPyGFF&:", arg2, arg3, "_Z5UPyGFF&:", "_Z5UPyGFF&:");
      DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("_Z5UPyGFF&:", "_Z5UPyGFF&:", arg2, (Date) null, "_Z5UPyGFF&:", "_Z5UPyGFF&:");
      
      // When we compare these two objects using the equals method
      boolean equals = defaultPhdReadTag1.equals(defaultPhdReadTag2);
      
      // Then we expect the result to be false, as these two objects have different values
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse9() throws Throwable  {
      // Given two DefaultPhdReadTag objects with the same data
      Range range = Range.of((-1054L));
      MockDate date = new MockDate((-2040276815), (-2040276815), (-3170));
      DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("bngGK-Zv5 2", "d'", range, date, "", "RBVv@gmQX1d*2");
      DefaultPhdReadTag defaultPhdReadTag2 = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "d'", range, date, "", ", |_|");
      
      // When we call the equals method with both objects as parameters
      boolean result = defaultPhdReadTag1.equals(defaultPhdReadTag2);
      
      // Then the result should be true
      assertTrue(result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse10() throws Throwable  {
      // Set up the test data
      Range lengthRange = Range.of((-1054L));
      MockDate startDate = new MockDate((-2040276815), (-2040276815), (-3170));
      DefaultPhdReadTag tag1 = new DefaultPhdReadTag("given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset", lengthRange, startDate, "given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset");
      DefaultPhdReadTag tag2 = new DefaultPhdReadTag("bngGK-Zv5 2", "d'", lengthRange, (Date) null, "", "RBVv@gmQX1d*2");
      
      // Test the equals method
      assertFalse(tag1.equals(null));
      assertFalse(tag1.equals(""));
      assertTrue(tag1.equals(tag2));
      assertEquals(tag1, tag2);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse11() throws Throwable  {
      // Given
      Range range = Range.ofLength(1313L);
      MockDate date = new MockDate(1313L);
      DefaultPhdReadTag tag1 = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", range, date, (String) null, (String) null);
      DefaultPhdReadTag tag2 = new DefaultPhdReadTag("zOf", "zOf", range, date, "", "");
      
      // When
      boolean equals = tag1.equals(tag2);
      
      // Then
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue1() throws Throwable  {
      // rollbacked to evosuite
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse12() throws Throwable  {
      // Given the following variables are initialized with valid values:
      Range arg2 = Range.ofLength(1313L);
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      
      // When the equals method is called on the DefaultPhdReadTag object with a String argument of "zOf":
      boolean equals = defaultPhdReadTag.equals("zOf");
      
      // Then the method should return false:
      assertFalse(equals);
      
      // And the getType() method should return "_Z5(PyGFF&OA:":
      assertEquals("_Z5(PyGFF&OA:", defaultPhdReadTag.getType());
      
      // And the getSource() method should return "":
      assertEquals("", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue2() throws Throwable  {
      // Given
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, (String) null, (String) null);
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, (String) null, (String) null);
      
      // When
      boolean equals = defaultPhdReadTag.equals(arg0);
      
      // Then
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue3() throws Throwable  {
      // Given
      Range arg2 = Range.of((-1054L));
      MockDate arg3 = new MockDate((-2040276815), (-2040276815), (-3170));
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset", arg2, arg3, "given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset");
      
      // When
      boolean equals = arg0.equals(arg0);
      
      // Then
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      // Given a DefaultPhdReadTag with a null range and a comment
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.core.Range$ShortRange", (Range) null, (Date) null, "Null Range used in range comparison operation.", (String) null);
      
      // When the equals method is called with a null object
      boolean result = defaultPhdReadTag.equals((Object) null);
      
      // Then the result should be false
      assertFalse(result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode0() throws Throwable  {
      // Arrange
      MockDate mockDate = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(null, null, null, mockDate, null, null);
      
      // Act
      int hashCode = defaultPhdReadTag.hashCode();
      
      // Assert
      assertNotEquals(0, hashCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode1() throws Throwable  {
      // rollbacked to evosuite
      Range arg2 = Range.of(0L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("NbtA'_{Vk[/zPn*$t", "NbtA'_{Vk[/zPn*$t", arg2, (Date) null, "NbtA'_{Vk[/zPn*$t", "NbtA'_{Vk[/zPn*$t");
      defaultPhdReadTag.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentReturningNull() throws Throwable  {
      // Create a Range object with a length of 1313L
      Range arg2 = Range.ofLength(1313L);
      
      // Create a MockDate object with a value of 1313L
      MockDate arg3 = new MockDate(1313L);
      
      // Create a DefaultPhdReadTag object with the given parameters
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      
      // Test that the comment is null
      assertNull(defaultPhdReadTag.getComment());
      
      // Test that the type is "_Z5(PyGFF&OA:"
      assertEquals("_Z5(PyGFF&OA:", defaultPhdReadTag.getType());
      
      // Test that the source is an empty string
      assertEquals("", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUngappedRange() throws Throwable  {
      // No Comments were added
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "v9/[i'y!\"qpGHH-B*", (Range) null, arg3, (String) null, (String) null);
      Range ungappedRange = defaultPhdReadTag.getUngappedRange();
      assertNull(ungappedRange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNonNull() throws Throwable  {
      // Given a DefaultPhdReadTag object with a valid date and type
      Range arg2 = Range.ofLength(1313L);
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      
      // When the getDate() method is called on the DefaultPhdReadTag object
      defaultPhdReadTag.getDate();
      
      // Then the date returned by the getDate() method should be equal to the valid date provided in the constructor
      assertEquals("", defaultPhdReadTag.getSource());
      
      // And the type returned by the getType() method should be equal to the type provided in the constructor
      assertEquals("_Z5(PyGFF&OA:", defaultPhdReadTag.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSourceReturningEmptyString() throws Throwable  {
      // Given: A DefaultPhdReadTag object with a non-empty source and an empty type
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", Range.ofLength(1313L), arg3, (String) null, (String) null);
      
      // When: The getSource() and getType() methods are called on the DefaultPhdReadTag object
      String source = defaultPhdReadTag.getSource();
      String type = defaultPhdReadTag.getType();
      
      // Then: The getSource() method should return an empty string, while the getType() method should return the non-empty string "_Z5(PyGFF&OA:"
      assertEquals("", source);
      assertEquals("_Z5(PyGFF&OA:", type);
      
      // Additionally, the source and type fields of the DefaultPhdReadTag object should not be null
      assertNotNull(source);
      assertNotNull(type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningNonEmptyString() throws Throwable  {
      // Given a DefaultPhdReadTag object with a non-null type and an empty source
      Range arg2 = Range.ofLength(1313L);
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      
      // When the getType method is called
      String type = defaultPhdReadTag.getType();
      
      // Then the returned value should be the expected type and source should be empty
      assertNotNull(type);
      assertEquals("_Z5(PyGFF&OA:", type);
      assertEquals("", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFreeFormDataReturningNonEmptyString() throws Throwable  {
      // Given: We have a DefaultPhdReadTag object with some sample data
      Range arg2 = Range.of(0L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("NbtA'_{Vk[/zPn*$t", "NbtA'_{Vk[/zPn*$t", arg2, (Date) null, "NbtA'_{Vk[/zPn*$t", "NbtA'_{Vk[/zPn*$t");
      
      // When: We call the getFreeFormData() method on the DefaultPhdReadTag object
      String freeFormData = defaultPhdReadTag.getFreeFormData();
      
      // Then: The returned value should be the same as the data used to create the DefaultPhdReadTag object
  }
}
