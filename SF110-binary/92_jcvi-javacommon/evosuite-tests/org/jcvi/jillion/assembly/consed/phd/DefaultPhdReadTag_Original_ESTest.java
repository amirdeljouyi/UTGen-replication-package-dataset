/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 06:10:12 GMT 2024
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultPhdReadTag_Original_ESTest extends DefaultPhdReadTag_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningNull() throws Throwable  {
      MockDate arg3 = new MockDate((-1134), 0, (-1134), (-1134), 0, 3051);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
      String type = defaultPhdReadTag.getType();
      assertNull(type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningEmptyString() throws Throwable  {
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "Null Range used in range comparison operation.", (Range) null, (Date) null, (String) null, "org.jcvi.jillion.core.Range$EmptyLongRange");
      String type = defaultPhdReadTag.getType();
      assertEquals("", type);
      assertEquals("org.jcvi.jillion.core.Range$EmptyLongRange", defaultPhdReadTag.getFreeFormData());
      assertEquals("Null Range used in range comparison operation.", defaultPhdReadTag.getSource());
      assertNotNull(type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSourceReturningNull() throws Throwable  {
      MockDate arg3 = new MockDate((-1134), 0, (-1134), (-1134), 0, 3051);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
      String source = defaultPhdReadTag.getSource();
      assertNull(source);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSourceReturningNonEmptyString() throws Throwable  {
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.core.Range$ShortRange", (Range) null, (Date) null, "Null Range used in range comparison operation.", (String) null);
      String source = defaultPhdReadTag.getSource();
      assertNotNull(source);
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getType());
      assertEquals("org.jcvi.jillion.core.Range$ShortRange", source);
      assertEquals("Null Range used in range comparison operation.", defaultPhdReadTag.getComment());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFreeFormDataReturningNull() throws Throwable  {
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.core.Range$ShortRange", (Range) null, (Date) null, "Null Range used in range comparison operation.", (String) null);
      String freeFormData = defaultPhdReadTag.getFreeFormData();
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getType());
      assertEquals("org.jcvi.jillion.core.Range$ShortRange", defaultPhdReadTag.getSource());
      assertEquals("Null Range used in range comparison operation.", defaultPhdReadTag.getComment());
      assertNull(freeFormData);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFreeFormDataReturningEmptyString() throws Throwable  {
      Range.CoordinateSystem arg0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range arg2 = Range.of(arg0, (-448L), (-448L));
      MockDate arg3 = new MockDate((-448L));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("", "McvWg8n", arg2, arg3, "McvWg8n", "");
      String freeFormData = defaultPhdReadTag.getFreeFormData();
      assertEquals("", defaultPhdReadTag.getType());
      assertEquals("McvWg8n", defaultPhdReadTag.getComment());
      assertEquals("", freeFormData);
      assertEquals("McvWg8n", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNull() throws Throwable  {
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.core.Range$ShortRange", (Range) null, (Date) null, "Null Range used in range comparison operation.", (String) null);
      defaultPhdReadTag.getDate();
      assertEquals("org.jcvi.jillion.core.Range$ShortRange", defaultPhdReadTag.getSource());
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getType());
      assertEquals("Null Range used in range comparison operation.", defaultPhdReadTag.getComment());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentReturningNonEmptyString() throws Throwable  {
      Range arg2 = Range.of((-1054L));
      MockDate arg3 = new MockDate((-2040276815), (-2040276815), (-3170));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset", arg2, arg3, "given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset");
      String comment = defaultPhdReadTag.getComment();
      assertEquals("given length %d would make range [%d - ? ] beyond max allowed end offset", comment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentReturningEmptyString() throws Throwable  {
      MockDate arg3 = new MockDate((-1134), 0, (-1134), (-1134), 0, 3051);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, "", "");
      String comment = defaultPhdReadTag.getComment();
      assertEquals("", comment);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue0() throws Throwable  {
      Range arg2 = Range.of(1295L, 1295L);
      MockDate arg3 = new MockDate(1295L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", arg2, arg3, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", arg2, arg3, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse0() throws Throwable  {
      Range arg2 = Range.of(1295L, 1295L);
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", (Range) null, arg3, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", arg2, arg3, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse1() throws Throwable  {
      Range arg2 = Range.of(1295L, 1295L);
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", (Range) null, arg3, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:", arg2, arg3, "_Z5(PyGFF&OA:", "_Z5(PyGFF&OA:");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse2() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("OT#wo:m>xnDk<V|QcoP", ":|d&]);>", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals(":|d&]);>", arg0.getFreeFormData());
      assertEquals(":|d&]);>", arg0.getComment());
      assertFalse(equals);
      assertEquals(":|d&]);>", arg0.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse3() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "@1LO8", (Range) null, arg3, "@1LO8", "@1LO8");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("@1LO8", "@1LO8", (Range) null, arg3, "@1LO8", "@1LO8");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse4() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("}':|0 Foa", "}':|0 Foa", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals("}':|0 Foa", defaultPhdReadTag.getType());
      assertFalse(equals);
      assertEquals(":|d&]);>", defaultPhdReadTag.getFreeFormData());
      assertEquals("}':|0 Foa", defaultPhdReadTag.getSource());
      assertEquals(":|d&]);>", defaultPhdReadTag.getComment());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse5() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag(">x", ">x", (Range) null, arg3, ">x", ">x");
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, ">x", ">x");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse6() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, arg3, ":|d&]);>", (String) null);
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse7() throws Throwable  {
      Range arg2 = Range.ofLength(1313L);
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("", "value can not be <0", arg2, arg3, (String) null, "_Z5(PyGFF&OA:");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals("value can not be <0", arg0.getSource());
      assertEquals("_Z5(PyGFF&OA:", arg0.getFreeFormData());
      assertFalse(equals);
      assertEquals("", arg0.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse8() throws Throwable  {
      Range arg2 = Range.of(1234L, 1234L);
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5UPyGFF&:", "_Z5UPyGFF&:", arg2, arg3, "_Z5UPyGFF&:", "_Z5UPyGFF&:");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("_Z5UPyGFF&:", "_Z5UPyGFF&:", arg2, (Date) null, "_Z5UPyGFF&:", "_Z5UPyGFF&:");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse9() throws Throwable  {
      Range arg2 = Range.of((-1054L));
      MockDate arg3 = new MockDate((-2040276815), (-2040276815), (-3170));
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("", "RBVv@gmQX1d*2", arg2, arg3, "", "bngGK-Zv5 2");
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("bngGK-Zv5 2", "d'", arg2, (Date) null, "", "RBVv@gmQX1d*2");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals("", defaultPhdReadTag.getComment());
      assertEquals("RBVv@gmQX1d*2", defaultPhdReadTag.getFreeFormData());
      assertEquals("d'", defaultPhdReadTag.getSource());
      assertEquals("bngGK-Zv5 2", defaultPhdReadTag.getType());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse10() throws Throwable  {
      Range arg2 = Range.of((-1054L));
      MockDate arg3 = new MockDate((-2040276815), (-2040276815), (-3170));
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset", arg2, arg3, "given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("", "RBVv@gmQX1d*2", arg2, arg3, "", "bngGK-Zv5 2");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals("RBVv@gmQX1d*2", arg0.getSource());
      assertEquals("", arg0.getComment());
      assertEquals("bngGK-Zv5 2", arg0.getFreeFormData());
      assertEquals("", arg0.getType());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse11() throws Throwable  {
      Range arg2 = Range.ofLength(1313L);
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("zOf", "zOf", arg2, arg3, "", "");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertEquals("", arg0.getComment());
      assertEquals("", defaultPhdReadTag.getSource());
      assertFalse(equals);
      assertEquals("", arg0.getFreeFormData());
      assertEquals("_Z5(PyGFF&OA:", defaultPhdReadTag.getType());
      assertEquals("zOf", arg0.getType());
      assertEquals("zOf", arg0.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue1() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag(":|d&]);>", ":|d&]);>", (Range) null, arg3, ":|d&]);>", ":|d&]);>");
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningFalse12() throws Throwable  {
      Range arg2 = Range.ofLength(1313L);
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      boolean equals = defaultPhdReadTag.equals("zOf");
      assertFalse(equals);
      assertEquals("_Z5(PyGFF&OA:", defaultPhdReadTag.getType());
      assertEquals("", defaultPhdReadTag.getSource());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue2() throws Throwable  {
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, (String) null, (String) null);
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag((String) null, (String) null, (Range) null, (Date) null, (String) null, (String) null);
      boolean equals = defaultPhdReadTag.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue3() throws Throwable  {
      Range arg2 = Range.of((-1054L));
      MockDate arg3 = new MockDate((-2040276815), (-2040276815), (-3170));
      DefaultPhdReadTag arg0 = new DefaultPhdReadTag("given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset", arg2, arg3, "given length %d would make range [%d - ? ] beyond max allowed end offset", "given length %d would make range [%d - ? ] beyond max allowed end offset");
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", "org.jcvi.jillion.core.Range$ShortRange", (Range) null, (Date) null, "Null Range used in range comparison operation.", (String) null);
      boolean equals = defaultPhdReadTag.equals((Object) null);
      assertEquals("org.jcvi.jillion.core.Range$ShortRange", defaultPhdReadTag.getSource());
      assertFalse(equals);
      assertEquals("Null Range used in range comparison operation.", defaultPhdReadTag.getComment());
      assertEquals("org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag", defaultPhdReadTag.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode0() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, (String) null, (Range) null, arg3, (String) null, (String) null);
      defaultPhdReadTag.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode1() throws Throwable  {
      Range arg2 = Range.of(0L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("NbtA'_{Vk[/zPn*$t", "NbtA'_{Vk[/zPn*$t", arg2, (Date) null, "NbtA'_{Vk[/zPn*$t", "NbtA'_{Vk[/zPn*$t");
      defaultPhdReadTag.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommentReturningNull() throws Throwable  {
      Range arg2 = Range.ofLength(1313L);
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      String comment = defaultPhdReadTag.getComment();
      assertEquals("", defaultPhdReadTag.getSource());
      assertNull(comment);
      assertEquals("_Z5(PyGFF&OA:", defaultPhdReadTag.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetUngappedRange() throws Throwable  {
      MockDate arg3 = new MockDate();
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag((String) null, "v9/[i'y!\"qpGHH-B*", (Range) null, arg3, (String) null, (String) null);
      Range ungappedRange = defaultPhdReadTag.getUngappedRange();
      assertNull(ungappedRange);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDateReturningNonNull() throws Throwable  {
      Range arg2 = Range.ofLength(1313L);
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      defaultPhdReadTag.getDate();
      assertEquals("", defaultPhdReadTag.getSource());
      assertEquals("_Z5(PyGFF&OA:", defaultPhdReadTag.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSourceReturningEmptyString() throws Throwable  {
      Range arg2 = Range.ofLength(1313L);
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      String source = defaultPhdReadTag.getSource();
      assertNotNull(source);
      assertEquals("_Z5(PyGFF&OA:", defaultPhdReadTag.getType());
      assertEquals("", source);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningNonEmptyString() throws Throwable  {
      Range arg2 = Range.ofLength(1313L);
      MockDate arg3 = new MockDate(1313L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("_Z5(PyGFF&OA:", "", arg2, arg3, (String) null, (String) null);
      String type = defaultPhdReadTag.getType();
      assertNotNull(type);
      assertEquals("", defaultPhdReadTag.getSource());
      assertEquals("_Z5(PyGFF&OA:", type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetFreeFormDataReturningNonEmptyString() throws Throwable  {
      Range arg2 = Range.of(0L);
      DefaultPhdReadTag defaultPhdReadTag = new DefaultPhdReadTag("NbtA'_{Vk[/zPn*$t", "NbtA'_{Vk[/zPn*$t", arg2, (Date) null, "NbtA'_{Vk[/zPn*$t", "NbtA'_{Vk[/zPn*$t");
      String freeFormData = defaultPhdReadTag.getFreeFormData();
      assertEquals("NbtA'_{Vk[/zPn*$t", freeFormData);
  }
}
