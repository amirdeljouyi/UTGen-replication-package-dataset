/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Mar 15 04:16:19 GMT 2024
 */

package org.jcvi.jillion.assembly.ca.frg;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.assembly.ca.frg.Distance;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Distance_Original_ESTest extends Distance_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTransformIntoCeleraAssemblerDistanceReturningDistanceWhereGetStdDevIsZero() throws Throwable  {
      Distance arg0 = Distance.buildDistance(724, 724);
      Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0);
      assertEquals(724, transformIntoCeleraAssemblerDistance.getMin());
      assertEquals(724, transformIntoCeleraAssemblerDistance.getMax());
      assertEquals(0.0F, transformIntoCeleraAssemblerDistance.getStdDev(), 0.01F);
      assertEquals(724.0F, transformIntoCeleraAssemblerDistance.getMean(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTransformIntoCeleraAssemblerDistance() throws Throwable  {
      Distance arg0 = Distance.buildDistance(1042, 129);
      Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0);
      assertEquals(1042, transformIntoCeleraAssemblerDistance.getMin());
      assertEquals(585.5F, transformIntoCeleraAssemblerDistance.getMean(), 0.01F);
      assertEquals((-152.16667F), transformIntoCeleraAssemblerDistance.getStdDev(), 0.01F);
      assertEquals(129, transformIntoCeleraAssemblerDistance.getMax());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStdDevReturningPositive() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-2807), 0);
      float stdDev = buildDistance.getStdDev();
      assertEquals((-1403.5F), buildDistance.getMean(), 0.01F);
      assertEquals(0, buildDistance.getMax());
      assertEquals(467.83334F, stdDev, 0.01F);
      assertEquals((-2807), buildDistance.getMin());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStdDevReturningNegative() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(6555, (-3448));
      float stdDev = buildDistance.getStdDev();
      assertEquals(6555, buildDistance.getMin());
      assertEquals(1553.5F, buildDistance.getMean(), 0.01F);
      assertEquals((-1667.1666F), stdDev, 0.01F);
      assertEquals((-3448), buildDistance.getMax());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinReturningZero() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(0, 0, (float) 0, 6.0F);
      int min = buildDistance.getMin();
      assertEquals(0.0F, buildDistance.getMean(), 0.01F);
      assertEquals(6.0F, buildDistance.getStdDev(), 0.01F);
      assertEquals(0, min);
      assertEquals(0, buildDistance.getMax());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinReturningPositive() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(1566.0851F, (-1.0F));
      int min = buildDistance.getMin();
      assertEquals(1566.0851F, buildDistance.getMean(), 0.01F);
      assertEquals((-1.0F), buildDistance.getStdDev(), 0.01F);
      assertEquals(1563, min);
      assertEquals(1569, buildDistance.getMax());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMeanReturningZero() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-238), 1, 0.0F, 1.0F);
      float mean = buildDistance.getMean();
      assertEquals(1, buildDistance.getMax());
      assertEquals((-238), buildDistance.getMin());
      assertEquals(0.0F, mean, 0.01F);
      assertEquals(1.0F, buildDistance.getStdDev(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMeanReturningPositive() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(6555, (-3448));
      float mean = buildDistance.getMean();
      assertEquals(6555, buildDistance.getMin());
      assertEquals(1553.5F, mean, 0.01F);
      assertEquals((-3448), buildDistance.getMax());
      assertEquals((-1667.1666F), buildDistance.getStdDev(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxReturningPositive() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(724, 724);
      int max = buildDistance.getMax();
      assertEquals(724.0F, buildDistance.getMean(), 0.01F);
      assertEquals(0.0F, buildDistance.getStdDev(), 0.01F);
      assertEquals(724, max);
      assertEquals(724, buildDistance.getMin());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxReturningNegative() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(6555, (-3448));
      int max = buildDistance.getMax();
      assertEquals(6555, buildDistance.getMin());
      assertEquals((-3448), max);
      assertEquals(1553.5F, buildDistance.getMean(), 0.01F);
      assertEquals((-1667.1666F), buildDistance.getStdDev(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking4ArgumentsReturningDistanceWhereGetMaxIsPositive() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(0, 6555, 125.91027F, 0.0F);
      assertEquals(0.0F, buildDistance.getStdDev(), 0.01F);
      assertEquals(0, buildDistance.getMin());
      assertEquals(125.91027F, buildDistance.getMean(), 0.01F);
      assertEquals(6555, buildDistance.getMax());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking2IntsReturningDistanceWhereGetMeanIsZero() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(1, (-1));
      assertEquals(0.0F, buildDistance.getMean(), 0.01F);
      assertEquals((-0.33333334F), buildDistance.getStdDev(), 0.01F);
      assertEquals((-1), buildDistance.getMax());
      assertEquals(1, buildDistance.getMin());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking2IntsReturningDistanceWhereGetMinIsZero() throws Throwable  {
      Distance arg0 = Distance.buildDistance(0, 1634);
      Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0);
      assertEquals(272.33334F, transformIntoCeleraAssemblerDistance.getStdDev(), 0.01F);
      assertEquals(0, transformIntoCeleraAssemblerDistance.getMin());
      assertEquals(1634, transformIntoCeleraAssemblerDistance.getMax());
      assertEquals(817.0F, transformIntoCeleraAssemblerDistance.getMean(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking2FloatsReturningDistanceWhereGetMaxIsPositive() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(3290.25F, 6.0F);
      assertEquals(6.0F, buildDistance.getStdDev(), 0.01F);
      assertEquals(3272, buildDistance.getMin());
      assertEquals(3308, buildDistance.getMax());
      assertEquals(3290.25F, buildDistance.getMean(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking2FloatsReturningDistanceWhereGetMaxIsNegative() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((float) (-1515), 0.0F);
      assertEquals((-1515.0F), buildDistance.getMean(), 0.01F);
      assertEquals((-1515), buildDistance.getMax());
      assertEquals(0.0F, buildDistance.getStdDev(), 0.01F);
      assertEquals((-1515), buildDistance.getMin());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxReturningZero() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(1662, 0);
      int max = buildDistance.getMax();
      assertEquals(1662, buildDistance.getMin());
      assertEquals((-277.0F), buildDistance.getStdDev(), 0.01F);
      assertEquals(0, max);
      assertEquals(831.0F, buildDistance.getMean(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMinReturningNegative() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-238), (-238));
      int min = buildDistance.getMin();
      assertEquals((-238.0F), buildDistance.getMean(), 0.01F);
      assertEquals(0.0F, buildDistance.getStdDev(), 0.01F);
      assertEquals((-238), buildDistance.getMax());
      assertEquals((-238), min);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetStdDevReturningZero() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-238), (-238));
      float stdDev = buildDistance.getStdDev();
      assertEquals((-238), buildDistance.getMin());
      assertEquals(0.0F, stdDev, 0.01F);
      assertEquals((-238), buildDistance.getMax());
      assertEquals((-238.0F), buildDistance.getMean(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMeanReturningNegative() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-238), (-238));
      float mean = buildDistance.getMean();
      assertEquals(0.0F, buildDistance.getStdDev(), 0.01F);
      assertEquals((-238), buildDistance.getMin());
      assertEquals((-238.0F), mean, 0.01F);
      assertEquals((-238), buildDistance.getMax());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking2IntsReturningDistanceWhereGetStdDevIsZero() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-49), (-49));
      Distance arg0 = Distance.buildDistance((-49), (-49));
      boolean equals = buildDistance.equals(arg0);
      assertTrue(equals);
      assertEquals((-49), arg0.getMax());
      assertEquals((-49.0F), arg0.getMean(), 0.01F);
      assertEquals(0.0F, arg0.getStdDev(), 0.01F);
      assertEquals((-49), arg0.getMin());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking4ArgumentsReturningDistanceWhereGetMinIsPositive() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(0, 0, (float) 0, (float) 0);
      Distance arg0 = Distance.buildDistance(1092705414, 0, (float) 0, (-106.4841F));
      boolean equals = buildDistance.equals(arg0);
      assertFalse(equals);
      assertEquals(1092705414, arg0.getMin());
      assertEquals(0, arg0.getMax());
      assertEquals((-106.4841F), arg0.getStdDev(), 0.01F);
      assertEquals(0.0F, arg0.getMean(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking4ArgumentsReturningDistanceWhereGetMaxIsNegative() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-2360), (-2360));
      Distance arg0 = Distance.buildDistance((-2360), (-2360), 1.0F, (-835.97F));
      boolean equals = buildDistance.equals(arg0);
      assertEquals((-835.97F), arg0.getStdDev(), 0.01F);
      assertEquals(1.0F, arg0.getMean(), 0.01F);
      assertEquals((-2360), arg0.getMax());
      assertFalse(equals);
      assertEquals((-2360), arg0.getMin());
      assertEquals((-2360), buildDistance.getMax());
      assertEquals((-2360.0F), buildDistance.getMean(), 0.01F);
      assertEquals(0.0F, buildDistance.getStdDev(), 0.01F);
      assertEquals((-2360), buildDistance.getMin());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-49), (-49));
      Distance arg0 = Distance.buildDistance((-49), (-845));
      boolean equals = buildDistance.equals(arg0);
      assertFalse(equals);
      assertEquals((-845), arg0.getMax());
      assertEquals((-49), arg0.getMin());
      assertEquals((-447.0F), arg0.getMean(), 0.01F);
      assertEquals((-132.66667F), arg0.getStdDev(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNonNull() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-2807), 0);
      Object arg0 = new Object();
      boolean equals = buildDistance.equals(arg0);
      assertFalse(equals);
      assertEquals((-2807), buildDistance.getMin());
      assertEquals((-1403.5F), buildDistance.getMean(), 0.01F);
      assertEquals(0, buildDistance.getMax());
      assertEquals(467.83334F, buildDistance.getStdDev(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(0, 0, (float) 0, (-2765.95F));
      boolean equals = buildDistance.equals((Object) null);
      assertEquals(0, buildDistance.getMax());
      assertEquals((-2765.95F), buildDistance.getStdDev(), 0.01F);
      assertEquals(0, buildDistance.getMin());
      assertFalse(equals);
      assertEquals(0.0F, buildDistance.getMean(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEquals() throws Throwable  {
      Distance arg0 = Distance.buildDistance((-2386.8723F), (-2386.8723F));
      boolean equals = arg0.equals(arg0);
      assertEquals((-2386.8723F), arg0.getMean(), 0.01F);
      assertTrue(equals);
      assertEquals(4773, arg0.getMax());
      assertEquals((-9547), arg0.getMin());
      assertEquals((-2386.8723F), arg0.getStdDev(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking4Arguments() throws Throwable  {
      Distance arg0 = Distance.buildDistance(0, 0, (float) 0, (-2765.95F));
      Distance transformIntoCeleraAssemblerDistance = Distance.transformIntoCeleraAssemblerDistance(arg0);
      assertEquals(0, transformIntoCeleraAssemblerDistance.getMax());
      assertEquals(0.0F, transformIntoCeleraAssemblerDistance.getMean(), 0.01F);
      assertEquals(0, transformIntoCeleraAssemblerDistance.getMin());
      assertEquals((-2765.95F), transformIntoCeleraAssemblerDistance.getStdDev(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking4ArgumentsReturningDistanceWhereGetMeanIsNegative() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-1395), 0, (float) (-49), 169.2F);
      assertEquals(169.2F, buildDistance.getStdDev(), 0.01F);
      assertEquals((-49.0F), buildDistance.getMean(), 0.01F);
      assertEquals(0, buildDistance.getMax());
      assertEquals((-1395), buildDistance.getMin());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testHashCode() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-49), (-49));
      buildDistance.hashCode();
      assertEquals((-49), buildDistance.getMin());
      assertEquals((-49.0F), buildDistance.getMean(), 0.01F);
      assertEquals((-49), buildDistance.getMax());
      assertEquals(0.0F, buildDistance.getStdDev(), 0.01F);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testToString() throws Throwable  {
      Distance buildDistance = Distance.buildDistance((-49), (-49));
      String string = buildDistance.toString();
      assertEquals((-49), buildDistance.getMax());
      assertEquals((-49), buildDistance.getMin());
      assertEquals("-49.000, std: 0.000", string);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testBuildDistanceTaking2FloatsReturningDistanceWhereGetMinIsZero() throws Throwable  {
      Distance buildDistance = Distance.buildDistance(0.0F, (float) 0);
      assertEquals(0.0F, buildDistance.getStdDev(), 0.01F);
      assertEquals(0, buildDistance.getMin());
      assertEquals(0.0F, buildDistance.getMean(), 0.01F);
      assertEquals(0, buildDistance.getMax());
  }
}
