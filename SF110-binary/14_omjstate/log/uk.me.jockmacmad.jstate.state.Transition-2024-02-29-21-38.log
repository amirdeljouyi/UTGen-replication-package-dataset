* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: uk.me.jockmacmad.jstate.state.Transition
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/14_omjstate/evosuite-files/evosuite.properties
* Connecting to master process on port 4937
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 21:38:04.591 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 21:38:04.595 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 21:38:04.595 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 21:38:04.611 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class uk.me.jockmacmad.jstate.state.Transition
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 123
* Using seed 1709242682839
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 55 / 123
[Progress:>                             0%] [Cov:=============================>     84%][Progress:>                             0%] [Cov:==============================>    86%][Progress:>                             1%] [Cov:==============================>    88%][Progress:>                             1%] [Cov:==============================>    88%][Progress:>                             1%] [Cov:===============================>   90%][Progress:>                             1%] [Cov:===============================>   91%][Progress:>                             2%] [Cov:===============================>   91%][Progress:>                             2%] [Cov:===============================>   91%][Progress:>                             2%] [Cov:===============================>   91%][Progress:>                             2%] [Cov:===============================>   91%][Progress:>                             3%] [Cov:===============================>   91%][Progress:>                             3%] [Cov:================================>  92%][Progress:>                             3%] [Cov:================================>  92%][Progress:>                             3%] [Cov:================================>  92%][Progress:=>                            4%] [Cov:================================>  92%][Progress:=>                            4%] [Cov:================================>  94%][Progress:=>                            4%] [Cov:================================>  94%][Progress:=>                            4%] [Cov:================================>  94%][Progress:=>                            4%] [Cov:================================>  94%][Progress:=>                            4%] [Cov:================================>  94%][Progress:=>                            4%] [Cov:================================>  94%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            5%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           9%] [Cov:================================>  94%][Progress:==>                           9%] [Cov:================================>  94%][Progress:==>                           9%] [Cov:================================>  94%][Progress:==>                           9%] [Cov:================================>  94%][Progress:==>                           9%] [Cov:================================>  94%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:==>                           9%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          10%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:====>                         14%] [Cov:=================================> 97%][Progress:=====>                        19%] [Cov:=================================> 97%][Progress:======>                       20%] [Cov:=================================> 97%][Progress:======>                       20%] [Cov:=================================> 97%][Progress:======>                       20%] [Cov:=================================> 97%][Progress:======>                       20%] [Cov:=================================> 97%][Progress:=======>                      25%] [Cov:=================================> 97%][Progress:=======>                      25%] [Cov:=================================> 97%][Progress:=======>                      25%] [Cov:=================================> 97%][Progress:=======>                      25%] [Cov:=================================> 97%][Progress:=======>                      25%] [Cov:=================================> 97%][Progress:=======>                      25%] [Cov:=================================> 97%][Progress:=======>                      25%] [Cov:=================================> 97%][Progress:========>                     27%] [Cov:=================================> 97%][Progress:========>                     27%] [Cov:=================================> 97%][Progress:========>                     27%] [Cov:=================================> 97%][Progress:========>                     27%] [Cov:=================================> 97%][Progress:========>                     27%] [Cov:=================================> 97%][Progress:========>                     27%] [Cov:=================================> 97%][Progress:========>                     28%] [Cov:=================================> 97%][Progress:========>                     28%] [Cov:=================================> 97%][Progress:========>                     28%] [Cov:=================================> 97%][Progress:========>                     28%] [Cov:=================================> 97%][Progress:========>                     28%] [Cov:=================================> 97%][Progress:========>                     28%] [Cov:=================================> 97%][Progress:========>                     28%] [Cov:=================================> 97%][Progress:========>                     28%] [Cov:=================================> 97%][Progress:========>                     28%] [Cov:=================================> 97%][Progress:========>                     29%] [Cov:=================================> 97%][Progress:========>                     29%] [Cov:=================================> 97%][Progress:========>                     29%] [Cov:=================================> 97%][Progress:========>                     29%] [Cov:=================================> 97%][Progress:========>                     29%] [Cov:=================================> 97%][Progress:========>                     29%] [Cov:=================================> 97%][Progress:========>                     29%] [Cov:=================================> 97%][Progress:========>                     29%] [Cov:=================================> 97%][Progress:=========>                    30%] [Cov:=================================> 97%][Progress:=========>                    30%] [Cov:=================================> 97%][Progress:=========>                    30%] [Cov:=================================> 97%][Progress:=========>                    30%] [Cov:=================================> 97%][Progress:=========>                    30%] [Cov:=================================> 97%][Progress:=========>                    30%] [Cov:=================================> 97%][Progress:=========>                    30%] [Cov:=================================> 97%][Progress:=========>                    30%] [Cov:=================================> 97%][Progress:=========>                    31%] [Cov:=================================> 97%][Progress:=========>                    31%] [Cov:=================================> 97%][Progress:=========>                    31%] [Cov:=================================> 97%][Progress:=========>                    31%] [Cov:=================================> 97%][Progress:=========>                    32%] [Cov:=================================> 97%][Progress:=========>                    32%] [Cov:=================================> 97%][Progress:=========>                    32%] [Cov:=================================> 97%][Progress:=========>                    32%] [Cov:=================================> 97%][Progress:=========>                    32%] [Cov:=================================> 97%][Progress:=========>                    32%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:=========>                    33%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][MASTER] 21:38:39.306 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   34%] [Cov:=================================> 97%][Progress:==========>                   35%] [Cov:=================================> 97%][Progress:==========>                   35%] [Cov:=================================> 97%][Progress:===========>                  37%] [Cov:=================================> 97%][Progress:===========>                  37%] [Cov:=================================> 97%][Progress:===========>                  37%] [Cov:=================================> 97%][Progress:===========>                  37%] [Cov:=================================> 97%][Progress:===========>                  37%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:===========>                  38%] [Cov:=================================> 97%][Progress:============>                 43%] [Cov:=================================> 97%][Progress:============>                 43%] [Cov:=================================> 97%][Progress:============>                 43%] [Cov:=================================> 97%][Progress:============>                 43%] [Cov:=================================> 97%][Progress:=============>                44%] [Cov:=================================> 97%][Progress:=============>                44%] [Cov:=================================> 97%][Progress:=============>                44%] [Cov:=================================> 97%][Progress:=============>                44%] [Cov:=================================> 97%][Progress:=============>                44%] [Cov:=================================> 97%][Progress:=============>                44%] [Cov:=================================> 97%][Progress:=============>                44%] [Cov:=================================> 97%][Progress:=============>                44%] [Cov:=================================> 97%][Progress:=============>                45%] [Cov:=================================> 97%][Progress:=============>                45%] [Cov:=================================> 97%][Progress:=============>                45%] [Cov:=================================> 97%][Progress:=============>                45%] [Cov:=================================> 97%][Progress:=============>                45%] [Cov:=================================> 97%][Progress:=============>                45%] [Cov:=================================> 97%][Progress:=============>                45%] [Cov:=================================> 97%][Progress:=============>                45%] [Cov:=================================> 97%][Progress:=============>                46%] [Cov:=================================> 97%][Progress:=============>                46%] [Cov:=================================> 97%][Progress:=============>                46%] [Cov:=================================> 97%][Progress:=============>                46%] [Cov:=================================> 97%][Progress:=============>                46%] [Cov:=================================> 97%][Progress:=============>                46%] [Cov:=================================> 97%][Progress:==============>               47%] [Cov:=================================> 97%][Progress:==============>               47%] [Cov:=================================> 97%][Progress:==============>               47%] [Cov:=================================> 97%][Progress:==============>               49%] [Cov:=================================> 97%][Progress:==============>               49%] [Cov:=================================> 97%][Progress:==============>               49%] [Cov:=================================> 97%][Progress:==============>               49%] [Cov:=================================> 97%][Progress:==============>               49%] [Cov:=================================> 97%][Progress:==============>               49%] [Cov:=================================> 97%][Progress:==============>               49%] [Cov:=================================> 97%][Progress:==============>               49%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][MASTER] 21:38:55.328 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              50%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              51%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              52%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:===============>              53%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:================>             54%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           61%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           62%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:==================>           63%] [Cov:=================================> 97%][Progress:===================>          64%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        71%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        72%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:=====================>        73%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       74%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       75%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:======================>       76%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     82%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:========================>     83%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    84%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    85%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:=========================>    86%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   87%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   88%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:==========================>   89%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  91%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  92%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:===========================>  93%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 94%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 95%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:============================> 96%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>97%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>98%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:=============================>99%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%][Progress:==============================100%] [Cov:=================================> 97%]
* Search finished after 101s and 611 generations, 221934 statements, best individual has fitness: 2.0
* Generated before the refinement 20 tests with total length 103
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/EndState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.EndState
statement code is: EndState singleton = EndState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("", (Event) null, (IState) null, arg3)
statement is: getInitialState()Luk/me/jockmacmad/jstate/state/IState; type is: class org.evosuite.testcase.statements.MethodStatement return type interface uk.me.jockmacmad.jstate.state.IState
statement code is: IState initialState = transition.getInitialState()
test data is: EndState singleton = EndState.getSingleton();
Transition transition = new Transition("", (Event) null, (IState) null, singleton);
transition.getInitialState();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        EndState singleton = EndState.getSingleton();
        Transition transition = new Transition("A", new Event("Test"), new State("Start"), singleton);
        transition.getInitialState();
    }
}
statement is: EndState singleton = EndState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: EndState.getSingleton() target is: EndState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/EndState;
statement is: Transition transition = new Transition("A", new Event("Test"), new State("Start"), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.getInitialState(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.getInitialState() target is: transition method is: getInitialState()
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 1, type uk.me.jockmacmad.jstate.state.Transitionindex is: 2
Matched Method is: getInitialState()Luk/me/jockmacmad/jstate/state/IState;
TestCase is: EndState singleton = EndState.getSingleton();
String string = "A";
Transition transition = new Transition(string, (Event) singleton, (IState) null, singleton);
((Transition) string).getInitialState();

statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, arg3, arg3)
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = transition.toString()
test data is: StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StartState singleton = StartState.getSingleton();
        Transition transition = new Transition("com.objectmentors.state.StartState", ((Event) (null)), singleton, singleton);
        // Add more descriptive test data here
        transition.toString();
    }
}
statement is: StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", ((Event) (null)), singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Add more descriptive test data here
transition.toString(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add more descriptive test data here
transition.toString() target is: transition method is: toString()
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 1, type uk.me.jockmacmad.jstate.state.Transitionindex is: 2
Matched Method is: toString()Ljava/lang/String;
TestCase is: StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, (Event) singleton, singleton, singleton);
string.toString();

statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<java.lang.Object>
statement code is: Vector<Object> vector = new Vector<Object>()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", arg1, "uk.me.jockmacmad.jstate.state.Transition")
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", arg1, arg3, arg3)
statement is: getTriggerEvent()Luk/me/jockmacmad/jstate/state/Event; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event triggerEvent = transition.getTriggerEvent()
test data is: Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.getTriggerEvent();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Vector<Object> vector = new Vector<Object>();
        vector.add(new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition"));
        StartState singleton = StartState.getSingleton();
        Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", vector.get(0), singleton, singleton);
        transition.getTriggerEvent();
    }
}
statement is: Vector<Object> vector = new Vector<Object>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: vector.add(new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add(new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition")) target is: vector method is: add(Event)
statement is: StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", vector.get(0), singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.getTriggerEvent(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.getTriggerEvent() target is: transition method is: getTriggerEvent()
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 3, type uk.me.jockmacmad.jstate.state.Transitionindex is: 3
Matched Method is: getTriggerEvent()Luk/me/jockmacmad/jstate/state/Event;
TestCase is: Vector<Object> vector = new Vector<Object>();
StartState singleton = StartState.getSingleton();
String string = "uk.me.jockmacmad.jstate.state.Transition";
Transition transition = new Transition(string, (Event) singleton, singleton, (IState) string);
transition.getTriggerEvent();

statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, arg3, arg3)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = transition.equals(arg0)
test data is: StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.equals(singleton);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StartState startState = StartState.getSingleton();
        Transition transition = new Transition("com.objectmentors.state.StartState", ((Event) (null)), startState, startState);
        transition.equals(startState);
    }
}
statement is: StartState startState = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", ((Event) (null)), startState, startState), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.equals(startState), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.equals(startState) target is: transition method is: equals(StartState)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 1, type uk.me.jockmacmad.jstate.state.Transitionindex is: 2
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, (Event) singleton, singleton, singleton);
string.equals(singleton);

statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<java.lang.Object>
statement code is: Vector<Object> vector = new Vector<Object>()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", arg1, "uk.me.jockmacmad.jstate.state.Transition")
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", arg1, arg3, arg3)
statement is: getOutcomeState()Luk/me/jockmacmad/jstate/state/IState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState outcomeState = (StartState)transition.getOutcomeState()
test data is: Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.getOutcomeState();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Vector<Object> vector = new Vector<>();
        vector.add(new Event("uk.me.jockmacmad.jstate.state.Transition", "event-1"));
        Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
        StartState singleton = StartState.getSingleton();
        Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
        transition.getOutcomeState();
    }
}
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: vector.add(new Event("uk.me.jockmacmad.jstate.state.Transition", "event-1")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add(new Event("uk.me.jockmacmad.jstate.state.Transition", "event-1")) target is: vector method is: add(Event)
statement is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.getOutcomeState(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.getOutcomeState() target is: transition method is: getOutcomeState()
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 3, type uk.me.jockmacmad.jstate.state.Transitionindex is: 6
Matched Method is: getOutcomeState()Luk/me/jockmacmad/jstate/state/IState;
TestCase is: Vector<Object> vector = new Vector<Object>();
String string = "uk.me.jockmacmad.jstate.state.Transition";
String string = "uk.me.jockmacmad.jstate.state.Transition";
Event event = new Event(string, vector, string);
StartState singleton = StartState.getSingleton();
String string = "uk.me.jockmacmad.jstate.state.Transition";
Transition transition = new Transition(string, event, singleton, singleton);
((Transition) event).getOutcomeState();

statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<java.lang.Object>
statement code is: Vector<Object> vector = new Vector<Object>()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", arg1, "uk.me.jockmacmad.jstate.state.Transition")
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", arg1, arg3, arg3)
statement is: evaluateGuardConditions()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: transition.evaluateGuardConditions()
test data is: Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.evaluateGuardConditions();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Vector<Object> vector = new Vector<>();
        vector.add("John Doe");
        vector.add(10);
        Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
        StartState startState = new StartState();
        Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, startState, startState);
        transition.evaluateGuardConditions();
    }
}
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: vector.add("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add("John Doe") target is: vector method is: add(java.lang.String)
statement is: vector.add(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add(10) target is: vector method is: add(int)
statement is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StartState startState = new StartState(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, startState, startState), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.evaluateGuardConditions(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.evaluateGuardConditions() target is: transition method is: evaluateGuardConditions()
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 3, type uk.me.jockmacmad.jstate.state.Transitionindex is: 5
Matched Method is: evaluateGuardConditions()V
TestCase is: Vector<Object> vector = new Vector<Object>();
String string = "uk.me.jockmacmad.jstate.state.Transition";
String string = "uk.me.jockmacmad.jstate.state.Transition";
Event event = new Event(string, vector, string);
String string = "uk.me.jockmacmad.jstate.state.Transition";
Transition transition = new Transition(string, event, (IState) string, (IState) string);
((Transition) event).evaluateGuardConditions();

statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("com.objectmentors.state.StartState", (Vector) null, arg2)
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("com.objectmentors.state.StartState", arg1, arg3, arg3)
statement is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState trigger = (StartState)transition.trigger(arg0, arg1)
test data is: StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
transition.trigger(singleton, event);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        transition.trigger(singleton, event);
    }
}
statement is: StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 4
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
TestCase is: StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
((Transition) event).trigger(singleton, event);

statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("com.objectmentors.state.StartState", (Vector) null, arg2)
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("com.objectmentors.state.StartState", arg1, arg3, arg3)
statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<java.lang.Object>
statement code is: Vector<Object> vector = new Vector<Object>()
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("com.objectmentors.state.StartState", arg1, arg2)
statement is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState trigger = (StartState)transition.trigger(arg0, arg1)
test data is: StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
Event event = new Event("com.objectmentors.state.StartState", vector, object);
transition.trigger(singleton, event);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the code snippet above
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event1 = new Event("com.objectmentors.state.StartState", vector, object);
        transition.trigger(singleton, event1);
        // Improved test data for the code snippet above
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event1 = new Event("com.objectmentors.state.StartState", vector, object);
        transition.trigger(singleton, event1);
        // Improved test data for the code snippet above
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event1 = new Event("com.objectmentors.state.StartState", vector, object);
        transition.trigger(singleton, event1);
        // Improved test data for the code snippet above
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event1 = new Event("com.objectmentors.state.StartState", vector, object);
        transition.trigger(singleton, event1);
        // Improved test data for the code snippet above
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event1 = new Event("com.objectmentors.state.StartState", vector, object);
        transition.trigger(singleton, event1);
        // Improved test data for the code snippet above
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event1 = new Event("com.objectmentors.state.StartState", vector, object);
        transition.trigger(singleton, event1);
        // Improved test data for the code snippet above
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event1 = new Event("com.objectmentors.state.StartState", vector, object);
        transition.trigger(singleton, event1);
        // Improved test data for the code snippet above
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event1 = new Event("com.objectmentors.state.StartState", vector, object);
        transition.trigger(singleton, event1);
        // Improved test data for the code snippet above
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event1 = new Event("com.objectmentors.state.StartState", vector, object);
        transition.trigger(singleton, event1);
        // Improved test data for the code snippet above
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event1 = new Event("com.objectmentors.state.StartState", vector, object);
        transition.trigger(singleton, event1);
    }
}
statement is: // Improved test data for the code snippet above
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event1 = new Event("com.objectmentors.state.StartState", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event1) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 4
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
statement is: // Improved test data for the code snippet above
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event1 = new Event("com.objectmentors.state.StartState", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event1) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 14
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
statement is: // Improved test data for the code snippet above
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event1 = new Event("com.objectmentors.state.StartState", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event1) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 24
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
statement is: // Improved test data for the code snippet above
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event1 = new Event("com.objectmentors.state.StartState", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event1) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 34
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
statement is: // Improved test data for the code snippet above
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event1 = new Event("com.objectmentors.state.StartState", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event1) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 44
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
statement is: // Improved test data for the code snippet above
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event1 = new Event("com.objectmentors.state.StartState", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event1) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 54
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
statement is: // Improved test data for the code snippet above
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event1 = new Event("com.objectmentors.state.StartState", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event1) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 64
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
statement is: // Improved test data for the code snippet above
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event1 = new Event("com.objectmentors.state.StartState", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event1) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 74
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
statement is: // Improved test data for the code snippet above
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event1 = new Event("com.objectmentors.state.StartState", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event1) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 84
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
statement is: // Improved test data for the code snippet above
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event1 = new Event("com.objectmentors.state.StartState", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(singleton, event1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event1) target is: transition method is: trigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 94
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
TestCase is: StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);

statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<uk.me.jockmacmad.jstate.state.IntegerGreaterThanGuardCondition>
statement code is: Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>()
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("", arg1, arg2)
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/EndState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.EndState
statement code is: EndState singleton = EndState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", arg1, arg3, arg3)
statement is: uk.me.jockmacmad.jstate.state.IntegerGreaterThanGuardCondition(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.IntegerGreaterThanGuardCondition
statement code is: IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0)
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = vector.add(arg0)
statement is: addGuardCondition(Luk/me/jockmacmad/jstate/state/IGuardCondition;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: transition.addGuardCondition((IGuardCondition) arg0)
statement is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.EndState
statement code is: EndState trigger = (EndState)transition.trigger(arg0, arg1)
test data is: Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
vector.add(integerGreaterThanGuardCondition);
transition.addGuardCondition((IGuardCondition) integerGreaterThanGuardCondition);
transition.trigger(singleton, event);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
        Object object = new Object();
        Event event = new Event("", vector, object);
        EndState singleton = EndState.getSingleton();
        Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
        IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(10);
        vector.add(integerGreaterThanGuardCondition);
        transition.addGuardCondition(((IGuardCondition) (integerGreaterThanGuardCondition)));
        transition.trigger(singleton, event);
    }
}
statement is: Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event = new Event("", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: EndState singleton = EndState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: EndState.getSingleton() target is: EndState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/EndState;
statement is: Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: vector.add(integerGreaterThanGuardCondition), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add(integerGreaterThanGuardCondition) target is: vector method is: add(IntegerGreaterThanGuardCondition)
source statement: java.util.Vector()V callee: VariableReference: Statement 0, type java.util.Vector<uk.me.jockmacmad.jstate.state.IntegerGreaterThanGuardCondition>index is: 0
Matched Method is: add(Ljava/lang/Object;)Z
statement is: transition.addGuardCondition(((IGuardCondition) (integerGreaterThanGuardCondition))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.addGuardCondition(((IGuardCondition) (integerGreaterThanGuardCondition))) target is: transition method is: addGuardCondition(IGuardCondition)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 4, type uk.me.jockmacmad.jstate.state.Transitionindex is: 6
Matched Method is: addGuardCondition(Luk/me/jockmacmad/jstate/state/IGuardCondition;)V
statement is: transition.trigger(singleton, event), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(singleton, event) target is: transition method is: trigger(EndState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 4, type uk.me.jockmacmad.jstate.state.Transitionindex is: 6
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
TestCase is: Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
String string = "";
Event event = new Event(string, vector, object);
EndState singleton = EndState.getSingleton();
String string = "Q7$iP7Sk?Q}J@h<OO";
Transition transition = new Transition(string, event, singleton, singleton);
int _int = 10;
IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(_int);
vector.add(integerGreaterThanGuardCondition);
((Transition) singleton).addGuardCondition((IGuardCondition) integerGreaterThanGuardCondition);
((Transition) singleton).trigger(singleton, event);

statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<java.lang.Object>
statement code is: Vector<Object> vector = new Vector<Object>()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", arg1, "uk.me.jockmacmad.jstate.state.Transition")
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", arg1, arg3, arg3)
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/EndState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.EndState
statement code is: EndState singleton = EndState.getSingleton()
statement is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean willTrigger = transition.willTrigger(arg0, arg1)
test data is: Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
EndState singleton = EndState.getSingleton();
transition.willTrigger(singleton, event);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Vector<Object> vector = new Vector<>();
        vector.add("event1");
        vector.add(new Integer(5));
        Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
        StartState singleton = StartState.getSingleton();
        Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
        EndState singleton = EndState.getSingleton();
        transition.willTrigger(singleton, event);
    }
}
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: vector.add("event1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add("event1") target is: vector method is: add(java.lang.String)
statement is: vector.add(new Integer(5)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add(new Integer(5)) target is: vector method is: add(java.lang.Integer)
statement is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: EndState singleton = EndState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: EndState.getSingleton() target is: EndState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: transition.willTrigger(singleton, event), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.willTrigger(singleton, event) target is: transition method is: willTrigger(EndState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 3, type uk.me.jockmacmad.jstate.state.Transitionindex is: 6
Matched Method is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z
TestCase is: Vector<Object> vector = new Vector<Object>();
String string = "uk.me.jockmacmad.jstate.state.Transition";
String string = "uk.me.jockmacmad.jstate.state.Transition";
Event event = new Event(string, vector, string);
StartState singleton = StartState.getSingleton();
String string = "uk.me.jockmacmad.jstate.state.Transition";
Transition transition = new Transition(string, event, singleton, singleton);
StartState singleton = StartState.getSingleton();
((Transition) event).willTrigger(singleton, event);

statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("com.objectmentors.state.StartState", (Vector) null, arg2)
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("com.objectmentors.state.StartState", arg1, arg3, arg3)
statement is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean willTrigger = transition.willTrigger(arg0, arg1)
test data is: StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
transition.willTrigger(singleton, event);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        transition.willTrigger(singleton, event);
        // Improved test data:
        // The previous test data uses the default values for the StartState and Event classes, which may not be representative of the situation being tested. Here's an improved version that includes more descriptive and representative test data:
        StartState singleton = new StartState("start");
        Event event = new Event("com.objectmentors.state.StartState", "event");
        Transition transition = new Transition("com.objectmentors.state.StartState", event, "transition");
        transition.willTrigger(singleton, event);
    }
}
statement is: StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.willTrigger(singleton, event), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.willTrigger(singleton, event) target is: transition method is: willTrigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 4
Matched Method is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z
statement is: // Improved test data:
// The previous test data uses the default values for the StartState and Event classes, which may not be representative of the situation being tested. Here's an improved version that includes more descriptive and representative test data:
StartState singleton = new StartState("start"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event = new Event("com.objectmentors.state.StartState", "event"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, "transition"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.willTrigger(singleton, event), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.willTrigger(singleton, event) target is: transition method is: willTrigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 4
Matched Method is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z
TestCase is: StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
((Transition) event).willTrigger(singleton, event);
((Transition) event).willTrigger(singleton, event);

statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<uk.me.jockmacmad.jstate.state.IntegerGreaterThanGuardCondition>
statement code is: Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>()
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("", arg1, arg2)
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/EndState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.EndState
statement code is: EndState singleton = EndState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", arg1, arg3, arg3)
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("v9]ONAmTsm", arg1, arg2)
statement is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean willTrigger = transition.willTrigger(arg0, arg1)
test data is: Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
Event event = new Event("v9]ONAmTsm", vector, object);
transition.willTrigger(singleton, event);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
        Object object = new Object();
        Event event = new Event("Adding 1 to a list", vector, object);
        EndState singleton = EndState.getSingleton();
        Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
        Event event = new Event("v9]ONAmTsm", vector, object);
        transition.willTrigger(singleton, event);
    }
}
statement is: Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event = new Event("Adding 1 to a list", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: EndState singleton = EndState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: EndState.getSingleton() target is: EndState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/EndState;
statement is: Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event = new Event("v9]ONAmTsm", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.willTrigger(singleton, event), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.willTrigger(singleton, event) target is: transition method is: willTrigger(EndState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 4, type uk.me.jockmacmad.jstate.state.Transitionindex is: 6
Matched Method is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z
TestCase is: Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
String string = "Adding 1 to a list";
Event event = new Event(string, vector, object);
EndState singleton = EndState.getSingleton();
String string = "Q7$iP7Sk?Q}J@h<OO";
Transition transition = new Transition(string, event, singleton, singleton);
String string = "v9]ONAmTsm";
Event event = new Event(string, vector, object);
((Transition) singleton).willTrigger(singleton, event);

statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("com.objectmentors.state.StartState", (Vector) null, arg2)
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("com.objectmentors.state.StartState", arg1, arg3, arg3)
statement is: uk.me.jockmacmad.jstate.state.StringMatchesGuardCondition(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.StringMatchesGuardCondition
statement code is: StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("com.objectmentors.state.StartState")
statement is: addGuardCondition(Luk/me/jockmacmad/jstate/state/IGuardCondition;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: transition.addGuardCondition((IGuardCondition) arg0)
statement is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean willTrigger = transition.willTrigger(arg0, arg1)
test data is: StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("com.objectmentors.state.StartState");
transition.addGuardCondition((IGuardCondition) stringMatchesGuardCondition);
transition.willTrigger(singleton, event);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("com.objectmentors.state.StartState");
        transition.addGuardCondition(((IGuardCondition) (stringMatchesGuardCondition)));
        transition.willTrigger(singleton, event);// This line is used to check if the transition will be triggered with the given input.

        // Original test data
        StartState singleton = StartState.getSingleton();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton);
        Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
        StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("com.objectmentors.state.StartState");
        transition.addGuardCondition(((IGuardCondition) (stringMatchesGuardCondition)));
        transition.willTrigger(singleton, event);// This line is used to check if the transition will be triggered with the given input. }}

    }
}
statement is: // Improved test data
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("com.objectmentors.state.StartState"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.addGuardCondition(((IGuardCondition) (stringMatchesGuardCondition))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.addGuardCondition(((IGuardCondition) (stringMatchesGuardCondition))) target is: transition method is: addGuardCondition(IGuardCondition)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 4
Matched Method is: addGuardCondition(Luk/me/jockmacmad/jstate/state/IGuardCondition;)V
statement is: transition.willTrigger(singleton, event)// This line is used to check if the transition will be triggered with the given input.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.willTrigger(singleton, event)// This line is used to check if the transition will be triggered with the given input.
 target is: transition method is: willTrigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 4
Matched Method is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z
statement is: // Original test data
StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("com.objectmentors.state.StartState"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.addGuardCondition(((IGuardCondition) (stringMatchesGuardCondition))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.addGuardCondition(((IGuardCondition) (stringMatchesGuardCondition))) target is: transition method is: addGuardCondition(IGuardCondition)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 13
Matched Method is: addGuardCondition(Luk/me/jockmacmad/jstate/state/IGuardCondition;)V
statement is: transition.willTrigger(singleton, event)// This line is used to check if the transition will be triggered with the given input. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.willTrigger(singleton, event)// This line is used to check if the transition will be triggered with the given input. }}
 target is: transition method is: willTrigger(StartState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 2, type uk.me.jockmacmad.jstate.state.Transitionindex is: 13
Matched Method is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z
TestCase is: StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
String string = "com.objectmentors.state.StartState";
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(string);
((Transition) event).addGuardCondition((IGuardCondition) stringMatchesGuardCondition);
((Transition) event).willTrigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
String string = "com.objectmentors.state.StartState";
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(string);
((Transition) event).addGuardCondition((IGuardCondition) stringMatchesGuardCondition);
((Transition) event).willTrigger(singleton, event);

statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<java.lang.Object>
statement code is: Vector<Object> vector = new Vector<Object>()
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("Vp!UtVS$", arg1, arg2)
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/EndState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.EndState
statement code is: EndState singleton = EndState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("Solaris", arg1, arg3, arg3)
statement is: uk.me.jockmacmad.jstate.state.StringMatchesGuardCondition(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.StringMatchesGuardCondition
statement code is: StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("Vp!UtVS$")
statement is: add(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean add = vector.add((Object) "Vp!UtVS$")
statement is: addGuardCondition(Luk/me/jockmacmad/jstate/predicate/IPredicate;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: transition.addGuardCondition((IPredicate) arg0)
statement is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean willTrigger = transition.willTrigger(arg0, arg1)
test data is: Vector<Object> vector = new Vector<Object>();
Object object = new Object();
Event event = new Event("Vp!UtVS$", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Solaris", event, singleton, singleton);
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("Vp!UtVS$");
vector.add((Object) "Vp!UtVS$");
transition.addGuardCondition((IPredicate) stringMatchesGuardCondition);
transition.willTrigger(singleton, event);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Vector<Object> vector = new Vector<>();
        Object object = new Object();
        Event event = new Event("Vp!UtVS$", vector, object);
        EndState singleton = EndState.getSingleton();
        Transition transition = new Transition("Solaris", event, singleton, singleton);
        StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("Vp!UtVS$");
        vector.add(((Object) ("V\u007fp\u007f!UtVS$")));
        transition.addGuardCondition(((IPredicate) (stringMatchesGuardCondition)));
        transition.willTrigger(singleton, event);
    }
}
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event = new Event("Vp!UtVS$", vector, object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: EndState singleton = EndState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: EndState.getSingleton() target is: EndState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/EndState;
statement is: Transition transition = new Transition("Solaris", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("Vp!UtVS$"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: vector.add(((Object) ("V\u007fp\u007f!UtVS$"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add(((Object) ("V\u007fp\u007f!UtVS$"))) target is: vector method is: add(java.lang.Object)
source statement: java.util.Vector()V callee: VariableReference: Statement 0, type java.util.Vector<java.lang.Object>index is: 0
Matched Method is: add(Ljava/lang/Object;)Z
statement is: transition.addGuardCondition(((IPredicate) (stringMatchesGuardCondition))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.addGuardCondition(((IPredicate) (stringMatchesGuardCondition))) target is: transition method is: addGuardCondition(IPredicate)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 4, type uk.me.jockmacmad.jstate.state.Transitionindex is: 6
Matched Method is: addGuardCondition(Luk/me/jockmacmad/jstate/predicate/IPredicate;)V
statement is: transition.willTrigger(singleton, event), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.willTrigger(singleton, event) target is: transition method is: willTrigger(EndState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 4, type uk.me.jockmacmad.jstate.state.Transitionindex is: 6
Matched Method is: willTrigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Z
TestCase is: Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "Vp!UtVS$";
Event event = new Event(string, vector, object);
EndState singleton = EndState.getSingleton();
String string = "Solaris";
Transition transition = new Transition(string, event, singleton, singleton);
String string = "Vp!UtVS$";
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(string);
String string = "Vp!UtVS$";
vector.add((Object) string);
((Transition) singleton).addGuardCondition((IPredicate) stringMatchesGuardCondition);
((Transition) singleton).willTrigger(singleton, event);

statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<java.lang.Object>
statement code is: Vector<Object> vector = new Vector<Object>()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", arg1, "uk.me.jockmacmad.jstate.state.Transition")
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", arg1, arg3, arg3)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = transition.hashCode()
test data is: Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Vector<Object> vector = new Vector<>();
        vector.add(new Integer(5));// Improved test data: Added a more descriptive and representative integer value

        Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
        StartState singleton = StartState.getSingleton();
        Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
        transition.hashCode();
    }
}
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: vector.add(new Integer(5))// Improved test data: Added a more descriptive and representative integer value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add(new Integer(5))// Improved test data: Added a more descriptive and representative integer value
 target is: vector method is: add(java.lang.Integer)
statement is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.hashCode() target is: transition method is: hashCode()
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 3, type uk.me.jockmacmad.jstate.state.Transitionindex is: 6
Matched Method is: hashCode()I
TestCase is: Vector<Object> vector = new Vector<Object>();
String string = "uk.me.jockmacmad.jstate.state.Transition";
String string = "uk.me.jockmacmad.jstate.state.Transition";
Event event = new Event(string, vector, string);
StartState singleton = StartState.getSingleton();
String string = "uk.me.jockmacmad.jstate.state.Transition";
Transition transition = new Transition(string, event, singleton, singleton);
event.hashCode();

statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("com.objectmentors.state.StartState", (Vector) null, arg2)
statement is: uk.me.jockmacmad.jstate.state.EndState()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.EndState
statement code is: EndState endState = new EndState()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("com.objectmentors.state.StartState", arg1, arg2, arg3)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: StartState singleton = StartState.getSingleton();
Object object = new Object();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, object);
EndState endState = new EndState();
Transition transition = new Transition("com.objectmentors.state.StartState", event, endState, singleton);
transition.equals(transition);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StartState singleton = StartState.getSingleton();
        Object object = new Object();
        Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), object);
        EndState endState = new EndState();
        Transition transition = new Transition("com.objectmentors.state.StartState", event, endState, singleton);
        transition.equals(transition);
    }
}
statement is: StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event = new Event("com.objectmentors.state.StartState", ((Vector) (null)), object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: EndState endState = new EndState(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", event, endState, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.equals(transition), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.equals(transition) target is: transition method is: equals(Transition)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 4, type uk.me.jockmacmad.jstate.state.Transitionindex is: 6
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: StartState singleton = StartState.getSingleton();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) object, object);
EndState endState = new EndState();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, endState, singleton);
endState.equals(transition);

statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, arg3, arg3)
statement is: getInitialState()Luk/me/jockmacmad/jstate/state/IState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState initialState = (StartState)transition.getInitialState()
test data is: StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.getInitialState();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        StartState singleton = StartState.getSingleton();
        Transition transition = new Transition("com.objectmentors.state.StartState", ((Event) (null)), singleton, singleton);
        transition.getInitialState();
    }
}
statement is: StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Transition transition = new Transition("com.objectmentors.state.StartState", ((Event) (null)), singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.getInitialState(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.getInitialState() target is: transition method is: getInitialState()
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 1, type uk.me.jockmacmad.jstate.state.Transitionindex is: 2
Matched Method is: getInitialState()Luk/me/jockmacmad/jstate/state/IState;
TestCase is: StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, (Event) singleton, singleton, singleton);
((Transition) string).getInitialState();

statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<java.lang.Object>
statement code is: Vector<Object> vector = new Vector<Object>()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", arg1, "uk.me.jockmacmad.jstate.state.Transition")
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("8?Q0$IzjHlzj", arg1, arg2, (IState) null)
statement is: getOutcomeState()Luk/me/jockmacmad/jstate/state/IState; type is: class org.evosuite.testcase.statements.MethodStatement return type interface uk.me.jockmacmad.jstate.state.IState
statement code is: IState outcomeState = transition.getOutcomeState()
test data is: Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("8?Q0$IzjHlzj", event, singleton, (IState) null);
transition.getOutcomeState();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        vector.add(new Object());
        event.setName("uk.me.jockmacmad.jstate.state.Transition");
        event.setSource("uk.me.jockmacmad.jstate.state.Transition");
        singleton.setId("uk.me.jockmacmad.jstate.state.StartState");
        transition.setName("8?Q0$IzjHlzj");
        transition.setEvent(event);
        transition.setSource(singleton);
    }
}
statement is: vector.add(new Object()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: vector.add(new Object()) target is: vector method is: add(java.lang.Object)
statement is: event.setName("uk.me.jockmacmad.jstate.state.Transition"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: event.setName("uk.me.jockmacmad.jstate.state.Transition") target is: event method is: setName(java.lang.String)
statement is: event.setSource("uk.me.jockmacmad.jstate.state.Transition"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: event.setSource("uk.me.jockmacmad.jstate.state.Transition") target is: event method is: setSource(java.lang.String)
statement is: singleton.setId("uk.me.jockmacmad.jstate.state.StartState"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: singleton.setId("uk.me.jockmacmad.jstate.state.StartState") target is: singleton method is: setId(java.lang.String)
statement is: transition.setName("8?Q0$IzjHlzj"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.setName("8?Q0$IzjHlzj") target is: transition method is: setName(java.lang.String)
statement is: transition.setEvent(event), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.setEvent(event) target is: transition method is: setEvent()
statement is: transition.setSource(singleton), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.setSource(singleton) target is: transition method is: setSource()
statement is: uk.me.jockmacmad.jstate.state.EndState()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.EndState
statement code is: EndState endState = new EndState()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("$F5", (Event) null, arg3, arg3)
statement is: getTriggerEvent()Luk/me/jockmacmad/jstate/state/Event; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event triggerEvent = transition.getTriggerEvent()
test data is: EndState endState = new EndState();
Transition transition = new Transition("$F5", (Event) null, endState, endState);
transition.getTriggerEvent();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        EndState endState = new EndState();
        Transition transition = new Transition("$F5", ((Event) (null)), endState, endState);
        transition.getTriggerEvent();
    }
}
statement is: EndState endState = new EndState(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Transition transition = new Transition("$F5", ((Event) (null)), endState, endState), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.getTriggerEvent(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.getTriggerEvent() target is: transition method is: getTriggerEvent()
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 1, type uk.me.jockmacmad.jstate.state.Transitionindex is: 2
Matched Method is: getTriggerEvent()Luk/me/jockmacmad/jstate/state/Event;
TestCase is: EndState endState = new EndState();
String string = "$F5";
Transition transition = new Transition(string, (Event) endState, endState, endState);
((Transition) string).getTriggerEvent();

statement is: java.util.Vector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.Vector<java.lang.Object>
statement code is: Vector<Object> vector = new Vector<Object>()
statement is: uk.me.jockmacmad.jstate.state.Event(Ljava/lang/String;Ljava/util/Vector;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Event
statement code is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", arg1, "uk.me.jockmacmad.jstate.state.Transition")
statement is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState; type is: class org.evosuite.testcase.statements.MethodStatement return type class uk.me.jockmacmad.jstate.state.StartState
statement code is: StartState singleton = StartState.getSingleton()
statement is: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class uk.me.jockmacmad.jstate.state.Transition
statement code is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", arg1, arg3, arg3)
statement is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState; type is: class org.evosuite.testcase.statements.MethodStatement return type interface uk.me.jockmacmad.jstate.state.IState
statement code is: IState trigger = transition.trigger((IState) null, arg1)
test data is: Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.trigger((IState) null, event);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Vector<Object> vector = new Vector<>();
        Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
        StartState singleton = StartState.getSingleton();
        Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
        transition.trigger(((IState) (null)), event);
    }
}
statement is: Vector<Object> vector = new Vector<>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: StartState singleton = StartState.getSingleton(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: StartState.getSingleton() target is: StartState method is: getSingleton()
Matched Method is: getSingleton()Luk/me/jockmacmad/jstate/state/StartState;
statement is: Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: transition.trigger(((IState) (null)), event), class spoon.support.reflect.code.CtInvocationImpl
invocation is: transition.trigger(((IState) (null)), event) target is: transition method is: trigger(IState,Event)
source statement: uk.me.jockmacmad.jstate.state.Transition(Ljava/lang/String;Luk/me/jockmacmad/jstate/state/Event;Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/IState;)V callee: VariableReference: Statement 3, type uk.me.jockmacmad.jstate.state.Transitionindex is: 6
Matched Method is: trigger(Luk/me/jockmacmad/jstate/state/IState;Luk/me/jockmacmad/jstate/state/Event;)Luk/me/jockmacmad/jstate/state/IState;
i 1 Parameters size() 1 Num of Method Parameters: 2
TestCase is: Vector<Object> vector = new Vector<Object>();
String string = "uk.me.jockmacmad.jstate.state.Transition";
String string = "uk.me.jockmacmad.jstate.state.Transition";
Event event = new Event(string, vector, string);
StartState singleton = StartState.getSingleton();
String string = "uk.me.jockmacmad.jstate.state.Transition";
Transition transition = new Transition(string, event, singleton, singleton);
Event event = null;
((Transition) event).trigger((IState) event, event);

* test suite isTestSuite: 39
Test 0: 
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("", (Event) null, (IState) null, singleton);
transition.getInitialState();
Test 1: 
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.toString();
Test 2: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.getTriggerEvent();
Test 3: 
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.equals(singleton);
Test 4: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.getOutcomeState();
Test 5: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.evaluateGuardConditions();
Test 6: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
transition.trigger(singleton, event);
Test 7: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
Event event = new Event("com.objectmentors.state.StartState", vector, object);
transition.trigger(singleton, event);
Test 8: 
Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
vector.add(integerGreaterThanGuardCondition);
transition.addGuardCondition((IGuardCondition) integerGreaterThanGuardCondition);
transition.trigger(singleton, event);
Test 9: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
EndState singleton = EndState.getSingleton();
transition.willTrigger(singleton, event);
Test 10: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
transition.willTrigger(singleton, event);
Test 11: 
Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
Event event = new Event("v9]ONAmTsm", vector, object);
transition.willTrigger(singleton, event);
Test 12: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("com.objectmentors.state.StartState");
transition.addGuardCondition((IGuardCondition) stringMatchesGuardCondition);
// Undeclared exception!
try { 
  transition.willTrigger(singleton, event);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("uk.me.jockmacmad.jstate.state.StringMatchesGuardCondition", e);
}

Test 13: 
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
Event event = new Event("Vp!UtVS$", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Solaris", event, singleton, singleton);
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("Vp!UtVS$");
vector.add((Object) "Vp!UtVS$");
transition.addGuardCondition((IPredicate) stringMatchesGuardCondition);
transition.willTrigger(singleton, event);
Test 14: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.hashCode();
Test 15: 
StartState singleton = StartState.getSingleton();
Object object = new Object();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, object);
EndState endState = new EndState();
Transition transition = new Transition("com.objectmentors.state.StartState", event, endState, singleton);
transition.equals(transition);
Test 16: 
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.getInitialState();
Test 17: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("8?Q0$IzjHlzj", event, singleton, (IState) null);
transition.getOutcomeState();
Test 18: 
EndState endState = new EndState();
Transition transition = new Transition("$F5", (Event) null, endState, endState);
transition.getTriggerEvent();
Test 19: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.trigger((IState) null, event);
Test 20: 
EndState singleton = EndState.getSingleton();
String string = "A";
Transition transition = new Transition("A", (Event) singleton, (IState) null, singleton);
((Transition) string).getInitialState();

Test 21: 
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) singleton, singleton, singleton);
string.toString();

Test 22: 
Vector<Object> vector = new Vector<Object>();
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", (Event) singleton, singleton, (IState) "uk.me.jockmacmad.jstate.state.Transition");
transition.getTriggerEvent();

Test 23: 
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) singleton, singleton, singleton);
string.equals(singleton);

Test 24: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
((Transition) event).getOutcomeState();

Test 25: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, (IState) "uk.me.jockmacmad.jstate.state.Transition", (IState) "uk.me.jockmacmad.jstate.state.Transition");
((Transition) event).evaluateGuardConditions();

Test 26: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
((Transition) event).trigger(singleton, event);

Test 27: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);

Test 28: 
Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(10);
vector.add(integerGreaterThanGuardCondition);
((Transition) singleton).addGuardCondition((IGuardCondition) integerGreaterThanGuardCondition);
((Transition) singleton).trigger(singleton, event);

Test 29: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
StartState singleton = StartState.getSingleton();
((Transition) event).willTrigger(singleton, event);

Test 30: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
((Transition) event).willTrigger(singleton, event);
((Transition) event).willTrigger(singleton, event);

Test 31: 
Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("Adding 1 to a list", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
Event event = new Event("v9]ONAmTsm", vector, object);
((Transition) singleton).willTrigger(singleton, event);

Test 32: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
String string = "com.objectmentors.state.StartState";
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(string);
((Transition) event).addGuardCondition((IGuardCondition) stringMatchesGuardCondition);
((Transition) event).willTrigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
String string = "com.objectmentors.state.StartState";
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(string);
((Transition) event).addGuardCondition((IGuardCondition) stringMatchesGuardCondition);
((Transition) event).willTrigger(singleton, event);

Test 33: 
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
Event event = new Event("Vp!UtVS$", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Solaris", event, singleton, singleton);
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("Vp!UtVS$");
vector.add((Object) "Vp!UtVS$");
((Transition) singleton).addGuardCondition((IPredicate) stringMatchesGuardCondition);
((Transition) singleton).willTrigger(singleton, event);

Test 34: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
event.hashCode();

Test 35: 
StartState singleton = StartState.getSingleton();
Object object = new Object();
Event event = new Event("com.objectmentors.state.StartState", (Vector) object, object);
EndState endState = new EndState();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, endState, singleton);
endState.equals(transition);

Test 36: 
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) singleton, singleton, singleton);
((Transition) string).getInitialState();

Test 37: 
EndState endState = new EndState();
String string = "$F5";
Transition transition = new Transition("$F5", (Event) endState, endState, endState);
((Transition) string).getTriggerEvent();

Test 38: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
((Transition) event).trigger((IState) event, (Event) null);


* Generated after the refinement and before minimization 39 tests with total length 311
* test suite isTestSuite: 39
Test 0: 
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("", (Event) null, (IState) null, singleton);
transition.getInitialState();
Test 1: 
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.toString();
Test 2: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.getTriggerEvent();
Test 3: 
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.equals(singleton);
Test 4: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.getOutcomeState();
Test 5: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.evaluateGuardConditions();
Test 6: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
transition.trigger(singleton, event);
Test 7: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
Event event = new Event("com.objectmentors.state.StartState", vector, object);
transition.trigger(singleton, event);
Test 8: 
Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
vector.add(integerGreaterThanGuardCondition);
transition.addGuardCondition((IGuardCondition) integerGreaterThanGuardCondition);
transition.trigger(singleton, event);
Test 9: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
EndState singleton = EndState.getSingleton();
transition.willTrigger(singleton, event);
Test 10: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
transition.willTrigger(singleton, event);
Test 11: 
Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
Event event = new Event("v9]ONAmTsm", vector, object);
transition.willTrigger(singleton, event);
Test 12: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("com.objectmentors.state.StartState");
transition.addGuardCondition((IGuardCondition) stringMatchesGuardCondition);
// Undeclared exception!
try { 
  transition.willTrigger(singleton, event);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("uk.me.jockmacmad.jstate.state.StringMatchesGuardCondition", e);
}

Test 13: 
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
Event event = new Event("Vp!UtVS$", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Solaris", event, singleton, singleton);
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("Vp!UtVS$");
vector.add((Object) "Vp!UtVS$");
transition.addGuardCondition((IPredicate) stringMatchesGuardCondition);
transition.willTrigger(singleton, event);
Test 14: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.hashCode();
Test 15: 
StartState singleton = StartState.getSingleton();
Object object = new Object();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, object);
EndState endState = new EndState();
Transition transition = new Transition("com.objectmentors.state.StartState", event, endState, singleton);
transition.equals(transition);
Test 16: 
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.getInitialState();
Test 17: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("8?Q0$IzjHlzj", event, singleton, (IState) null);
transition.getOutcomeState();
Test 18: 
EndState endState = new EndState();
Transition transition = new Transition("$F5", (Event) null, endState, endState);
transition.getTriggerEvent();
Test 19: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.trigger((IState) null, event);
Test 20: 
EndState singleton = EndState.getSingleton();
String string = "A";
Transition transition = new Transition("A", (Event) singleton, (IState) null, singleton);
((Transition) string).getInitialState();

Test 21: 
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) singleton, singleton, singleton);
string.toString();

Test 22: 
Vector<Object> vector = new Vector<Object>();
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", (Event) singleton, singleton, (IState) "uk.me.jockmacmad.jstate.state.Transition");
transition.getTriggerEvent();

Test 23: 
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) singleton, singleton, singleton);
string.equals(singleton);

Test 24: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
((Transition) event).getOutcomeState();

Test 25: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, (IState) "uk.me.jockmacmad.jstate.state.Transition", (IState) "uk.me.jockmacmad.jstate.state.Transition");
((Transition) event).evaluateGuardConditions();

Test 26: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
((Transition) event).trigger(singleton, event);

Test 27: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, object);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, vector, object);
((Transition) event).trigger(singleton, event);

Test 28: 
Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(10);
vector.add(integerGreaterThanGuardCondition);
((Transition) singleton).addGuardCondition((IGuardCondition) integerGreaterThanGuardCondition);
((Transition) singleton).trigger(singleton, event);

Test 29: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
StartState singleton = StartState.getSingleton();
((Transition) event).willTrigger(singleton, event);

Test 30: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
((Transition) event).willTrigger(singleton, event);
((Transition) event).willTrigger(singleton, event);

Test 31: 
Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("Adding 1 to a list", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
Event event = new Event("v9]ONAmTsm", vector, object);
((Transition) singleton).willTrigger(singleton, event);

Test 32: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
String string = "com.objectmentors.state.StartState";
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(string);
((Transition) event).addGuardCondition((IGuardCondition) stringMatchesGuardCondition);
((Transition) event).willTrigger(singleton, event);
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Event event = new Event(string, (Vector) singleton, singleton);
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, singleton, singleton);
String string = "com.objectmentors.state.StartState";
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition(string);
((Transition) event).addGuardCondition((IGuardCondition) stringMatchesGuardCondition);
((Transition) event).willTrigger(singleton, event);

Test 33: 
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
Event event = new Event("Vp!UtVS$", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Solaris", event, singleton, singleton);
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("Vp!UtVS$");
vector.add((Object) "Vp!UtVS$");
((Transition) singleton).addGuardCondition((IPredicate) stringMatchesGuardCondition);
((Transition) singleton).willTrigger(singleton, event);

Test 34: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
event.hashCode();

Test 35: 
StartState singleton = StartState.getSingleton();
Object object = new Object();
Event event = new Event("com.objectmentors.state.StartState", (Vector) object, object);
EndState endState = new EndState();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition(string, event, endState, singleton);
endState.equals(transition);

Test 36: 
StartState singleton = StartState.getSingleton();
String string = "com.objectmentors.state.StartState";
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) singleton, singleton, singleton);
((Transition) string).getInitialState();

Test 37: 
EndState endState = new EndState();
String string = "$F5";
Transition transition = new Transition("$F5", (Event) endState, endState, endState);
((Transition) string).getTriggerEvent();

Test 38: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
((Transition) event).trigger((IState) event, (Event) null);


* Minimizing test suite
* test suite isTestSuite: 19
Test 0: 
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("", (Event) null, (IState) null, singleton);
transition.getInitialState();
Test 1: 
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.toString();
Test 2: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.getTriggerEvent();
Test 3: 
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.equals(singleton);
Test 4: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.getOutcomeState();
Test 5: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.evaluateGuardConditions();
Test 6: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.trigger((IState) null, event);
Test 7: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
transition.trigger(singleton, event);
Test 8: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
Event event = new Event("com.objectmentors.state.StartState", vector, object);
transition.trigger(singleton, event);
Test 9: 
Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
IntegerGreaterThanGuardCondition integerGreaterThanGuardCondition = new IntegerGreaterThanGuardCondition(0);
vector.add(integerGreaterThanGuardCondition);
transition.addGuardCondition((IGuardCondition) integerGreaterThanGuardCondition);
transition.trigger(singleton, event);
Test 10: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
EndState singleton = EndState.getSingleton();
transition.willTrigger(singleton, event);
Test 11: 
StartState singleton = StartState.getSingleton();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, singleton);
Transition transition = new Transition("com.objectmentors.state.StartState", event, singleton, singleton);
transition.willTrigger(singleton, event);
Test 12: 
Vector<IntegerGreaterThanGuardCondition> vector = new Vector<IntegerGreaterThanGuardCondition>();
Object object = new Object();
Event event = new Event("", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Q7$iP7Sk?Q}J@h<OO", event, singleton, singleton);
Event event = new Event("v9]ONAmTsm", vector, object);
transition.willTrigger(singleton, event);
Test 13: 
Vector<Object> vector = new Vector<Object>();
Object object = new Object();
Event event = new Event("Vp!UtVS$", vector, object);
EndState singleton = EndState.getSingleton();
Transition transition = new Transition("Solaris", event, singleton, singleton);
StringMatchesGuardCondition stringMatchesGuardCondition = new StringMatchesGuardCondition("Vp!UtVS$");
vector.add((Object) "Vp!UtVS$");
transition.addGuardCondition((IPredicate) stringMatchesGuardCondition);
transition.willTrigger(singleton, event);
Test 14: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("uk.me.jockmacmad.jstate.state.Transition", event, singleton, singleton);
transition.hashCode();
Test 15: 
StartState singleton = StartState.getSingleton();
Object object = new Object();
Event event = new Event("com.objectmentors.state.StartState", (Vector) null, object);
EndState endState = new EndState();
Transition transition = new Transition("com.objectmentors.state.StartState", event, endState, singleton);
transition.equals(transition);
Test 16: 
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, singleton, singleton);
transition.getInitialState();
Test 17: 
Vector<Object> vector = new Vector<Object>();
Event event = new Event("uk.me.jockmacmad.jstate.state.Transition", vector, "uk.me.jockmacmad.jstate.state.Transition");
StartState singleton = StartState.getSingleton();
Transition transition = new Transition("8?Q0$IzjHlzj", event, singleton, (IState) null);
transition.getOutcomeState();
Test 18: 
EndState endState = new EndState();
Transition transition = new Transition("$F5", (Event) null, endState, endState);
transition.getTriggerEvent();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 36
* Number of covered goals: 36
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 87%
* Total number of goals: 15
* Number of covered goals: 13
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Generated 19 tests with total length 97
* Resulting test suite's coverage: 97% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 44%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: EndState arg3 = EndState.getSingleton();
Transition transition = new Transition("", (Event) null, (IState) null, arg3);
IState initialState = transition.getInitialState();
assertNull(initialState);


** It was a parseable test case! 
refined test name is: testGetInitialStateWithEmptyNameAndNullArguments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StartState arg3 = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, arg3, arg3);
String string = transition.toString();
assertNotNull(string);


** It was a parseable test case! 
refined test name is: testTransitionToStringReturnsNonEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StartState arg0 = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, arg0, arg0);
boolean equals = transition.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithStartStateAsArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StartState arg0 = StartState.getSingleton();
Event arg1 = new Event("com.objectmentors.state.StartState", (Vector) null, arg0);
Transition transition = new Transition("com.objectmentors.state.StartState", arg1, arg0, arg0);
IState trigger = transition.trigger(arg0, arg1);
assertEquals("com.objectmentors.state.StartState", trigger.getName());


** It was a parseable test case! 
refined test name is: testTransitionFromStartStateToStartState
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StartState arg0 = StartState.getSingleton();
Event arg1 = new Event("com.objectmentors.state.StartState", (Vector) null, arg0);
Transition transition = new Transition("com.objectmentors.state.StartState", arg1, arg0, arg0);
boolean willTrigger = transition.willTrigger(arg0, arg1);
assertFalse(willTrigger);


** It was a parseable test case! 
refined test name is: testWillNotTriggerOnNewEvent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: StartState arg3 = StartState.getSingleton();
Transition transition = new Transition("com.objectmentors.state.StartState", (Event) null, arg3, arg3);
IState initialState = transition.getInitialState();
assertSame(arg3, initialState);


** It was a parseable test case! 
refined test name is: testGetInitialStateForTransitionWithStartState
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: EndState arg3 = new EndState();
Transition transition = new Transition("$F5", (Event) null, arg3, arg3);
Event triggerEvent = transition.getTriggerEvent();
assertNull(triggerEvent);


** It was a parseable test case! 
refined test name is: testGetTriggerEventWithNullTriggerEvent
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 21:41:47.653 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar642736307997984510.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 21:41:47.681 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar642736307997984510.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 21:41:47.775 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar642736307997984510.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 21:41:47.777 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar642736307997984510.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 21:41:47.868 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar642736307997984510.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 21:41:47.870 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar642736307997984510.jar
[MASTER] 21:41:47.962 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar642736307997984510.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 21:41:47.964 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar642736307997984510.jar
[MASTER] 21:41:48.050 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar642736307997984510.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 21:41:48.052 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar642736307997984510.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 21:41:48.144 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar642736307997984510.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 21:41:48.146 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar642736307997984510.jar
[MASTER] 21:41:48.233 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar642736307997984510.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 21:41:48.235 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar642736307997984510.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 21:41:48.407 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar642736307997984510.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 21:41:48.409 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar642736307997984510.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 21:41:48.595 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar642736307997984510.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
* Writing tests to file
* Writing JUnit test case 'Transition_ESTest' to evosuite-tests
[MASTER] 21:41:48.598 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar642736307997984510.jar
* Done!

* Computation finished
