/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Mar 15 01:20:59 GMT 2024
 */

package src;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import src.Purchase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Purchase_ESTest extends Purchase_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVassalThrowsNoClassDefFoundError() throws Throwable  {
      // Given a mocked iterator that returns "5" for the next method
      Iterator<String> mockIterator = mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn("5", "5").when(mockIterator).next();
      
      // When calling the vassal method with the mocked iterator
      Purchase purchase = new Purchase();
      try {
      purchase.vassal(mockIterator);
      fail("Expecting exception: NoClassDefFoundError");
      
      } catch (NoClassDefFoundError e) {
      // Verify that the expected exception is thrown
      verifyException("src.Purchase", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMercenaryThrowsNoClassDefFoundError() throws Throwable  {
      // Given: A mocked iterator that returns a null value for next()
      Iterator<String> arg0 = mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn("5", (Object) null).when(arg0).next();
      
      // When: Calling the mercenary method with the mocked iterator as an argument
      Purchase purchase = new Purchase();
      try {
      purchase.mercenary(arg0);
      fail("Expecting exception: NoClassDefFoundError");
      } catch (NoClassDefFoundError e) {
      // Then: The method should throw a NoClassDefFoundError
      verifyException("src.Purchase", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCastlePersonalThrowsNoClassDefFoundError() throws Throwable  {
      // Given a purchase object and an iterator of strings
      Purchase purchase = new Purchase();
      Iterator<String> arg0 = mock(Iterator.class, new ViolatedAssumptionAnswer());
      
      // When the castlePersonal method is called with the iterator as an argument
      doReturn("9", (Object) null).when(arg0).next();
      try {
      purchase.castlePersonal(arg0);
      fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
      // Then the method should throw a NoClassDefFoundError
      verifyException("src.Purchase", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCastleFiefdomThrowsNoClassDefFoundError() throws Throwable  {
      // Given: A mocked iterator that returns "5" as the next element.
      Iterator<String> arg0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn("5", "5").when(arg0).next();
      
      // When: The method castleFiefdom is called with the iterator.
      Purchase purchase = new Purchase();
      try {
      // Undeclared exception!
      purchase.castleFiefdom(arg0);
      fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
      //
      // Could not initialize class src.Map
      //
      verifyException("src.Purchase", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPerform() throws Throwable  {
      // Given: A new Purchase object is created and an empty list of objects is passed to its perform() method
      Purchase purchase = new Purchase();
      ArrayList<Object> arg0 = new ArrayList<>();
      purchase.perform(arg0);
      
      // When: The perform() method is called with the empty list as an argument
      
      // Then: The size of the list should be 0, which means that no objects were added to it
      assertEquals(0, arg0.size());
  }
}
