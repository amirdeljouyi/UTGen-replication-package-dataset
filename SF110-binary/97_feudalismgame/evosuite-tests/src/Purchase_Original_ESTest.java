/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Fri Mar 15 01:21:00 GMT 2024
 */

package src;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import src.Purchase;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Purchase_Original_ESTest extends Purchase_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testVassalThrowsNoClassDefFoundError() throws Throwable  {
      Iterator<String> arg0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn("5", "5").when(arg0).next();
      Purchase purchase = new Purchase();
      // Undeclared exception!
      try { 
        purchase.vassal(arg0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class src.Map
         //
         verifyException("src.Purchase", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMercenaryThrowsNoClassDefFoundError() throws Throwable  {
      Iterator<String> arg0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn("5", (Object) null).when(arg0).next();
      Purchase purchase = new Purchase();
      // Undeclared exception!
      try { 
        purchase.mercenary(arg0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class src.CurrentPlayers
         //
         verifyException("src.Purchase", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCastlePersonalThrowsNoClassDefFoundError() throws Throwable  {
      Purchase purchase = new Purchase();
      Iterator<String> arg0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn("9", (Object) null).when(arg0).next();
      // Undeclared exception!
      try { 
        purchase.castlePersonal(arg0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class src.Map
         //
         verifyException("src.Purchase", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCastleFiefdomThrowsNoClassDefFoundError() throws Throwable  {
      Iterator<String> arg0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn("5", "5").when(arg0).next();
      Purchase purchase = new Purchase();
      // Undeclared exception!
      try { 
        purchase.castleFiefdom(arg0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class src.Map
         //
         verifyException("src.Purchase", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testPerform() throws Throwable  {
      Purchase purchase = new Purchase();
      ArrayList<Object> arg0 = new ArrayList<Object>();
      purchase.perform(arg0);
      assertEquals(0, arg0.size());
  }
}
