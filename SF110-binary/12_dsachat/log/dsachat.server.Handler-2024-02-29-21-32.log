* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: dsachat.server.Handler
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/12_dsachat/evosuite-files/evosuite.properties
* Connecting to master process on port 3016
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 21:32:43.493 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 21:32:43.494 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 21:32:43.495 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 21:32:43.500 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 21:32:43.502 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 21:32:43.502 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class dsachat.server.Handler
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 386
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1709242361352
* Starting evolution
* Initial Number of Goals in DynaMOSA = 79 / 386
[Progress:>                             0%] [Cov:=================>                 49%][Progress:>                             2%] [Cov:=================>                 49%][Progress:>                             3%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                53%][Progress:=>                            4%] [Cov:==================>                54%][Progress:=>                            5%] [Cov:==================>                54%][Progress:=>                            6%] [Cov:==================>                54%][Progress:=>                            6%] [Cov:==================>                54%][Progress:==>                           7%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          10%] [Cov:==================>                54%][Progress:===>                          11%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          12%] [Cov:==================>                54%][Progress:===>                          13%] [Cov:==================>                54%][Progress:====>                         14%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         15%] [Cov:==================>                54%][Progress:====>                         16%] [Cov:==================>                54%][Progress:=====>                        17%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        18%] [Cov:==================>                54%][Progress:=====>                        19%] [Cov:==================>                54%][Progress:======>                       20%] [Cov:==================>                54%][Progress:======>                       21%] [Cov:==================>                54%][Progress:======>                       22%] [Cov:==================>                54%][Progress:======>                       22%] [Cov:==================>                54%][Progress:======>                       23%] [Cov:==================>                54%][Progress:=======>                      24%] [Cov:===================>               56%][Progress:=======>                      25%] [Cov:===================>               56%][Progress:=======>                      26%] [Cov:===================>               56%][Progress:========>                     27%] [Cov:===================>               56%][Progress:========>                     28%] [Cov:===================>               56%][Progress:========>                     29%] [Cov:===================>               56%][Progress:=========>                    30%] [Cov:===================>               56%][Progress:=========>                    31%] [Cov:===================>               56%][Progress:=========>                    33%] [Cov:===================>               56%][Progress:==========>                   35%] [Cov:===================>               56%][Progress:===========>                  37%] [Cov:===================>               56%][Progress:===========>                  38%] [Cov:===================>               56%][Progress:===========>                  39%] [Cov:===================>               56%][Progress:============>                 40%] [Cov:===================>               56%][Progress:============>                 41%] [Cov:===================>               56%][Progress:============>                 42%] [Cov:===================>               56%][Progress:============>                 43%] [Cov:===================>               56%][Progress:=============>                44%] [Cov:===================>               56%][Progress:=============>                44%] [Cov:===================>               56%][Progress:=============>                45%] [Cov:===================>               56%][Progress:=============>                46%] [Cov:===================>               56%][Progress:==============>               47%] [Cov:===================>               56%][Progress:==============>               48%] [Cov:===================>               56%][Progress:==============>               49%] [Cov:===================>               56%][Progress:===============>              50%] [Cov:===================>               56%][Progress:===============>              51%] [Cov:===================>               56%][Progress:===============>              52%] [Cov:===================>               56%][Progress:===============>              53%] [Cov:===================>               56%][Progress:================>             54%] [Cov:===================>               56%][Progress:================>             55%] [Cov:===================>               56%][Progress:================>             56%] [Cov:===================>               56%][Progress:================>             56%] [Cov:===================>               56%][Progress:=================>            57%] [Cov:===================>               56%][Progress:=================>            58%] [Cov:===================>               56%][Progress:=================>            59%] [Cov:===================>               56%][Progress:==================>           60%] [Cov:===================>               56%][Progress:==================>           61%] [Cov:===================>               56%][Progress:==================>           62%] [Cov:===================>               57%][Progress:==================>           63%] [Cov:===================>               57%][Progress:===================>          64%] [Cov:===================>               57%][Progress:===================>          64%] [Cov:===================>               57%][Progress:===================>          66%] [Cov:===================>               57%][Progress:===================>          66%] [Cov:===================>               57%][Progress:====================>         67%] [Cov:===================>               57%][Progress:====================>         68%] [Cov:===================>               57%][Progress:====================>         69%] [Cov:===================>               57%][Progress:=====================>        70%] [Cov:===================>               57%][Progress:=====================>        71%] [Cov:===================>               57%][Progress:=====================>        72%] [Cov:===================>               57%][Progress:=====================>        73%] [Cov:===================>               57%][Progress:======================>       74%] [Cov:===================>               57%][Progress:======================>       75%] [Cov:===================>               57%][Progress:======================>       76%] [Cov:===================>               57%][Progress:=======================>      77%] [Cov:===================>               57%][Progress:=======================>      78%] [Cov:===================>               57%][Progress:=======================>      79%] [Cov:===================>               57%][Progress:========================>     80%] [Cov:===================>               57%][Progress:========================>     81%] [Cov:===================>               57%][Progress:========================>     82%] [Cov:===================>               57%][Progress:========================>     83%] [Cov:===================>               57%][Progress:=========================>    84%] [Cov:===================>               57%][Progress:=========================>    85%] [Cov:===================>               57%][Progress:=========================>    86%] [Cov:===================>               57%][Progress:==========================>   87%] [Cov:===================>               57%][Progress:==========================>   88%] [Cov:===================>               57%][Progress:==========================>   89%] [Cov:===================>               57%][Progress:===========================>  90%] [Cov:===================>               57%][Progress:===========================>  91%] [Cov:===================>               57%][Progress:===========================>  92%] [Cov:===================>               57%][Progress:===========================>  93%] [Cov:===================>               57%][Progress:============================> 94%] [Cov:===================>               57%][Progress:============================> 96%] [Cov:===================>               57%][Progress:=============================>97%] [Cov:===================>               57%][Progress:=============================>98%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:=============================>99%] [Cov:===================>               57%][Progress:==============================100%] [Cov:===================>               57%][Progress:==============================100%] [Cov:===================>               57%]
* Search finished after 102s and 108 generations, 40362 statements, best individual has fitness: 269.0
* Generated before the refinement 6 tests with total length 32
statement is: dsachat.server.Handler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.Handler
statement code is: Handler handler = new Handler()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: dsachat.server.net.SecServer(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.net.SecServer
statement code is: SecServer secServer = new SecServer(arg0)
statement is: addConnection(Ldsachat/share/ConnectionEndpoint;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handler.addConnection(arg0)
statement is: dsachat.share.UserEvent(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.share.UserEvent
statement code is: UserEvent userEvent = new UserEvent(true, "+`*c-i")
statement is: dsachat.share.InputEvent(Ldsachat/share/ConnectionEndpoint;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.share.InputEvent
statement code is: InputEvent inputEvent = new InputEvent(arg0, arg1)
statement is: handleInput(Ldsachat/share/InputEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handler.handleInput(arg0)
test data is: Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
UserEvent userEvent = new UserEvent(true, "+`*c-i");
InputEvent inputEvent = new InputEvent(secServer, userEvent);
handler.handleInput(inputEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Handler handler = new Handler();
        MockSocket mockSocket = new MockSocket();
        SecServer secServer = new SecServer(mockSocket);
        handler.addConnection(secServer);
        UserEvent userEvent = new UserEvent(true, "Joe", 1234567890);// Improved test data: Changed the primitive values and Strings to more descriptive examples

        InputEvent inputEvent = new InputEvent(secServer, userEvent);
        handler.handleInput(inputEvent);
    }
}
statement is: Handler handler = new Handler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SecServer secServer = new SecServer(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: handler.addConnection(secServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: handler.addConnection(secServer) target is: handler method is: addConnection(SecServer)
source statement: dsachat.server.Handler()V callee: VariableReference: Statement 0, type dsachat.server.Handlerindex is: 0
Matched Method is: addConnection(Ldsachat/share/ConnectionEndpoint;)V
statement is: UserEvent userEvent = new UserEvent(true, "Joe", 1234567890)// Improved test data: Changed the primitive values and Strings to more descriptive examples
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: InputEvent inputEvent = new InputEvent(secServer, userEvent), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: dsachat.share.InputEvent(Ldsachat/share/ConnectionEndpoint;Ljava/lang/Object;)V
statement is: handler.handleInput(inputEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: handler.handleInput(inputEvent) target is: handler method is: handleInput(InputEvent)
source statement: dsachat.server.Handler()V callee: VariableReference: Statement 0, type dsachat.server.Handlerindex is: 0
Matched Method is: handleInput(Ldsachat/share/InputEvent;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
InputEvent inputEvent = null;
handler.handleInput(inputEvent);

statement is: dsachat.server.Handler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.Handler
statement code is: Handler handler = new Handler()
statement is: removeConnection(Ldsachat/share/ConnectionEndpoint;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handler.removeConnection((ConnectionEndpoint) null)
test data is: Handler handler = new Handler();
handler.removeConnection((ConnectionEndpoint) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Handler handler = new Handler();
        handler.removeConnection(new ConnectionEndpoint("127.0.0.1", 8080));
    }
}
statement is: Handler handler = new Handler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: handler.removeConnection(new ConnectionEndpoint("127.0.0.1", 8080)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: handler.removeConnection(new ConnectionEndpoint("127.0.0.1", 8080)) target is: handler method is: removeConnection(ConnectionEndpoint)
source statement: dsachat.server.Handler()V callee: VariableReference: Statement 0, type dsachat.server.Handlerindex is: 0
Matched Method is: removeConnection(Ldsachat/share/ConnectionEndpoint;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: Handler handler = new Handler();
ConnectionEndpoint connectionEndpoint = null;
handler.removeConnection(connectionEndpoint);

statement is: dsachat.server.Handler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.Handler
statement code is: Handler handler = new Handler()
statement is: org.evosuite.testcase.statements.FieldStatement@eb578169 type is: class org.evosuite.testcase.statements.FieldStatement return type class java.net.Proxy
statement code is: Proxy proxy = Proxy.NO_PROXY
statement is: org.evosuite.runtime.mock.java.net.MockSocket(Ljava/net/Proxy;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket(arg0)
statement is: dsachat.server.net.SecServer(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.net.SecServer
statement code is: SecServer secServer = new SecServer(arg0)
statement is: addConnection(Ldsachat/share/ConnectionEndpoint;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handler.addConnection(arg0)
statement is: removeConnection(Ldsachat/share/ConnectionEndpoint;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handler.removeConnection(arg0)
test data is: Handler handler = new Handler();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
handler.removeConnection(secServer);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Handler handler = new Handler();
        Proxy proxy = Proxy.NO_PROXY;
        MockSocket mockSocket = new MockSocket(proxy);
        SecServer secServer = new SecServer(mockSocket);
        handler.addConnection(secServer);
        // Changed the following line to add a more descriptive example:
        handler.removeConnection(new SecServer("https://example.com"));
    }
}
statement is: Handler handler = new Handler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Proxy proxy = Proxy.NO_PROXY, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Proxy.NO_PROXY is Proxy
CtField is: public static final java.net.Proxy java.net.Proxy.NO_PROXY Proxy NO_PROXY
statement is: MockSocket mockSocket = new MockSocket(proxy), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SecServer secServer = new SecServer(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: handler.addConnection(secServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: handler.addConnection(secServer) target is: handler method is: addConnection(SecServer)
source statement: dsachat.server.Handler()V callee: VariableReference: Statement 0, type dsachat.server.Handlerindex is: 0
Matched Method is: addConnection(Ldsachat/share/ConnectionEndpoint;)V
statement is: // Changed the following line to add a more descriptive example:
handler.removeConnection(new SecServer("https://example.com")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Changed the following line to add a more descriptive example:
handler.removeConnection(new SecServer("https://example.com")) target is: handler method is: removeConnection(SecServer)
source statement: dsachat.server.Handler()V callee: VariableReference: Statement 0, type dsachat.server.Handlerindex is: 0
Matched Method is: removeConnection(Ldsachat/share/ConnectionEndpoint;)V
TestCase is: Handler handler = new Handler();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
String string = "https://example.com";
SecServer secServer = new SecServer((Socket) string);
handler.removeConnection(secServer);

statement is: dsachat.server.Handler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.Handler
statement code is: Handler handler = new Handler()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: dsachat.server.net.SecServer(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.net.SecServer
statement code is: SecServer secServer = new SecServer(arg0)
statement is: dsachat.share.InputEvent(Ldsachat/share/ConnectionEndpoint;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.share.InputEvent
statement code is: InputEvent inputEvent = new InputEvent(arg0, "h\"HS%0ss{p8")
statement is: handleInput(Ldsachat/share/InputEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handler.handleInput(arg0)
test data is: Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
InputEvent inputEvent = new InputEvent(secServer, "h\"HS%0ss{p8");
handler.handleInput(inputEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Handler handler = new Handler();
        MockSocket mockSocket = new MockSocket("localhost", 80);
        SecServer secServer = new SecServer(mockSocket);
        InputEvent inputEvent = new InputEvent(secServer, "h\"HS%0ss{p8");
        handler.handleInput(inputEvent);
    }
}
statement is: Handler handler = new Handler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket("localhost", 80), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SecServer secServer = new SecServer(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: dsachat.server.net.SecServer(Ljava/net/Socket;)V
statement is: InputEvent inputEvent = new InputEvent(secServer, "h\"HS%0ss{p8"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: handler.handleInput(inputEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: handler.handleInput(inputEvent) target is: handler method is: handleInput(InputEvent)
source statement: dsachat.server.Handler()V callee: VariableReference: Statement 0, type dsachat.server.Handlerindex is: 0
Matched Method is: handleInput(Ldsachat/share/InputEvent;)V
TestCase is: Handler handler = new Handler();
String string = "h\"HS%0ss{p8";
InputEvent inputEvent = new InputEvent((ConnectionEndpoint) string, "h\"HS%0ss{p8");
handler.handleInput(inputEvent);

statement is: dsachat.server.Handler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.Handler
statement code is: Handler handler = new Handler()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: dsachat.server.net.SecServer(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.net.SecServer
statement code is: SecServer secServer = new SecServer(arg0)
statement is: dsachat.share.UserEvent(ZLjava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.share.UserEvent
statement code is: UserEvent userEvent = new UserEvent(true, "+`*c-i")
statement is: dsachat.share.InputEvent(Ldsachat/share/ConnectionEndpoint;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.share.InputEvent
statement code is: InputEvent inputEvent = new InputEvent(arg0, arg1)
statement is: handleInput(Ldsachat/share/InputEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handler.handleInput(arg0)
test data is: Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
UserEvent userEvent = new UserEvent(true, "+`*c-i");
InputEvent inputEvent = new InputEvent(secServer, userEvent);
handler.handleInput(inputEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Handler handler = new Handler();
        MockSocket mockSocket = new MockSocket();
        SecServer secServer = new SecServer(mockSocket);
        UserEvent userEvent = new UserEvent(true, "valid_username");
        InputEvent inputEvent = new InputEvent(secServer, userEvent);
        handler.handleInput(inputEvent);
    }
}
statement is: Handler handler = new Handler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SecServer secServer = new SecServer(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: UserEvent userEvent = new UserEvent(true, "valid_username"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: InputEvent inputEvent = new InputEvent(secServer, userEvent), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: handler.handleInput(inputEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: handler.handleInput(inputEvent) target is: handler method is: handleInput(InputEvent)
source statement: dsachat.server.Handler()V callee: VariableReference: Statement 0, type dsachat.server.Handlerindex is: 0
Matched Method is: handleInput(Ldsachat/share/InputEvent;)V
TestCase is: Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
boolean _boolean = true;
String string = "valid_username";
UserEvent userEvent = new UserEvent(_boolean, string);
InputEvent inputEvent = new InputEvent(secServer, userEvent);
handler.handleInput(inputEvent);

statement is: dsachat.server.Handler()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.Handler
statement code is: Handler handler = new Handler()
statement is: org.evosuite.runtime.mock.java.net.MockSocket()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.net.MockSocket
statement code is: MockSocket mockSocket = new MockSocket()
statement is: dsachat.server.net.SecServer(Ljava/net/Socket;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.server.net.SecServer
statement code is: SecServer secServer = new SecServer(arg0)
statement is: addConnection(Ldsachat/share/ConnectionEndpoint;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handler.addConnection(arg0)
statement is: dsachat.share.InputEvent(Ldsachat/share/ConnectionEndpoint;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class dsachat.share.InputEvent
statement code is: InputEvent inputEvent = new InputEvent(arg0, "h\"HS%0ss{p8")
statement is: handleInput(Ldsachat/share/InputEvent;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handler.handleInput(arg0)
test data is: Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
InputEvent inputEvent = new InputEvent(secServer, "h\"HS%0ss{p8");
handler.handleInput(inputEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Handler handler = new Handler();
        MockSocket mockSocket = new MockSocket();
        SecServer secServer = new SecServer(mockSocket);
        handler.addConnection(secServer);
        InputEvent inputEvent = new InputEvent(secServer, "This is a test message");
        handler.handleInput(inputEvent);
    }
}
statement is: Handler handler = new Handler(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: MockSocket mockSocket = new MockSocket(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: SecServer secServer = new SecServer(mockSocket), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: handler.addConnection(secServer), class spoon.support.reflect.code.CtInvocationImpl
invocation is: handler.addConnection(secServer) target is: handler method is: addConnection(SecServer)
source statement: dsachat.server.Handler()V callee: VariableReference: Statement 0, type dsachat.server.Handlerindex is: 0
Matched Method is: addConnection(Ldsachat/share/ConnectionEndpoint;)V
statement is: InputEvent inputEvent = new InputEvent(secServer, "This is a test message"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: handler.handleInput(inputEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: handler.handleInput(inputEvent) target is: handler method is: handleInput(InputEvent)
source statement: dsachat.server.Handler()V callee: VariableReference: Statement 0, type dsachat.server.Handlerindex is: 0
Matched Method is: handleInput(Ldsachat/share/InputEvent;)V
TestCase is: Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
String string = "This is a test message";
InputEvent inputEvent = new InputEvent(secServer, string);
handler.handleInput(inputEvent);

* test suite isTestSuite: 12
Test 0: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
UserEvent userEvent = new UserEvent(true, "+`*c-i");
InputEvent inputEvent = new InputEvent(secServer, userEvent);
// Undeclared exception!
try { 
  handler.handleInput(inputEvent);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("dsachat.server.net.SecServer", e);
}

Test 1: 
Handler handler = new Handler();
handler.removeConnection((ConnectionEndpoint) null);
Test 2: 
Handler handler = new Handler();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
handler.removeConnection(secServer);
Test 3: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
InputEvent inputEvent = new InputEvent(secServer, "h\"HS%0ss{p8");
handler.handleInput(inputEvent);
Test 4: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
UserEvent userEvent = new UserEvent(true, "+`*c-i");
InputEvent inputEvent = new InputEvent(secServer, userEvent);
// Undeclared exception!
try { 
  handler.handleInput(inputEvent);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("dsachat.server.net.SecServer", e);
}

Test 5: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
InputEvent inputEvent = new InputEvent(secServer, "h\"HS%0ss{p8");
// Undeclared exception!
try { 
  handler.handleInput(inputEvent);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("dsachat.server.net.SecServer", e);
}

Test 6: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
handler.handleInput((InputEvent) null);

Test 7: 
Handler handler = new Handler();
handler.removeConnection((ConnectionEndpoint) null);

Test 8: 
Handler handler = new Handler();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
SecServer secServer = new SecServer((Socket) "https://example.com");
handler.removeConnection(secServer);

Test 9: 
Handler handler = new Handler();
InputEvent inputEvent = new InputEvent((ConnectionEndpoint) "h\"HS%0ss{p8", "h\"HS%0ss{p8");
handler.handleInput(inputEvent);

Test 10: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
UserEvent userEvent = new UserEvent(true, "valid_username");
InputEvent inputEvent = new InputEvent(secServer, userEvent);
handler.handleInput(inputEvent);

Test 11: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
InputEvent inputEvent = new InputEvent(secServer, "This is a test message");
handler.handleInput(inputEvent);


* Generated after the refinement and before minimization 12 tests with total length 61
* test suite isTestSuite: 12
Test 0: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
UserEvent userEvent = new UserEvent(true, "+`*c-i");
InputEvent inputEvent = new InputEvent(secServer, userEvent);
// Undeclared exception!
try { 
  handler.handleInput(inputEvent);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("dsachat.server.net.SecServer", e);
}

Test 1: 
Handler handler = new Handler();
handler.removeConnection((ConnectionEndpoint) null);
Test 2: 
Handler handler = new Handler();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
handler.removeConnection(secServer);
Test 3: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
InputEvent inputEvent = new InputEvent(secServer, "h\"HS%0ss{p8");
handler.handleInput(inputEvent);
Test 4: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
UserEvent userEvent = new UserEvent(true, "+`*c-i");
InputEvent inputEvent = new InputEvent(secServer, userEvent);
// Undeclared exception!
try { 
  handler.handleInput(inputEvent);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("dsachat.server.net.SecServer", e);
}

Test 5: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
InputEvent inputEvent = new InputEvent(secServer, "h\"HS%0ss{p8");
// Undeclared exception!
try { 
  handler.handleInput(inputEvent);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("dsachat.server.net.SecServer", e);
}

Test 6: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
handler.handleInput((InputEvent) null);

Test 7: 
Handler handler = new Handler();
handler.removeConnection((ConnectionEndpoint) null);

Test 8: 
Handler handler = new Handler();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
SecServer secServer = new SecServer((Socket) "https://example.com");
handler.removeConnection(secServer);

Test 9: 
Handler handler = new Handler();
InputEvent inputEvent = new InputEvent((ConnectionEndpoint) "h\"HS%0ss{p8", "h\"HS%0ss{p8");
handler.handleInput(inputEvent);

Test 10: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
UserEvent userEvent = new UserEvent(true, "valid_username");
InputEvent inputEvent = new InputEvent(secServer, userEvent);
handler.handleInput(inputEvent);

Test 11: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
InputEvent inputEvent = new InputEvent(secServer, "This is a test message");
handler.handleInput(inputEvent);


* Minimizing test suite
* test suite isTestSuite: 6
Test 0: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
UserEvent userEvent = new UserEvent(true, "+`*c-i");
InputEvent inputEvent = new InputEvent(secServer, userEvent);
// Undeclared exception!
try { 
  handler.handleInput(inputEvent);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("dsachat.server.net.SecServer", e);
}

Test 1: 
Handler handler = new Handler();
handler.removeConnection((ConnectionEndpoint) null);
Test 2: 
Handler handler = new Handler();
Proxy proxy = Proxy.NO_PROXY;
MockSocket mockSocket = new MockSocket(proxy);
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
handler.removeConnection(secServer);
Test 3: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
UserEvent userEvent = new UserEvent(true, "valid_username");
InputEvent inputEvent = new InputEvent(secServer, userEvent);
// Undeclared exception!
try { 
  handler.handleInput(inputEvent);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("dsachat.server.net.SecServer", e);
}

Test 4: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
InputEvent inputEvent = new InputEvent(secServer, "This is a test message");
handler.handleInput(inputEvent);
Test 5: 
Handler handler = new Handler();
MockSocket mockSocket = new MockSocket();
SecServer secServer = new SecServer(mockSocket);
handler.addConnection(secServer);
InputEvent inputEvent = new InputEvent(secServer, "This is a test message");
// Undeclared exception!
try { 
  handler.handleInput(inputEvent);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("dsachat.server.net.SecServer", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 30%
* Total number of goals: 98
* Number of covered goals: 29
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 30%
* Total number of goals: 186
* Number of covered goals: 55
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100% (no goals)
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 4
* Number of covered goals: 4
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 30%
* Total number of goals: 98
* Number of covered goals: 29
* Generated 6 tests with total length 32
* Resulting test suite's coverage: 58% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Handler handler = new Handler();
handler.removeConnection((ConnectionEndpoint) null);

** It was a parseable test case! 
refined test name is: testRemoveConnection
* Compiling Tests
refined test name is: testRemoveConnection
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 21:34:54.705 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2744095893404122350.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 21:34:54.742 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2744095893404122350.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 21:34:54.835 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2744095893404122350.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 21:34:54.837 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2744095893404122350.jar
* Writing tests to file
* Writing JUnit test case 'Handler_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
* Done!

* Computation finished
