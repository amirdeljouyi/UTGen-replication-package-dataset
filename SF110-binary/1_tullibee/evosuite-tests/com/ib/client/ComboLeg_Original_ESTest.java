/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 14:57:01 GMT 2024
 */

package com.ib.client;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.ib.client.ComboLeg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComboLeg_Original_ESTest extends ComboLeg_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse0() throws Throwable  {
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg();
      assertTrue(arg0.equals((Object)comboLeg));
      
      comboLeg.m_designatedLocation = "{";
      boolean equals = comboLeg.equals(arg0);
      assertFalse(arg0.equals((Object)comboLeg));
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesComboLegTaking7Arguments0() throws Throwable  {
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg(0, 0, (String) null, "*sVEZGHnSgC0+$7uo8", 0, 0, (String) null);
      boolean equals = comboLeg.equals(arg0);
      assertEquals(0, arg0.m_openClose);
      assertEquals(0, arg0.m_shortSaleSlot);
      assertFalse(equals);
      assertFalse(arg0.equals((Object)comboLeg));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse1() throws Throwable  {
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg();
      assertTrue(arg0.equals((Object)comboLeg));
      
      arg0.m_action = "O";
      boolean equals = comboLeg.equals(arg0);
      assertFalse(arg0.equals((Object)comboLeg));
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningFalse2() throws Throwable  {
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg();
      assertEquals(0, arg0.m_shortSaleSlot);
      
      arg0.m_shortSaleSlot = 3;
      boolean equals = comboLeg.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesComboLegTaking5Arguments() throws Throwable  {
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg(0, 0, (String) null, (String) null, 3);
      boolean equals = comboLeg.equals(arg0);
      assertEquals(0, arg0.m_conId);
      assertFalse(arg0.equals((Object)comboLeg));
      assertEquals(3, arg0.m_openClose);
      assertEquals(0, arg0.m_ratio);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesComboLegTaking7Arguments1() throws Throwable  {
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg(0, 2, "", "", 0, 1, (String) null);
      comboLeg.equals(arg0);
      assertEquals(0, comboLeg.m_shortSaleSlot);
      assertEquals(0, arg0.m_conId);
      assertEquals(0, comboLeg.m_ratio);
      assertEquals(1, arg0.m_shortSaleSlot);
      assertEquals(0, arg0.m_openClose);
      assertEquals(2, arg0.m_ratio);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue0() throws Throwable  {
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg();
      boolean equals = comboLeg.equals(arg0);
      assertEquals(0, arg0.m_conId);
      assertEquals(0, arg0.m_ratio);
      assertEquals(0, arg0.m_openClose);
      assertTrue(equals);
      assertEquals(0, arg0.m_shortSaleSlot);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      ComboLeg comboLeg = new ComboLeg();
      boolean equals = comboLeg.equals((Object) null);
      assertEquals(0, comboLeg.m_conId);
      assertEquals(0, comboLeg.m_openClose);
      assertEquals(0, comboLeg.m_ratio);
      assertEquals(0, comboLeg.m_shortSaleSlot);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsReturningTrue1() throws Throwable  {
      ComboLeg arg0 = new ComboLeg();
      boolean equals = arg0.equals(arg0);
      assertEquals(0, arg0.m_conId);
      assertTrue(equals);
      assertEquals(0, arg0.m_shortSaleSlot);
      assertEquals(0, arg0.m_openClose);
      assertEquals(0, arg0.m_ratio);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesComboLegTaking7Arguments2() throws Throwable  {
      ComboLeg comboLeg = new ComboLeg();
      ComboLeg arg0 = new ComboLeg(3, 1, "", "", 1, (-2075), (String) null);
      boolean equals = comboLeg.equals(arg0);
      assertEquals(0, comboLeg.m_openClose);
      assertEquals(3, arg0.m_conId);
      assertEquals(0, comboLeg.m_ratio);
      assertEquals(1, arg0.m_ratio);
      assertEquals(0, comboLeg.m_conId);
      assertFalse(equals);
      assertEquals((-2075), arg0.m_shortSaleSlot);
      assertEquals(1, arg0.m_openClose);
  }
}
