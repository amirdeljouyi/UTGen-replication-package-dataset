/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 14:52:24 GMT 2024
 */

package com.ib.client;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.ib.client.ExecutionFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ExecutionFilter_ESTest extends ExecutionFilter_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7ArgumentsAndEqualsReturningTrue() throws Throwable  {
      // Given a filter with a specific client ID and time range
      ExecutionFilter executionFilter = new ExecutionFilter((-47), "H|yCc,eAfyPY~", (String) null, "H|yCc,eAfyPY~", "H|yCc,eAfyPY~", "H|yCc,eAfyPY~", "Vw");
      executionFilter.m_time = "H|yCc,eAfyPY~";
      
      // When we compare the filter with another filter that has the same client ID and time range
      ExecutionFilter arg0 = new ExecutionFilter((-47), "H|yCc,eAfyPY~", "H|yCc,eAfyPY~", "H|yCc,eAfyPY~", "H|yCc,eAfyPY~", "H|yCc,eAfyPY~", "Vw");
      boolean equals = executionFilter.equals(arg0);
      
      // Then we expect the filters to be equal and for the client ID and time range to match
      assertEquals((-47), arg0.m_clientId);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7Arguments0() throws Throwable  {
      // rollbacked to evosuite
      ExecutionFilter executionFilter = new ExecutionFilter((-47), "H|yCc,eAfkyPY~", (String) null, "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "Vw");
      executionFilter.m_time = "H|yCc,eAfkyPY~";
      ExecutionFilter arg0 = new ExecutionFilter((-47), "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", (String) null, ".bNq,%K,6");
      boolean equals = executionFilter.equals(arg0);
      assertEquals((-47), arg0.m_clientId);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7Arguments1() throws Throwable  {
      ExecutionFilter firstFilter = new ExecutionFilter(-47, "H|yCc,eAfkyPY~", null, "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "r1", "Vw");
      firstFilter.m_time = "r1";
      ExecutionFilter secondFilter = new ExecutionFilter(-47, "H|yCc,eAfkyPY~", "r1", "H|yCc,eAfkyPY~", "r1", null, ".bNq,%K,6");
      boolean areEqual = firstFilter.equals(secondFilter);
      assertEquals(-47, secondFilter.m_clientId);
      assertFalse(areEqual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7Arguments2() throws Throwable  {
      // Create two instances of ExecutionFilter with different property values
      ExecutionFilter executionFilter1 = new ExecutionFilter((-1), "HyC-c,eAfkPY~", (String) null, "HyC-c,eAfkPY~", "HyC-c,eAfkPY~", "", "r4");
      executionFilter1.m_time = ""; // Set the time property to an empty string
      ExecutionFilter executionFilter2 = new ExecutionFilter((-1), "HyC-c,eAfkPY~", "", "7a@rHBhJ\"PWwf", "r4", (String) null, ".bNq,%K,6");
      
      // Verify that the two instances are not equal using the equals method
      boolean equals = executionFilter1.equals(executionFilter2);
      assertFalse(equals);
      
      // Verify some of the property values of the first instance
      assertEquals((-1), executionFilter1.m_clientId); // Verify the client ID is -1);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7Arguments3() throws Throwable  {
      // rollbacked to evosuite
      ExecutionFilter executionFilter = new ExecutionFilter((-47), "H|yCc,eAfkyPY~", (String) null, "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "Vw");
      executionFilter.m_time = "H|yCc,eAfkyPY~";
      ExecutionFilter arg0 = new ExecutionFilter((-47), "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", ".bNq,%K,6");
      boolean equals = executionFilter.equals(arg0);
      assertFalse(equals);
      assertEquals((-47), arg0.m_clientId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTaking7Arguments4() throws Throwable  {
      // rollbacked to evosuite
      ExecutionFilter arg0 = new ExecutionFilter((-47), "H|yCc,eAfkyPY~", (String) null, "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "Vw");
      ExecutionFilter executionFilter = new ExecutionFilter((-47), "H|yCc,eAfkyPY~", ".bNq,%K,6", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~");
      boolean equals = executionFilter.equals(arg0);
      assertEquals((-47), executionFilter.m_clientId);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTakingNoArgumentsAndEqualsReturningFalse() throws Throwable  {
      // Given two ExecutionFilters, an expected filter and an actual filter
      ExecutionFilter expectedFilter = new ExecutionFilter();
      expectedFilter.m_acctCode = "!A/=d\u0006zY&S'o+dgR";
      ExecutionFilter actualFilter = new ExecutionFilter();
      actualFilter.m_clientId = 0;
      
      // When we check if the expected filter is equal to the actual filter
      boolean equals = expectedFilter.equals(actualFilter);
      
      // Then the filters should not be equal, as the client ID is different
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTakingNoArgumentsAndCreatesExecutionFilterTaking7Arguments() throws Throwable  {
      // rollbacked to evosuite
      ExecutionFilter executionFilter = new ExecutionFilter(732, "E^`~?fd_&=Bde", "^|6P;", "^|6P;", "^|6P;", "h)Za", "E^`~?fd_&=Bde");
      ExecutionFilter arg0 = new ExecutionFilter();
      boolean equals = executionFilter.equals(arg0);
      assertFalse(equals);
      assertEquals(0, arg0.m_clientId);
      assertEquals(732, executionFilter.m_clientId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNull() throws Throwable  {
      // Given a filter for a specific client ID
      ExecutionFilter executionFilter = new ExecutionFilter(-47, "H|yCc,eAfkyPY~", null, "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "H|yCc,eAfkyPY~", "Vw");
      
      // When the filter is compared to a null object
      boolean equals = executionFilter.equals(null);
      
      // Then the comparison should return false
      assertFalse(equals);
      
      // And the client ID of the filter should be equal to -47
      assertEquals(-47, executionFilter.m_clientId);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesExecutionFilterTakingNoArgumentsAndEqualsReturningTrue() throws Throwable  {
      // Given two instances of ExecutionFilter with the same client ID
      ExecutionFilter filter1 = new ExecutionFilter();
      filter1.m_clientId = 0;
      ExecutionFilter filter2 = new ExecutionFilter();
      filter2.m_clientId = 0;
      
      // When we call equals on the two instances with each other
      boolean equal = filter1.equals(filter2);
      
      // Then the result is true, since both filters have the same client ID
      assertTrue(equal);
  }
}
