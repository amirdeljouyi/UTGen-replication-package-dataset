* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: com.ib.client.ExecutionFilter
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/1_tullibee/evosuite-files/evosuite.properties
* Connecting to master process on port 16133
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class com.ib.client.ExecutionFilter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 65
* Using seed 1709239994942
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 21 / 65
[Progress:>                             0%] [Cov:========================>          70%][Progress:>                             0%] [Cov:=========================>         73%][Progress:>                             1%] [Cov:================================>  94%][Progress:>                             1%] [Cov:=================================> 96%][Progress:>                             1%] [Cov:==================================>98%][Progress:>                             1%] [Cov:===================================100%]
* Search finished after 2s and 5 generations, 3599 statements, best individual has fitness: 0.0
* Generated before the refinement 10 tests with total length 35
statement is: com.ib.client.ExecutionFilter()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = executionFilter.equals((Object) null)
test data is: ExecutionFilter executionFilter = new ExecutionFilter();
executionFilter.equals((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ExecutionFilter executionFilter = new ExecutionFilter();
        executionFilter.equals("test");
    }
}
statement is: ExecutionFilter executionFilter = new ExecutionFilter(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.equals("test"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: executionFilter.equals("test") target is: executionFilter method is: equals(java.lang.String)
source statement: com.ib.client.ExecutionFilter()V callee: VariableReference: Statement 0, type com.ib.client.ExecutionFilterindex is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: ExecutionFilter executionFilter = new ExecutionFilter();
String string = "test";
executionFilter.equals(string);

statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(1, "x=", "x=", "x=", "x=", "x=", "x=")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: ExecutionFilter executionFilter = new ExecutionFilter(1, "x=", "x=", "x=", "x=", "x=", "x=");
executionFilter.equals(executionFilter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ExecutionFilter executionFilter = new ExecutionFilter(1, "x=", "x=", "x=", "x=", "x=", "x=");
        executionFilter.equals(new ExecutionFilter(2, "y=", "y=", "y=", "y=", "y=", "y="));
    }
}
statement is: ExecutionFilter executionFilter = new ExecutionFilter(1, "x=", "x=", "x=", "x=", "x=", "x="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.equals(new ExecutionFilter(2, "y=", "y=", "y=", "y=", "y=", "y=")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: executionFilter.equals(new ExecutionFilter(2, "y=", "y=", "y=", "y=", "y=", "y=")) target is: executionFilter method is: equals(ExecutionFilter)
source statement: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.ib.client.ExecutionFilterindex is: 7
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: int _int = 1;
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
int _int = 2;
String string = "y=";
String string = "y=";
String string = "y=";
String string = "y=";
String string = "y=";
String string = "y=";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
((ExecutionFilter) _int).equals(executionFilter);

statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=")
statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = executionFilter.equals(arg0)
test data is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
executionFilter.equals(executionFilter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
        ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
        executionFilter.equals(executionFilter);
    }
}
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.equals(executionFilter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: executionFilter.equals(executionFilter) target is: executionFilter method is: equals(ExecutionFilter)
TestCase is: int _int = 0;
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
int _int = 0;
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);

statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter((-857), (String) null, (String) null, (String) null, "", (String) null, "")
statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter((-857), "", (String) null, (String) null, (String) null, "", (String) null)
statement is: org.evosuite.testcase.statements.AssignmentStatement@d1b8fbf9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: executionFilter.m_clientId = (-1716)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = executionFilter.equals(arg0)
test data is: ExecutionFilter executionFilter = new ExecutionFilter((-857), (String) null, (String) null, (String) null, "", (String) null, "");
ExecutionFilter executionFilter = new ExecutionFilter((-857), "", (String) null, (String) null, (String) null, "", (String) null);
executionFilter.m_clientId = (-1716);
executionFilter.equals(executionFilter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ExecutionFilter executionFilter = new ExecutionFilter(-857, null, null, null, "", null, "");
        ExecutionFilter executionFilter = new ExecutionFilter(-857, "", null, null, ((String) (null)), "", ((String) (null)));
        executionFilter.m_clientId = -1716;
        executionFilter.equals(executionFilter);
    }
}
statement is: ExecutionFilter executionFilter = new ExecutionFilter(-857, null, null, null, "", null, ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExecutionFilter executionFilter = new ExecutionFilter(-857, "", null, null, ((String) (null)), "", ((String) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.m_clientId = -1716, class spoon.support.reflect.code.CtAssignmentImpl
statement is: executionFilter.equals(executionFilter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: executionFilter.equals(executionFilter) target is: executionFilter method is: equals(ExecutionFilter)
source statement: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.ib.client.ExecutionFilterindex is: 5
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: String string = "";
String string = "";
ExecutionFilter executionFilter = new ExecutionFilter((int) string, string, (String) null, (String) null, "", (String) null, "");
String string = "";
String string = "";
ExecutionFilter executionFilter = new ExecutionFilter((int) string, string, (String) null, (String) null, "", (String) null, "");
string.equals(executionFilter);

statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "")
statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = executionFilter.equals(arg0)
test data is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=");
executionFilter.equals(executionFilter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ExecutionFilter executionFilter = new ExecutionFilter(0, "x=1234", "x=", "x=hello", "x=", "x=", "");
        ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=987654321", "", "", "x=abcdefg", "x=");
        executionFilter.equals(executionFilter);
    }
}
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=1234", "x=", "x=hello", "x=", "x=", ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=987654321", "", "", "x=abcdefg", "x="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.equals(executionFilter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: executionFilter.equals(executionFilter) target is: executionFilter method is: equals(ExecutionFilter)
TestCase is: int _int = 0;
String string = "x=1234";
String string = "x=";
String string = "x=hello";
String string = "x=";
String string = "x=";
String string = "";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
int _int = 0;
String string = "|tdE0Bx6";
String string = "x=987654321";
String string = "";
String string = "";
String string = "x=abcdefg";
String string = "x=";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);

statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "")
statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "", "", "&y", "x=", "x=")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = executionFilter.equals(arg0)
test data is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "", "", "&y", "x=", "x=");
executionFilter.equals(executionFilter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
        ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "", "", "&y", "x=", "x=");
        executionFilter.equals(executionFilter);
    }
}
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "", "", "&y", "x=", "x="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.equals(executionFilter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: executionFilter.equals(executionFilter) target is: executionFilter method is: equals(ExecutionFilter)
source statement: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.ib.client.ExecutionFilterindex is: 15
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: int _int = 0;
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
int _int = 0;
String string = "x=";
String string = "";
String string = "";
String string = "&y";
String string = "x=";
String string = "x=";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
((ExecutionFilter) _int).equals(executionFilter);

statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "")
statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=")
statement is: org.evosuite.testcase.statements.AssignmentStatement@e319fb84 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: executionFilter.m_acctCode = "x="
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = executionFilter.equals(arg0)
test data is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=");
executionFilter.m_acctCode = "x=";
executionFilter.equals(executionFilter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ExecutionFilter executionFilter = new ExecutionFilter(0, "123456789", "x=", "123456789", "123456789", "x=", "123456789");
        ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "123456789", "", "", "123456789", "123456789");
        executionFilter.m_acctCode = "123456789";
        executionFilter.equals(executionFilter);
    }
}
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "123456789", "x=", "123456789", "123456789", "x=", "123456789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "123456789", "", "", "123456789", "123456789"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.m_acctCode = "123456789", class spoon.support.reflect.code.CtAssignmentImpl
statement is: executionFilter.equals(executionFilter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: executionFilter.equals(executionFilter) target is: executionFilter method is: equals(ExecutionFilter)
source statement: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.ib.client.ExecutionFilterindex is: 15
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: int _int = 0;
String string = "123456789";
String string = "x=";
String string = "123456789";
String string = "123456789";
String string = "x=";
String string = "123456789";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
int _int = 0;
String string = "|tdE0Bx6";
String string = "123456789";
String string = "";
String string = "";
String string = "123456789";
String string = "123456789";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
((ExecutionFilter) _int).equals(executionFilter);

statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "")
statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = executionFilter.equals(arg0)
test data is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.equals(executionFilter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
        ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
        executionFilter.equals(executionFilter);
    }
}
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.equals(executionFilter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: executionFilter.equals(executionFilter) target is: executionFilter method is: equals(ExecutionFilter)
source statement: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.ib.client.ExecutionFilterindex is: 15
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: int _int = 0;
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
int _int = 0;
String string = "x=";
String string = "x=";
String string = "x=";
String string = "";
String string = "x=";
String string = "x=";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
((ExecutionFilter) _int).equals(executionFilter);

statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "")
statement is: org.evosuite.testcase.statements.AssignmentStatement@eccc7a8d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: executionFilter.m_secType = "RCHO*"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6ab7474 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: executionFilter.m_secType = ""
statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=")
statement is: org.evosuite.testcase.statements.AssignmentStatement@67f90de6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: executionFilter.m_exchange = "a2(UWw=ct_6pR.bGr7"
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = executionFilter.equals(arg0)
test data is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
executionFilter.m_secType = "RCHO*";
executionFilter.m_secType = "";
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.m_exchange = "a2(UWw=ct_6pR.bGr7";
executionFilter.equals(executionFilter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
        executionFilter.m_secType = "RCHO*";// changed to a more descriptive value

        executionFilter.m_secType = "";// changed to an empty string

        ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
        executionFilter.m_exchange = "a2(UWw=ct_6pR.bGr7";// changed to a more descriptive value

        executionFilter.equals(executionFilter);
    }
}
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.m_secType = "RCHO*"// changed to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: executionFilter.m_secType = ""// changed to an empty string
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x="), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.m_exchange = "a2(UWw=ct_6pR.bGr7"// changed to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: executionFilter.equals(executionFilter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: executionFilter.equals(executionFilter) target is: executionFilter method is: equals(ExecutionFilter)
source statement: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.ib.client.ExecutionFilterindex is: 15
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: int _int = 0;
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "x=";
String string = "";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
int _int = 0;
String string = "x=";
String string = "x=";
String string = "x=";
String string = "";
String string = "x=";
String string = "x=";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
((ExecutionFilter) _int).equals(executionFilter);

statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "")
statement is: org.evosuite.testcase.statements.AssignmentStatement@e236ccb8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: executionFilter.m_secType = "RCHO*"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f933d2ca type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: executionFilter.m_secType = ""
statement is: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.ib.client.ExecutionFilter
statement code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = executionFilter.equals(arg0)
test data is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
executionFilter.m_secType = "RCHO*";
executionFilter.m_secType = "";
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.equals(executionFilter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ExecutionFilter executionFilter = new ExecutionFilter(5, "hello world", "hello world", "hello world", "", "hello world", "hello world");
        executionFilter.m_secType = "RCHO*";
        executionFilter.m_secType = "";
        ExecutionFilter executionFilter = new ExecutionFilter(5, "hello world", "hello world", "hello world", "", "hello world", "hello world");
        executionFilter.equals(executionFilter);
    }
}
statement is: ExecutionFilter executionFilter = new ExecutionFilter(5, "hello world", "hello world", "hello world", "", "hello world", "hello world"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.m_secType = "RCHO*", class spoon.support.reflect.code.CtAssignmentImpl
statement is: executionFilter.m_secType = "", class spoon.support.reflect.code.CtAssignmentImpl
statement is: ExecutionFilter executionFilter = new ExecutionFilter(5, "hello world", "hello world", "hello world", "", "hello world", "hello world"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: executionFilter.equals(executionFilter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: executionFilter.equals(executionFilter) target is: executionFilter method is: equals(ExecutionFilter)
source statement: com.ib.client.ExecutionFilter(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.ib.client.ExecutionFilterindex is: 15
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: int _int = 5;
String string = "hello world";
String string = "hello world";
String string = "hello world";
String string = "";
String string = "hello world";
String string = "hello world";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
int _int = 5;
String string = "hello world";
String string = "hello world";
String string = "hello world";
String string = "";
String string = "hello world";
String string = "hello world";
ExecutionFilter executionFilter = new ExecutionFilter(_int, string, string, string, string, string, string);
((ExecutionFilter) _int).equals(executionFilter);

* test suite isTestSuite: 20
Test 0: 
ExecutionFilter executionFilter = new ExecutionFilter();
executionFilter.equals((Object) null);

Test 1: 
ExecutionFilter executionFilter = new ExecutionFilter(1, "x=", "x=", "x=", "x=", "x=", "x=");
executionFilter.equals(executionFilter);
Test 2: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
executionFilter.equals(executionFilter);
Test 3: 
ExecutionFilter executionFilter = new ExecutionFilter((-857), (String) null, (String) null, (String) null, "", (String) null, "");
ExecutionFilter executionFilter = new ExecutionFilter((-857), "", (String) null, (String) null, (String) null, "", (String) null);
executionFilter.m_clientId = (-1716);
executionFilter.equals(executionFilter);
Test 4: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=");
executionFilter.equals(executionFilter);
Test 5: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "", "", "&y", "x=", "x=");
executionFilter.equals(executionFilter);
Test 6: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=");
executionFilter.m_acctCode = "x=";
executionFilter.equals(executionFilter);
Test 7: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.equals(executionFilter);
Test 8: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
executionFilter.m_secType = "RCHO*";
executionFilter.m_secType = "";
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.m_exchange = "a2(UWw=ct_6pR.bGr7";
executionFilter.equals(executionFilter);
Test 9: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
executionFilter.m_secType = "RCHO*";
executionFilter.m_secType = "";
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.equals(executionFilter);
Test 10: 
ExecutionFilter executionFilter = new ExecutionFilter();
executionFilter.equals("test");

Test 11: 
ExecutionFilter executionFilter = new ExecutionFilter(1, "x=", "x=", "x=", "x=", "x=", "x=");
ExecutionFilter executionFilter = new ExecutionFilter(2, "y=", "y=", "y=", "y=", "y=", "y=");
((ExecutionFilter)1).equals(executionFilter);

Test 12: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");

Test 13: 
String string = "";
ExecutionFilter executionFilter = new ExecutionFilter((int) "", "", (String) null, (String) null, "", (String) null, "");
String string = "";
String string = "";
ExecutionFilter executionFilter = new ExecutionFilter((int) string, string, (String) null, (String) null, "", (String) null, "");
string.equals(executionFilter);

Test 14: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=1234", "x=", "x=hello", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=987654321", "", "", "x=abcdefg", "x=");

Test 15: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "", "", "&y", "x=", "x=");
((ExecutionFilter)0).equals(executionFilter);

Test 16: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "123456789", "x=", "123456789", "123456789", "x=", "123456789");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "123456789", "", "", "123456789", "123456789");
((ExecutionFilter)0).equals(executionFilter);

Test 17: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
((ExecutionFilter)0).equals(executionFilter);

Test 18: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
((ExecutionFilter)0).equals(executionFilter);

Test 19: 
ExecutionFilter executionFilter = new ExecutionFilter(5, "hello world", "hello world", "hello world", "", "hello world", "hello world");
ExecutionFilter executionFilter = new ExecutionFilter(5, "hello world", "hello world", "hello world", "", "hello world", "hello world");
((ExecutionFilter)5).equals(executionFilter);


* Generated after the refinement and before minimization 20 tests with total length 65
* test suite isTestSuite: 20
Test 0: 
ExecutionFilter executionFilter = new ExecutionFilter();
executionFilter.equals((Object) null);

Test 1: 
ExecutionFilter executionFilter = new ExecutionFilter(1, "x=", "x=", "x=", "x=", "x=", "x=");
executionFilter.equals(executionFilter);
Test 2: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
executionFilter.equals(executionFilter);
Test 3: 
ExecutionFilter executionFilter = new ExecutionFilter((-857), (String) null, (String) null, (String) null, "", (String) null, "");
ExecutionFilter executionFilter = new ExecutionFilter((-857), "", (String) null, (String) null, (String) null, "", (String) null);
executionFilter.m_clientId = (-1716);
executionFilter.equals(executionFilter);
Test 4: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=");
executionFilter.equals(executionFilter);
Test 5: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "", "", "&y", "x=", "x=");
executionFilter.equals(executionFilter);
Test 6: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=");
executionFilter.m_acctCode = "x=";
executionFilter.equals(executionFilter);
Test 7: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.equals(executionFilter);
Test 8: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
executionFilter.m_secType = "RCHO*";
executionFilter.m_secType = "";
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.m_exchange = "a2(UWw=ct_6pR.bGr7";
executionFilter.equals(executionFilter);
Test 9: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
executionFilter.m_secType = "RCHO*";
executionFilter.m_secType = "";
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.equals(executionFilter);
Test 10: 
ExecutionFilter executionFilter = new ExecutionFilter();
executionFilter.equals("test");

Test 11: 
ExecutionFilter executionFilter = new ExecutionFilter(1, "x=", "x=", "x=", "x=", "x=", "x=");
ExecutionFilter executionFilter = new ExecutionFilter(2, "y=", "y=", "y=", "y=", "y=", "y=");
((ExecutionFilter)1).equals(executionFilter);

Test 12: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");

Test 13: 
String string = "";
ExecutionFilter executionFilter = new ExecutionFilter((int) "", "", (String) null, (String) null, "", (String) null, "");
String string = "";
String string = "";
ExecutionFilter executionFilter = new ExecutionFilter((int) string, string, (String) null, (String) null, "", (String) null, "");
string.equals(executionFilter);

Test 14: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=1234", "x=", "x=hello", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=987654321", "", "", "x=abcdefg", "x=");

Test 15: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "", "", "&y", "x=", "x=");
((ExecutionFilter)0).equals(executionFilter);

Test 16: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "123456789", "x=", "123456789", "123456789", "x=", "123456789");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "123456789", "", "", "123456789", "123456789");
((ExecutionFilter)0).equals(executionFilter);

Test 17: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
((ExecutionFilter)0).equals(executionFilter);

Test 18: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
((ExecutionFilter)0).equals(executionFilter);

Test 19: 
ExecutionFilter executionFilter = new ExecutionFilter(5, "hello world", "hello world", "hello world", "", "hello world", "hello world");
ExecutionFilter executionFilter = new ExecutionFilter(5, "hello world", "hello world", "hello world", "", "hello world", "hello world");
((ExecutionFilter)5).equals(executionFilter);


* Minimizing test suite
* test suite isTestSuite: 10
Test 0: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
executionFilter.equals(executionFilter);

Test 1: 
ExecutionFilter executionFilter = new ExecutionFilter();
executionFilter.equals((Object) null);
Test 2: 
ExecutionFilter executionFilter = new ExecutionFilter(1, "x=", "x=", "x=", "x=", "x=", "x=");
executionFilter.equals(executionFilter);
Test 3: 
ExecutionFilter executionFilter = new ExecutionFilter((-857), (String) null, (String) null, (String) null, "", (String) null, "");
ExecutionFilter executionFilter = new ExecutionFilter((-857), "", (String) null, (String) null, (String) null, "", (String) null);
executionFilter.m_clientId = (-1716);
executionFilter.equals(executionFilter);
Test 4: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=");
executionFilter.equals(executionFilter);
Test 5: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "", "", "&y", "x=", "x=");
executionFilter.equals(executionFilter);
Test 6: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=");
executionFilter.m_acctCode = "x=";
executionFilter.equals(executionFilter);
Test 7: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.equals(executionFilter);
Test 8: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
executionFilter.m_secType = "RCHO*";
executionFilter.m_secType = "";
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.m_exchange = "a2(UWw=ct_6pR.bGr7";
executionFilter.equals(executionFilter);
Test 9: 
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
executionFilter.m_secType = "RCHO*";
executionFilter.m_secType = "";
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
executionFilter.equals(executionFilter);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 3
* Number of covered goals: 3
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Generated 10 tests with total length 35
* Resulting test suite's coverage: 100% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 30%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ExecutionFilter arg0 = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "x=");
boolean equals = executionFilter.equals(arg0);
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualssameFiltersreturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ExecutionFilter executionFilter = new ExecutionFilter();
boolean equals = executionFilter.equals((Object) null);
assertEquals(0, executionFilter.m_clientId);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsNullObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ExecutionFilter arg0 = new ExecutionFilter(1, "x=", "x=", "x=", "x=", "x=", "x=");
boolean equals = arg0.equals(arg0);
assertEquals(1, arg0.m_clientId);
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testExecutionFilterEquality
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ExecutionFilter executionFilter = new ExecutionFilter((-857), (String) null, (String) null, (String) null, "", (String) null, "");
ExecutionFilter arg0 = new ExecutionFilter((-857), "", (String) null, (String) null, (String) null, "", (String) null);
assertEquals((-857), arg0.m_clientId);

arg0.m_clientId = (-1716);
boolean equals = executionFilter.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testExecutionFilterEqualsWithDifferentClientId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ExecutionFilter arg0 = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter executionFilter = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=");
boolean equals = executionFilter.equals(arg0);
assertEquals(0, executionFilter.m_clientId);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testDifferentClientIdsAreNotEqual
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter arg0 = new ExecutionFilter(0, "x=", "", "", "&y", "x=", "x=");
boolean equals = executionFilter.equals(arg0);
assertFalse(equals);
assertEquals(0, arg0.m_clientId);


** It was a parseable test case! 
refined test name is: testNotEqualWithDifferentClientIds
* Compiling Tests
refined test name is: testExecutionFilterNotEqual
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter arg0 = new ExecutionFilter(0, "|tdE0Bx6", "x=", "", "", "x=", "x=");
arg0.m_acctCode = "x=";
boolean equals = executionFilter.equals(arg0);
assertEquals(0, arg0.m_clientId);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsMethodWithDifferentValuesForMacctCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
ExecutionFilter arg0 = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
boolean equals = executionFilter.equals(arg0);
assertEquals(0, arg0.m_clientId);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsSameValuesReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
executionFilter.m_secType = "RCHO*";
executionFilter.m_secType = "";
ExecutionFilter arg0 = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
arg0.m_exchange = "a2(UWw=ct_6pR.bGr7";
boolean equals = executionFilter.equals(arg0);
assertFalse(arg0.equals((Object)executionFilter));
assertEquals(0, arg0.m_clientId);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsMethodWithDifferentExecutionFilterObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ExecutionFilter executionFilter = new ExecutionFilter(0, "x=", "x=", "x=", "x=", "x=", "");
executionFilter.m_secType = "RCHO*";
executionFilter.m_secType = "";
ExecutionFilter arg0 = new ExecutionFilter(0, "x=", "x=", "x=", "", "x=", "x=");
boolean equals = executionFilter.equals(arg0);
assertFalse(arg0.equals((Object)executionFilter));
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testNotEqualWhenPropertiesDiffer
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:06.901 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:06.926 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:06.993 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:06.995 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
[MASTER] 20:55:07.064 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:07.065 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:07.132 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:07.134 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
[MASTER] 20:55:07.201 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:55:07.203 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
[MASTER] 20:55:07.269 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:07.271 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:07.360 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:07.363 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
[MASTER] 20:55:07.450 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:07.452 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
[MASTER] 20:55:07.542 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:07.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
[MASTER] 20:55:07.621 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:55:07.623 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 5 called: 0 to improve: false
[MASTER] 20:55:07.775 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:55:07.778 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
** Write a test suite: 4 called: 0 to improve: false
[MASTER] 20:55:07.944 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar2904951677106174341.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
* Writing tests to file
* Writing JUnit test case 'ExecutionFilter_ESTest' to evosuite-tests
[MASTER] 20:55:07.947 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2904951677106174341.jar
** Write a test suite: 4 called: 0 to improve: false
* Done!

* Computation finished
