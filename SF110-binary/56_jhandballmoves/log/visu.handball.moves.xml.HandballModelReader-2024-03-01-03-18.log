* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: visu.handball.moves.xml.HandballModelReader
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/56_jhandballmoves/evosuite-files/evosuite.properties
* Connecting to master process on port 8458
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 03:18:46.507 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 03:18:46.509 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 03:18:46.510 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 03:18:46.541 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 03:18:46.545 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 03:18:46.546 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class visu.handball.moves.xml.HandballModelReader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 206
* Using seed 1709263124771
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 85 / 206
[Progress:>                             1%] [Cov:================>                  48%][Progress:>                             1%] [Cov:=================>                 51%][Progress:>                             2%] [Cov:=================>                 51%][Progress:>                             2%] [Cov:=================>                 51%][Progress:>                             3%] [Cov:=================>                 51%][Progress:>                             3%] [Cov:=================>                 51%][Progress:==>                           9%] [Cov:=================>                 51%][Progress:==>                           9%] [Cov:==================>                52%][Progress:==>                           9%] [Cov:==================>                52%][Progress:===>                          10%] [Cov:==================>                52%][Progress:===>                          10%] [Cov:==================>                52%][Progress:====>                         15%] [Cov:==================>                52%][Progress:======>                       20%] [Cov:==================>                52%][Progress:======>                       20%] [Cov:==================>                52%][Progress:======>                       21%] [Cov:==================>                52%][Progress:======>                       21%] [Cov:==================>                52%][Progress:======>                       21%] [Cov:==================>                52%][Progress:======>                       21%] [Cov:==================>                52%][Progress:======>                       21%] [Cov:==================>                52%][Progress:======>                       21%] [Cov:==================>                52%][Progress:======>                       22%] [Cov:==================>                52%][Progress:======>                       22%] [Cov:==================>                52%][Progress:======>                       22%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     27%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     28%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:=========>                    30%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:=============>                46%] [Cov:==================>                52%][Progress:=============>                46%] [Cov:==================>                52%][Progress:=============>                46%] [Cov:==================>                52%][Progress:=============>                46%] [Cov:==================>                52%][Progress:===============>              51%] [Cov:==================>                52%][Progress:================>             56%] [Cov:==================>                52%][Progress:=================>            57%] [Cov:==================>                52%][Progress:=================>            57%] [Cov:==================>                52%][Progress:==================>           62%] [Cov:==================>                52%][Progress:==================>           62%] [Cov:==================>                52%][Progress:==================>           62%] [Cov:==================>                52%][Progress:==================>           62%] [Cov:==================>                52%][Progress:==================>           63%] [Cov:==================>                52%][Progress:==================>           63%] [Cov:==================>                52%][Progress:====================>         68%] [Cov:==================>                52%][Progress:=====================>        73%] [Cov:==================>                52%][Progress:=====================>        73%] [Cov:==================>                52%][Progress:=====================>        73%] [Cov:==================>                52%][Progress:======================>       74%] [Cov:==================>                52%][Progress:======================>       74%] [Cov:==================>                52%][Progress:======================>       74%] [Cov:==================>                52%][Progress:======================>       74%] [Cov:==================>                52%][Progress:======================>       74%] [Cov:==================>                52%][Progress:======================>       74%] [Cov:==================>                52%][Progress:======================>       74%] [Cov:==================>                52%][Progress:======================>       74%] [Cov:==================>                52%][Progress:======================>       75%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:=========================>    85%] [Cov:==================>                52%][Progress:===========================>  90%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:===========================>  91%] [Cov:==================>                52%][Progress:============================> 96%] [Cov:==================>                52%][Progress:============================> 96%] [Cov:==================>                52%][Progress:============================> 96%] [Cov:==================>                52%][Progress:=============================>97%] [Cov:==================>                52%][Progress:=============================>97%] [Cov:==================>                52%][Progress:=============================>97%] [Cov:==================>                52%][Progress:=============================>97%] [Cov:==================>                52%][Progress:==============================100%] [Cov:==================>                52%]
* Search finished after 103s and 83 generations, 18582 statements, best individual has fitness: 121.0
* Generated before the refinement 12 tests with total length 44
statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null)
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
statement is: readFromXml()Lvisu/handball/moves/model/HandballModel; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.model.HandballModel
statement code is: HandballModel readFromXml = handballModelReader.readFromXml()
test data is: MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader instance = HandballModelReader.getInstance((File) createTempFile);
instance.readFromXml();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HandballModelReader instance = HandballModelReader.getInstance(((File) (createTempFile)));
        instance.readFromXml();
    }
}
statement is: HandballModelReader instance = HandballModelReader.getInstance(((File) (createTempFile))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (createTempFile))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: instance.readFromXml(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.readFromXml() target is: instance method is: readFromXml()
source statement: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 1, type visu.handball.moves.xml.HandballModelReaderindex is: 1
Matched Method is: readFromXml()Lvisu/handball/moves/model/HandballModel;
TestCase is: MockFile mockFile = null;
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.readFromXml();

statement is: org.evosuite.testcase.statements.ArrayStatement@e5d259cf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.SequenceInputStream(Ljava/io/InputStream;Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg1, arg1)
statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0)
statement is: getInputStream()Ljava/io/InputStream; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream inputStream = (SequenceInputStream)handballModelReader.getInputStream()
test data is: byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) sequenceInputStream);
instance.getInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6 };// Replace with more descriptive and representative byte array values

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
        HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (sequenceInputStream)));
        instance.getInputStream();
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6 }// Replace with more descriptive and representative byte array values
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5, 6 } Elements: [1, 2, 3, 4, 5, 6]
lengths: [6] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.SequenceInputStream(Ljava/io/InputStream;Ljava/io/InputStream;)V
statement is: HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (sequenceInputStream))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((InputStream) (sequenceInputStream))) target is: HandballModelReader method is: getInstance(InputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: instance.getInputStream(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.getInputStream() target is: instance method is: getInputStream()
source statement: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 3, type visu.handball.moves.xml.HandballModelReaderindex is: 1
Matched Method is: getInputStream()Ljava/io/InputStream;
TestCase Could not be added: getInputStream()Ljava/io/InputStream;
TestCase is: SequenceInputStream sequenceInputStream = null;
HandballModelReader.getInstance((InputStream) sequenceInputStream);

statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null)
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
statement is: getInputFile()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile inputFile = (MockFile)handballModelReader.getInputFile()
test data is: MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader instance = HandballModelReader.getInstance((File) createTempFile);
instance.getInputFile();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        MockFile createTempFile = ((MockFile) (MockFile.createTempFile("example_data.xml", "<root><child>Hello world!</child></root>", ((File) (null)))));
        HandballModelReader instance = HandballModelReader.getInstance(((File) (createTempFile)));
        instance.getInputFile();
    }
}
statement is: // Improved test data:
MockFile createTempFile = ((MockFile) (MockFile.createTempFile("example_data.xml", "<root><child>Hello world!</child></root>", ((File) (null))))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((MockFile) (MockFile.createTempFile("example_data.xml", "<root><child>Hello world!</child></root>", ((File) (null))))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: HandballModelReader instance = HandballModelReader.getInstance(((File) (createTempFile))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (createTempFile))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: instance.getInputFile(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.getInputFile() target is: instance method is: getInputFile()
source statement: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 1, type visu.handball.moves.xml.HandballModelReaderindex is: 4
Matched Method is: getInputFile()Ljava/io/File;
TestCase is: String string = "example_data.xml";
String string = "<root><child>Hello world!</child></root>";
File file = null;
MockFile createTempFile = (MockFile)MockFile.createTempFile(string, string, file);
HandballModelReader.getInstance((File) createTempFile);
((HandballModelReader) string).getInputFile();

statement is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null)
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
test data is: MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader.getInstance((File) createTempFile);
HandballModelReader.getInstance((File) createTempFile);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile createTempFile = ((MockFile) (MockFile.createTempFile("tempFile", "txt", ((File) (null)))));
        HandballModelReader.getInstance(((File) (createTempFile)));
        HandballModelReader.getInstance(((File) (createTempFile)));
    }
}
statement is: MockFile createTempFile = ((MockFile) (MockFile.createTempFile("tempFile", "txt", ((File) (null))))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((MockFile) (MockFile.createTempFile("tempFile", "txt", ((File) (null))))) target is: MockFile method is: createTempFile(java.lang.String,java.lang.String,File)
Matched Method is: createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;
i 2 Parameters size() 2 Num of Method Parameters: 3
statement is: HandballModelReader.getInstance(((File) (createTempFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (createTempFile))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: HandballModelReader.getInstance(((File) (createTempFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (createTempFile))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
TestCase is: String string = "tempFile";
String string = "txt";
File file = null;
MockFile createTempFile = (MockFile)MockFile.createTempFile(string, string, file);
HandballModelReader.getInstance((File) createTempFile);
HandballModelReader.getInstance((File) createTempFile);

statement is: org.evosuite.testcase.statements.ArrayStatement@dc98fd7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: java.io.SequenceInputStream(Ljava/io/InputStream;Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg1, arg1)
statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0)
statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0)
test data is: byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
HandballModelReader.getInstance((InputStream) sequenceInputStream);
HandballModelReader.getInstance((InputStream) byteArrayInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6 };// Improved test data: a more descriptive and representative byte array.

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
        HandballModelReader.getInstance(((InputStream) (sequenceInputStream)));
        HandballModelReader.getInstance(((InputStream) (byteArrayInputStream)));
    }
}
statement is: byte[] byteArray = new byte[]{ 1, 2, 3, 4, 5, 6 }// Improved test data: a more descriptive and representative byte array.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[]{ 1, 2, 3, 4, 5, 6 } Elements: [1, 2, 3, 4, 5, 6]
lengths: [6] []
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.ByteArrayInputStream([B)V
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.SequenceInputStream(Ljava/io/InputStream;Ljava/io/InputStream;)V
statement is: HandballModelReader.getInstance(((InputStream) (sequenceInputStream))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((InputStream) (sequenceInputStream))) target is: HandballModelReader method is: getInstance(InputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: HandballModelReader.getInstance(((InputStream) (byteArrayInputStream))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((InputStream) (byteArrayInputStream))) target is: HandballModelReader method is: getInstance(InputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: SequenceInputStream sequenceInputStream = null;
HandballModelReader.getInstance((InputStream) sequenceInputStream);
SequenceInputStream sequenceInputStream = null;
HandballModelReader.getInstance((InputStream) sequenceInputStream);

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0)
statement is: readFromXml()Lvisu/handball/moves/model/HandballModel; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.model.HandballModel
statement code is: HandballModel readFromXml = handballModelReader.readFromXml()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
instance.readFromXml();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream(new ByteArrayInputStream("<?xml version=\"1.0\" encoding=\"UTF-8\"?><handballModel><team name=\"Team A\"><player id=\"123456789\"><name>John Doe</name><number>15</number></player><player id=\"987654321\"><name>Jane Doe</name><number>20</number></player></team><team name=\"Team B\"><player id=\"10123456789\"><name>John Smith</name><number>10</number></player><player id=\"9987654321\"><name>Jane Smith</name><number>15</number></player></team></handballModel>".getBytes("UTF-8")));
        HandballModelReader instance = HandballModelReader.getInstance(pipedInputStream);
        instance.readFromXml();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(new ByteArrayInputStream("<?xml version=\"1.0\" encoding=\"UTF-8\"?><handballModel><team name=\"Team A\"><player id=\"123456789\"><name>John Doe</name><number>15</number></player><player id=\"987654321\"><name>Jane Doe</name><number>20</number></player></team><team name=\"Team B\"><player id=\"10123456789\"><name>John Smith</name><number>10</number></player><player id=\"9987654321\"><name>Jane Smith</name><number>15</number></player></team></handballModel>".getBytes("UTF-8"))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader instance = HandballModelReader.getInstance(pipedInputStream), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(pipedInputStream) target is: HandballModelReader method is: getInstance(PipedInputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: instance.readFromXml(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.readFromXml() target is: instance method is: readFromXml()
source statement: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 1, type visu.handball.moves.xml.HandballModelReaderindex is: 1
Matched Method is: readFromXml()Lvisu/handball/moves/model/HandballModel;
TestCase is: PipedInputStream pipedInputStream = null;
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
instance.readFromXml();

statement is: mock(java.util.Enumeration<java.io.DataInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.DataInputStream>
statement code is: Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0, 1)
statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0)
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handballModelReader.setInputStream(arg0)
test data is: Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) bufferedInputStream);
instance.setInputStream(sequenceInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<DataInputStream> enumeration = ((Enumeration<DataInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer())));
        doReturn(true).when(enumeration).hasMoreElements();
        doReturn(new DataInputStream("A sample string.")).when(enumeration).nextElement();
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1);
        HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (bufferedInputStream)));
        instance.setInputStream(sequenceInputStream);
    }
}
statement is: Enumeration<DataInputStream> enumeration = ((Enumeration<DataInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Enumeration<DataInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Enumeration argument is: Enumeration.class
Matched Method is: mock(java.util.Enumeration<java.io.DataInputStream>)
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: doReturn(true).when(enumeration).hasMoreElements(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(true).when(enumeration).hasMoreElements() target is: doReturn(true).when(enumeration) method is: hasMoreElements()
statement is: doReturn(new DataInputStream("A sample string.")).when(enumeration).nextElement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(new DataInputStream("A sample string.")).when(enumeration).nextElement() target is: doReturn(new DataInputStream("A sample string.")).when(enumeration) method is: nextElement()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (bufferedInputStream))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((InputStream) (bufferedInputStream))) target is: HandballModelReader method is: getInstance(InputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: instance.setInputStream(sequenceInputStream), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.setInputStream(sequenceInputStream) target is: instance method is: setInputStream(SequenceInputStream)
source statement: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 3, type visu.handball.moves.xml.HandballModelReaderindex is: 5
Matched Method is: setInputStream(Ljava/io/InputStream;)V
TestCase is: boolean _boolean = null;
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(_boolean).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
int _int = 1;
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, _int);
HandballModelReader.getInstance((InputStream) bufferedInputStream);
((HandballModelReader) _int).setInputStream(sequenceInputStream);

statement is: mock(java.util.Enumeration<java.io.DataInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.DataInputStream>
statement code is: Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: java.io.BufferedInputStream(Ljava/io/InputStream;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.BufferedInputStream
statement code is: BufferedInputStream bufferedInputStream = new BufferedInputStream(arg0, 1)
statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0)
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("", "")
statement is: setInputFile(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handballModelReader.setInputFile(arg0)
test data is: Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) bufferedInputStream);
MockFile mockFile = new MockFile("", "");
instance.setInputFile(mockFile);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<DataInputStream> enumeration = ((Enumeration<DataInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer())));
        doReturn(false).when(enumeration).hasMoreElements();
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1024);
        HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (bufferedInputStream)));
        MockFile mockFile = new MockFile("input_file", "This is a test input file with some sample data");
        instance.setInputFile(mockFile);
        String expectedOutput = "This is the expected output from the method";
    }
}
statement is: Enumeration<DataInputStream> enumeration = ((Enumeration<DataInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Enumeration<DataInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Enumeration argument is: Enumeration.class
Matched Method is: mock(java.util.Enumeration<java.io.DataInputStream>)
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: doReturn(false).when(enumeration).hasMoreElements(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(false).when(enumeration).hasMoreElements() target is: doReturn(false).when(enumeration) method is: hasMoreElements()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1024), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (bufferedInputStream))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((InputStream) (bufferedInputStream))) target is: HandballModelReader method is: getInstance(InputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: MockFile mockFile = new MockFile("input_file", "This is a test input file with some sample data"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: instance.setInputFile(mockFile), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.setInputFile(mockFile) target is: instance method is: setInputFile(MockFile)
source statement: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 3, type visu.handball.moves.xml.HandballModelReaderindex is: 5
Matched Method is: setInputFile(Ljava/io/File;)V
statement is: String expectedOutput = "This is the expected output from the method", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "This is the expected output from the method"
TestCase is: boolean _boolean = null;
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(_boolean).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
int _int = 1024;
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, _int);
HandballModelReader.getInstance((InputStream) bufferedInputStream);
String string = "input_file";
String string = "This is a test input file with some sample data";
MockFile mockFile = new MockFile(string, string);
((HandballModelReader) _int).setInputFile(mockFile);
String string = "This is the expected output from the method";

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("", "true")
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
statement is: getInputFile()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile inputFile = (MockFile)handballModelReader.getInputFile()
test data is: MockFile mockFile = new MockFile("", "true");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("C:\\Users\\John Doe\\Desktop\\example.txt", "true");
        HandballModelReader instance = HandballModelReader.getInstance(((File) (mockFile)));
        instance.getInputFile();
    }
}
statement is: MockFile mockFile = new MockFile("C:\\Users\\John Doe\\Desktop\\example.txt", "true"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader instance = HandballModelReader.getInstance(((File) (mockFile))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (mockFile))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: instance.getInputFile(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.getInputFile() target is: instance method is: getInputFile()
source statement: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 1, type visu.handball.moves.xml.HandballModelReaderindex is: 3
Matched Method is: getInputFile()Ljava/io/File;
TestCase is: String string = "C:\\Users\\John Doe\\Desktop\\example.txt";
String string = "true";
MockFile mockFile = new MockFile(string, string);
HandballModelReader.getInstance((File) mockFile);
((HandballModelReader) string).getInputFile();

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("")
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
statement is: getInputFile()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile inputFile = (MockFile)handballModelReader.getInputFile()
test data is: MockFile mockFile = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("C:\\Users\\user\\Desktop\\handball_model.csv");// A file with the name "handball_model.csv" located on the desktop of a user

        HandballModelReader instance = HandballModelReader.getInstance(((File) (mockFile)));// An instance of the HandballModelReader class, initialized with the file object from the previous line

        File expectedOutput = new File("C:\\Users\\user\\Desktop\\output.csv");// A file with the name "output.csv" located on the desktop of a user

        assertEquals(expectedOutput, instance.getInputFile());// An assertion that compares the output of the getInputFile() method to the expected output }}

    }
}
statement is: MockFile mockFile = new MockFile("C:\\Users\\user\\Desktop\\handball_model.csv")// A file with the name "handball_model.csv" located on the desktop of a user
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader instance = HandballModelReader.getInstance(((File) (mockFile)))// An instance of the HandballModelReader class, initialized with the file object from the previous line
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (mockFile))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: File expectedOutput = new File("C:\\Users\\user\\Desktop\\output.csv")// A file with the name "output.csv" located on the desktop of a user
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(expectedOutput, instance.getInputFile())// An assertion that compares the output of the getInputFile() method to the expected output }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedOutput, instance.getInputFile())// An assertion that compares the output of the getInputFile() method to the expected output }}
 target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: String string = "C:\\Users\\user\\Desktop\\handball_model.csv";
MockFile mockFile = new MockFile(string);
HandballModelReader.getInstance((File) mockFile);

statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) null)
statement is: getInputFile()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.File
statement code is: File inputFile = handballModelReader.getInputFile()
test data is: HandballModelReader instance = HandballModelReader.getInstance((File) null);
instance.getInputFile();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HandballModelReader instance = HandballModelReader.getInstance(new File("path/to/input/file"));
        assertEquals(new File("path/to/expected/output"), instance.getOutputFile());
    }
}
statement is: HandballModelReader instance = HandballModelReader.getInstance(new File("path/to/input/file")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(new File("path/to/input/file")) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: assertEquals(new File("path/to/expected/output"), instance.getOutputFile()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(new File("path/to/expected/output"), instance.getOutputFile()) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: File file = null;
HandballModelReader.getInstance(file);

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("|4u*@z'W6GWrz,zz")
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
statement is: getInputStream()Ljava/io/InputStream; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.InputStream
statement code is: InputStream inputStream = handballModelReader.getInputStream()
test data is: MockFile mockFile = new MockFile("|4u*@z'W6GWrz,zz");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile handballGameDataFile = new MockFile("handball_game_data.txt");
        HandballModelReader handballModelReaderInstance = HandballModelReader.getInstance(handballGameDataFile);
        InputStream gameDataStream = handballModelReaderInstance.readGameDataFromFile();
    }
}
statement is: MockFile handballGameDataFile = new MockFile("handball_game_data.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader handballModelReaderInstance = HandballModelReader.getInstance(handballGameDataFile), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(handballGameDataFile) target is: HandballModelReader method is: getInstance(MockFile)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: InputStream gameDataStream = handballModelReaderInstance.readGameDataFromFile(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: handballModelReaderInstance.readGameDataFromFile() target is: handballModelReaderInstance method is: readGameDataFromFile()
TestCase is: String string = "handball_game_data.txt";
MockFile mockFile = new MockFile(string);
HandballModelReader.getInstance((File) mockFile);

* test suite isTestSuite: 24
Test 0: 
MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader instance = HandballModelReader.getInstance((File) createTempFile);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 1: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) sequenceInputStream);
instance.getInputStream();
Test 2: 
MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader instance = HandballModelReader.getInstance((File) createTempFile);
instance.getInputFile();
Test 3: 
MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader.getInstance((File) createTempFile);
HandballModelReader.getInstance((File) createTempFile);
Test 4: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
HandballModelReader.getInstance((InputStream) sequenceInputStream);
HandballModelReader.getInstance((InputStream) byteArrayInputStream);
Test 5: 
PipedInputStream pipedInputStream = new PipedInputStream();
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 6: 
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) bufferedInputStream);
instance.setInputStream(sequenceInputStream);
Test 7: 
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) bufferedInputStream);
MockFile mockFile = new MockFile("", "");
instance.setInputFile(mockFile);
Test 8: 
MockFile mockFile = new MockFile("", "true");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 9: 
MockFile mockFile = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 10: 
HandballModelReader instance = HandballModelReader.getInstance((File) null);
instance.getInputFile();
Test 11: 
MockFile mockFile = new MockFile("|4u*@z'W6GWrz,zz");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputStream();
Test 12: 
HandballModelReader instance = HandballModelReader.getInstance((File) null);
instance.readFromXml();

Test 13: 
HandballModelReader.getInstance((InputStream) null);

Test 14: 
MockFile createTempFile = (MockFile)MockFile.createTempFile("example_data.xml", "<root><child>Hello world!</child></root>", (File) null);
HandballModelReader.getInstance((File) createTempFile);
((HandballModelReader)"<root><child>Hello world!</child></root>").getInputFile();

Test 15: 
MockFile createTempFile = (MockFile)MockFile.createTempFile("tempFile", "txt", (File) null);
HandballModelReader.getInstance((File) createTempFile);
HandballModelReader.getInstance((File) createTempFile);

Test 16: 
HandballModelReader.getInstance((InputStream) null);
HandballModelReader.getInstance((InputStream) null);

Test 17: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.readFromXml();

Test 18: 
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
int _int = 1;
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, _int);
HandballModelReader.getInstance((InputStream) bufferedInputStream);
((HandballModelReader) _int).setInputStream(sequenceInputStream);

Test 19: 
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
int _int = 1024;
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, _int);
HandballModelReader.getInstance((InputStream) bufferedInputStream);
String string = "input_file";
String string = "This is a test input file with some sample data";
MockFile mockFile = new MockFile(string, string);
((HandballModelReader) _int).setInputFile(mockFile);

Test 20: 
MockFile mockFile = new MockFile("C:UsersJohn DoeDesktopexample.txt", "true");
HandballModelReader.getInstance((File) mockFile);
((HandballModelReader)"true").getInputFile();

Test 21: 
String string = "C:\\Users\\user\\Desktop\\handball_model.csv";
MockFile mockFile = new MockFile(string);
HandballModelReader.getInstance((File) mockFile);

Test 22: 
HandballModelReader.getInstance((File) null);

Test 23: 
MockFile mockFile = new MockFile("handball_game_data.txt");
HandballModelReader.getInstance((File) mockFile);


* Generated after the refinement and before minimization 24 tests with total length 81
* test suite isTestSuite: 24
Test 0: 
MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader instance = HandballModelReader.getInstance((File) createTempFile);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 1: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) sequenceInputStream);
instance.getInputStream();
Test 2: 
MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader instance = HandballModelReader.getInstance((File) createTempFile);
instance.getInputFile();
Test 3: 
MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader.getInstance((File) createTempFile);
HandballModelReader.getInstance((File) createTempFile);
Test 4: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
HandballModelReader.getInstance((InputStream) sequenceInputStream);
HandballModelReader.getInstance((InputStream) byteArrayInputStream);
Test 5: 
PipedInputStream pipedInputStream = new PipedInputStream();
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 6: 
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) bufferedInputStream);
instance.setInputStream(sequenceInputStream);
Test 7: 
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) bufferedInputStream);
MockFile mockFile = new MockFile("", "");
instance.setInputFile(mockFile);
Test 8: 
MockFile mockFile = new MockFile("", "true");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 9: 
MockFile mockFile = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 10: 
HandballModelReader instance = HandballModelReader.getInstance((File) null);
instance.getInputFile();
Test 11: 
MockFile mockFile = new MockFile("|4u*@z'W6GWrz,zz");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputStream();
Test 12: 
HandballModelReader instance = HandballModelReader.getInstance((File) null);
instance.readFromXml();

Test 13: 
HandballModelReader.getInstance((InputStream) null);

Test 14: 
MockFile createTempFile = (MockFile)MockFile.createTempFile("example_data.xml", "<root><child>Hello world!</child></root>", (File) null);
HandballModelReader.getInstance((File) createTempFile);
((HandballModelReader)"<root><child>Hello world!</child></root>").getInputFile();

Test 15: 
MockFile createTempFile = (MockFile)MockFile.createTempFile("tempFile", "txt", (File) null);
HandballModelReader.getInstance((File) createTempFile);
HandballModelReader.getInstance((File) createTempFile);

Test 16: 
HandballModelReader.getInstance((InputStream) null);
HandballModelReader.getInstance((InputStream) null);

Test 17: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.readFromXml();

Test 18: 
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
int _int = 1;
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, _int);
HandballModelReader.getInstance((InputStream) bufferedInputStream);
((HandballModelReader) _int).setInputStream(sequenceInputStream);

Test 19: 
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
int _int = 1024;
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, _int);
HandballModelReader.getInstance((InputStream) bufferedInputStream);
String string = "input_file";
String string = "This is a test input file with some sample data";
MockFile mockFile = new MockFile(string, string);
((HandballModelReader) _int).setInputFile(mockFile);

Test 20: 
MockFile mockFile = new MockFile("C:UsersJohn DoeDesktopexample.txt", "true");
HandballModelReader.getInstance((File) mockFile);
((HandballModelReader)"true").getInputFile();

Test 21: 
String string = "C:\\Users\\user\\Desktop\\handball_model.csv";
MockFile mockFile = new MockFile(string);
HandballModelReader.getInstance((File) mockFile);

Test 22: 
HandballModelReader.getInstance((File) null);

Test 23: 
MockFile mockFile = new MockFile("handball_game_data.txt");
HandballModelReader.getInstance((File) mockFile);


* Minimizing test suite
* test suite isTestSuite: 12
Test 0: 
HandballModelReader instance = HandballModelReader.getInstance((File) null);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 1: 
MockFile mockFile = new MockFile("|4u*@z'W6GWrz,zz");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputStream();
Test 2: 
HandballModelReader instance = HandballModelReader.getInstance((File) null);
instance.getInputFile();
Test 3: 
MockFile createTempFile = (MockFile)MockFile.createTempFile("tempFile", "txt", (File) null);
HandballModelReader.getInstance((File) createTempFile);
HandballModelReader.getInstance((File) createTempFile);
Test 4: 
HandballModelReader.getInstance((InputStream) null);
HandballModelReader.getInstance((InputStream) null);
Test 5: 
PipedInputStream pipedInputStream = new PipedInputStream();
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 6: 
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) bufferedInputStream);
instance.setInputStream(sequenceInputStream);
Test 7: 
Enumeration<DataInputStream> enumeration = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
BufferedInputStream bufferedInputStream = new BufferedInputStream(sequenceInputStream, 1);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) bufferedInputStream);
MockFile mockFile = new MockFile("", "");
instance.setInputFile(mockFile);
Test 8: 
MockFile mockFile = new MockFile("", "true");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 9: 
MockFile createTempFile = (MockFile)MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader instance = HandballModelReader.getInstance((File) createTempFile);
instance.getInputFile();
Test 10: 
MockFile mockFile = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 11: 
byte[] byteArray = new byte[6];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
SequenceInputStream sequenceInputStream = new SequenceInputStream(byteArrayInputStream, byteArrayInputStream);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) sequenceInputStream);
instance.getInputStream();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 35%
* Total number of goals: 31
* Number of covered goals: 11
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 31%
* Total number of goals: 93
* Number of covered goals: 29
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 61%
* Total number of goals: 44
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 35%
* Total number of goals: 31
* Number of covered goals: 11
* Generated 12 tests with total length 40
* Resulting test suite's coverage: 53% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HandballModelReader instance = HandballModelReader.getInstance((File) null);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}


** It was a parseable test case! 
refined test name is: testReadFromXmlthrowsExceptionWithNullFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg0 = new MockFile("|4u*@z'W6GWrz,zz");
HandballModelReader instance = HandballModelReader.getInstance((File) arg0);
InputStream inputStream = instance.getInputStream();
assertNull(inputStream);


** It was a parseable test case! 
refined test name is: testGetInputStreamWithInvalidFileData
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HandballModelReader instance = HandballModelReader.getInstance((File) null);
File inputFile = instance.getInputFile();
assertNull(inputFile);


** It was a parseable test case! 
refined test name is: testGetInputFileReturnsNullWhenNoInputFileProvided
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: PipedInputStream arg0 = new PipedInputStream();
HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}


** It was a parseable test case! 
refined test name is: testReadFromXmlWithoutDisplay
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg0 = new MockFile("", "true");
HandballModelReader instance = HandballModelReader.getInstance((File) arg0);
File inputFile = instance.getInputFile();
assertEquals(0L, inputFile.length());


** It was a parseable test case! 
refined test name is: testGetInstanceWithValidFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: File arg0 = MockFile.createTempFile(".( N3%3'w5f3u", "c`Dk66#l}GXbF", (File) null);
HandballModelReader instance = HandballModelReader.getInstance(arg0);
File inputFile = instance.getInputFile();
assertEquals(0L, inputFile.getUsableSpace());


** It was a parseable test case! 
refined test name is: testGetEmptyInputFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg0 = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) arg0);
File inputFile = instance.getInputFile();
assertFalse(inputFile.isAbsolute());


** It was a parseable test case! 
refined test name is: testRelativeInputFilePathIsNotAbsolute
* Compiling Tests
refined test name is: testReadRelativeInputFileIsNotAbsolute
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:22:04.152 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2291623711341603429.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:22:04.177 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2291623711341603429.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:22:04.250 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2291623711341603429.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:22:04.252 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2291623711341603429.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:22:04.319 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2291623711341603429.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:22:04.320 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2291623711341603429.jar
[MASTER] 03:22:04.401 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2291623711341603429.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:22:04.406 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2291623711341603429.jar
[MASTER] 03:22:04.567 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2291623711341603429.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 03:22:04.572 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2291623711341603429.jar
[MASTER] 03:22:04.719 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2291623711341603429.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:22:04.721 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2291623711341603429.jar
[MASTER] 03:22:04.793 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2291623711341603429.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:22:04.795 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2291623711341603429.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 6 called: 0 to improve: false
[MASTER] 03:22:05.057 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2291623711341603429.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:22:05.059 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2291623711341603429.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 03:22:05.497 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/tmp/EvoSuite_pathingJar2291623711341603429.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 03:22:05.503 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2291623711341603429.jar
* Writing tests to file
* Writing JUnit test case 'HandballModelReader_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
* Done!

* Computation finished
