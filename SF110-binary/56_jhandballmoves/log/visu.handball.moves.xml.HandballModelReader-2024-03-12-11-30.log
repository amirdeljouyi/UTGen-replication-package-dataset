* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: visu.handball.moves.xml.HandballModelReader
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/56_jhandballmoves/evosuite-files/evosuite.properties
* Connecting to master process on port 19345
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 11:31:03.737 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 11:31:03.743 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 11:31:03.744 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 11:31:03.791 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 11:31:03.796 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 11:31:03.798 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class visu.handball.moves.xml.HandballModelReader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 206
* Using seed 1710243061058
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 85 / 206
[Progress:===>                          10%] [Cov:==============>                    42%][Progress:=====>                        17%] [Cov:================>                  48%][Progress:======>                       20%] [Cov:==================>                52%][Progress:======>                       20%] [Cov:==================>                52%][Progress:======>                       20%] [Cov:==================>                52%][Progress:======>                       20%] [Cov:==================>                52%][Progress:======>                       20%] [Cov:==================>                52%][Progress:======>                       21%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:=======>                      26%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:========>                     29%] [Cov:==================>                52%][Progress:==========>                   34%] [Cov:==================>                52%][Progress:==========>                   36%] [Cov:==================>                52%][Progress:==========>                   36%] [Cov:==================>                52%][Progress:===========>                  38%] [Cov:==================>                52%][Progress:===========>                  38%] [Cov:==================>                52%][Progress:===========>                  38%] [Cov:==================>                52%][Progress:===========>                  39%] [Cov:==================>                52%][Progress:===========>                  39%] [Cov:==================>                52%][Progress:===========>                  39%] [Cov:==================>                52%][Progress:===========>                  39%] [Cov:==================>                52%][Progress:============>                 40%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:============>                 41%] [Cov:==================>                52%][Progress:=============>                44%] [Cov:==================>                52%][Progress:=============>                44%] [Cov:==================>                52%][Progress:=============>                46%] [Cov:==================>                52%][Progress:=============>                46%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               47%] [Cov:==================>                52%][Progress:==============>               48%] [Cov:==================>                52%][Progress:===============>              50%] [Cov:==================>                52%][Progress:===============>              50%] [Cov:==================>                52%][Progress:===============>              50%] [Cov:==================>                52%][Progress:===============>              50%] [Cov:==================>                52%][Progress:===============>              50%] [Cov:==================>                52%][Progress:===============>              51%] [Cov:==================>                52%][Progress:===============>              51%] [Cov:==================>                52%][Progress:===============>              51%] [Cov:==================>                52%][Progress:===============>              53%] [Cov:==================>                52%][Progress:===============>              53%] [Cov:==================>                52%][Progress:================>             54%] [Cov:==================>                52%][Progress:================>             56%] [Cov:==================>                52%][Progress:================>             56%] [Cov:==================>                52%][Progress:=================>            59%] [Cov:==================>                52%][Progress:=================>            59%] [Cov:==================>                52%][Progress:==================>           62%] [Cov:==================>                52%][Progress:===================>          64%] [Cov:==================>                52%][Progress:===================>          64%] [Cov:==================>                52%][Progress:===================>          64%] [Cov:==================>                52%][Progress:===================>          64%] [Cov:==================>                52%][Progress:===================>          64%] [Cov:==================>                52%][Progress:===================>          64%] [Cov:==================>                52%][Progress:====================>         67%] [Cov:==================>                52%][Progress:====================>         67%] [Cov:==================>                52%][Progress:====================>         67%] [Cov:==================>                52%][Progress:====================>         67%] [Cov:==================>                52%][Progress:=====================>        70%] [Cov:==================>                52%][Progress:=====================>        73%] [Cov:==================>                52%][Progress:=====================>        73%] [Cov:==================>                52%][Progress:======================>       75%] [Cov:==================>                52%][Progress:=======================>      77%] [Cov:==================>                52%][Progress:=======================>      79%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     80%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:========================>     83%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:=========================>    86%] [Cov:==================>                52%][Progress:==========================>   87%] [Cov:==================>                52%][Progress:==========================>   87%] [Cov:==================>                52%][Progress:==========================>   87%] [Cov:==================>                52%][Progress:==========================>   87%] [Cov:==================>                52%][Progress:==========================>   87%] [Cov:==================>                52%][Progress:==========================>   87%] [Cov:==================>                52%][Progress:==========================>   87%] [Cov:==================>                52%][Progress:==========================>   89%] [Cov:==================>                52%][Progress:==========================>   89%] [Cov:==================>                52%][Progress:===========================>  92%] [Cov:==================>                52%][Progress:===========================>  92%] [Cov:==================>                52%][Progress:===========================>  92%] [Cov:==================>                52%][Progress:============================> 95%] [Cov:==================>                52%][Progress:============================> 95%] [Cov:==================>                52%][Progress:============================> 95%] [Cov:==================>                52%][Progress:============================> 95%] [Cov:==================>                52%][Progress:============================> 95%] [Cov:==================>                52%][Progress:=============================>98%] [Cov:==================>                52%][Progress:=============================>98%] [Cov:==================>                52%][Progress:==============================100%] [Cov:==================>                52%]
* Search finished after 201s and 130 generations, 27763 statements, best individual has fitness: 122.0
* Generated before the refinement 10 tests with total length 31
statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null)
statement is: readFromXml()Lvisu/handball/moves/model/HandballModel; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.model.HandballModel
statement code is: HandballModel readFromXml = handballModelReader.readFromXml()
test data is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.readFromXml();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HandballModelReader instance = HandballModelReader.getInstance(new ByteArrayInputStream("<handball-model><team name=\"Team 1\"><player name=\"Player 1\"/></team><team name=\"Team 2\"><player name=\"Player 2\"/></team></handball-model>".getBytes()));
        instance.readFromXml();
    }
}
statement is: HandballModelReader instance = HandballModelReader.getInstance(new ByteArrayInputStream("<handball-model><team name=\"Team 1\"><player name=\"Player 1\"/></team><team name=\"Team 2\"><player name=\"Player 2\"/></team></handball-model>".getBytes())), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(new ByteArrayInputStream("<handball-model><team name=\"Team 1\"><player name=\"Player 1\"/></team><team name=\"Team 2\"><player name=\"Player 2\"/></team></handball-model>".getBytes())) target is: HandballModelReader method is: getInstance(ByteArrayInputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: instance.readFromXml(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.readFromXml() target is: instance method is: readFromXml()
source statement: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 0, type visu.handball.moves.xml.HandballModelReaderindex is: 1
Matched Method is: readFromXml()Lvisu/handball/moves/model/HandballModel;
TestCase is: InputStream inputStream = null;
HandballModelReader.getInstance(inputStream);
((HandballModelReader) inputStream).readFromXml();

statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null)
statement is: getInputStream()Ljava/io/InputStream; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.InputStream
statement code is: InputStream inputStream = handballModelReader.getInputStream()
test data is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.getInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HandballModelReader instance = HandballModelReader.getInstance(new FileInputStream("path/to/input/stream"));
        instance.getInputStream();
    }
}
statement is: HandballModelReader instance = HandballModelReader.getInstance(new FileInputStream("path/to/input/stream")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(new FileInputStream("path/to/input/stream")) target is: HandballModelReader method is: getInstance(FileInputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: instance.getInputStream(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.getInputStream() target is: instance method is: getInputStream()
source statement: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 0, type visu.handball.moves.xml.HandballModelReaderindex is: 1
Matched Method is: getInputStream()Ljava/io/InputStream;
TestCase is: InputStream inputStream = null;
HandballModelReader.getInstance(inputStream);
((HandballModelReader) inputStream).getInputStream();

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen")
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
statement is: getInputFile()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile inputFile = (MockFile)handballModelReader.getInputFile()
test data is: MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
        HandballModelReader instance = HandballModelReader.getInstance(((File) (mockFile)));
        instance.getInputFile();
    }
}
statement is: MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader instance = HandballModelReader.getInstance(((File) (mockFile))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (mockFile))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: instance.getInputFile(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.getInputFile() target is: instance method is: getInputFile()
source statement: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 1, type visu.handball.moves.xml.HandballModelReaderindex is: 3
Matched Method is: getInputFile()Ljava/io/File;
TestCase is: String string = "Laden fehlgeschlagen";
String string = "Laden fehlgeschlagen";
MockFile mockFile = new MockFile(string, string);
HandballModelReader.getInstance((File) mockFile);
((HandballModelReader) string).getInputFile();

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen")
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
test data is: MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader.getInstance((File) mockFile);
HandballModelReader.getInstance((File) mockFile);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("Fehlerhafter Laden", "Laden fehlgeschlagen");
        HandballModelReader.getInstance(((File) (mockFile)));
        MockFile mockFile2 = new MockFile("Datei nicht gefunden", "Unbekannter Fehler");
        HandballModelReader.getInstance(((File) (mockFile2)));
    }
}
statement is: MockFile mockFile = new MockFile("Fehlerhafter Laden", "Laden fehlgeschlagen"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader.getInstance(((File) (mockFile))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (mockFile))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: MockFile mockFile2 = new MockFile("Datei nicht gefunden", "Unbekannter Fehler"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader.getInstance(((File) (mockFile2))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (mockFile2))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
TestCase is: String string = "Fehlerhafter Laden";
String string = "Laden fehlgeschlagen";
MockFile mockFile = new MockFile(string, string);
HandballModelReader.getInstance((File) mockFile);
String string = "Datei nicht gefunden";
String string = "Unbekannter Fehler";
MockFile mockFile = new MockFile(string, string);
HandballModelReader.getInstance((File) mockFile);

statement is: org.evosuite.testcase.statements.ArrayStatement@dbbc3f4d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[5]
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen")
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0)
statement is: readFromXml()Lvisu/handball/moves/model/HandballModel; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.model.HandballModel
statement code is: HandballModel readFromXml = handballModelReader.readFromXml()
test data is: byte[] byteArray = new byte[5];
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
HandballModelReader.getInstance((InputStream) byteArrayInputStream);
instance.readFromXml();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] byteArray = new byte[5];
        MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
        HandballModelReader instance = HandballModelReader.getInstance(((File) (mockFile)));
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
        HandballModelReader.getInstance(((InputStream) (byteArrayInputStream)));
        instance.readFromXml();
    }
}
statement is: byte[] byteArray = new byte[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: byte[] byteArray = new byte[5] isAssignment: false Array: new byte[5] Elements: []
lengths: [5] [5]
Their type are: class [B byte[]
statement is: MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader instance = HandballModelReader.getInstance(((File) (mockFile))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (mockFile))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader.getInstance(((InputStream) (byteArrayInputStream))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((InputStream) (byteArrayInputStream))) target is: HandballModelReader method is: getInstance(InputStream)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: instance.readFromXml(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.readFromXml() target is: instance method is: readFromXml()
source statement: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 2, type visu.handball.moves.xml.HandballModelReaderindex is: 4
Matched Method is: readFromXml()Lvisu/handball/moves/model/HandballModel;
TestCase is: byte[] byteArray = new byte[5];
String string = "Laden fehlgeschlagen";
String string = "Laden fehlgeschlagen";
MockFile mockFile = new MockFile(string, string);
HandballModelReader.getInstance((File) mockFile);
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
HandballModelReader.getInstance((File) byteArrayInputStream);
((HandballModelReader) string).readFromXml();

statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null)
statement is: setInputStream(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handballModelReader.setInputStream((InputStream) null)
test data is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.setInputStream((InputStream) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        HandballModelReader instance = HandballModelReader.getInstance(new ByteArrayInputStream(new byte[]{ 1, 2, 3 }));
        instance.setInputStream(new ByteArrayInputStream(new byte[]{ 1, 2, 3 }));
    }
}
statement is: // Improved test data
HandballModelReader instance = HandballModelReader.getInstance(new ByteArrayInputStream(new byte[]{ 1, 2, 3 })), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(new ByteArrayInputStream(new byte[]{ 1, 2, 3 })) target is: HandballModelReader method is: getInstance(ByteArrayInputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: instance.setInputStream(new ByteArrayInputStream(new byte[]{ 1, 2, 3 })), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.setInputStream(new ByteArrayInputStream(new byte[]{ 1, 2, 3 })) target is: instance method is: setInputStream(ByteArrayInputStream)
source statement: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 0, type visu.handball.moves.xml.HandballModelReaderindex is: 1
Matched Method is: setInputStream(Ljava/io/InputStream;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: InputStream inputStream = null;
HandballModelReader.getInstance(inputStream);
InputStream inputStream = null;
((HandballModelReader) inputStream).setInputStream(inputStream);

statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null)
statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4")
statement is: setInputFile(Ljava/io/File;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: handballModelReader.setInputFile(arg0)
test data is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4");
instance.setInputFile(mockFile);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (null)));
        MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4");
        instance.setInputFile(mockFile);
    }
}
statement is: HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((InputStream) (null))) target is: HandballModelReader method is: getInstance(InputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: instance.setInputFile(mockFile), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.setInputFile(mockFile) target is: instance method is: setInputFile(MockFile)
source statement: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 0, type visu.handball.moves.xml.HandballModelReaderindex is: 1
Matched Method is: setInputFile(Ljava/io/File;)V
TestCase is: InputStream inputStream = null;
HandballModelReader.getInstance(inputStream);
String string = "19&M~_Icxd8\"s!f4";
MockFile mockFile = new MockFile(string);
((HandballModelReader) inputStream).setInputFile(mockFile);

statement is: org.evosuite.runtime.mock.java.io.MockFile(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile mockFile = new MockFile("")
statement is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((File) arg0)
statement is: getInputFile()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.evosuite.runtime.mock.java.io.MockFile
statement code is: MockFile inputFile = (MockFile)handballModelReader.getInputFile()
test data is: MockFile mockFile = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        MockFile mockFile = new MockFile("C:\\Users\\John Doe\\Documents\\HandballModelReaderTest.xml");
        HandballModelReader instance = HandballModelReader.getInstance(((File) (mockFile)));
        String actualInputFile = instance.getInputFile();
        String expectedInputFile = "C:\\Users\\John Doe\\Documents\\HandballModelReaderTest.xml";
        assertEquals(expectedInputFile, actualInputFile);
    }
}
statement is: MockFile mockFile = new MockFile("C:\\Users\\John Doe\\Documents\\HandballModelReaderTest.xml"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader instance = HandballModelReader.getInstance(((File) (mockFile))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((File) (mockFile))) target is: HandballModelReader method is: getInstance(File)
Matched Method is: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: String actualInputFile = instance.getInputFile(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.getInputFile() target is: instance method is: getInputFile()
source statement: getInstance(Ljava/io/File;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 1, type visu.handball.moves.xml.HandballModelReaderindex is: 2
Matched Method is: getInputFile()Ljava/io/File;
statement is: String expectedInputFile = "C:\\Users\\John Doe\\Documents\\HandballModelReaderTest.xml", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedInputFile, actualInputFile), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedInputFile, actualInputFile) target is:  method is: assertEquals(java.lang.String,java.lang.String)
* this is vulnerable: String string = "C:\\Users\\John Doe\\Documents\\HandballModelReaderTest.xml"
TestCase is: String string = "C:\\Users\\John Doe\\Documents\\HandballModelReaderTest.xml";
MockFile mockFile = new MockFile(string);
HandballModelReader.getInstance((File) mockFile);
((HandballModelReader) mockFile).getInputFile();
String string = "C:\\Users\\John Doe\\Documents\\HandballModelReaderTest.xml";

statement is: java.io.PipedInputStream()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.PipedInputStream
statement code is: PipedInputStream pipedInputStream = new PipedInputStream()
statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0)
statement is: getInputFile()Ljava/io/File; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.File
statement code is: File inputFile = handballModelReader.getInputFile()
test data is: PipedInputStream pipedInputStream = new PipedInputStream();
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
instance.getInputFile();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        PipedInputStream pipedInputStream = new PipedInputStream(new FileInputStream("path/to/file.txt"));
        HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (pipedInputStream)));
        instance.getInputFile();
    }
}
statement is: PipedInputStream pipedInputStream = new PipedInputStream(new FileInputStream("path/to/file.txt")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (pipedInputStream))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((InputStream) (pipedInputStream))) target is: HandballModelReader method is: getInstance(InputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: instance.getInputFile(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.getInputFile() target is: instance method is: getInputFile()
source statement: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 1, type visu.handball.moves.xml.HandballModelReaderindex is: 1
Matched Method is: getInputFile()Ljava/io/File;
TestCase is: PipedInputStream pipedInputStream = null;
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
instance.getInputFile();

statement is: mock(java.util.Enumeration<java.io.FilterInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.FilterInputStream>
statement code is: Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; type is: class org.evosuite.testcase.statements.MethodStatement return type class visu.handball.moves.xml.HandballModelReader
statement code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0)
statement is: getInputStream()Ljava/io/InputStream; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream inputStream = (SequenceInputStream)handballModelReader.getInputStream()
test data is: Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) sequenceInputStream);
instance.getInputStream();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<FilterInputStream> enumeration = ((Enumeration<FilterInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer())));
        doReturn(true).when(enumeration).hasMoreElements();
        doReturn(new FileInputStream("path/to/file1")).when(enumeration).nextElement();
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
        HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (sequenceInputStream)));
        instance.getInputStream();
    }
}
statement is: Enumeration<FilterInputStream> enumeration = ((Enumeration<FilterInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Enumeration<FilterInputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Enumeration argument is: Enumeration.class
Matched Method is: mock(java.util.Enumeration<java.io.FilterInputStream>)
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: doReturn(true).when(enumeration).hasMoreElements(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(true).when(enumeration).hasMoreElements() target is: doReturn(true).when(enumeration) method is: hasMoreElements()
statement is: doReturn(new FileInputStream("path/to/file1")).when(enumeration).nextElement(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(new FileInputStream("path/to/file1")).when(enumeration).nextElement() target is: doReturn(new FileInputStream("path/to/file1")).when(enumeration) method is: nextElement()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HandballModelReader instance = HandballModelReader.getInstance(((InputStream) (sequenceInputStream))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: HandballModelReader.getInstance(((InputStream) (sequenceInputStream))) target is: HandballModelReader method is: getInstance(InputStream)
Matched Method is: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader;
statement is: instance.getInputStream(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: instance.getInputStream() target is: instance method is: getInputStream()
source statement: getInstance(Ljava/io/InputStream;)Lvisu/handball/moves/xml/HandballModelReader; callee: VariableReference: Statement 2, type visu.handball.moves.xml.HandballModelReaderindex is: 3
Matched Method is: getInputStream()Ljava/io/InputStream;
TestCase is: boolean _boolean = null;
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(_boolean).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
HandballModelReader.getInstance((InputStream) sequenceInputStream);
((HandballModelReader) sequenceInputStream).getInputStream();

* test suite isTestSuite: 20
Test 0: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 1: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.getInputStream();
Test 2: 
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 3: 
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader.getInstance((File) mockFile);
HandballModelReader.getInstance((File) mockFile);
Test 4: 
byte[] byteArray = new byte[5];
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
HandballModelReader.getInstance((InputStream) byteArrayInputStream);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 5: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.setInputStream((InputStream) null);
Test 6: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4");
instance.setInputFile(mockFile);
Test 7: 
MockFile mockFile = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 8: 
PipedInputStream pipedInputStream = new PipedInputStream();
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
instance.getInputFile();
Test 9: 
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) sequenceInputStream);
instance.getInputStream();
Test 10: 
InputStream inputStream = null;
HandballModelReader.getInstance((InputStream) null);
((HandballModelReader) inputStream).readFromXml();

Test 11: 
InputStream inputStream = null;
HandballModelReader.getInstance((InputStream) null);
((HandballModelReader) inputStream).getInputStream();

Test 12: 
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader.getInstance((File) mockFile);
((HandballModelReader)"Laden fehlgeschlagen").getInputFile();

Test 13: 
MockFile mockFile = new MockFile("Fehlerhafter Laden", "Laden fehlgeschlagen");
HandballModelReader.getInstance((File) mockFile);
MockFile mockFile = new MockFile("Datei nicht gefunden", "Unbekannter Fehler");
HandballModelReader.getInstance((File) mockFile);

Test 14: 
byte[] byteArray = new byte[5];
String string = "Laden fehlgeschlagen";
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader.getInstance((File) mockFile);
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
HandballModelReader.getInstance((File) byteArrayInputStream);
((HandballModelReader) string).readFromXml();

Test 15: 
InputStream inputStream = null;
HandballModelReader.getInstance((InputStream) null);
((HandballModelReader) inputStream).setInputStream((InputStream) null);

Test 16: 
InputStream inputStream = null;
HandballModelReader.getInstance((InputStream) null);
MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4");
((HandballModelReader) inputStream).setInputFile(mockFile);

Test 17: 
MockFile mockFile = new MockFile("C:UsersJohn DoeDocumentsHandballModelReaderTest.xml");
HandballModelReader.getInstance((File) mockFile);
((HandballModelReader) mockFile).getInputFile();

Test 18: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.getInputFile();

Test 19: 
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
HandballModelReader.getInstance((InputStream) sequenceInputStream);
((HandballModelReader) sequenceInputStream).getInputStream();


* Generated after the refinement and before minimization 20 tests with total length 67
* test suite isTestSuite: 20
Test 0: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 1: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.getInputStream();
Test 2: 
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 3: 
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader.getInstance((File) mockFile);
HandballModelReader.getInstance((File) mockFile);
Test 4: 
byte[] byteArray = new byte[5];
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
HandballModelReader.getInstance((InputStream) byteArrayInputStream);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 5: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.setInputStream((InputStream) null);
Test 6: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4");
instance.setInputFile(mockFile);
Test 7: 
MockFile mockFile = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 8: 
PipedInputStream pipedInputStream = new PipedInputStream();
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
instance.getInputFile();
Test 9: 
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) sequenceInputStream);
instance.getInputStream();
Test 10: 
InputStream inputStream = null;
HandballModelReader.getInstance((InputStream) null);
((HandballModelReader) inputStream).readFromXml();

Test 11: 
InputStream inputStream = null;
HandballModelReader.getInstance((InputStream) null);
((HandballModelReader) inputStream).getInputStream();

Test 12: 
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader.getInstance((File) mockFile);
((HandballModelReader)"Laden fehlgeschlagen").getInputFile();

Test 13: 
MockFile mockFile = new MockFile("Fehlerhafter Laden", "Laden fehlgeschlagen");
HandballModelReader.getInstance((File) mockFile);
MockFile mockFile = new MockFile("Datei nicht gefunden", "Unbekannter Fehler");
HandballModelReader.getInstance((File) mockFile);

Test 14: 
byte[] byteArray = new byte[5];
String string = "Laden fehlgeschlagen";
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader.getInstance((File) mockFile);
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
HandballModelReader.getInstance((File) byteArrayInputStream);
((HandballModelReader) string).readFromXml();

Test 15: 
InputStream inputStream = null;
HandballModelReader.getInstance((InputStream) null);
((HandballModelReader) inputStream).setInputStream((InputStream) null);

Test 16: 
InputStream inputStream = null;
HandballModelReader.getInstance((InputStream) null);
MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4");
((HandballModelReader) inputStream).setInputFile(mockFile);

Test 17: 
MockFile mockFile = new MockFile("C:UsersJohn DoeDocumentsHandballModelReaderTest.xml");
HandballModelReader.getInstance((File) mockFile);
((HandballModelReader) mockFile).getInputFile();

Test 18: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.getInputFile();

Test 19: 
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
HandballModelReader.getInstance((InputStream) sequenceInputStream);
((HandballModelReader) sequenceInputStream).getInputStream();


* Minimizing test suite
* test suite isTestSuite: 10
Test 0: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 1: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.getInputStream();
Test 2: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.getInputFile();
Test 3: 
MockFile mockFile = new MockFile("Fehlerhafter Laden", "Laden fehlgeschlagen");
HandballModelReader.getInstance((File) mockFile);
HandballModelReader.getInstance((File) mockFile);
Test 4: 
byte[] byteArray = new byte[5];
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
HandballModelReader.getInstance((InputStream) byteArrayInputStream);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 5: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.setInputStream((InputStream) null);
Test 6: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4");
instance.setInputFile(mockFile);
Test 7: 
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 8: 
MockFile mockFile = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 9: 
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) sequenceInputStream);
instance.getInputStream();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 35%
* Total number of goals: 31
* Number of covered goals: 11
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 31%
* Total number of goals: 93
* Number of covered goals: 29
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 59%
* Total number of goals: 44
* Number of covered goals: 26
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 35%
* Total number of goals: 31
* Number of covered goals: 11
* Generated 10 tests with total length 30
* Resulting test suite's coverage: 52% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}


** It was a parseable test case! 
refined test name is: testReadFromXmlThrowsHeadlessException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
InputStream inputStream = instance.getInputStream();
assertNull(inputStream);


** It was a parseable test case! 
refined test name is: testGetInputStreamWithNullInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
File inputFile = instance.getInputFile();
assertNull(inputFile);


** It was a parseable test case! 
refined test name is: testGetInputFileNoInputStreamSetReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.setInputStream((InputStream) null);

** It was a parseable test case! 
refined test name is: testHandballModelReaderWithNullInputStream
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
MockFile arg0 = new MockFile("19&M~_Icxd8\"s!f4");
instance.setInputFile(arg0);
assertTrue(arg0.isFile());


** It was a parseable test case! 
refined test name is: testSetInputFileWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg0 = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) arg0);
File inputFile = instance.getInputFile();
assertFalse(inputFile.isDirectory());


** It was a parseable test case! 
refined test name is: testGetInputFileNotDirectory
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: MockFile arg0 = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) arg0);
File inputFile = instance.getInputFile();
assertEquals(0L, inputFile.getTotalSpace());


** It was a parseable test case! 
refined test name is: testGetInputFileEmptyFileReturnsZeroTotalSpace
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:43:01.812 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:43:01.830 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
* Compiling Tests
[MASTER] 11:43:01.867 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 11:43:01.868 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
* Compiling Tests
[MASTER] 11:43:01.943 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:01.944 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:43:01.978 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:01.979 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:43:02.015 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:02.016 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:43:02.050 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:02.051 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:43:02.086 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:02.087 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:43:02.155 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:02.156 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 11:43:02.279 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:02.281 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
[MASTER] 11:43:02.382 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 9
Test 0: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 1: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.getInputStream();
Test 2: 
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 3: 
byte[] byteArray = new byte[5];
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
HandballModelReader.getInstance((InputStream) byteArrayInputStream);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 4: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.setInputStream((InputStream) null);
Test 5: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4");
instance.setInputFile(mockFile);
Test 6: 
MockFile mockFile = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 7: 
PipedInputStream pipedInputStream = new PipedInputStream();
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
instance.getInputFile();
Test 8: 
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) sequenceInputStream);
instance.getInputStream();

* Minimizing test suite
* test suite isTestSuite: 9
Test 0: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 1: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.getInputStream();
Test 2: 
MockFile mockFile = new MockFile("");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 3: 
byte[] byteArray = new byte[5];
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
HandballModelReader.getInstance((InputStream) byteArrayInputStream);
// Undeclared exception!
try { 
  instance.readFromXml();
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 4: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
instance.setInputStream((InputStream) null);
Test 5: 
HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
MockFile mockFile = new MockFile("19&M~_Icxd8\"s!f4");
instance.setInputFile(mockFile);
Test 6: 
MockFile mockFile = new MockFile("Laden fehlgeschlagen", "Laden fehlgeschlagen");
HandballModelReader instance = HandballModelReader.getInstance((File) mockFile);
instance.getInputFile();
Test 7: 
PipedInputStream pipedInputStream = new PipedInputStream();
HandballModelReader instance = HandballModelReader.getInstance((InputStream) pipedInputStream);
instance.getInputFile();
Test 8: 
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
HandballModelReader instance = HandballModelReader.getInstance((InputStream) sequenceInputStream);
instance.getInputStream();

[MASTER] 11:43:04.618 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 29%
* Total number of goals: 31
* Number of covered goals: 9
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 27%
* Total number of goals: 93
* Number of covered goals: 25
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 59%
* Total number of goals: 44
* Number of covered goals: 26
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 29%
* Total number of goals: 31
* Number of covered goals: 9
* Generated 9 tests with total length 28
* Resulting test suite's coverage: 52% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:43:04.660 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 11:43:05.142 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:43:06.067 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:06.068 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:43:06.140 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:06.141 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:43:06.205 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:06.206 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:43:06.253 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:06.254 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:43:06.310 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:06.311 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:43:06.374 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:06.375 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 11:43:06.442 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:06.443 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
[MASTER] 11:43:06.633 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:06.634 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
[MASTER] 11:43:06.751 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/tmp/EvoSuite_pathingJar8394268660554408528.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 11:43:06.752 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8394268660554408528.jar
* Writing tests to file
[MASTER] 11:43:06.754 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'HandballModelReader_ESTest' to evosuite-tests
* Writing JUnit test case 'HandballModelReader_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
* Done!

* Computation finished
