/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Tue Mar 12 17:02:20 GMT 2024
 */

package visu.handball.moves.xml;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.HeadlessException;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import visu.handball.moves.xml.HandballModelReader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HandballModelReader_Original_ESTest extends HandballModelReader_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInputFileReturningFileWhereLastModifiedIsPositive() throws Throwable  {
      MockFile arg0 = new MockFile("", "");
      HandballModelReader instance = HandballModelReader.getInstance((File) arg0);
      File inputFile = instance.getInputFile();
      assertEquals("", inputFile.getName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInputFileReturningFileWhereLastModifiedIsZero() throws Throwable  {
      HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
      MockFile arg0 = new MockFile((String) null, ".XN2t?");
      HandballModelReader.getInstance((File) arg0);
      File inputFile = instance.getInputFile();
      assertTrue(inputFile.isHidden());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInputFile() throws Throwable  {
      MockFile arg0 = new MockFile("OW|");
      HandballModelReader instance = HandballModelReader.getInstance((File) arg0);
      instance.setInputFile(arg0);
      assertFalse(arg0.exists());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReadFromXmlThrowsHeadlessException() throws Throwable  {
      PipedInputStream arg0 = new PipedInputStream();
      HandballModelReader instance = HandballModelReader.getInstance((InputStream) arg0);
      // Undeclared exception!
      try { 
        instance.readFromXml();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInputFileReturningNull() throws Throwable  {
      HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
      File inputFile = instance.getInputFile();
      assertNull(inputFile);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInputStream() throws Throwable  {
      MockFile arg0 = new MockFile("OW|");
      HandballModelReader instance = HandballModelReader.getInstance((File) arg0);
      InputStream inputStream = instance.getInputStream();
      assertNull(inputStream);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInstanceTakingInputStreamWithNull() throws Throwable  {
      HandballModelReader instance = HandballModelReader.getInstance((InputStream) null);
      // Undeclared exception!
      try { 
        instance.readFromXml();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
