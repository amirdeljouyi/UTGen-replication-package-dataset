* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: ipac.BinaryCalculate
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/82_ipcalculator/evosuite-files/evosuite.properties
* Connecting to master process on port 2559
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class ipac.BinaryCalculate
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 463
* Using seed 1710313056430
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 138 / 463
[Progress:>                             0%] [Cov:========================>          69%][Progress:>                             0%] [Cov:========================>          71%][Progress:>                             1%] [Cov:=========================>         73%][Progress:>                             1%] [Cov:=========================>         73%][Progress:>                             1%] [Cov:=========================>         73%][Progress:>                             1%] [Cov:==========================>        75%][Progress:>                             2%] [Cov:==========================>        75%][Progress:>                             2%] [Cov:==========================>        77%][Progress:>                             2%] [Cov:===========================>       78%][Progress:>                             2%] [Cov:===========================>       78%][Progress:>                             2%] [Cov:===========================>       78%][Progress:>                             2%] [Cov:===========================>       78%][Progress:>                             2%] [Cov:===========================>       78%][Progress:>                             2%] [Cov:===========================>       78%][Progress:>                             2%] [Cov:===========================>       78%][Progress:>                             3%] [Cov:===========================>       78%][Progress:>                             3%] [Cov:===========================>       78%][Progress:>                             3%] [Cov:===========================>       78%][Progress:>                             3%] [Cov:===========================>       78%][Progress:>                             3%] [Cov:===========================>       79%][Progress:>                             3%] [Cov:===========================>       79%][Progress:>                             3%] [Cov:===========================>       79%][Progress:>                             3%] [Cov:===========================>       79%][Progress:>                             3%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:===========================>       79%][Progress:=>                            4%] [Cov:============================>      80%][Progress:=>                            4%] [Cov:============================>      80%][Progress:=>                            4%] [Cov:============================>      80%][Progress:=>                            4%] [Cov:============================>      80%][Progress:=>                            5%] [Cov:============================>      80%][Progress:=>                            5%] [Cov:============================>      80%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      81%][Progress:==>                           8%] [Cov:============================>      81%][Progress:==>                           8%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:==>                           9%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          10%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      82%][Progress:===>                          11%] [Cov:============================>      82%][Progress:===>                          11%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:===>                          13%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         14%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         15%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:====>                         16%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        18%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:=====>                        19%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     84%][Progress:======>                       20%] [Cov:=============================>     84%][Progress:======>                       20%] [Cov:=============================>     84%][Progress:======>                       20%] [Cov:=============================>     84%][Progress:======>                       21%] [Cov:=============================>     84%][Progress:======>                       21%] [Cov:=============================>     84%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:==============================>    86%][Progress:======>                       21%] [Cov:==============================>    86%][Progress:======>                       21%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%]
* Search finished after 201s and 907 generations, 286006 statements, best individual has fitness: 28.0
* Generated before the refinement 22 tests with total length 53
statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("0", "0")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.1.1";
String string = "255.255.255.0";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("oRb0o1", "oRb0o1")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("oRb0o1", "oRb0o1");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.subBinary("110101", "110101");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.subBinary("110101", "110101"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("110101", "110101") target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "110101";
String string = "110101";
binaryCalculate.subBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate(">UUUi1E`X4N41 nm", "Total usable IP Addresses : ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate(">UUUi1E`X4N41 nm", "Total usable IP Addresses : ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        binaryCalculate.IPCalculate("192.168.0.1/24", "Total usable IP Addresses : ");
        binaryCalculate.IPCalculate("192.168.0.1/25", "Total usable IP Addresses : ");
    }
}
statement is: binaryCalculate.IPCalculate("192.168.0.1/24", "Total usable IP Addresses : "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.0.1/24", "Total usable IP Addresses : ") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
statement is: binaryCalculate.IPCalculate("192.168.0.1/25", "Total usable IP Addresses : "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.0.1/25", "Total usable IP Addresses : ") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("E|)Ku1U1t}o61r", "E|)Ku1U1t}o61r")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("E|)Ku1U1t}o61r", "E|)Ku1U1t}o61r");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("1010", "0110");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("1010", "0110"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("1010", "0110") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1010";
String string = "0110";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("", "(r[[ln21V1")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("", "(r[[ln21V1");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.subBinary("01001011", "11001011");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.subBinary("01001011", "11001011"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("01001011", "11001011") target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "01001011";
String string = "11001011";
binaryCalculate.subBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@226b08da type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 14
statement is: org.evosuite.testcase.statements.AssignmentStatement@946413f5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.MAXPREFIX = 14
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 14;
binaryCalculate.MAXPREFIX = 14;
binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.lengthOfToken = 14;// Changed to a more descriptive value, such as the maximum expected length of a token in the input string.

        binaryCalculate.MAXPREFIX = 14;// Changed to a more descriptive value, such as the maximum expected prefix length in the input string.

        binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.lengthOfToken = 14// Changed to a more descriptive value, such as the maximum expected length of a token in the input string.
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.MAXPREFIX = 14// Changed to a more descriptive value, such as the maximum expected prefix length in the input string.
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "RxU$GN`|H36mnjRSaC";
String string = "RxU$GN`|H36mnjRSaC";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", 1, "(b|)Kuk1Ut}P6Wd")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", 1, "(b|)Kuk1Ut}P6Wd");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.prefixInPrefixCalculate("0101", "1010", 2, "11");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.prefixInPrefixCalculate("0101", "1010", 2, "11"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("0101", "1010", 2, "11") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "0101";
String string = "1010";
int _int = 2;
String string = "11";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("(b)Kuk1Ut}P6Wd", "(b)Kuk1Ut}P6Wd")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("(b)Kuk1Ut}P6Wd", "(b)Kuk1Ut}P6Wd");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("(b)1010", "(b)1111");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("(b)1010", "(b)1111"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("(b)1010", "(b)1111") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "(b)1010";
String string = "(b)1111";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("T_0t@`G'gM,ihyvw", "T_0t@`G'gM,ihyvw")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("T_0t@`G'gM,ihyvw", "T_0t@`G'gM,ihyvw");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.2");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.2") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.0.1";
String string = "192.168.0.2";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@f4112c4d type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.MAXPREFIX = 128
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", 128, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 128;
binaryCalculate.prefixInPrefixCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", 128, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.MAXPREFIX = 128;
        binaryCalculate.prefixInPrefixCalculate("Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000", "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000", 128, "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.MAXPREFIX = 128, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.prefixInPrefixCalculate("Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000", "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000", 128, "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000", "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000", 128, "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000";
String string = "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000";
int _int = 128;
String string = "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@418a3604 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "(b|)Kuk1Ut}P6Wd")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "(b|)Kuk1Ut}P6Wd");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv6 = true;
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@7161cb8c type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv4 = true
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "r,JGMH")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "r,JGMH");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv4 = true;
        binaryCalculate.IPCalculate("Total Range: 10.10.0.0 - 10.10.255.255\nUsable Range: 10.10.1.0 - 10.10.1.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.10.1.0/24\nBinary Subnet: 110000001010000000000000000000000\nBroadcast Address: 10.10.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 11111111111111111111000000000000", "r,JGMH");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv4 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("Total Range: 10.10.0.0 - 10.10.255.255\nUsable Range: 10.10.1.0 - 10.10.1.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.10.1.0/24\nBinary Subnet: 110000001010000000000000000000000\nBroadcast Address: 10.10.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 11111111111111111111000000000000", "r,JGMH"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("Total Range: 10.10.0.0 - 10.10.255.255\nUsable Range: 10.10.1.0 - 10.10.1.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.10.1.0/24\nBinary Subnet: 110000001010000000000000000000000\nBroadcast Address: 10.10.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 11111111111111111111000000000000", "r,JGMH") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range: 10.10.0.0 - 10.10.255.255\nUsable Range: 10.10.1.0 - 10.10.1.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.10.1.0/24\nBinary Subnet: 110000001010000000000000000000000\nBroadcast Address: 10.10.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 11111111111111111111000000000000";
String string = "r,JGMH";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("3", "3", 0, "3")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("3", "3", 0, "3");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.prefixInPrefixCalculate("1010", "1110", 3, "1011");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.prefixInPrefixCalculate("1010", "1110", 3, "1011"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("1010", "1110", 3, "1011") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1010";
String string = "1110";
int _int = 3;
String string = "1011";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@66fd20ab type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: org.evosuite.testcase.statements.AssignmentStatement@60013ef8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 23
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000001", "J", 210, "3/IfvN|78CI=k#QM]")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 23;
binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000001", "J", 210, "3/IfvN|78CI=k#QM]");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv6 = true;
        binaryCalculate.lengthOfToken = 23;
        binaryCalculate.prefixInPrefixCalculate("01010101010101010101010101010101", "J", 210, "3/IfvN|78CI=k#QM]");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.lengthOfToken = 23, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.prefixInPrefixCalculate("01010101010101010101010101010101", "J", 210, "3/IfvN|78CI=k#QM]"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("01010101010101010101010101010101", "J", 210, "3/IfvN|78CI=k#QM]") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "01010101010101010101010101010101";
String string = "J";
int _int = 210;
String string = "3/IfvN|78CI=k#QM]";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: ,\nBroadcast Address: \nPrefix: /-1\nNetmask: \nBinary Netmask: 0", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: ,\nBroadcast Address: \nPrefix: /-1\nNetmask: \nBinary Netmask: 0")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: ,\nBroadcast Address: \nPrefix: /-1\nNetmask: \nBinary Netmask: 0", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: ,\nBroadcast Address: \nPrefix: /-1\nNetmask: \nBinary Netmask: 0");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000", "Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000", "Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000", "Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000";
String string = "Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("9{lzE60sJNG'\"v", "(b|)Ku$1Ut}P6Wd")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("9{lzE60sJNG'\"v", "(b|)Ku$1Ut}P6Wd");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("9\"{lXE_0sJNG'\"v", "(b|)Ku$1Ut}P6Wd")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("9\"{lXE_0sJNG'\"v", "(b|)Ku$1Ut}P6Wd");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("100110101", "100101110");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("100110101", "100101110"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("100110101", "100101110") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "100110101";
String string = "100101110";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ";
String string = "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("T\"0t@rG'(M,ihyvw", "Prefix:")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("T\"0t@rG'(M,ihyvw", "Prefix:");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("11101011", "Prefix:");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("11101011", "Prefix:"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("11101011", "Prefix:") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "11101011";
String string = "Prefix:";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("1", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("1", "0000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("1", "0000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("1", "0000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1";
String string = "0000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("le,#cKr_'{", "le,#cKr_'{")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("le,#cKr_'{", "le,#cKr_'{");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.subBinary("1010", "1010");// should return 0

        binaryCalculate.subBinary("1011", "1010");// should return 1

        binaryCalculate.subBinary("1111", "1010");// should return 3 }}

    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.subBinary("1010", "1010")// should return 0
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("1010", "1010")// should return 0
 target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: binaryCalculate.subBinary("1011", "1010")// should return 1
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("1011", "1010")// should return 1
 target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: binaryCalculate.subBinary("1111", "1010")// should return 3 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("1111", "1010")// should return 3 }}
 target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1010";
String string = "1010";
binaryCalculate.subBinary(string, string);
String string = "1011";
String string = "1010";
binaryCalculate.subBinary(string, string);
String string = "1111";
String string = "1010";
binaryCalculate.subBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@1bd83d5a type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv4 = true
statement is: org.evosuite.testcase.statements.AssignmentStatement@f9fc2538 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 1
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("", "Total usable IP Addresses : ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.lengthOfToken = 1;
binaryCalculate.IPCalculate("", "Total usable IP Addresses : ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv4 = true;
        binaryCalculate.lengthOfToken = 1;
        binaryCalculate.IPCalculate("192.168.0.1", "Total usable IP Addresses : ");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv4 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.lengthOfToken = 1, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("192.168.0.1", "Total usable IP Addresses : "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.0.1", "Total usable IP Addresses : ") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.0.1";
String string = "Total usable IP Addresses : ";
binaryCalculate.IPCalculate(string, string);

* test suite isTestSuite: 43
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("oRb0o1", "oRb0o1");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate(">UUUi1E`X4N41 nm", "Total usable IP Addresses : ");
Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("E|)Ku1U1t}o61r", "E|)Ku1U1t}o61r");
Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("", "(r[[ln21V1");
Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 14;
binaryCalculate.MAXPREFIX = 14;
binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", 1, "(b|)Kuk1Ut}P6Wd");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}

Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("(b)Kuk1Ut}P6Wd", "(b)Kuk1Ut}P6Wd");
Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("T_0t@`G'gM,ihyvw", "T_0t@`G'gM,ihyvw");
Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 128;
// Undeclared exception!
binaryCalculate.prefixInPrefixCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", 128, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "(b|)Kuk1Ut}P6Wd");
Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "r,JGMH");
Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("3", "3", 0, "3");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 23;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000001", "J", 210, "3/IfvN|78CI=k#QM]");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: ,\nBroadcast Address: \nPrefix: /-1\nNetmask: \nBinary Netmask: 0", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: ,\nBroadcast Address: \nPrefix: /-1\nNetmask: \nBinary Netmask: 0");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("9{lzE60sJNG'\"v", "(b|)Ku$1Ut}P6Wd");
Test 16: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("9\"{lXE_0sJNG'\"v", "(b|)Ku$1Ut}P6Wd");
Test 17: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 18: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("T\"0t@rG'(M,ihyvw", "Prefix:");
Test 19: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001");
Test 20: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("le,#cKr_'{", "le,#cKr_'{");
Test 21: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.lengthOfToken = 1;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("", "Total usable IP Addresses : ");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}

Test 22: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0");

Test 23: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("110101", "110101");

Test 24: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1010", "0110");

Test 25: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("01001011", "11001011");

Test 26: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC");

Test 27: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("0101", "1010", 2, "11");

Test 28: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("(b)1010", "(b)1111");

Test 29: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.2");

Test 30: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000", "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000", 128, "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000");

Test 31: 
BinaryCalculate binaryCalculate = new BinaryCalculate();

Test 32: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range: 10.10.0.0 - 10.10.255.255\nUsable Range: 10.10.1.0 - 10.10.1.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.10.1.0/24\nBinary Subnet: 110000001010000000000000000000000\nBroadcast Address: 10.10.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 11111111111111111111000000000000", "r,JGMH");

Test 33: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("1010", "1110", 3, "1011");

Test 34: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("01010101010101010101010101010101", "J", 210, "3/IfvN|78CI=k#QM]");

Test 35: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000", "Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000");

Test 36: 
BinaryCalculate binaryCalculate = new BinaryCalculate();

Test 37: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100110101", "100101110");

Test 38: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

Test 39: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("11101011", "Prefix:");

Test 40: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1", "0000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101");

Test 41: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1010", "1010");
binaryCalculate.subBinary("1011", "1010");
binaryCalculate.subBinary("1111", "1010");

Test 42: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "Total usable IP Addresses : ");


* Generated after the refinement and before minimization 43 tests with total length 95
* test suite isTestSuite: 43
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("oRb0o1", "oRb0o1");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate(">UUUi1E`X4N41 nm", "Total usable IP Addresses : ");
Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("E|)Ku1U1t}o61r", "E|)Ku1U1t}o61r");
Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("", "(r[[ln21V1");
Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 14;
binaryCalculate.MAXPREFIX = 14;
binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", 1, "(b|)Kuk1Ut}P6Wd");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}

Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("(b)Kuk1Ut}P6Wd", "(b)Kuk1Ut}P6Wd");
Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("T_0t@`G'gM,ihyvw", "T_0t@`G'gM,ihyvw");
Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 128;
// Undeclared exception!
binaryCalculate.prefixInPrefixCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", 128, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "(b|)Kuk1Ut}P6Wd");
Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "r,JGMH");
Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("3", "3", 0, "3");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 23;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000001", "J", 210, "3/IfvN|78CI=k#QM]");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: ,\nBroadcast Address: \nPrefix: /-1\nNetmask: \nBinary Netmask: 0", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: ,\nBroadcast Address: \nPrefix: /-1\nNetmask: \nBinary Netmask: 0");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("9{lzE60sJNG'\"v", "(b|)Ku$1Ut}P6Wd");
Test 16: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("9\"{lXE_0sJNG'\"v", "(b|)Ku$1Ut}P6Wd");
Test 17: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 18: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("T\"0t@rG'(M,ihyvw", "Prefix:");
Test 19: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001");
Test 20: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("le,#cKr_'{", "le,#cKr_'{");
Test 21: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.lengthOfToken = 1;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("", "Total usable IP Addresses : ");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}

Test 22: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0");

Test 23: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("110101", "110101");

Test 24: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1010", "0110");

Test 25: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("01001011", "11001011");

Test 26: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC");

Test 27: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("0101", "1010", 2, "11");

Test 28: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("(b)1010", "(b)1111");

Test 29: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.2");

Test 30: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000", "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000", 128, "Total Range:  10.0.0.0 -- 10.0.0.255\nUsable Range:  10.0.0.1 -- 10.0.0.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.0.0.0/16\nBinary Subnet: 11000000.00000000.00000000.00000000\nBroadcast Address: 10.0.0.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111.11111111.00000000.00000000");

Test 31: 
BinaryCalculate binaryCalculate = new BinaryCalculate();

Test 32: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range: 10.10.0.0 - 10.10.255.255\nUsable Range: 10.10.1.0 - 10.10.1.254\n\nTotal usable IP Addresses : 254\nSubnet: 10.10.1.0/24\nBinary Subnet: 110000001010000000000000000000000\nBroadcast Address: 10.10.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 11111111111111111111000000000000", "r,JGMH");

Test 33: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("1010", "1110", 3, "1011");

Test 34: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("01010101010101010101010101010101", "J", 210, "3/IfvN|78CI=k#QM]");

Test 35: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000", "Total Range:  192.168.0.0 - 192.168.0.255\nUsable Range:  192.168.0.1 - 192.168.0.254\n\nTotal usable IP Addresses : 254\nSubnet:  192.168.0.0/24\nBinary Subnet:  11000000.10101000.00000000.00000000\nBroadcast Address:  192.168.0.255\nPrefix:  /24\nNetmask:  255.255.255.0\nBinary Netmask:  11111111.11111111.11111111.00000000");

Test 36: 
BinaryCalculate binaryCalculate = new BinaryCalculate();

Test 37: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100110101", "100101110");

Test 38: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

Test 39: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("11101011", "Prefix:");

Test 40: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1", "0000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101");

Test 41: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1010", "1010");
binaryCalculate.subBinary("1011", "1010");
binaryCalculate.subBinary("1111", "1010");

Test 42: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "Total usable IP Addresses : ");


* Minimizing test suite
* test suite isTestSuite: 16
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.2");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 14;
binaryCalculate.MAXPREFIX = 14;
binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 128;
// Undeclared exception!
binaryCalculate.prefixInPrefixCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", 128, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", 1, "(b|)Kuk1Ut}P6Wd");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}

Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "(b|)Kuk1Ut}P6Wd");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "r,JGMH");
Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("3", "3", 0, "3");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("01010101010101010101010101010101", "J", 210, "3/IfvN|78CI=k#QM]");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 23;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000001", "J", 210, "3/IfvN|78CI=k#QM]");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1", "0000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101010101");
Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100110101", "100101110");
Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("11101011", "Prefix:");
Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-84\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("01001011", "11001011");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("le,#cKr_'{", "le,#cKr_'{");

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 103
* Number of covered goals: 99
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 243
* Number of covered goals: 234
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 9
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 95%
* Total number of goals: 103
* Number of covered goals: 98
* Generated 16 tests with total length 39
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String IPCalculate = binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.2");
assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 4\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: ", IPCalculate);


** It was a parseable test case! 
refined test name is: TestIPAddressRange
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 14;
binaryCalculate.MAXPREFIX = 14;
String IPCalculate = binaryCalculate.IPCalculate("RxU$GN`|H36mnjRSaC", "RxU$GN`|H36mnjRSaC");
assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: RxU$GN`|H36mnj\nBroadcast Address: \nPrefix: /12\nNetmask: \nBinary Netmask: 00000000000000", IPCalculate);


** It was a parseable test case! 
refined test name is: testIPAddressCalculation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 128;
// Undeclared exception!
binaryCalculate.prefixInPrefixCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", 128, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
refined test name is: testPrefixInPrefixCalculatevalidInputParameters
* Compiling Tests
refined test name is: testPrefixInPrefixCalculateValidInputParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000001", 1, "(b|)Kuk1Ut}P6Wd");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}


** It was a parseable test case! 
refined test name is: testPrefixInPrefixCalculateWithInvalidRadix
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String IPCalculate = binaryCalculate.IPCalculate("0", "0");
assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : -1\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: ", IPCalculate);


** It was a parseable test case! 
* Computation finished
