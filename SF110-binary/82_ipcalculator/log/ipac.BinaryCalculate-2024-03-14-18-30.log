* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: ipac.BinaryCalculate
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/82_ipcalculator/evosuite-files/evosuite.properties
* Connecting to master process on port 12606
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class ipac.BinaryCalculate
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 463
* Using seed 1710441036355
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 138 / 463
[Progress:>                             0%] [Cov:========================>          69%][Progress:>                             1%] [Cov:=========================>         73%][Progress:>                             1%] [Cov:=========================>         74%][Progress:>                             2%] [Cov:==========================>        75%][Progress:>                             2%] [Cov:==========================>        77%][Progress:>                             3%] [Cov:==========================>        77%][Progress:>                             3%] [Cov:==========================>        77%][Progress:>                             3%] [Cov:==========================>        77%][Progress:>                             3%] [Cov:==========================>        77%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            6%] [Cov:===========================>       79%][Progress:=>                            6%] [Cov:===========================>       79%][Progress:=>                            6%] [Cov:===========================>       79%][Progress:=>                            6%] [Cov:===========================>       79%][Progress:=>                            6%] [Cov:===========================>       79%][Progress:=>                            6%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      82%][Progress:===>                          11%] [Cov:============================>      82%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     84%][Progress:===>                          13%] [Cov:=============================>     85%][Progress:====>                         14%] [Cov:=============================>     85%][Progress:====>                         14%] [Cov:=============================>     85%][Progress:====>                         14%] [Cov:=============================>     85%][Progress:====>                         14%] [Cov:=============================>     85%][Progress:====>                         14%] [Cov:=============================>     85%][Progress:====>                         15%] [Cov:=============================>     85%][Progress:====>                         15%] [Cov:==============================>    86%][Progress:====>                         15%] [Cov:==============================>    86%][Progress:====>                         15%] [Cov:==============================>    86%][Progress:====>                         15%] [Cov:==============================>    86%][Progress:====>                         15%] [Cov:==============================>    86%][Progress:====>                         16%] [Cov:==============================>    86%][Progress:====>                         16%] [Cov:==============================>    86%][Progress:====>                         16%] [Cov:==============================>    86%][Progress:====>                         16%] [Cov:==============================>    86%][Progress:====>                         16%] [Cov:==============================>    86%][Progress:====>                         16%] [Cov:==============================>    86%][Progress:=====>                        17%] [Cov:==============================>    86%][Progress:=====>                        17%] [Cov:==============================>    86%][Progress:=====>                        17%] [Cov:==============================>    86%][Progress:=====>                        17%] [Cov:==============================>    86%][Progress:=====>                        17%] [Cov:==============================>    86%][Progress:=====>                        17%] [Cov:==============================>    86%][Progress:=====>                        17%] [Cov:==============================>    86%][Progress:=====>                        17%] [Cov:==============================>    86%][Progress:=====>                        18%] [Cov:==============================>    86%][Progress:=====>                        18%] [Cov:==============================>    86%][Progress:=====>                        18%] [Cov:==============================>    86%][Progress:=====>                        18%] [Cov:==============================>    86%][Progress:=====>                        18%] [Cov:==============================>    86%][Progress:=====>                        18%] [Cov:==============================>    86%][Progress:=====>                        19%] [Cov:==============================>    86%][Progress:=====>                        19%] [Cov:==============================>    86%][Progress:=====>                        19%] [Cov:==============================>    86%][Progress:=====>                        19%] [Cov:==============================>    86%][Progress:=====>                        19%] [Cov:==============================>    86%][Progress:=====>                        19%] [Cov:==============================>    86%][Progress:=====>                        19%] [Cov:==============================>    86%][Progress:======>                       20%] [Cov:==============================>    86%][Progress:======>                       20%] [Cov:==============================>    86%][Progress:======>                       20%] [Cov:==============================>    86%][Progress:======>                       20%] [Cov:==============================>    86%][Progress:======>                       20%] [Cov:==============================>    86%][Progress:======>                       20%] [Cov:==============================>    86%][Progress:======>                       20%] [Cov:==============================>    86%][Progress:======>                       21%] [Cov:==============================>    86%][Progress:======>                       21%] [Cov:==============================>    86%][Progress:======>                       21%] [Cov:==============================>    86%][Progress:======>                       21%] [Cov:==============================>    86%][Progress:======>                       21%] [Cov:==============================>    86%][Progress:======>                       21%] [Cov:==============================>    86%][Progress:======>                       21%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       22%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:======>                       23%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      24%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      25%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                46%] [Cov:==============================>    86%][Progress:=============>                46%] [Cov:==============================>    86%][Progress:=============>                46%] [Cov:==============================>    86%][Progress:=============>                46%] [Cov:==============================>    86%][Progress:=============>                46%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:==============>               49%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              50%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              51%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              52%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:===============>              53%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             54%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:================>             56%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    86%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    88%][Progress:========================>     82%] [Cov:==============================>    88%][Progress:========================>     82%] [Cov:==============================>    88%][Progress:========================>     82%] [Cov:==============================>    88%][Progress:========================>     82%] [Cov:==============================>    88%][Progress:========================>     82%] [Cov:==============================>    88%][Progress:========================>     83%] [Cov:==============================>    88%][Progress:========================>     83%] [Cov:==============================>    88%][Progress:========================>     83%] [Cov:==============================>    88%][Progress:========================>     83%] [Cov:==============================>    88%][Progress:========================>     83%] [Cov:==============================>    88%][Progress:========================>     83%] [Cov:==============================>    88%][Progress:=========================>    84%] [Cov:==============================>    88%][Progress:=========================>    84%] [Cov:==============================>    88%][Progress:=========================>    84%] [Cov:==============================>    88%][Progress:=========================>    84%] [Cov:==============================>    88%][Progress:=========================>    84%] [Cov:==============================>    88%][Progress:=========================>    84%] [Cov:==============================>    88%][Progress:=========================>    84%] [Cov:==============================>    88%][Progress:=========================>    84%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:==========================>   87%] [Cov:==============================>    88%][Progress:==========================>   87%] [Cov:==============================>    88%][Progress:==========================>   87%] [Cov:==============================>    88%][Progress:==========================>   87%] [Cov:==============================>    88%][Progress:==========================>   87%] [Cov:==============================>    88%][Progress:==========================>   87%] [Cov:==============================>    88%][Progress:==========================>   87%] [Cov:==============================>    88%][Progress:==========================>   87%] [Cov:==============================>    88%][Progress:==========================>   88%] [Cov:==============================>    88%][Progress:==========================>   88%] [Cov:==============================>    88%][Progress:==========================>   88%] [Cov:==============================>    88%][Progress:==========================>   88%] [Cov:==============================>    88%][Progress:==========================>   88%] [Cov:==============================>    88%][Progress:==========================>   88%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  93%] [Cov:==============================>    88%][Progress:===========================>  93%] [Cov:==============================>    88%][Progress:===========================>  93%] [Cov:==============================>    88%][Progress:===========================>  93%] [Cov:==============================>    88%][Progress:===========================>  93%] [Cov:==============================>    88%][Progress:===========================>  93%] [Cov:==============================>    88%][Progress:===========================>  93%] [Cov:==============================>    88%][Progress:===========================>  93%] [Cov:==============================>    88%][Progress:============================> 94%] [Cov:==============================>    88%][Progress:============================> 94%] [Cov:==============================>    88%][Progress:============================> 94%] [Cov:==============================>    88%][Progress:============================> 94%] [Cov:==============================>    88%][Progress:============================> 94%] [Cov:==============================>    88%][Progress:============================> 94%] [Cov:==============================>    88%][Progress:============================> 94%] [Cov:==============================>    88%][Progress:============================> 94%] [Cov:==============================>    88%][Progress:============================> 94%] [Cov:==============================>    88%][Progress:============================> 94%] [Cov:==============================>    88%][Progress:============================> 95%] [Cov:==============================>    88%][Progress:============================> 95%] [Cov:==============================>    88%][Progress:============================> 95%] [Cov:==============================>    88%][Progress:============================> 95%] [Cov:==============================>    88%][Progress:============================> 95%] [Cov:==============================>    88%][Progress:============================> 95%] [Cov:==============================>    88%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%]
* Search finished after 201s and 545 generations, 174854 statements, best individual has fitness: 26.0
* Generated before the refinement 19 tests with total length 47
statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("fq]9']s!1}d_<G0D&", "100")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("fq]9']s!1}d_<G0D&", "100");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.subBinary("1111001100111100", "100");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.subBinary("1111001100111100", "100"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("1111001100111100", "100") target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1111001100111100";
String string = "100";
binaryCalculate.subBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("100", "00000000000001101")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "00000000000001101");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("100", "00000000000001101");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("100", "00000000000001101"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("100", "00000000000001101") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "100";
String string = "00000000000001101";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@d9af4acb type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 127
statement is: org.evosuite.testcase.statements.AssignmentStatement@f8a327f2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.MAXPREFIX = 127
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 127;
binaryCalculate.MAXPREFIX = 127;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.lengthOfToken = 16;// Improved from 127 to a more descriptive value

        binaryCalculate.MAXPREFIX = 32;// Improved from 127 to a more descriptive value

        binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.lengthOfToken = 16// Improved from 127 to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.MAXPREFIX = 32// Improved from 127 to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ";
String string = "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000001", "0")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000001", "0");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("100010100010101000101010001010100", "0");// 537489627 }}

    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("100010100010101000101010001010100", "0")// 537489627 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("100010100010101000101010001010100", "0")// 537489627 }}
 target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "100010100010101000101010001010100";
String string = "0";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("Gh6X_ ", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001", 16, "mJ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("Gh6X_ ", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001", 16, "mJ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.prefixInPrefixCalculate("Gh6X_ ", "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001", 16, "mJ");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.prefixInPrefixCalculate("Gh6X_ ", "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001", 16, "mJ"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("Gh6X_ ", "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001", 16, "mJ") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Gh6X_ ";
String string = "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001";
int _int = 16;
String string = "mJ";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("0", "0")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("1234567890", "1000000000");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("1234567890", "1000000000"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("1234567890", "1000000000") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1234567890";
String string = "1000000000";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@75c9deb5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv6 = true;
        binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range: 169.254.0.0 - 169.254.255.255\nUsable Range: 169.254.0.1 - 169.254.0.254\n\nTotal usable IP Addresses : 65,534\nSubnet: 169.254.0.0/16\nBinary Subnet: 10000000 01000000 00000000 00000000\nBroadcast Address: 169.254.255.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111 11111111 00000000 00000000");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range: 169.254.0.0 - 169.254.255.255\nUsable Range: 169.254.0.1 - 169.254.0.254\n\nTotal usable IP Addresses : 65,534\nSubnet: 169.254.0.0/16\nBinary Subnet: 10000000 01000000 00000000 00000000\nBroadcast Address: 169.254.255.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111 11111111 00000000 00000000"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range: 169.254.0.0 - 169.254.255.255\nUsable Range: 169.254.0.1 - 169.254.0.254\n\nTotal usable IP Addresses : 65,534\nSubnet: 169.254.0.0/16\nBinary Subnet: 10000000 01000000 00000000 00000000\nBroadcast Address: 169.254.255.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111 11111111 00000000 00000000") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ";
String string = "Total Range: 169.254.0.0 - 169.254.255.255\nUsable Range: 169.254.0.1 - 169.254.0.254\n\nTotal usable IP Addresses : 65,534\nSubnet: 169.254.0.0/16\nBinary Subnet: 10000000 01000000 00000000 00000000\nBroadcast Address: 169.254.255.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111 11111111 00000000 00000000";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@3b99f3e2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("0000000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000000001")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("0000000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000000001");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv6 = true;
        binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "fe80:0000:0000:0000:0202:b3ff:fe1e:8329");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "fe80:0000:0000:0000:0202:b3ff:fe1e:8329"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "fe80:0000:0000:0000:0202:b3ff:fe1e:8329") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
String string = "fe80:0000:0000:0000:0202:b3ff:fe1e:8329";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("000000000000000000000000000000010", "fq]9']s!1}d_<G0D&", 30, " -- ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("000000000000000000000000000000010", "fq]9']s!1}d_<G0D&", 30, " -- ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.prefixInPrefixCalculate("101010101010101010101010", "101010101010101010101010", 25, "-_-");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.prefixInPrefixCalculate("101010101010101010101010", "101010101010101010101010", 25, "-_-"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("101010101010101010101010", "101010101010101010101010", 25, "-_-") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "101010101010101010101010";
String string = "101010101010101010101010";
int _int = 25;
String string = "-_-";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@f5a3aef5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: org.evosuite.testcase.statements.AssignmentStatement@6c5d7d50 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 109
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 109;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv6 = true;
        binaryCalculate.lengthOfToken = 109;
        binaryCalculate.IPCalculate("Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 11000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111", "Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 110000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.lengthOfToken = 109, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 11000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111", "Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 110000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 11000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111", "Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 110000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 11000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111";
String string = "Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 110000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("100", "00000000000001001")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "00000000000001001");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("100", "1001");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("100", "1001"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("100", "1001") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "100";
String string = "1001";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("h0$<tljyTd1\"5k0AT ", "h0$<tljyTd1\"5k0AT ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("h0$<tljyTd1\"5k0AT ", "h0$<tljyTd1\"5k0AT ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("1010", "1010");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("1010", "1010"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("1010", "1010") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1010";
String string = "1010";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("mo1A=]l/U*\u0001", "00000000000001101")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("mo1A=]l/U*\u0001", "00000000000001101");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("mo1A=]l/U*\u0001", "00000000000001101");
        // Improved test data:
        binaryCalculate.addBinary("mo1A=]l/U*\u0001", "01010101010101010");// more descriptive and representative of the situation being tested }}

    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("mo1A=]l/U*\u0001", "00000000000001101"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("mo1A=]l/U*\u0001", "00000000000001101") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: // Improved test data:
binaryCalculate.addBinary("mo1A=]l/U*\u0001", "01010101010101010")// more descriptive and representative of the situation being tested }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data:
binaryCalculate.addBinary("mo1A=]l/U*\u0001", "01010101010101010")// more descriptive and representative of the situation being tested }}
 target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "mo1A=]l/U*\u0001";
String string = "00000000000001101";
binaryCalculate.addBinary(string, string);
String string = "mo1A=]l/U*\u0001";
String string = "01010101010101010";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("fq]9']s!1}d1<G0D&", "fq]9']s!1}d1<G0D&")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("fq]9']s!1}d1<G0D&", "fq]9']s!1}d1<G0D&");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("1001011001", "1001011001");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("1001011001", "1001011001"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("1001011001", "1001011001") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1001011001";
String string = "1001011001";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("fq]9']s!1}d_<G0D&", "100")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("fq]9']s!1}d_<G0D&", "100");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("111010011110100111101001", "100");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("111010011110100111101001", "100"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("111010011110100111101001", "100") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "111010011110100111101001";
String string = "100";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary(".:", ".:")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary(".:", ".:");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("1010", "1100");// Adding two binary strings

        binaryCalculate.addBinary("1111", "1010");// Adding two binary strings with different lengths

        binaryCalculate.addBinary("1110", "1101");// Adding two binary strings with a carry }}

    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("1010", "1100")// Adding two binary strings
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("1010", "1100")// Adding two binary strings
 target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: binaryCalculate.addBinary("1111", "1010")// Adding two binary strings with different lengths
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("1111", "1010")// Adding two binary strings with different lengths
 target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: binaryCalculate.addBinary("1110", "1101")// Adding two binary strings with a carry }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("1110", "1101")// Adding two binary strings with a carry }}
 target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1010";
String string = "1100";
binaryCalculate.addBinary(string, string);
String string = "1111";
String string = "1010";
binaryCalculate.addBinary(string, string);
String string = "1110";
String string = "1101";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("Th,q-K{\u0000{-B%O3^U", "Th,q-K{\u0000{-B%O3^U")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("Th,q-K{\u0000{-B%O3^U", "Th,q-K{\u0000{-B%O3^U");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.subBinary("01010101", "01010101");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.subBinary("01010101", "01010101"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("01010101", "01010101") target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "01010101";
String string = "01010101";
binaryCalculate.subBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@2fca2cb4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 1
statement is: org.evosuite.testcase.statements.AssignmentStatement@982f3857 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = false
statement is: org.evosuite.testcase.statements.AssignmentStatement@47d5785c type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("", "ipac.Output", 0, "")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
binaryCalculate.isIPv6 = false;
binaryCalculate.isIPv6 = true;
binaryCalculate.prefixInPrefixCalculate("", "ipac.Output", 0, "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.lengthOfToken = 1;
        binaryCalculate.isIPv6 = false;
        binaryCalculate.isIPv6 = true;
        binaryCalculate.prefixInPrefixCalculate("", "ipac.Output", 0, "");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.lengthOfToken = 1, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.isIPv6 = false, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.prefixInPrefixCalculate("", "ipac.Output", 0, ""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("", "ipac.Output", 0, "") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "";
String string = "ipac.Output";
int _int = 0;
String string = "";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("'}p)*5@BO3pb:*", "'}p)*5@BO3pb:*", 0, "'}p)*5@BO3pb:*")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("'}p)*5@BO3pb:*", "'}p)*5@BO3pb:*", 0, "'}p)*5@BO3pb:*");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.prefixInPrefixCalculate("1234567890", "1234567890", 0, "1234567890");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.prefixInPrefixCalculate("1234567890", "1234567890", 0, "1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("1234567890", "1234567890", 0, "1234567890") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1234567890";
String string = "1234567890";
int _int = 0;
String string = "1234567890";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

* test suite isTestSuite: 38
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("fq]9']s!1}d_<G0D&", "100");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "00000000000001101");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 127;
binaryCalculate.MAXPREFIX = 127;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000001", "0");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}

Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("Gh6X_ ", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001", 16, "mJ");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("0000000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000000001");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("000000000000000000000000000000010", "fq]9']s!1}d_<G0D&", 30, " -- ");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 109;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"Total Range:  -- 
   // Usable Range:  -- 
   // 
   // Total usable IP Addresses : 0
   // Subnet: 
   // Binary Subnet: 
   // Broadcast Addres\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "00000000000001001");
Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("h0$<tljyTd1\"5k0AT ", "h0$<tljyTd1\"5k0AT ");
Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("mo1A=]l/U*\u0001", "00000000000001101");
Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("fq]9']s!1}d1<G0D&", "fq]9']s!1}d1<G0D&");
Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("fq]9']s!1}d_<G0D&", "100");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary(".:", ".:");
Test 16: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("Th,q-K{\u0000{-B%O3^U", "Th,q-K{\u0000{-B%O3^U");
Test 17: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
binaryCalculate.isIPv6 = false;
binaryCalculate.isIPv6 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "ipac.Output", 0, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}

Test 18: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("'}p)*5@BO3pb:*", "'}p)*5@BO3pb:*", 0, "'}p)*5@BO3pb:*");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 19: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1111001100111100", "100");

Test 20: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "00000000000001101");

Test 21: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

Test 22: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("100010100010101000101010001010100", "0");

Test 23: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("Gh6X_ ", "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001", 16, "mJ");

Test 24: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("1234567890", "1000000000");

Test 25: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range: 169.254.0.0 - 169.254.255.255\nUsable Range: 169.254.0.1 - 169.254.0.254\n\nTotal usable IP Addresses : 65,534\nSubnet: 169.254.0.0/16\nBinary Subnet: 10000000 01000000 00000000 00000000\nBroadcast Address: 169.254.255.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111 11111111 00000000 00000000");

Test 26: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "fe80:0000:0000:0000:0202:b3ff:fe1e:8329");

Test 27: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("101010101010101010101010", "101010101010101010101010", 25, "-_-");

Test 28: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 11000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111", "Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 110000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111");

Test 29: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "1001");

Test 30: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1010", "1010");

Test 31: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("mo1A=]l/U*\u0001", "00000000000001101");
binaryCalculate.addBinary("mo1A=]l/U*\u0001", "01010101010101010");

Test 32: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1001011001", "1001011001");

Test 33: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("111010011110100111101001", "100");

Test 34: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1010", "1100");
binaryCalculate.addBinary("1111", "1010");
binaryCalculate.addBinary("1110", "1101");

Test 35: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("01010101", "01010101");

Test 36: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("", "ipac.Output", 0, "");

Test 37: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("1234567890", "1234567890", 0, "1234567890");


* Generated after the refinement and before minimization 38 tests with total length 88
* test suite isTestSuite: 38
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("fq]9']s!1}d_<G0D&", "100");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "00000000000001101");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 127;
binaryCalculate.MAXPREFIX = 127;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000001", "0");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}

Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("Gh6X_ ", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001", 16, "mJ");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("0000000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000000001");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("000000000000000000000000000000010", "fq]9']s!1}d_<G0D&", 30, " -- ");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 109;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"Total Range:  -- 
   // Usable Range:  -- 
   // 
   // Total usable IP Addresses : 0
   // Subnet: 
   // Binary Subnet: 
   // Broadcast Addres\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "00000000000001001");
Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("h0$<tljyTd1\"5k0AT ", "h0$<tljyTd1\"5k0AT ");
Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("mo1A=]l/U*\u0001", "00000000000001101");
Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("fq]9']s!1}d1<G0D&", "fq]9']s!1}d1<G0D&");
Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("fq]9']s!1}d_<G0D&", "100");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary(".:", ".:");
Test 16: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("Th,q-K{\u0000{-B%O3^U", "Th,q-K{\u0000{-B%O3^U");
Test 17: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
binaryCalculate.isIPv6 = false;
binaryCalculate.isIPv6 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "ipac.Output", 0, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}

Test 18: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("'}p)*5@BO3pb:*", "'}p)*5@BO3pb:*", 0, "'}p)*5@BO3pb:*");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 19: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1111001100111100", "100");

Test 20: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "00000000000001101");

Test 21: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

Test 22: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("100010100010101000101010001010100", "0");

Test 23: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("Gh6X_ ", "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001", 16, "mJ");

Test 24: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("1234567890", "1000000000");

Test 25: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range: 169.254.0.0 - 169.254.255.255\nUsable Range: 169.254.0.1 - 169.254.0.254\n\nTotal usable IP Addresses : 65,534\nSubnet: 169.254.0.0/16\nBinary Subnet: 10000000 01000000 00000000 00000000\nBroadcast Address: 169.254.255.255\nPrefix: /16\nNetmask: 255.255.0.0\nBinary Netmask: 11111111 11111111 00000000 00000000");

Test 26: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "fe80:0000:0000:0000:0202:b3ff:fe1e:8329");

Test 27: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("101010101010101010101010", "101010101010101010101010", 25, "-_-");

Test 28: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 11000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111", "Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 110000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111");

Test 29: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "1001");

Test 30: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1010", "1010");

Test 31: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("mo1A=]l/U*\u0001", "00000000000001101");
binaryCalculate.addBinary("mo1A=]l/U*\u0001", "01010101010101010");

Test 32: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1001011001", "1001011001");

Test 33: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("111010011110100111101001", "100");

Test 34: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1010", "1100");
binaryCalculate.addBinary("1111", "1010");
binaryCalculate.addBinary("1110", "1101");

Test 35: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("01010101", "01010101");

Test 36: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("", "ipac.Output", 0, "");

Test 37: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("1234567890", "1234567890", 0, "1234567890");


* Minimizing test suite
* test suite isTestSuite: 18
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 127;
binaryCalculate.MAXPREFIX = 127;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 11000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111", "Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 110000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}

Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("Gh6X_ ", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000001", 16, "mJ");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("0000000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000000001");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("1234567890", "1234567890", 0, "1234567890");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 109;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"Total Range:  -- 
   // Usable Range:  -- 
   // 
   // Total usable IP Addresses : 0
   // Subnet: 
   // Binary Subnet: 
   // Broadcast Addres\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("000000000000000000000000000000010", "fq]9']s!1}d_<G0D&", 30, " -- ");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("100", "00000000000001101");
Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1001011001", "1001011001");
Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1111", "1010");
Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("mo1A=]l/U*\u0001", "00000000000001101");
Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("fq]9']s!1}d_<G0D&", "100");
Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("01010101", "01010101");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary(".:", ".:");
Test 16: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("Th,q-K{\u0000{-B%O3^U", "Th,q-K{\u0000{-B%O3^U");
Test 17: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
binaryCalculate.isIPv6 = false;
binaryCalculate.isIPv6 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "ipac.Output", 0, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 103
* Number of covered goals: 99
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 243
* Number of covered goals: 230
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 9
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 95%
* Total number of goals: 103
* Number of covered goals: 98
* Generated 18 tests with total length 45
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 127;
binaryCalculate.MAXPREFIX = 127;
String IPCalculate = binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNe\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000", IPCalculate);


** It was a parseable test case! 
refined test name is: testIPCalculatevalidInputassertCorrectOutput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 11000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111", "Total Range: 2001:db8:a0b:12f0::/35\nUsable Range: 2001:db8:a0b:12f0::/46\n\nTotal usable IP Addresses : 16777216\nSubnet: 2001:db8:a0b:12f0::\nBinary Subnet: 110000000000000000000000000000000000000000000000000000000000000\nBroadcast Address: 2001:db8:a0b:12f0::ffff:ffff:ffff:ffff\nPrefix: /46\nNetmask: FFFFFFFF_FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF\nBinary Netmask: 11111111111111111111111111111111111111111111111111111111111111");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}


** It was a parseable test case! 
refined test name is: testInvalidIpAddressthrowsNumberFormatException
* Compiling Tests
* Computation finished
