* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: ipac.BinaryCalculate
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/82_ipcalculator/evosuite-files/evosuite.properties
* Connecting to master process on port 3347
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class ipac.BinaryCalculate
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 463
* Using seed 1709279005505
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 138 / 463
[Progress:>                             0%] [Cov:======================>            65%][Progress:>                             1%] [Cov:=======================>           66%][Progress:>                             1%] [Cov:========================>          69%][Progress:>                             1%] [Cov:========================>          71%][Progress:>                             2%] [Cov:=========================>         72%][Progress:>                             2%] [Cov:=========================>         74%][Progress:>                             3%] [Cov:==========================>        77%][Progress:>                             3%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:============================>      80%][Progress:=>                            5%] [Cov:============================>      80%][Progress:=>                            5%] [Cov:============================>      80%][Progress:=>                            5%] [Cov:============================>      80%][Progress:=>                            6%] [Cov:============================>      80%][Progress:=>                            6%] [Cov:============================>      82%][Progress:=>                            6%] [Cov:============================>      82%][Progress:==>                           7%] [Cov:============================>      82%][Progress:==>                           7%] [Cov:=============================>     83%][Progress:==>                           8%] [Cov:=============================>     83%][Progress:==>                           8%] [Cov:=============================>     83%][Progress:==>                           8%] [Cov:=============================>     83%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          11%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     84%][Progress:===>                          12%] [Cov:=============================>     85%][Progress:===>                          12%] [Cov:=============================>     85%][Progress:===>                          13%] [Cov:=============================>     85%][Progress:===>                          13%] [Cov:=============================>     85%][Progress:====>                         14%] [Cov:=============================>     85%][Progress:====>                         14%] [Cov:=============================>     85%][Progress:====>                         15%] [Cov:=============================>     85%][Progress:====>                         15%] [Cov:=============================>     85%][Progress:====>                         15%] [Cov:=============================>     85%][Progress:====>                         16%] [Cov:=============================>     85%][Progress:====>                         16%] [Cov:=============================>     85%][Progress:====>                         16%] [Cov:=============================>     85%][Progress:=====>                        17%] [Cov:=============================>     85%][Progress:=====>                        17%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:=====>                        19%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       21%] [Cov:=============================>     85%][Progress:======>                       22%] [Cov:==============================>    87%][Progress:======>                       22%] [Cov:==============================>    87%][Progress:======>                       22%] [Cov:==============================>    87%][Progress:======>                       23%] [Cov:==============================>    87%][Progress:======>                       23%] [Cov:==============================>    87%][Progress:======>                       23%] [Cov:==============================>    87%][Progress:=======>                      24%] [Cov:==============================>    87%][Progress:=======>                      24%] [Cov:==============================>    87%][Progress:=======>                      24%] [Cov:==============================>    87%][Progress:=======>                      24%] [Cov:==============================>    87%][Progress:=======>                      25%] [Cov:==============================>    87%][Progress:=======>                      25%] [Cov:==============================>    87%][Progress:=======>                      25%] [Cov:==============================>    87%][Progress:=======>                      26%] [Cov:==============================>    87%][Progress:=======>                      26%] [Cov:==============================>    87%][Progress:=======>                      26%] [Cov:==============================>    87%][Progress:=======>                      26%] [Cov:==============================>    87%][Progress:=======>                      26%] [Cov:==============================>    87%][Progress:========>                     27%] [Cov:==============================>    87%][Progress:========>                     27%] [Cov:==============================>    87%][Progress:========>                     27%] [Cov:==============================>    87%][Progress:========>                     28%] [Cov:==============================>    87%][Progress:========>                     28%] [Cov:==============================>    87%][Progress:========>                     28%] [Cov:==============================>    87%][Progress:========>                     29%] [Cov:==============================>    87%][Progress:========>                     29%] [Cov:==============================>    87%][Progress:========>                     29%] [Cov:==============================>    87%][Progress:========>                     29%] [Cov:==============================>    87%][Progress:=========>                    30%] [Cov:==============================>    87%][Progress:=========>                    30%] [Cov:==============================>    87%][Progress:=========>                    30%] [Cov:==============================>    87%][Progress:=========>                    30%] [Cov:==============================>    87%][Progress:=========>                    31%] [Cov:==============================>    87%][Progress:=========>                    31%] [Cov:==============================>    87%][Progress:=========>                    31%] [Cov:==============================>    87%][Progress:=========>                    31%] [Cov:==============================>    87%][Progress:=========>                    31%] [Cov:==============================>    87%][Progress:=========>                    32%] [Cov:==============================>    87%][Progress:=========>                    32%] [Cov:==============================>    87%][Progress:=========>                    32%] [Cov:==============================>    87%][Progress:=========>                    33%] [Cov:==============================>    87%][Progress:=========>                    33%] [Cov:==============================>    87%][Progress:=========>                    33%] [Cov:==============================>    87%][Progress:==========>                   34%] [Cov:==============================>    87%][Progress:==========>                   34%] [Cov:==============================>    87%][Progress:==========>                   34%] [Cov:==============================>    87%][Progress:==========>                   35%] [Cov:==============================>    87%][Progress:==========>                   35%] [Cov:==============================>    87%][Progress:==========>                   35%] [Cov:==============================>    87%][Progress:==========>                   35%] [Cov:==============================>    87%][Progress:==========>                   36%] [Cov:==============================>    87%][Progress:==========>                   36%] [Cov:==============================>    87%][Progress:==========>                   36%] [Cov:==============================>    87%][Progress:==========>                   36%] [Cov:==============================>    87%][Progress:===========>                  37%] [Cov:==============================>    87%][Progress:===========>                  37%] [Cov:==============================>    87%][Progress:===========>                  37%] [Cov:==============================>    87%][Progress:===========>                  38%] [Cov:==============================>    87%][Progress:===========>                  38%] [Cov:==============================>    87%][Progress:===========>                  38%] [Cov:==============================>    87%][Progress:===========>                  39%] [Cov:==============================>    87%][Progress:===========>                  39%] [Cov:==============================>    87%][Progress:===========>                  39%] [Cov:==============================>    87%][Progress:============>                 40%] [Cov:==============================>    87%][Progress:============>                 40%] [Cov:==============================>    87%][Progress:============>                 40%] [Cov:==============================>    87%][Progress:============>                 41%] [Cov:==============================>    87%][Progress:============>                 41%] [Cov:==============================>    87%][Progress:============>                 41%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:============>                 43%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                44%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                45%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:=============>                46%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               47%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%]
* Search finished after 101s and 342 generations, 109494 statements, best individual has fitness: 29.0
* Generated before the refinement 19 tests with total length 45
statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("192.168.0.1", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
    }
}
statement is: // Improved test data
BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("192.168.0.1", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.0.1", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.0.1";
String string = "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%") target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ";
String string = "(9cp,V%";
binaryCalculate.subBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("=^R1-$cO\"MX;7w1", "=^R1-$cO\"MX;7w1")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("=^R1-$cO\"MX;7w1", "=^R1-$cO\"MX;7w1");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for BinaryCalculate.subBinary()
        binaryCalculate.subBinary("10101010", "10101010");
    }
}
statement is: // Improved test data for BinaryCalculate.subBinary()
binaryCalculate.subBinary("10101010", "10101010"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data for BinaryCalculate.subBinary()
binaryCalculate.subBinary("10101010", "10101010") target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", "")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("192.168.1.1", "");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("192.168.1.1", ""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.1.1", "") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.1.1";
String string = "";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("0", "0")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.1.1";
String string = "255.255.255.0";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("%b.j9V01yE", "%b.j9V01yE")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("%b.j9V01yE", "%b.j9V01yE");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.1");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.1") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.0.1";
String string = "192.168.0.1";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@b5156085 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        binaryCalculate.isIPv6 = true;
        binaryCalculate.IPCalculate("Total Range:  1101 \nUsable Range:  101 \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  1101 \nUsable Range:  101 \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
    }
}
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("Total Range:  1101 \nUsable Range:  101 \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  1101 \nUsable Range:  101 \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("Total Range:  1101 \nUsable Range:  101 \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  1101 \nUsable Range:  101 \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@38c28a15 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv4 = true
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("]|Lmn0+)hXfv7nQWTR", "]|Lmn0+)hXfv7nQWTR", 0, "]|Lmn0+)hXfv7nQWTR")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.prefixInPrefixCalculate("]|Lmn0+)hXfv7nQWTR", "]|Lmn0+)hXfv7nQWTR", 0, "]|Lmn0+)hXfv7nQWTR");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv4 = true;
        binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.1", 0, "192.168.0.1");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv4 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.1", 0, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.1", 0, "192.168.0.1") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.0.1";
String string = "192.168.0.1";
int _int = 0;
String string = "192.168.0.1";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@3055b66f type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 1
statement is: org.evosuite.testcase.statements.AssignmentStatement@c55979a5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv4 = true
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("", "", 1, "")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
binaryCalculate.isIPv4 = true;
binaryCalculate.prefixInPrefixCalculate("", "", 1, "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.lengthOfToken = 32;
        binaryCalculate.isIPv4 = true;
        binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.0/24", 1, "192.168.0.128");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.lengthOfToken = 32, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.isIPv4 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.0/24", 1, "192.168.0.128"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.0/24", 1, "192.168.0.128") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.0.1";
String string = "192.168.0.0/24";
int _int = 1;
String string = "192.168.0.128";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@141c9c4a type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 1
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("", "", 1, "")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
binaryCalculate.prefixInPrefixCalculate("", "", 1, "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.lengthOfToken = 1;
        binaryCalculate.prefixInPrefixCalculate("010", "001", 2, "01");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.lengthOfToken = 1, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.prefixInPrefixCalculate("010", "001", 2, "01"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("010", "001", 2, "01") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "010";
String string = "001";
int _int = 2;
String string = "01";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@863358ab type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000", "Total usable IP Addresses : ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000", "Total usable IP Addresses : ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv6 = true;
        binaryCalculate.IPCalculate("8000::", "Total usable IP Addresses : ");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("8000::", "Total usable IP Addresses : "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("8000::", "Total usable IP Addresses : ") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "8000::";
String string = "Total usable IP Addresses : ";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", (-5), "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", (-5), "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.prefixInPrefixCalculate("111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000", "01010101010101010101010101010101010101010101010101010101010101010101", -5, "101010101010101010101010101010101010101010101010101010101010101010");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.prefixInPrefixCalculate("111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000", "01010101010101010101010101010101010101010101010101010101010101010101", -5, "101010101010101010101010101010101010101010101010101010101010101010"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000", "01010101010101010101010101010101010101010101010101010101010101010101", -5, "101010101010101010101010101010101010101010101010101010101010101010") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000";
String string = "01010101010101010101010101010101010101010101010101010101010101010101";
String string = "101010101010101010101010101010101010101010101010101010101010101010";
String string = null;
binaryCalculate.prefixInPrefixCalculate(string, string, (int) string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("Your computer does not have sufficent memory to process this query.", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Your computer does not have sufficent memory to process this query.", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("192.168.0.1", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("192.168.0.1", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("192.168.0.1", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.0.1";
String string = "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", "`vNEiv'Uuy'?VAS1f")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", "`vNEiv'Uuy'?VAS1f");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("011010110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110", "0001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("011010110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110", "0001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("011010110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110", "0001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "011010110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110";
String string = "0001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111", "Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111", "Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111", "Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111";
String string = "Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: 10.0.0.0/24\nBinary Subnet: 1010.0000.0000.0000\nBroadcast Address: 10.0.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 1111.1111.1111.0000", "Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: 10.0.0.0/24\nBinary Subnet: 1010.0000.0000.0000\nBroadcast Address: 10.0.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 1111.1111.1111.0000", "Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: "), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: 10.0.0.0/24\nBinary Subnet: 1010.0000.0000.0000\nBroadcast Address: 10.0.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 1111.1111.1111.0000", "Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: 10.0.0.0/24\nBinary Subnet: 1010.0000.0000.0000\nBroadcast Address: 10.0.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 1111.1111.1111.0000";
String string = "Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("Total usable IP Addresses : ", "Total usable IP Addresses : ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total usable IP Addresses : ", "Total usable IP Addresses : ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("Total usable IP Addresses : 10.10.10.0", "Total usable IP Addresses : 10.10.10.255");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("Total usable IP Addresses : 10.10.10.0", "Total usable IP Addresses : 10.10.10.255"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("Total usable IP Addresses : 10.10.10.0", "Total usable IP Addresses : 10.10.10.255") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total usable IP Addresses : 10.10.10.0";
String string = "Total usable IP Addresses : 10.10.10.255";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("S:%*Z~~{H|Jn", "S:%*Z~~{H|Jn")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("S:%*Z~~{H|Jn", "S:%*Z~~{H|Jn");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@d8ba3db1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv4 = true
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000", "QnfX#d", 586, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000", "QnfX#d", 586, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        binaryCalculate.isIPv4 = true;
        binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000", "QnfX#d", 586, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 16777214\nSubnet: 192.168.254.0\nBinary Subnet: 11000000.10101000.11101000.00000000\nBroadcast Address: 192.168.254.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 11111111.11111111.11111111.00000000");
    }
}
statement is: binaryCalculate.isIPv4 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000", "QnfX#d", 586, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 16777214\nSubnet: 192.168.254.0\nBinary Subnet: 11000000.10101000.11101000.00000000\nBroadcast Address: 192.168.254.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 11111111.11111111.11111111.00000000"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000", "QnfX#d", 586, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 16777214\nSubnet: 192.168.254.0\nBinary Subnet: 11000000.10101000.11101000.00000000\nBroadcast Address: 192.168.254.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 11111111.11111111.11111111.00000000") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
* test suite isTestSuite: 35
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("=^R1-$cO\"MX;7w1", "=^R1-$cO\"MX;7w1");
Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}

Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("%b.j9V01yE", "%b.j9V01yE");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("]|Lmn0+)hXfv7nQWTR", "]|Lmn0+)hXfv7nQWTR", 0, "]|Lmn0+)hXfv7nQWTR");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
binaryCalculate.isIPv4 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "", 1, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}

Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "", 1, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}

Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000", "Total usable IP Addresses : ");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", (-5), "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000");
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -4
   //
   verifyException("ipac.BinaryCalculate", e);
}

Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Your computer does not have sufficent memory to process this query.", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", "`vNEiv'Uuy'?VAS1f");
Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 16: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total usable IP Addresses : ", "Total usable IP Addresses : ");
Test 17: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("S:%*Z~~{H|Jn", "S:%*Z~~{H|Jn");
Test 18: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000", "QnfX#d", 586, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 19: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

Test 20: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%");

Test 21: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.1.1", "");

Test 22: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0");

Test 23: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.1");

Test 24: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.1", 0, "192.168.0.1");

Test 25: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.0/24", 1, "192.168.0.128");

Test 26: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("010", "001", 2, "01");

Test 27: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("8000::", "Total usable IP Addresses : ");

Test 28: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000", "01010101010101010101010101010101010101010101010101010101010101010101", (int) "101010101010101010101010101010101010101010101010101010101010101010", (String) null);

Test 29: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("192.168.0.1", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

Test 30: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("011010110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110", "0001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001");

Test 31: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111", "Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111");

Test 32: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: 10.0.0.0/24\nBinary Subnet: 1010.0000.0000.0000\nBroadcast Address: 10.0.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 1111.1111.1111.0000", "Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

Test 33: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total usable IP Addresses : 10.10.10.0", "Total usable IP Addresses : 10.10.10.255");

Test 34: 
BinaryCalculate binaryCalculate = new BinaryCalculate();


* Generated after the refinement and before minimization 35 tests with total length 76
* test suite isTestSuite: 35
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("=^R1-$cO\"MX;7w1", "=^R1-$cO\"MX;7w1");
Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}

Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("%b.j9V01yE", "%b.j9V01yE");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("]|Lmn0+)hXfv7nQWTR", "]|Lmn0+)hXfv7nQWTR", 0, "]|Lmn0+)hXfv7nQWTR");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
binaryCalculate.isIPv4 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "", 1, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}

Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "", 1, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}

Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000", "Total usable IP Addresses : ");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", (-5), "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000");
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -4
   //
   verifyException("ipac.BinaryCalculate", e);
}

Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Your computer does not have sufficent memory to process this query.", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", "`vNEiv'Uuy'?VAS1f");
Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: ", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 16: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total usable IP Addresses : ", "Total usable IP Addresses : ");
Test 17: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("S:%*Z~~{H|Jn", "S:%*Z~~{H|Jn");
Test 18: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000", "QnfX#d", 586, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 19: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

Test 20: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%");

Test 21: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.1.1", "");

Test 22: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0");

Test 23: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.1");

Test 24: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.1", 0, "192.168.0.1");

Test 25: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.0/24", 1, "192.168.0.128");

Test 26: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("010", "001", 2, "01");

Test 27: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("8000::", "Total usable IP Addresses : ");

Test 28: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000", "01010101010101010101010101010101010101010101010101010101010101010101", (int) "101010101010101010101010101010101010101010101010101010101010101010", (String) null);

Test 29: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("192.168.0.1", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

Test 30: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("011010110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110", "0001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001");

Test 31: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111", "Total Range:  255.255.255.255 \nUsable Range:  0.0.0.0 -- 255.255.255.255\n\nTotal usable IP Addresses : 4,294,967,295\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 11111111");

Test 32: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: 10.0.0.0/24\nBinary Subnet: 1010.0000.0000.0000\nBroadcast Address: 10.0.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 1111.1111.1111.0000", "Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

Test 33: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total usable IP Addresses : 10.10.10.0", "Total usable IP Addresses : 10.10.10.255");

Test 34: 
BinaryCalculate binaryCalculate = new BinaryCalculate();


* Minimizing test suite
* test suite isTestSuite: 15
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("011010110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110", "0001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}

Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", (-5), "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000");
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -4
   //
   verifyException("ipac.BinaryCalculate", e);
}

Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000", "QnfX#d", 586, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}

Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.1", 0, "192.168.0.1");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
binaryCalculate.isIPv4 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "", 1, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}

Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "", 1, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}

Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: 10.0.0.0/24\nBinary Subnet: 1010.0000.0000.0000\nBroadcast Address: 10.0.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 1111.1111.1111.0000", "Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000");
Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("=^R1-$cO\"MX;7w1", "=^R1-$cO\"MX;7w1");
Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%");
Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("Total usable IP Addresses : ", "Total usable IP Addresses : ");
Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("S:%*Z~~{H|Jn", "S:%*Z~~{H|Jn");

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 103
* Number of covered goals: 99
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 243
* Number of covered goals: 230
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 9
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 103
* Number of covered goals: 96
* Generated 15 tests with total length 34
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 25%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String addBinary = binaryCalculate.addBinary("011010110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110", "0001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001001");
assertEquals("0100011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", addBinary);


** It was a parseable test case! 
refined test name is: testAddBinaryStringsshouldReturnCorrectResult
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String IPCalculate = binaryCalculate.IPCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000001", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
assertEquals("Total Range: 0:0:0:0:2000:0:0:1 -- \nUsable Range: 0:0:0:0:2000:0:0:2 -- ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\n\nTotal usable IP Addresses : 340,282,366,920,938,463,461,068,764,422,554,517,502\nSubnet: 0:0:0:0:2000:0:0:1\nBinary Subnet: 0000000000000000:0000000000000000:0000000000000000:0000000000000000:0010000000000000:0000000000000000:0000000000000000:0000000000000001\nBroadcast Address: \nPrefix: /0\nNetmask: 0:0:0:0:2000:0:0:0\nBinary Netmask: 0000000000000000:0000000000000000:0000000000000000:0000000000000000:0010000000000000:0000000000000000:0000000000000000:0000000000000000", IPCalculate);


** It was a parseable test case! 
refined test name is: testIPCalculateValidInputReturnsExpectedOutput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // radix 0 less than Character.MIN_RADIX
   //
   verifyException("java.lang.Integer", e);
}


** It was a parseable test case! 
refined test name is: testInvalidIPAddress
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000", (-5), "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000");
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // -4
   //
   verifyException("ipac.BinaryCalculate", e);
}


** It was a parseable test case! 
refined test name is: testThrowsExceptionOnInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String IPCalculate = binaryCalculate.IPCalculate("0", "0");
assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : -1\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: ", IPCalculate);


** It was a parseable test case! 
refined test name is: testInvalidInputValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000", "QnfX#d", 586, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
  fail("Expecting exception: NoSuchElementException");

} catch(NoSuchElementException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.util.StringTokenizer", e);
}


** It was a parseable test case! 
refined test name is: testPrefixInPrefixCalculate
* Compiling Tests
refined test name is: testPrefixCalculation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "192.168.0.1", 0, "192.168.0.1");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}


** It was a parseable test case! 
refined test name is: testPrefixInPrefixCalculatethrowsHeadlessException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
binaryCalculate.isIPv4 = true;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "", 1, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}


** It was a parseable test case! 
refined test name is: testThrowsNumberFormatExceptionWhenPrefixIsEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.lengthOfToken = 1;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("", "", 1, "");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // Zero length BigInteger
   //
   verifyException("java.math.BigInteger", e);
}


** It was a parseable test case! 
refined test name is: testPrefixInPrefixCalculateWithEmptyToken
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String addBinary = binaryCalculate.addBinary("Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 19,342,813,113,834,066,795,298,816\nSubnet: 10.0.0.0/24\nBinary Subnet: 1010.0000.0000.0000\nBroadcast Address: 10.0.0.255\nPrefix: /24\nNetmask: 255.255.255.0\nBinary Netmask: 1111.1111.1111.0000", "Total Range:  19,342,813,113,834,066,795,298,816\nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
assertEquals("1111011", addBinary);


** It was a parseable test case! 
refined test name is: testAddBinary
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String addBinary = binaryCalculate.addBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000", "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 618,970,019,642,690,137,449,562,119\nSubnet: \nBinary Subnet: Tot\nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000");
assertEquals("1001011100000", addBinary);


** It was a parseable test case! 
refined test name is: testAddBinaryStrings
* Compiling Tests
refined test name is: testAddBinaryCorrectResult
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String subBinary = binaryCalculate.subBinary("=^R1-$cO\"MX;7w1", "=^R1-$cO\"MX;7w1");
assertEquals("00", subBinary);


** It was a parseable test case! 
refined test name is: testSubBinaryGivenInputsShouldReturnZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String subBinary = binaryCalculate.subBinary("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "(9cp,V%");
assertEquals("000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000", subBinary);


** It was a parseable test case! 
refined test name is: testSubBinaryValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String addBinary = binaryCalculate.addBinary("Total usable IP Addresses : ", "Total usable IP Addresses : ");
assertEquals("", addBinary);


** It was a parseable test case! 
refined test name is: testAddBinaryemptyStringsreturnsEmptyString
* Compiling Tests
refined test name is: testAddBinaryShouldReturnEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String subBinary = binaryCalculate.subBinary("S:%*Z~~{H|Jn", "S:%*Z~~{H|Jn");
assertEquals("", subBinary);


** It was a parseable test case! 
refined test name is: testSubBinaryGivenEqualInputsReturnsEmptyString
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:20.191 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:50:20.218 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:20.414 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:20.417 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
[MASTER] 07:50:20.535 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:20.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
[MASTER] 07:50:20.749 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:20.751 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
[MASTER] 07:50:21.050 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:50:21.060 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 07:50:21.283 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:50:21.285 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:21.371 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:50:21.373 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:21.451 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:50:21.453 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:21.530 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:21.532 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
[MASTER] 07:50:21.625 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:50:21.627 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 07:50:21.720 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:21.722 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
[MASTER] 07:50:21.807 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:50:21.809 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:21.910 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 07:50:21.912 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
[MASTER] 07:50:21.994 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 07:50:21.996 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
[MASTER] 07:50:22.077 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:50:22.079 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 5 called: 0 to improve: false
** Write a test suite: 10 called: 1 to improve: false
** Write a test suite: 13 called: 2 to improve: false
[MASTER] 07:50:22.628 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:50:22.630 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 4 called: 1 to improve: false
** Write a test suite: 9 called: 2 to improve: false
[MASTER] 07:50:23.172 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7531596377701958617.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 07:50:23.175 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7531596377701958617.jar
* Writing tests to file
* Writing JUnit test case 'BinaryCalculate_ESTest' to evosuite-tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 4 called: 1 to improve: false
** Write a test suite: 9 called: 2 to improve: false
* Done!

* Computation finished
