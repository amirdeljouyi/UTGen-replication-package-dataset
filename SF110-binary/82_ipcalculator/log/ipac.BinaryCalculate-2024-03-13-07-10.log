* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: ipac.BinaryCalculate
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/82_ipcalculator/evosuite-files/evosuite.properties
* Connecting to master process on port 21536
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class ipac.BinaryCalculate
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 463
* Using seed 1710313832312
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 138 / 463
[Progress:>                             1%] [Cov:=======================>           68%][Progress:>                             1%] [Cov:========================>          71%][Progress:>                             2%] [Cov:========================>          71%][Progress:>                             2%] [Cov:=========================>         72%][Progress:>                             3%] [Cov:=========================>         72%][Progress:>                             3%] [Cov:=========================>         74%][Progress:>                             3%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       79%][Progress:=>                            5%] [Cov:============================>      80%][Progress:=>                            5%] [Cov:============================>      80%][Progress:=>                            6%] [Cov:============================>      80%][Progress:=>                            6%] [Cov:============================>      80%][Progress:=>                            6%] [Cov:============================>      80%][Progress:=>                            6%] [Cov:============================>      80%][Progress:=>                            6%] [Cov:============================>      80%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           7%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           8%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          11%] [Cov:============================>      80%][Progress:===>                          11%] [Cov:============================>      80%][Progress:===>                          11%] [Cov:============================>      80%][Progress:===>                          11%] [Cov:============================>      80%][Progress:===>                          11%] [Cov:============================>      80%][Progress:===>                          11%] [Cov:============================>      80%][Progress:===>                          12%] [Cov:============================>      80%][Progress:===>                          12%] [Cov:============================>      80%][Progress:===>                          12%] [Cov:============================>      80%][Progress:===>                          12%] [Cov:============================>      80%][Progress:===>                          12%] [Cov:============================>      80%][Progress:===>                          12%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         15%] [Cov:============================>      80%][Progress:====>                         15%] [Cov:============================>      80%][Progress:====>                         15%] [Cov:============================>      80%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       20%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       21%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     83%][Progress:======>                       22%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      25%] [Cov:=============================>     85%][Progress:=======>                      26%] [Cov:=============================>     85%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:=======>                      26%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     27%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     28%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:========>                     29%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    30%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    31%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    32%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:=========>                    33%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   34%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   35%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:==========>                   36%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  37%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  38%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:===========>                  39%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 40%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:============>                 43%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                44%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                45%] [Cov:==============================>    86%][Progress:=============>                46%] [Cov:==============================>    86%][Progress:=============>                46%] [Cov:==============================>    86%][Progress:=============>                46%] [Cov:==============================>    86%][Progress:=============>                46%] [Cov:==============================>    86%][Progress:=============>                46%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               47%] [Cov:==============================>    86%][Progress:==============>               48%] [Cov:==============================>    86%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               48%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:==============>               49%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              50%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              51%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              52%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:===============>              53%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             54%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             55%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:================>             56%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            57%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            58%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:=================>            59%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           60%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           61%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           62%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:==================>           63%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          64%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          65%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:===================>          66%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         67%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         68%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:====================>         69%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        70%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        71%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        72%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:=====================>        73%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       74%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       75%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:======================>       76%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      77%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      78%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:=======================>      79%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     80%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     81%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     82%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:========================>     83%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    84%] [Cov:==============================>    87%][Progress:=========================>    85%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:=========================>    86%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   87%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   88%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:==========================>   89%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  90%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  91%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  92%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:===========================>  93%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 94%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 95%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:============================> 96%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>97%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>98%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:=============================>99%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%][Progress:==============================100%] [Cov:==============================>    87%]
* Search finished after 102s and 507 generations, 156374 statements, best individual has fitness: 28.0
* Generated before the refinement 23 tests with total length 59
statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("@0,h{]1mS", "@0,h{]1mS")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("@0,h{]1mS", "@0,h{]1mS");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("0b1111", "0b1111");
        binaryCalculate.addBinary("0b1010", "0b1100");
        binaryCalculate.addBinary("0b0000", "0b1111");
        binaryCalculate.addBinary("0b1010", "0b1010");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("0b1111", "0b1111"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("0b1111", "0b1111") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: binaryCalculate.addBinary("0b1010", "0b1100"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("0b1010", "0b1100") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: binaryCalculate.addBinary("0b0000", "0b1111"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("0b0000", "0b1111") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: binaryCalculate.addBinary("0b1010", "0b1010"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("0b1010", "0b1010") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "0b1111";
String string = "0b1111";
binaryCalculate.addBinary(string, string);
String string = "0b1010";
String string = "0b1100";
binaryCalculate.addBinary(string, string);
String string = "0b0000";
String string = "0b1111";
binaryCalculate.addBinary(string, string);
String string = "0b1010";
String string = "0b1010";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@6f9f5f65 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.MAXPREFIX = 33
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 33;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.MAXPREFIX = 33;
        binaryCalculate.IPCalculate("Total Range:  192.168.0.0 - 192.168.0.65\nUsable Range:  192.168.0.0 - 192.168.0.64\n\nTotal usable IP Addresses : 64\nSubnet:  192.168.0.0/31\nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.MAXPREFIX = 33, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("Total Range:  192.168.0.0 - 192.168.0.65\nUsable Range:  192.168.0.0 - 192.168.0.64\n\nTotal usable IP Addresses : 64\nSubnet:  192.168.0.0/31\nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("Total Range:  192.168.0.0 - 192.168.0.65\nUsable Range:  192.168.0.0 - 192.168.0.64\n\nTotal usable IP Addresses : 64\nSubnet:  192.168.0.0/31\nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range:  192.168.0.0 - 192.168.0.65\nUsable Range:  192.168.0.0 - 192.168.0.64\n\nTotal usable IP Addresses : 64\nSubnet:  192.168.0.0/31\nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000";
String string = "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate(" ", " ", 0, " ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate(" ", " ", 0, " ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.prefixInPrefixCalculate("1", "0", 2, "1");
        // }}
    }
}
statement is: // Improved test data
BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.prefixInPrefixCalculate("1", "0", 2, "1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("1", "0", 2, "1") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
statement is: // }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1";
String string = "0";
int _int = 2;
String string = "1";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@815d7afe type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.MAXPREFIX = 33
statement is: org.evosuite.testcase.statements.AssignmentStatement@876ca945 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 33
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 33;
binaryCalculate.lengthOfToken = 33;
binaryCalculate.IPCalculate("FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.MAXPREFIX = 32;// The maximum prefix length is set to 32, which is a common value used in IPv6 addresses.

        binaryCalculate.lengthOfToken = 4;// The length of the token (i.e., the number of characters in each part of the address) is set to 4, which is also a common value used in IPv6 addresses.

        binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "FE80::0202:B3FF:FE1E:8329");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.MAXPREFIX = 32// The maximum prefix length is set to 32, which is a common value used in IPv6 addresses.
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.lengthOfToken = 4// The length of the token (i.e., the number of characters in each part of the address) is set to 4, which is also a common value used in IPv6 addresses.
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "FE80::0202:B3FF:FE1E:8329"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "FE80::0202:B3FF:FE1E:8329") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
String string = "FE80::0202:B3FF:FE1E:8329";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@8fe1ca16 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.MAXPREFIX = 776
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("", "n0$6")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 776;
binaryCalculate.IPCalculate("", "n0$6");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.MAXPREFIX = 52184;
        binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.255");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.MAXPREFIX = 52184, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.255"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.255") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.0.1";
String string = "192.168.0.255";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("0", "0")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.1.1";
String string = "255.255.255.0";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@87244a12 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "f^~_'Ci<iR")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "f^~_'Ci<iR");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv6 = true;
        binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: 123456789abcdef0\nBinary Subnet: 110000001110000011101110111010011\nBroadcast Address: 123456789abcdef0\nPrefix: /-2\nNetmask: 11111111111111111110000000000000\nBinary Netmask: 11111111111111111110000000000000", "f^~_'Ci<iR");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: 123456789abcdef0\nBinary Subnet: 110000001110000011101110111010011\nBroadcast Address: 123456789abcdef0\nPrefix: /-2\nNetmask: 11111111111111111110000000000000\nBinary Netmask: 11111111111111111110000000000000", "f^~_'Ci<iR"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: 123456789abcdef0\nBinary Subnet: 110000001110000011101110111010011\nBroadcast Address: 123456789abcdef0\nPrefix: /-2\nNetmask: 11111111111111111110000000000000\nBinary Netmask: 11111111111111111110000000000000", "f^~_'Ci<iR") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: 123456789abcdef0\nBinary Subnet: 110000001110000011101110111010011\nBroadcast Address: 123456789abcdef0\nPrefix: /-2\nNetmask: 11111111111111111110000000000000\nBinary Netmask: 11111111111111111110000000000000";
String string = "f^~_'Ci<iR";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@a4ffbe8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", 1226, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", 1226, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv6 = true;
        binaryCalculate.prefixInPrefixCalculate("2001:db8::/64", "fe80::/10", 16, "Total Range: 2001:db8::/64\nUsable Range: fe80::/10\n\nTotal usable IP Addresses : 256\nSubnet: 2001:db8::\nBinary Subnet: 11000000000000000000000000000000\nBroadcast Address: 2001:db8::ffff:ffff:ffff:ffff\nPrefix: /64\nNetmask: ffff:ffff:ffff:ffff:0000\nBinary Netmask: 11111111111111111111111111111111");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.prefixInPrefixCalculate("2001:db8::/64", "fe80::/10", 16, "Total Range: 2001:db8::/64\nUsable Range: fe80::/10\n\nTotal usable IP Addresses : 256\nSubnet: 2001:db8::\nBinary Subnet: 11000000000000000000000000000000\nBroadcast Address: 2001:db8::ffff:ffff:ffff:ffff\nPrefix: /64\nNetmask: ffff:ffff:ffff:ffff:0000\nBinary Netmask: 11111111111111111111111111111111"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("2001:db8::/64", "fe80::/10", 16, "Total Range: 2001:db8::/64\nUsable Range: fe80::/10\n\nTotal usable IP Addresses : 256\nSubnet: 2001:db8::\nBinary Subnet: 11000000000000000000000000000000\nBroadcast Address: 2001:db8::ffff:ffff:ffff:ffff\nPrefix: /64\nNetmask: ffff:ffff:ffff:ffff:0000\nBinary Netmask: 11111111111111111111111111111111") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "2001:db8::/64";
String string = "fe80::/10";
int _int = 16;
String string = "Total Range: 2001:db8::/64\nUsable Range: fe80::/10\n\nTotal usable IP Addresses : 256\nSubnet: 2001:db8::\nBinary Subnet: 11000000000000000000000000000000\nBroadcast Address: 2001:db8::ffff:ffff:ffff:ffff\nPrefix: /64\nNetmask: ffff:ffff:ffff:ffff:0000\nBinary Netmask: 11111111111111111111111111111111";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@f332c717 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv4 = true
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("nM?06", "nM?06")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.IPCalculate("nM?06", "nM?06");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv4 = true;
        binaryCalculate.IPCalculate("192.168.1.1", "192.168.1.1");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv4 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("192.168.1.1", "192.168.1.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("192.168.1.1", "192.168.1.1") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.1.1";
String string = "192.168.1.1";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF", "FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF", "FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.IPCalculate("255.255.241.255", "255.255.241.255");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.IPCalculate("255.255.241.255", "255.255.241.255"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("255.255.241.255", "255.255.241.255") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "255.255.241.255";
String string = "255.255.241.255";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@cfa541a3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: org.evosuite.testcase.statements.AssignmentStatement@4234ca73 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 9
statement is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String IPCalculate = binaryCalculate.IPCalculate("ipac.BinaryCjlculate", "ipac.BinaryCjlculate")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 9;
binaryCalculate.IPCalculate("ipac.BinaryCjlculate", "ipac.BinaryCjlculate");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv6 = true;
        binaryCalculate.lengthOfToken = 9;
        binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334");
        binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334");
        binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.lengthOfToken = 9, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334") target is: binaryCalculate method is: IPCalculate(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: IPCalculate(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
String string = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
binaryCalculate.IPCalculate(string, string);
String string = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
String string = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
binaryCalculate.IPCalculate(string, string);
String string = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
String string = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
binaryCalculate.IPCalculate(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@ef20dcbf type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv4 = true
statement is: org.evosuite.testcase.statements.AssignmentStatement@bf9c433 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 8
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("", "000000000000001", 70, (String) null)
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.lengthOfToken = 8;
binaryCalculate.prefixInPrefixCalculate("", "000000000000001", 70, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv4 = true;
        binaryCalculate.lengthOfToken = 8;
        binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "255.255.255.0", 32, null);
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv4 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.lengthOfToken = 8, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "255.255.255.0", 32, null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "255.255.255.0", 32, null) target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,<unknown>)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
i 3 Parameters size() 3 Num of Method Parameters: 4
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "192.168.0.1";
String string = "255.255.255.0";
int _int = 32;
String string = null;
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("00000000001", "v{K$b4F]\"U6")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("00000000001", "v{K$b4F]\"U6");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("0", "0")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0", "0");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("1010", "1100");
        // Previous test data
        // BinaryCalculate binaryCalculate = new BinaryCalculate();
        // binaryCalculate.addBinary("0", "0"); }}
    }
}
statement is: // Improved test data
BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("1010", "1100"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("1010", "1100") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: // Previous test data, class spoon.support.reflect.code.CtCommentImpl
statement is: // BinaryCalculate binaryCalculate = new BinaryCalculate();, class spoon.support.reflect.code.CtCommentImpl
statement is: // binaryCalculate.addBinary("0", "0"); }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1010";
String string = "1100";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("0", "w^31")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0", "w^31");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("0", "11111111111111111111111111111111");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("0", "11111111111111111111111111111111"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("0", "11111111111111111111111111111111") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "0";
String string = "11111111111111111111111111111111";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("0000000000001", "91fY")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0000000000001", "91fY");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("0000000000001", "1111000000000");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("0000000000001", "1111000000000"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("0000000000001", "1111000000000") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "0000000000001";
String string = "1111000000000";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("14HWH981D%Z", "14HWH981D%Z")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("14HWH981D%Z", "14HWH981D%Z");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("10011101", "01100001");
        binaryCalculate.addBinary("11111111", "11111111");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("10011101", "01100001"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("10011101", "01100001") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: binaryCalculate.addBinary("11111111", "11111111"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("11111111", "11111111") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "10011101";
String string = "01100001";
binaryCalculate.addBinary(string, string);
String string = "11111111";
String string = "11111111";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("00000000000000000001", "1")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("00000000000000000001", "1");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("1010", "1");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("1010", "1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("1010", "1") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1010";
String string = "1";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String addBinary = binaryCalculate.addBinary("", "FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("", "FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.addBinary("0100:0000:0000:0000:0000:0000:1010", "1111:1111:1111:1111:1111:1111:1111");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.addBinary("0100:0000:0000:0000:0000:0000:1010", "1111:1111:1111:1111:1111:1111:1111"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.addBinary("0100:0000:0000:0000:0000:0000:1010", "1111:1111:1111:1111:1111:1111:1111") target is: binaryCalculate method is: addBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: addBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "0100:0000:0000:0000:0000:0000:1010";
String string = "1111:1111:1111:1111:1111:1111:1111";
binaryCalculate.addBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("0", "0")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("0", "0");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.subBinary("1111", "1010");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.subBinary("1111", "1010"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("1111", "1010") target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1111";
String string = "1010";
binaryCalculate.subBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("U1Z JtFEz)C/", "U1Z JtFEz)C/")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("U1Z JtFEz)C/", "U1Z JtFEz)C/");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.subBinary("1234567890", "9876543210");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.subBinary("1234567890", "9876543210"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("1234567890", "9876543210") target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1234567890";
String string = "9876543210";
binaryCalculate.subBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String subBinary = binaryCalculate.subBinary("", "")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("", "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.subBinary("1010", "1111");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.subBinary("1010", "1111"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.subBinary("1010", "1111") target is: binaryCalculate method is: subBinary(java.lang.String,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: subBinary(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "1010";
String string = "1111";
binaryCalculate.subBinary(string, string);

statement is: ipac.BinaryCalculate()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class ipac.BinaryCalculate
statement code is: BinaryCalculate binaryCalculate = new BinaryCalculate()
statement is: org.evosuite.testcase.statements.AssignmentStatement@7dda7419 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: binaryCalculate.isIPv6 = true
statement is: org.evosuite.testcase.statements.AssignmentStatement@1fde7bd2 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: binaryCalculate.lengthOfToken = 1
statement is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: binaryCalculate.prefixInPrefixCalculate("0q9z;V@T+[?B`Q", "Netmask: ", 3503, "0q9z;V@T+[?B`Q")
test data is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 1;
binaryCalculate.prefixInPrefixCalculate("0q9z;V@T+[?B`Q", "Netmask: ", 3503, "0q9z;V@T+[?B`Q");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        BinaryCalculate binaryCalculate = new BinaryCalculate();
        binaryCalculate.isIPv6 = true;
        binaryCalculate.lengthOfToken = 1;
        binaryCalculate.prefixInPrefixCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "IPv6", 128, "2001:0db8:85a3:0000:0000:8a2e:0370:7334");
    }
}
statement is: BinaryCalculate binaryCalculate = new BinaryCalculate(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: binaryCalculate.isIPv6 = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.lengthOfToken = 1, class spoon.support.reflect.code.CtAssignmentImpl
statement is: binaryCalculate.prefixInPrefixCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "IPv6", 128, "2001:0db8:85a3:0000:0000:8a2e:0370:7334"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: binaryCalculate.prefixInPrefixCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "IPv6", 128, "2001:0db8:85a3:0000:0000:8a2e:0370:7334") target is: binaryCalculate method is: prefixInPrefixCalculate(java.lang.String,java.lang.String,int,java.lang.String)
source statement: ipac.BinaryCalculate()V callee: VariableReference: Statement 0, type ipac.BinaryCalculateindex is: 0
Matched Method is: prefixInPrefixCalculate(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;)V
TestCase is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String string = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
String string = "IPv6";
int _int = 128;
String string = "2001:0db8:85a3:0000:0000:8a2e:0370:7334";
binaryCalculate.prefixInPrefixCalculate(string, string, _int, string);

* test suite isTestSuite: 46
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("@0,h{]1mS", "@0,h{]1mS");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 33;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate(" ", " ", 0, " ");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 33;
binaryCalculate.lengthOfToken = 33;
binaryCalculate.IPCalculate("FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");
Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 776;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("", "n0$6");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "f^~_'Ci<iR");
Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
// Undeclared exception!
binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", 1226, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.IPCalculate("nM?06", "nM?06");
Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF", "FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"FFF:FFFF\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 9;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("ipac.BinaryCjlculate", "ipac.BinaryCjlculate");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"ipac.Bina\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.lengthOfToken = 8;
// Undeclared exception!
binaryCalculate.prefixInPrefixCalculate("", "000000000000001", 70, (String) null);
Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("00000000001", "v{K$b4F]\"U6");
Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0", "0");
Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0", "w^31");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0000000000001", "91fY");
Test 16: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("14HWH981D%Z", "14HWH981D%Z");
Test 17: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("00000000000000000001", "1");
Test 18: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("", "FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF");
Test 19: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("0", "0");
Test 20: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("U1Z JtFEz)C/", "U1Z JtFEz)C/");
Test 21: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("", "");
Test 22: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 1;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("0q9z;V@T+[?B`Q", "Netmask: ", 3503, "0q9z;V@T+[?B`Q");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"q\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 23: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0b1111", "0b1111");
binaryCalculate.addBinary("0b1010", "0b1100");
binaryCalculate.addBinary("0b0000", "0b1111");
binaryCalculate.addBinary("0b1010", "0b1010");

Test 24: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range:  192.168.0.0 - 192.168.0.65\nUsable Range:  192.168.0.0 - 192.168.0.64\n\nTotal usable IP Addresses : 64\nSubnet:  192.168.0.0/31\nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");

Test 25: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("1", "0", 2, "1");

Test 26: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "FE80::0202:B3FF:FE1E:8329");

Test 27: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.255");

Test 28: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0");

Test 29: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: 123456789abcdef0\nBinary Subnet: 110000001110000011101110111010011\nBroadcast Address: 123456789abcdef0\nPrefix: /-2\nNetmask: 11111111111111111110000000000000\nBinary Netmask: 11111111111111111110000000000000", "f^~_'Ci<iR");

Test 30: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("2001:db8::/64", "fe80::/10", 16, "Total Range: 2001:db8::/64\nUsable Range: fe80::/10\n\nTotal usable IP Addresses : 256\nSubnet: 2001:db8::\nBinary Subnet: 11000000000000000000000000000000\nBroadcast Address: 2001:db8::ffff:ffff:ffff:ffff\nPrefix: /64\nNetmask: ffff:ffff:ffff:ffff:0000\nBinary Netmask: 11111111111111111111111111111111");

Test 31: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.1.1", "192.168.1.1");

Test 32: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("255.255.241.255", "255.255.241.255");

Test 33: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334");
binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334");
binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334");

Test 34: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "255.255.255.0", 32, (String) null);

Test 35: 
BinaryCalculate binaryCalculate = new BinaryCalculate();

Test 36: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1010", "1100");

Test 37: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0", "11111111111111111111111111111111");

Test 38: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0000000000001", "1111000000000");

Test 39: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("10011101", "01100001");
binaryCalculate.addBinary("11111111", "11111111");

Test 40: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1010", "1");

Test 41: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0100:0000:0000:0000:0000:0000:1010", "1111:1111:1111:1111:1111:1111:1111");

Test 42: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1111", "1010");

Test 43: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1234567890", "9876543210");

Test 44: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1010", "1111");

Test 45: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "IPv6", 128, "2001:0db8:85a3:0000:0000:8a2e:0370:7334");


* Generated after the refinement and before minimization 46 tests with total length 110
* test suite isTestSuite: 46
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("@0,h{]1mS", "@0,h{]1mS");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 33;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate(" ", " ", 0, " ");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 33;
binaryCalculate.lengthOfToken = 33;
binaryCalculate.IPCalculate("FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");
Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 776;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("", "n0$6");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("0", "0");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "f^~_'Ci<iR");
Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
// Undeclared exception!
binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", 1226, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.IPCalculate("nM?06", "nM?06");
Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF", "FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"FFF:FFFF\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 9;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("ipac.BinaryCjlculate", "ipac.BinaryCjlculate");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"ipac.Bina\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.lengthOfToken = 8;
// Undeclared exception!
binaryCalculate.prefixInPrefixCalculate("", "000000000000001", 70, (String) null);
Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("00000000001", "v{K$b4F]\"U6");
Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0", "0");
Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0", "w^31");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0000000000001", "91fY");
Test 16: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("14HWH981D%Z", "14HWH981D%Z");
Test 17: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("00000000000000000001", "1");
Test 18: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("", "FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF");
Test 19: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("0", "0");
Test 20: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("U1Z JtFEz)C/", "U1Z JtFEz)C/");
Test 21: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("", "");
Test 22: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 1;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("0q9z;V@T+[?B`Q", "Netmask: ", 3503, "0q9z;V@T+[?B`Q");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"q\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 23: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0b1111", "0b1111");
binaryCalculate.addBinary("0b1010", "0b1100");
binaryCalculate.addBinary("0b0000", "0b1111");
binaryCalculate.addBinary("0b1010", "0b1010");

Test 24: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range:  192.168.0.0 - 192.168.0.65\nUsable Range:  192.168.0.0 - 192.168.0.64\n\nTotal usable IP Addresses : 64\nSubnet:  192.168.0.0/31\nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");

Test 25: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("1", "0", 2, "1");

Test 26: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "FE80::0202:B3FF:FE1E:8329");

Test 27: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.0.1", "192.168.0.255");

Test 28: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.1.1", "255.255.255.0");

Test 29: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: 123456789abcdef0\nBinary Subnet: 110000001110000011101110111010011\nBroadcast Address: 123456789abcdef0\nPrefix: /-2\nNetmask: 11111111111111111110000000000000\nBinary Netmask: 11111111111111111110000000000000", "f^~_'Ci<iR");

Test 30: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("2001:db8::/64", "fe80::/10", 16, "Total Range: 2001:db8::/64\nUsable Range: fe80::/10\n\nTotal usable IP Addresses : 256\nSubnet: 2001:db8::\nBinary Subnet: 11000000000000000000000000000000\nBroadcast Address: 2001:db8::ffff:ffff:ffff:ffff\nPrefix: /64\nNetmask: ffff:ffff:ffff:ffff:0000\nBinary Netmask: 11111111111111111111111111111111");

Test 31: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("192.168.1.1", "192.168.1.1");

Test 32: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("255.255.241.255", "255.255.241.255");

Test 33: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334");
binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334");
binaryCalculate.IPCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "2001:0db8:85a3:0000:0000:8a2e:0370:7334");

Test 34: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("192.168.0.1", "255.255.255.0", 32, (String) null);

Test 35: 
BinaryCalculate binaryCalculate = new BinaryCalculate();

Test 36: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1010", "1100");

Test 37: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0", "11111111111111111111111111111111");

Test 38: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0000000000001", "1111000000000");

Test 39: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("10011101", "01100001");
binaryCalculate.addBinary("11111111", "11111111");

Test 40: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("1010", "1");

Test 41: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0100:0000:0000:0000:0000:0000:1010", "1111:1111:1111:1111:1111:1111:1111");

Test 42: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1111", "1010");

Test 43: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1234567890", "9876543210");

Test 44: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1010", "1111");

Test 45: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.prefixInPrefixCalculate("2001:0db8:85a3:0000:0000:8a2e:0370:7334", "IPv6", 128, "2001:0db8:85a3:0000:0000:8a2e:0370:7334");


* Minimizing test suite
* test suite isTestSuite: 19
Test 0: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0100:0000:0000:0000:0000:0000:1010", "1111:1111:1111:1111:1111:1111:1111");
Test 1: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 33;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");
Test 2: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 33;
binaryCalculate.lengthOfToken = 33;
binaryCalculate.IPCalculate("FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");
Test 3: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 776;
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("", "n0$6");
  fail("Expecting exception: StringIndexOutOfBoundsException");

} catch(StringIndexOutOfBoundsException e) {
}

Test 4: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ", "f^~_'Ci<iR");
Test 5: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
// Undeclared exception!
binaryCalculate.prefixInPrefixCalculate("00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", 1226, "Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: \nBroadcast Address: \nPrefix: /-2\nNetmask: \nBinary Netmask: ");
Test 6: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.IPCalculate("nM?06", "nM?06");
Test 7: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate(" ", " ", 0, " ");
  fail("Expecting exception: HeadlessException");

} catch(HeadlessException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("java.awt.GraphicsEnvironment", e);
}

Test 8: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
// Undeclared exception!
try { 
  binaryCalculate.IPCalculate("FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF", "FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"FFF:FFFF\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 9: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv6 = true;
binaryCalculate.lengthOfToken = 1;
// Undeclared exception!
try { 
  binaryCalculate.prefixInPrefixCalculate("0q9z;V@T+[?B`Q", "Netmask: ", 3503, "0q9z;V@T+[?B`Q");
  fail("Expecting exception: NumberFormatException");

} catch(NumberFormatException e) {
   //
   // For input string: \"q\"
   //
   verifyException("java.lang.NumberFormatException", e);
}

Test 10: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.isIPv4 = true;
binaryCalculate.lengthOfToken = 8;
// Undeclared exception!
binaryCalculate.prefixInPrefixCalculate("", "000000000000001", 70, (String) null);
Test 11: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0b1010", "0b1100");
Test 12: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("0000000000001", "91fY");
Test 13: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("00000000000000000001", "1");
Test 14: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("", "FFF:FFFF:F1:FFFF:FFFSFF:FFFF:FFF");
Test 15: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("0", "0");
Test 16: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("1010", "1111");
Test 17: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.addBinary("00000000001", "v{K$b4F]\"U6");
Test 18: 
BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.subBinary("", "");

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 103
* Number of covered goals: 98
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 243
* Number of covered goals: 230
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 56%
* Total number of goals: 9
* Number of covered goals: 5
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 5
* Number of covered goals: 5
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 103
* Number of covered goals: 96
* Generated 19 tests with total length 49
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 25%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
String addBinary = binaryCalculate.addBinary("0100:0000:0000:0000:0000:0000:1010", "1111:1111:1111:1111:1111:1111:1111");
assertEquals("10100000000000000000000001001", addBinary);


** It was a parseable test case! 
refined test name is: testAddBinaryStrings
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 33;
String IPCalculate = binaryCalculate.IPCalculate("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");
assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 1,427,247,692,705,959,881,058,285,969,449,495,144,972,681,215\nSubnet: \nBinary Subnet: Total Range:  -- \nUsable Range:  \nBroadcast Address: \nPrefix: /0\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", IPCalculate);


** It was a parseable test case! 
refined test name is: testIPCalculateWithFullNetmask
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: BinaryCalculate binaryCalculate = new BinaryCalculate();
binaryCalculate.MAXPREFIX = 33;
binaryCalculate.lengthOfToken = 33;
String IPCalculate = binaryCalculate.IPCalculate("FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF", "FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF");
assertEquals("Total Range:  -- \nUsable Range:  -- \n\nTotal usable IP Addresses : 0\nSubnet: \nBinary Subnet: FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFF\nBroadcast Address: \nPrefix: /31\nNetmask: \nBinary Netmask: 000000000000000000000000000000000", IPCalculate);


* Computation finished
