/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 17:40:24 GMT 2024
 */

package com.jstevh.viewer;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jstevh.tools.StringList;
import com.jstevh.viewer.SAXDirParser;
import java.io.FileNotFoundException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.AttributesImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SAXDirParser_Original_ESTest extends SAXDirParser_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWebDataReturningNull() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.webData = null;
      String webData = sAXDirParser.getWebData();
      assertNull(webData);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWebDataReturningNonEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.webData = "parameter";
      String webData = sAXDirParser.getWebData();
      assertEquals("parameter", webData);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocalPackages() throws Throwable  {
      StringList localPackages = SAXDirParser.getLocalPackages();
      assertNull(localPackages);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndElementWithNonEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.endElement("Group", "k3\"c_2Z9", "Group");
      assertEquals("", sAXDirParser.getLocalBrowser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndElementWithEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.endElement("", "com.jstevh.tools.StringList", "com.jstevh.tools.StringList");
      assertFalse(sAXDirParser.acceptsLineNumber());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndCharactersWithPositiveAndStartElementWithEmptyStringAndStartElementWithEmptyString0() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("acceptsLineNumber", "acceptsLineNumber", "acceptsLineNumber", arg3);
      sAXDirParser.startElement("", "", "pkg", arg3);
      char[] arg0 = new char[3];
      arg0[1] = 'n';
      sAXDirParser.characters(arg0, 1, 1);
      assertEquals("", sAXDirParser.lineNumberParameter());
      assertEquals("", sAXDirParser.getLocalBrowser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndCharactersWithPositiveAndStartElementWithEmptyStringAndStartElementWithEmptyString1() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("acceptsLineNumber", "acceptsLineNumber", "acceptsLineNumber", arg3);
      sAXDirParser.startElement("", "", "pkg", arg3);
      char[] arg0 = new char[3];
      sAXDirParser.characters(arg0, 1, 1);
      assertEquals("", sAXDirParser.getEditor());
      assertEquals("", sAXDirParser.getLocalBrowser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersWithZeroAndCharactersWithNullAndCharactersWithNegative() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.characters((char[]) null, 0, (-1));
      assertEquals("", sAXDirParser.getEditor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndCharactersWithPositive0() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("+Hi", "Names", "Names", arg3);
      char[] arg0 = new char[4];
      sAXDirParser.characters(arg0, 1, 1);
      assertEquals("\u0000", sAXDirParser.getLocalBrowser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersWithZeroAndStartElement() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("Local", "Local", "Local", arg3);
      char[] arg0 = new char[20];
      sAXDirParser.characters(arg0, '\u0000', '\u0000');
      assertEquals("", sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndCharactersWithNegative0() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      AttributesImpl arg3 = new AttributesImpl();
      sAXDirParser.startElement("", "Web", "Web", arg3);
      sAXDirParser.characters((char[]) null, (-1487), (-1487));
      assertEquals("", sAXDirParser.getEditor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndCharactersWithPositive1() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      AttributesImpl arg3 = new AttributesImpl();
      sAXDirParser.startElement("com.jstevh.tools.StringList", "/.", "parameter", arg3);
      char[] arg0 = new char[6];
      sAXDirParser.characters(arg0, 1, 1);
      assertEquals("\u0000", sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndCharactersWithPositive2() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("acceptsLineNumber", "acceptsLineNumber", "acceptsLineNumber", arg3);
      char[] arg0 = new char[3];
      sAXDirParser.characters(arg0, 1, 1);
      assertFalse(sAXDirParser.acceptsLineNumber());
      assertEquals("", sAXDirParser.getEditor());
      assertEquals("", sAXDirParser.getLocalBrowser());
      assertEquals("", sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndCharactersWithNegative1() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      AttributesImpl arg3 = new AttributesImpl();
      sAXDirParser.startElement("", "Editor", "Editor", arg3);
      sAXDirParser.characters((char[]) null, (-1487), (-1487));
      assertEquals("", sAXDirParser.getWebData());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndCharactersWithPositiveAndStartElementWithEmptyStringAndStartElementWithEmptyString2() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("BrowserLoc", "BrowserLoc", "BrowserLoc", arg3);
      sAXDirParser.startElement("", "", "pkg", arg3);
      char[] arg0 = new char[7];
      arg0[1] = '.';
      sAXDirParser.characters(arg0, 1, 1);
      assertEquals("", sAXDirParser.getLocalBrowser());
      assertEquals("", sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartElementWithNonEmptyStringAndEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("Group", "", "Group", arg3);
      assertEquals("", sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocalBrowser() throws Throwable  {
      String localBrowser = SAXDirParser.getLocalBrowser();
      assertEquals("", localBrowser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLineNumberParameter() throws Throwable  {
      String lineNumberParameter = SAXDirParser.lineNumberParameter();
      assertEquals("", lineNumberParameter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWebDataReturningEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      String webData = sAXDirParser.getWebData();
      assertEquals("", webData);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDirectory() throws Throwable  {
      HashMap directory = SAXDirParser.getDirectory();
      assertEquals(0, directory.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEditor() throws Throwable  {
      String editor = SAXDirParser.getEditor();
      assertEquals("", editor);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsFileNotFoundException() throws Throwable  {
      try { 
        SAXDirParser.main((String[]) null);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/roham/Results-Utestgen/dataset/SF110-new-res/91_classviewer/packagedirectory.xml (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptsLineNumber() throws Throwable  {
      boolean acceptsLineNumber = SAXDirParser.acceptsLineNumber();
      assertFalse(acceptsLineNumber);
  }
}
