/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Thu Mar 14 17:40:24 GMT 2024
 */

package com.jstevh.viewer;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jstevh.tools.StringList;
import com.jstevh.viewer.SAXDirParser;
import java.io.FileNotFoundException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.xml.sax.Attributes;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.helpers.AttributesImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SAXDirParser_ESTest extends SAXDirParser_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWebDataReturningNull() throws Throwable  {
      // Given: A SAXDirParser object with a null webData field
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.webData = null;
      
      // When: The getWebData method is called on the SAXDirParser object
      String webData = sAXDirParser.getWebData();
      
      // Then: The method returns null
      assertNull(webData);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWebDataReturningNonEmptyString() throws Throwable  {
      SAXDirParser saxDirParser = new SAXDirParser();
      // Set the input parameter for the SAX parser
      saxDirParser.webData = "parameter";
      
      // Call the method that returns the web data
      String webData = saxDirParser.getWebData();
      
      // Assert that the returned web data is equal to the expected value
      assertEquals("parameter", webData);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocalPackages() throws Throwable  {
      // rollbacked to evosuite
      StringList localPackages = SAXDirParser.getLocalPackages();
      assertNull(localPackages);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndElement0() throws Throwable  {
      // No Comments were added
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.endElement("Group", "k3\"c_2Z9", "Group");
      assertFalse(sAXDirParser.acceptsLineNumber());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEndElement1() throws Throwable  {
      // Given
      SAXDirParser sAXDirParser = new SAXDirParser();
      
      // When
      sAXDirParser.endElement("Customer", "1234567890", "Customer");
      
      // Then
      assertFalse(sAXDirParser.acceptsLineNumber());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElementAndCharactersWithPositiveAndStartElementWithEmptyString0() throws Throwable  {
      SAXDirParser saxDirParser = new SAXDirParser();
      Attributes2Impl attributes = new Attributes2Impl();
      saxDirParser.startElement("acceptsLineNumber", "acceptsLineNumber", "acceptsLineNumber", attributes);
      saxDirParser.startElement("", "", "pkg", attributes);
      char[] elementData = new char[3];
      elementData[1] = 'n';
      saxDirParser.characters(elementData, 1, 1);
      assertEquals("", saxDirParser.getEditor());
      assertEquals("", saxDirParser.getLocalBrowser());
      assertEquals("", saxDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElementAndCharactersWithPositiveAndStartElementWithEmptyString1() throws Throwable  {
      // Arrange
      SAXDirParser sAXDirParser = new SAXDirParser();
      
      // Act
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("acceptsLineNumber", "acceptsLineNumber", "acceptsLineNumber", arg3);
      sAXDirParser.startElement("", "", "pkg", arg3);
      char[] arg0 = new char[3];
      sAXDirParser.characters(arg0, 1, 1);
      
      // Assert
      assertEquals("", sAXDirParser.getEditor());
      assertEquals("", sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocalBrowserReturningNonEmptyString() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("+Hi", "Names", "Names", arg3);
      char[] arg0 = new char[4];
      sAXDirParser.characters(arg0, 1, 1);
      
      // Test that the local browser is set to null when the start element method is called with a name of "+Hi" and no attributes.
      assertEquals("\u0000", sAXDirParser.getLocalBrowser());
      
      String localBrowser = SAXDirParser.getLocalBrowser();
      
      // Test that the getLocalBrowser method returns null when called before the start element method is called.
      assertNull(localBrowser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersWithZeroAndCharactersWithNullAndCharactersWithNegative() throws Throwable  {
      // Given a SAXDirParser instance
      SAXDirParser saxDirParser = new SAXDirParser();
      
      // When parsing null characters
      saxDirParser.characters((char[]) null, 0, (-1));
      
      // Then the local browser is an empty string
      assertEquals("", saxDirParser.getLocalBrowser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersWithZeroAndStartElement() throws Throwable  {
      // Given a SAXDirParser instance and a Attributes2Impl instance
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      
      // When the startElement method is called with "Local", "Local", "Local" and arg3 as arguments
      sAXDirParser.startElement("Local", "Local", "Local", arg3);
      
      // And the characters method is called with an empty character array, '\u0000' and '\u0000' as arguments
      char[] arg0 = new char[20];
      sAXDirParser.characters(arg0, '\u0000', '\u0000');
      
      // Then the lineNumberParameter method should return an empty string
      assertEquals("", sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElementAndCharactersWithNegative0() throws Throwable  {
      SAXDirParser sAXDirParser = new SAXDirParser();
      AttributesImpl arg3 = new AttributesImpl();
      sAXDirParser.startElement("", "Web", "Web", arg3);
      sAXDirParser.characters((char[]) null, (-1487), (-1487));
      // Given: The SAXDirParser is initialized with an empty string as the editor.
      assertEquals("", sAXDirParser.getEditor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLineNumberParameterReturningNonEmptyString() throws Throwable  {
      // Given a SAXDirParser object and an AttributesImpl object with no characters
      SAXDirParser sAXDirParser = new SAXDirParser();
      AttributesImpl arg3 = new AttributesImpl();
      
      // When the startElement method is called with "/." as the namespace, "parameter" as the local name, and the AttributesImpl object as the attribute list
      sAXDirParser.startElement("com.jstevh.tools.StringList", "/.", "parameter", arg3);
      
      // And when the characters method is called with an empty array of characters and a length of 1
      char[] arg0 = new char[6];
      sAXDirParser.characters(arg0, 1, 1);
      
      // Then the lineNumberParameter method should return an empty string
      assertEquals("", sAXDirParser.lineNumberParameter());
      
      // And the returned value should be equal to the expected value
      String expected = "";
      assertEquals(expected, sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElementAndCharactersWithPositive() throws Throwable  {
      // Given a SAXDirParser instance with some input data
      SAXDirParser sAXDirParser = new SAXDirParser();
      Attributes2Impl arg3 = new Attributes2Impl();
      sAXDirParser.startElement("acceptsLineNumber", "acceptsLineNumber", "acceptsLineNumber", arg3);
      
      // When the parser encounters a line number parameter
      char[] arg0 = new char[3];
      sAXDirParser.characters(arg0, 1, 1);
      
      // Then it should extract the editor and line number parameters from the input data
      assertEquals("", sAXDirParser.getEditor());
      assertEquals("", sAXDirParser.lineNumberParameter());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElementAndCharactersWithNegative1() throws Throwable  {
      // Given
      SAXDirParser saxDirParser = new SAXDirParser();
      AttributesImpl attributes = new AttributesImpl();
      
      // When
      saxDirParser.startElement("", "Editor", "Editor", attributes);
      saxDirParser.characters((char[]) null, (-1487), (-1487));
      
      // Then
      assertFalse(saxDirParser.acceptsLineNumber());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCharactersAndStartElementAndCharactersWithPositiveAndStartElementWithEmptyString2() throws Throwable  {
      // Set up SAX parser and test data
      SAXDirParser sAXDirParser = new SAXDirParser();
      String pkgName = "BrowserLoc.pkg";
      
      // Test parsing of package name
      sAXDirParser.startElement("", "", "pkg", new Attributes2Impl());
      assertEquals(1, sAXDirParser.getLocalBrowser().length());
      assertEquals('.', sAXDirParser.getLocalBrowser().charAt(0));
      assertEquals(pkgName, sAXDirParser.lineNumberParameter());
      assertEquals("", sAXDirParser.getEditor());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testStartElementWithNull() throws Throwable  {
      // rollbacked to evosuite
      SAXDirParser sAXDirParser = new SAXDirParser();
      sAXDirParser.startElement("Group", "", "Group", (Attributes) null);
      assertEquals("", sAXDirParser.getLocalBrowser());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLocalBrowserReturningEmptyString() throws Throwable  {
      // Given: The user has navigated to a web page using the SAXDirParser class.
      SAXDirParser saxDirParser = new SAXDirParser();
      
      // When: The user calls the getLocalBrowser method to retrieve the local browser name.
      String localBrowser = saxDirParser.getLocalBrowser();
      
      // Then: The returned string should be empty, as there is no local browser detected.
      assertEquals("", localBrowser);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLineNumberParameterReturningEmptyString() throws Throwable  {
      // Given: a SAXDirParser instance with default parameters
      SAXDirParser parser = new SAXDirParser();
      
      // When: the line number parameter is retrieved
      String lineNumberParameter = parser.lineNumberParameter();
      
      // Then: an empty string is returned, indicating that no line number parameter was specified
      assertEquals("", lineNumberParameter);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetWebDataReturningEmptyString() throws Throwable  {
      // Arrange
      SAXDirParser saxDirParser = new SAXDirParser();
      
      // Act
      String actualWebData = saxDirParser.getWebData();
      
      // Assert
      assertEquals("", actualWebData);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDirectory() throws Throwable  {
      // Arrange
      HashMap<String, String> directory = SAXDirParser.getDirectory();
      
      // Act
      boolean isDirectoryEmpty = directory.isEmpty();
      
      // Assert
      assertTrue(isDirectoryEmpty);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetEditor() throws Throwable  {
      // Given a SAXDirParser instance with no editor specified
      SAXDirParser parser = new SAXDirParser();
      
      // When we call the getEditor method
      String editor = parser.getEditor();
      
      // Then we expect an empty string to be returned
      assertEquals("", editor);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testMainThrowsFileNotFoundException() throws Throwable  {
      // Test that SAXDirParser throws a FileNotFoundException when given null as its arguments.
      try {
      SAXDirParser.main((String[]) null);
      } catch (FileNotFoundException e) {
      verifyException("java.io.FileInputStream", e);}
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testAcceptsLineNumber() throws Throwable  {
      // Given: a SAXDirParser instance
      SAXDirParser parser = new SAXDirParser();
      
      // When: the acceptsLineNumber method is called
      boolean result = parser.acceptsLineNumber();
      
      // Then: the method should return false
      assertFalse(result);
  }
}
