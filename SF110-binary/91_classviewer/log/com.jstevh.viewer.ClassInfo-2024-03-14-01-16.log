* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: com.jstevh.viewer.ClassInfo
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/91_classviewer/evosuite-files/evosuite.properties
* Connecting to master process on port 9102
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:17:05.649 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:17:05.659 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:17:05.896 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:17:05.944 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:17:05.946 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:17:05.949 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 01:17:09.070 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 01:17:09.166 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 01:17:09.167 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 01:17:09.167 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 01:17:09.168 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 01:17:09.169 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 01:17:09.169 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 01:17:09.170 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 01:17:09.171 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 01:17:09.188 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 01:17:09.200 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class com.jstevh.viewer.ClassInfo
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 605
* Using seed 1710379019455
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 172 / 605
[Progress:>                             0%] [Cov:====>                              13%][Progress:>                             1%] [Cov:==========>                        30%][Progress:>                             1%] [Cov:===============>                   44%][Progress:>                             1%] [Cov:================>                  46%][Progress:>                             2%] [Cov:==================>                52%][Progress:>                             2%] [Cov:==================>                54%][Progress:>                             2%] [Cov:======================>            63%][Progress:>                             2%] [Cov:=======================>           66%][Progress:>                             2%] [Cov:=======================>           66%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:=======================>           68%][Progress:>                             3%] [Cov:========================>          71%][Progress:>                             3%] [Cov:=========================>         72%][Progress:>                             3%] [Cov:=========================>         72%][Progress:=>                            4%] [Cov:=========================>         73%][Progress:=>                            4%] [Cov:=========================>         73%][Progress:=>                            4%] [Cov:=========================>         73%][Progress:=>                            4%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:==========================>        77%][Progress:=>                            4%] [Cov:==========================>        77%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            4%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            5%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       78%][Progress:=>                            6%] [Cov:===========================>       79%][Progress:=>                            6%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           7%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           8%] [Cov:===========================>       79%][Progress:==>                           9%] [Cov:===========================>       79%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:==>                           9%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          10%] [Cov:============================>      80%][Progress:===>                          11%] [Cov:============================>      80%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          11%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          12%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:===>                          13%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         14%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         15%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:====>                         16%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        17%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        18%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:=====>                        19%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       20%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       21%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       22%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:======>                       23%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      25%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     28%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:========>                     29%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    30%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    31%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    32%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:=========>                    33%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   34%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   35%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:==========>                   36%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:===========>                  39%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 40%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 42%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:============>                 43%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                45%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:=============>                46%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               47%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               48%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:==============>               49%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              50%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              51%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              52%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:===============>              53%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             54%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             55%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:================>             56%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            57%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            58%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:=================>            59%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           60%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           61%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           62%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          65%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:===================>          66%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         67%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         68%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        70%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        71%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        72%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:=====================>        73%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:======================>       76%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      77%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      78%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:=======================>      79%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:========================>     83%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    84%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    85%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:=========================>    86%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  91%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  92%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:===========================>  93%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 94%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>97%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>98%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:=============================>99%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%][Progress:==============================100%] [Cov:============================>      82%]
* Search finished after 201s and 1400 generations, 373841 statements, best individual has fitness: 96.0
* Generated before the refinement 43 tests with total length 131
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: isAbstract()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean abstract = classInfo.isAbstract()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
classInfo.isAbstract();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.setIsAbstract(true);
    }
}
statement is: classInfo.setIsAbstract(true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.setIsAbstract(true) target is: classInfo method is: setIsAbstract(boolean)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: isInterface()Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean interface = classInfo.isInterface()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
classInfo.isInterface();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.isInterface();
        // Improved test data:
        classInfo = new ClassInfo("com.jstevh.tools.StringList");
        classInfo.isInterface();
    }
}
statement is: classInfo.isInterface(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.isInterface() target is: classInfo method is: isInterface()
statement is: // Improved test data:
classInfo = new ClassInfo("com.jstevh.tools.StringList"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: classInfo.isInterface(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.isInterface() target is: classInfo method is: isInterface()
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: getClassName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String className = classInfo.getClassName()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
classInfo.getClassName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList", "StringListTool");// added a descriptive name for the tool being tested

        classInfo.getClassName();
        // Replaced primitive values with more illustrative examples:
        ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList", "StringListTool", 10);// changed the number of items in the list to a more descriptive value

        classInfo.getClassName();
        // Replaced String values with more illustrative examples: }}
    }
}
statement is: // Improved test data:
ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList", "StringListTool")// added a descriptive name for the tool being tested
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classInfo.getClassName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.getClassName() target is: classInfo method is: getClassName()
statement is: // Replaced primitive values with more illustrative examples:
ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList", "StringListTool", 10)// changed the number of items in the list to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classInfo.getClassName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.getClassName() target is: classInfo method is: getClassName()
statement is: // Replaced String values with more illustrative examples: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("[C")
statement is: getClassPackage()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String classPackage = classInfo.getClassPackage()
test data is: ClassInfo classInfo = new ClassInfo("[C");
classInfo.getClassPackage();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClassInfo classInfo = new ClassInfo("com.example. MyClass");
        String expectedPackageName = "com.example";
        assertEquals(expectedPackageName, classInfo.getClassPackage());
        classInfo = new ClassInfo("MyClass");
        expectedPackageName = "";
        assertEquals(expectedPackageName, classInfo.getClassPackage());
        classInfo = new ClassInfo("com.example.mypackage.MyClass");
        expectedPackageName = "com.example.mypackage";
    }
}
statement is: // Improved test data
ClassInfo classInfo = new ClassInfo("com.example. MyClass"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String expectedPackageName = "com.example", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals(expectedPackageName, classInfo.getClassPackage()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedPackageName, classInfo.getClassPackage()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: classInfo = new ClassInfo("MyClass"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: expectedPackageName = "", class spoon.support.reflect.code.CtAssignmentImpl
statement is: assertEquals(expectedPackageName, classInfo.getClassPackage()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedPackageName, classInfo.getClassPackage()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: classInfo = new ClassInfo("com.example.mypackage.MyClass"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: expectedPackageName = "com.example.mypackage", class spoon.support.reflect.code.CtAssignmentImpl
* this is vulnerable: String string = "com.example"
TestCase is: String string = "com.example. MyClass";
ClassInfo classInfo = new ClassInfo(string);
String string = "com.example";

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser")
statement is: getClassPackage()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String classPackage = classInfo.getClassPackage()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
classInfo.getClassPackage();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String expectedPackageName = "com.jstevh.viewer";
    }
}
statement is: // Improved test data
String expectedPackageName = "com.jstevh.viewer", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "com.jstevh.viewer"
TestCase is: String string = "com.jstevh.viewer";

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("java.lang.Object")
statement is: getSuperClassName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superClassName = classInfo.getSuperClassName()
test data is: ClassInfo classInfo = new ClassInfo("java.lang.Object");
classInfo.getSuperClassName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: getSuperClassName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superClassName = classInfo.getSuperClassName()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
classInfo.getSuperClassName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Changed the primitive value of "1" to a more descriptive example, such as "Integer.MAX_VALUE".
        int intValue = Integer.MAX_VALUE;
        double doubleValue = 3.14;
        String stringValue = "Hello World";
        char charValue = 'A';
    }
}
statement is: // Changed the primitive value of "1" to a more descriptive example, such as "Integer.MAX_VALUE".
int intValue = Integer.MAX_VALUE, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Integer.MAX_VALUE is Integer
statement is: double doubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello World", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello World"
* this is vulnerable: char _char = 'A'
TestCase is: double _double = 3.14;
String string = "Hello World";
char _char = 'A';

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("org.xml.sax.ContentHandler")
statement is: getSuperClassName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superClassName = classInfo.getSuperClassName()
test data is: ClassInfo classInfo = new ClassInfo("org.xml.sax.ContentHandler");
classInfo.getSuperClassName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: com.jstevh.viewer.DirManager(Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.DirManager
statement code is: DirManager dirManager = new DirManager(false)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;Lcom/jstevh/viewer/DirManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("", arg1)
test data is: DirManager dirManager = new DirManager(false);
ClassInfo classInfo = new ClassInfo("", dirManager);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirManager dirManager = new DirManager(false);
        ClassInfo classInfo = new ClassInfo("", dirManager);
        // Improved test data
        DirManager dirManager = new DirManager(true);
    }
}
statement is: DirManager dirManager = new DirManager(false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClassInfo classInfo = new ClassInfo("", dirManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data
DirManager dirManager = new DirManager(true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: boolean _boolean = false;
DirManager dirManager = new DirManager(_boolean);
String string = "";
ClassInfo classInfo = new ClassInfo(string, dirManager);
boolean _boolean = true;
DirManager dirManager = new DirManager(_boolean);

statement is: com.jstevh.viewer.DirManager(Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.DirManager
statement code is: DirManager dirManager = new DirManager(false)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;Lcom/jstevh/viewer/DirManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("java.lang.Object", arg1)
test data is: DirManager dirManager = new DirManager(false);
ClassInfo classInfo = new ClassInfo("java.lang.Object", dirManager);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirManager dirManager = new DirManager(false);
    }
}
statement is: DirManager dirManager = new DirManager(false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: boolean _boolean = false;
DirManager dirManager = new DirManager(_boolean);

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: printFields()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printFields = classInfo.printFields()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
classInfo.printFields();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.printFields();
    }
}
statement is: classInfo.printFields(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printFields() target is: classInfo method is: printFields()
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1")
statement is: printFields()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printFields = classInfo.printFields()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
classInfo.printFields();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String className = "com.jstevh.viewer.ClassInfo";
        int fieldCount = 5;
        classInfo.printFields();
    }
}
statement is: // Improved test data
String className = "com.jstevh.viewer.ClassInfo", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int fieldCount = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: classInfo.printFields(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printFields() target is: classInfo method is: printFields()
* this is vulnerable: String string = "com.jstevh.viewer.ClassInfo"
* this is vulnerable: int _int = 5
TestCase is: String string = "com.jstevh.viewer.ClassInfo";
int _int = 5;

statement is: org.evosuite.testcase.statements.ArrayStatement@24401e24 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: printMethods(I)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printMethods = classInfo.printMethods(2)
test data is: String[] stringArray = new String[0];
ClassInfo.main(stringArray);
ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
classInfo.printMethods(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "java.lang.Object";
        stringArray[1] = "com.jstevh.tools.StringList";
        stringArray[2] = "com.jstevh.tools.IntList";
        ClassInfo.main(stringArray);
        ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
        classInfo.printMethods(3);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[3] Elements: []
lengths: [0] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java.lang.Object", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.lang.Object" Ct is: stringArray[0] = "java.lang.Object"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "com.jstevh.tools.StringList", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.StringList" Ct is: stringArray[1] = "com.jstevh.tools.StringList"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "com.jstevh.tools.IntList", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.IntList" Ct is: stringArray[2] = "com.jstevh.tools.IntList"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classInfo.printMethods(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printMethods(3) target is: classInfo method is: printMethods(int)
source statement: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V callee: VariableReference: Statement 2, type com.jstevh.viewer.ClassInfoindex is: 3
Matched Method is: printMethods(I)[Ljava/lang/String;
TestCase is: String[] stringArray = new String[0];
ClassInfo.main(stringArray);
String string = "com.jstevh.tools.StringList";
ClassInfo classInfo = new ClassInfo(string);
int _int = 3;
((ClassInfo) string).printMethods(_int);

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: printMethods()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printMethods = classInfo.printMethods()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
classInfo.printMethods();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.printMethods();
    }
}
statement is: classInfo.printMethods(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printMethods() target is: classInfo method is: printMethods()
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: printMethods(I)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printMethods = classInfo.printMethods((-735))
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
classInfo.printMethods((-735));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.printMethods(123);// Changed from -735 to 123 }}

    }
}
statement is: classInfo.printMethods(123)// Changed from -735 to 123 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printMethods(123)// Changed from -735 to 123 }}
 target is: classInfo method is: printMethods(int)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: printConstructors()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printConstructors = classInfo.printConstructors()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
classInfo.printConstructors();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.printConstructors(new String[]{ "ABC", "XYZ" }, 5, new double[]{ 3.14, 2.78 }, new int[]{ 0, 1 }, new char[]{ 'a', 'b' });
    }
}
statement is: classInfo.printConstructors(new String[]{ "ABC", "XYZ" }, 5, new double[]{ 3.14, 2.78 }, new int[]{ 0, 1 }, new char[]{ 'a', 'b' }), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printConstructors(new String[]{ "ABC", "XYZ" }, 5, new double[]{ 3.14, 2.78 }, new int[]{ 0, 1 }, new char[]{ 'a', 'b' }) target is: classInfo method is: printConstructors(java.lang.String[],int,double[],int[],char[])
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("java.lang.Object")
statement is: printInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printInterfaces = classInfo.printInterfaces()
test data is: ClassInfo classInfo = new ClassInfo("java.lang.Object");
classInfo.printInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.printInterfaces();
    }
}
statement is: classInfo.printInterfaces(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printInterfaces() target is: classInfo method is: printInterfaces()
statement is: com.jstevh.viewer.DirManager(Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.DirManager
statement code is: DirManager dirManager = new DirManager(false)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;Lcom/jstevh/viewer/DirManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.MethodData", arg1)
statement is: printInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printInterfaces = classInfo.printInterfaces()
test data is: DirManager dirManager = new DirManager(false);
ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.MethodData", dirManager);
classInfo.printInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        DirManager dirManager = new DirManager(true);
        ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.MethodData", dirManager);
        classInfo.printInterfaces();
    }
}
statement is: DirManager dirManager = new DirManager(true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.MethodData", dirManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classInfo.printInterfaces(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printInterfaces() target is: classInfo method is: printInterfaces()
source statement: com.jstevh.viewer.ClassInfo(Ljava/lang/String;Lcom/jstevh/viewer/DirManager;)V callee: VariableReference: Statement 1, type com.jstevh.viewer.ClassInfoindex is: 3
Matched Method is: printInterfaces()[Ljava/lang/String;
TestCase is: boolean _boolean = true;
DirManager dirManager = new DirManager(_boolean);
String string = "com.jstevh.viewer.MethodData";
ClassInfo classInfo = new ClassInfo(string, dirManager);
((ClassInfo) dirManager).printInterfaces();

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("javax.swing.JFrame")
statement is: printInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printInterfaces = classInfo.printInterfaces()
test data is: ClassInfo classInfo = new ClassInfo("javax.swing.JFrame");
classInfo.printInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.printInterfaces();
    }
}
statement is: classInfo.printInterfaces(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printInterfaces() target is: classInfo method is: printInterfaces()
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: srchMethods(Ljava/lang/String;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] srchMethods = classInfo.srchMethods("com.jstevh.tools.StringList")
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
classInfo.srchMethods("com.jstevh.tools.StringList");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.srchMethods("com.jstevh.tools.StringList", "get", "set", "add", "remove", "contains", "indexOf", "lastIndexOf", "size");
    }
}
statement is: classInfo.srchMethods("com.jstevh.tools.StringList", "get", "set", "add", "remove", "contains", "indexOf", "lastIndexOf", "size"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.srchMethods("com.jstevh.tools.StringList", "get", "set", "add", "remove", "contains", "indexOf", "lastIndexOf", "size") target is: classInfo method is: srchMethods(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1")
statement is: srchMethods(Ljava/lang/String;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] srchMethods = classInfo.srchMethods((String) null)
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
classInfo.srchMethods((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.srchMethods("searchString");
    }
}
statement is: classInfo.srchMethods("searchString"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.srchMethods("searchString") target is: classInfo method is: srchMethods(java.lang.String)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser")
statement is: srchMethods(Ljava/lang/String;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] srchMethods = classInfo.srchMethods("")
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
classInfo.srchMethods("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // This test data is more descriptive and representative of the situation being tested.
        classInfo.srchMethods("my_folder/my_subfolder");
    }
}
statement is: // This test data is more descriptive and representative of the situation being tested.
classInfo.srchMethods("my_folder/my_subfolder"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // This test data is more descriptive and representative of the situation being tested.
classInfo.srchMethods("my_folder/my_subfolder") target is: classInfo method is: srchMethods(java.lang.String)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser")
statement is: printInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printInterfaces = classInfo.printInterfaces()
statement is: srchMethods(Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] srchMethods = classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", arg1)
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
String[] printInterfaces = classInfo.printInterfaces();
classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", printInterfaces);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] printInterfaces = new String[]{ "javax.xml.stream.XMLStreamReader" };
        classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", printInterfaces);
    }
}
statement is: String[] printInterfaces = new String[]{ "javax.xml.stream.XMLStreamReader" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", printInterfaces), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", printInterfaces) target is: classInfo method is: srchMethods(java.lang.String,java.lang.String[])
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser")
statement is: org.evosuite.testcase.statements.ArrayStatement@cae92831 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: srchMethods(Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] srchMethods = classInfo.srchMethods(arg1[0], arg1)
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
String[] stringArray = new String[3];
classInfo.srchMethods(stringArray[0], stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "src/main/java";// This is a common location for Java source files

        stringArray[1] = "**/*.java";// This pattern matches all Java files in the specified directory

        stringArray[2] = "/";// This is the root directory of the file system

        classInfo.srchMethods(stringArray);
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "src/main/java"// This is a common location for Java source files
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"src/main/java" Ct is: stringArray[0] = "src/main/java"// This is a common location for Java source files

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "**/*.java"// This pattern matches all Java files in the specified directory
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"**/*.java" Ct is: stringArray[1] = "**/*.java"// This pattern matches all Java files in the specified directory

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "/"// This is the root directory of the file system
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"/" Ct is: stringArray[2] = "/"// This is the root directory of the file system

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: classInfo.srchMethods(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.srchMethods(stringArray) target is: classInfo method is: srchMethods(java.lang.String[])
TestCase is: String[] stringArray = new String[3];

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser")
statement is: org.evosuite.testcase.statements.ArrayStatement@3080c96b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8ba4ccf3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "com.jstevh.viewer.SAXDirParser"
statement is: srchMethods(Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] srchMethods = classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", arg1)
statement is: getFoundMethod(I)Lcom/jstevh/viewer/MethodData; type is: class org.evosuite.testcase.statements.MethodStatement return type interface com.jstevh.viewer.MethodData
statement code is: MethodData foundMethod = classInfo.getFoundMethod(1)
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
String[] stringArray = new String[1];
stringArray[0] = "com.jstevh.viewer.SAXDirParser";
classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", stringArray);
classInfo.getFoundMethod(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "com.jstevh.viewer.SAXDirParser";
        classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", stringArray);
        classInfo.getFoundMethod(1);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.jstevh.viewer.SAXDirParser", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.viewer.SAXDirParser" Ct is: stringArray[0] = "com.jstevh.viewer.SAXDirParser"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@3656bc9f
statement is: classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", stringArray) target is: classInfo method is: srchMethods(java.lang.String,java.lang.String[])
statement is: classInfo.getFoundMethod(1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.getFoundMethod(1) target is: classInfo method is: getFoundMethod(int)
* this is vulnerable: String string = "com.jstevh.viewer.SAXDirParser"
TestCase is: String[] stringArray = new String[1];
String string = "com.jstevh.viewer.SAXDirParser";

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser")
statement is: getFoundMethod(I)Lcom/jstevh/viewer/MethodData; type is: class org.evosuite.testcase.statements.MethodStatement return type interface com.jstevh.viewer.MethodData
statement code is: MethodData foundMethod = classInfo.getFoundMethod(2)
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
classInfo.getFoundMethod(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classInfo.getFoundMethod(2);
    }
}
statement is: classInfo.getFoundMethod(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.getFoundMethod(2) target is: classInfo method is: getFoundMethod(int)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser")
statement is: org.evosuite.testcase.statements.ArrayStatement@700faac1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c92743ae type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "com.jstevh.viewer.SAXDirParser"
statement is: srchMethods(Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] srchMethods = classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", arg1)
statement is: getFoundMethod(I)Lcom/jstevh/viewer/MethodData; type is: class org.evosuite.testcase.statements.MethodStatement return type interface com.jstevh.viewer.MethodData
statement code is: MethodData foundMethod = classInfo.getFoundMethod(2)
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
String[] stringArray = new String[1];
stringArray[0] = "com.jstevh.viewer.SAXDirParser";
classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", stringArray);
classInfo.getFoundMethod(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "com.jstevh.viewer.SAXDirParser";
        classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", stringArray);
        classInfo.getFoundMethod(2);
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.jstevh.viewer.SAXDirParser", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.viewer.SAXDirParser" Ct is: stringArray[0] = "com.jstevh.viewer.SAXDirParser"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@697fe7ca
statement is: classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.srchMethods("com.jstevh.viewer.SAXDirParser", stringArray) target is: classInfo method is: srchMethods(java.lang.String,java.lang.String[])
statement is: classInfo.getFoundMethod(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.getFoundMethod(2) target is: classInfo method is: getFoundMethod(int)
* this is vulnerable: String string = "com.jstevh.viewer.SAXDirParser"
TestCase is: String[] stringArray = new String[1];
String string = "com.jstevh.viewer.SAXDirParser";

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo((String) null)
test data is: ClassInfo classInfo = new ClassInfo((String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Assert.assertNotNull(classInfo.getName());
        Assert.assertEquals(classInfo.getName(), "TestClass");
        Assert.assertNotNull(classInfo.getDescription());
        Assert.assertEquals(classInfo.getDescription(), "This is a test class.");
        Assert.assertNotNull(classInfo.getVersion());
        Assert.assertEquals(classInfo.getVersion(), 1.0);
    }
}
statement is: Assert.assertNotNull(classInfo.getName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertNotNull(classInfo.getName()) target is: Assert method is: assertNotNull()
statement is: Assert.assertEquals(classInfo.getName(), "TestClass"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals(classInfo.getName(), "TestClass") target is: Assert method is: assertEquals(java.lang.String)
statement is: Assert.assertNotNull(classInfo.getDescription()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertNotNull(classInfo.getDescription()) target is: Assert method is: assertNotNull()
statement is: Assert.assertEquals(classInfo.getDescription(), "This is a test class."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals(classInfo.getDescription(), "This is a test class.") target is: Assert method is: assertEquals(java.lang.String)
statement is: Assert.assertNotNull(classInfo.getVersion()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertNotNull(classInfo.getVersion()) target is: Assert method is: assertNotNull()
statement is: Assert.assertEquals(classInfo.getVersion(), 1.0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals(classInfo.getVersion(), 1.0) target is: Assert method is: assertEquals(double)
statement is: org.evosuite.testcase.statements.ArrayStatement@8e0636be type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d7dba106 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "java.lang.Object"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "java.lang.Object";
ClassInfo.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "java.lang.Object";
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "java.lang.Object", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"java.lang.Object" Ct is: stringArray[0] = "java.lang.Object"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase is: String[] stringArray = new String[1];
String string = "java.lang.Object";
stringArray[0] = string;

statement is: org.evosuite.testcase.statements.ArrayStatement@e58204ce type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8e4d943c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "new"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
test data is: String[] stringArray = new String[1];
stringArray[0] = "new";
ClassInfo.main(stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "Testing";
        stringArray[1] = "Development";
        stringArray[2] = "Implementation";
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Testing", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Testing" Ct is: stringArray[0] = "Testing"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[1] = "Development", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Development" Ct is: stringArray[1] = "Development"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray[2] = "Implementation", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Implementation" Ct is: stringArray[2] = "Implementation"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase is: String[] stringArray = new String[1];
String string = "Testing";
stringArray[0] = string;
String string = "Development";
stringArray[0] = string;
String string = "Implementation";
stringArray[0] = string;

statement is: org.evosuite.testcase.statements.ArrayStatement@df168917 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser")
statement is: printFields()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printFields = classInfo.printFields()
test data is: String[] stringArray = new String[0];
ClassInfo.main(stringArray);
ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
classInfo.printFields();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "-d", "/home/user/src" };
        ClassInfo.main(stringArray);
        ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
        classInfo.printFields();
    }
}
statement is: String[] stringArray = new String[]{ "-d", "/home/user/src" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "-d", "/home/user/src" } Elements: ["-d", "/home/user/src"]
lengths: [0] []
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classInfo.printFields(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printFields() target is: classInfo method is: printFields()
source statement: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V callee: VariableReference: Statement 2, type com.jstevh.viewer.ClassInfoindex is: 3
Matched Method is: printFields()[Ljava/lang/String;
TestCase is: String[] stringArray = null;
ClassInfo.main(stringArray);
String string = "com.jstevh.viewer.SAXDirParser";
ClassInfo classInfo = new ClassInfo(string);
((ClassInfo) string).printFields();

statement is: org.evosuite.testcase.statements.ArrayStatement@daafff7d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4b0bdaff type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "com.jstevh.viewer.ClassInfo$1"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
statement is: com.jstevh.viewer.DirManager(Z)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.DirManager
statement code is: DirManager dirManager = new DirManager(false)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;Lcom/jstevh/viewer/DirManager;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1", arg1)
statement is: printFields()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printFields = classInfo.printFields()
test data is: String[] stringArray = new String[1];
stringArray[0] = "com.jstevh.viewer.ClassInfo$1";
ClassInfo.main(stringArray);
DirManager dirManager = new DirManager(false);
ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1", dirManager);
classInfo.printFields();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "com.example.MyClass";
        ClassInfo.main(stringArray);
        DirManager dirManager = new DirManager(false);
        ClassInfo classInfo = new ClassInfo("com.example.MyClass", dirManager);
        classInfo.printFields();
        classInfo.printMethods();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.example.MyClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.example.MyClass" Ct is: stringArray[0] = "com.example.MyClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: DirManager dirManager = new DirManager(false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClassInfo classInfo = new ClassInfo("com.example.MyClass", dirManager), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classInfo.printFields(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printFields() target is: classInfo method is: printFields()
source statement: com.jstevh.viewer.ClassInfo(Ljava/lang/String;Lcom/jstevh/viewer/DirManager;)V callee: VariableReference: Statement 4, type com.jstevh.viewer.ClassInfoindex is: 7
Matched Method is: printFields()[Ljava/lang/String;
statement is: classInfo.printMethods(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printMethods() target is: classInfo method is: printMethods()
TestCase is: String[] stringArray = new String[1];
String string = "com.example.MyClass";
stringArray[0] = string;
ClassInfo.main(stringArray);
boolean _boolean = false;
DirManager dirManager = new DirManager(_boolean);
String string = "com.example.MyClass";
ClassInfo classInfo = new ClassInfo(string, dirManager);
((ClassInfo) _boolean).printFields();

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: org.evosuite.testcase.statements.ArrayStatement@6f124635 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@36f7e0a4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "com.jstevh.tools.StringList"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
statement is: printFields()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printFields = classInfo.printFields()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
String[] stringArray = new String[8];
stringArray[0] = "com.jstevh.tools.StringList";
ClassInfo.main(stringArray);
classInfo.printFields();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[8];
        stringArray[0] = "com.jstevh.tools.StringList";// Changed to a more descriptive value

        ClassInfo.main(stringArray);
        classInfo.printFields();
    }
}
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.jstevh.tools.StringList"// Changed to a more descriptive value
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.StringList" Ct is: stringArray[0] = "com.jstevh.tools.StringList"// Changed to a more descriptive value

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@35468354
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: classInfo.printFields(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printFields() target is: classInfo method is: printFields()
* this is vulnerable: String string = "com.jstevh.tools.StringList"
TestCase is: String[] stringArray = new String[8];
String string = "com.jstevh.tools.StringList";
ClassInfo.main(stringArray);

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1")
statement is: org.evosuite.testcase.statements.ArrayStatement@2ecf4f55 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@4cac3b77 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "com.jstevh.viewer.ClassInfo$1"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
statement is: printMethods()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printMethods = classInfo.printMethods()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
String[] stringArray = new String[4];
stringArray[0] = "com.jstevh.viewer.ClassInfo$1";
ClassInfo.main(stringArray);
classInfo.printMethods();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[4];
        stringArray[0] = "com.jstevh.viewer.ClassInfo$1";
        ClassInfo.main(stringArray);
        classInfo.printMethods();
        // Improved test data
        ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo");
        String[] stringArray = new String[4];
        stringArray[0] = "com.jstevh.viewer.ClassInfo";
        ClassInfo.main(stringArray);
        classInfo.printMethods();
    }
}
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.jstevh.viewer.ClassInfo$1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.viewer.ClassInfo$1" Ct is: stringArray[0] = "com.jstevh.viewer.ClassInfo$1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@9a240016
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: classInfo.printMethods(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printMethods() target is: classInfo method is: printMethods()
statement is: // Improved test data
ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.jstevh.viewer.ClassInfo", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.viewer.ClassInfo" Ct is: stringArray[0] = "com.jstevh.viewer.ClassInfo"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e8e9d866
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: classInfo.printMethods(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printMethods() target is: classInfo method is: printMethods()
source statement: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.jstevh.viewer.ClassInfoindex is: 4
Matched Method is: printMethods()[Ljava/lang/String;
* this is vulnerable: String string = "com.jstevh.viewer.ClassInfo$1"
* this is vulnerable: String string = "com.jstevh.viewer.ClassInfo"
TestCase is: String[] stringArray = new String[4];
String string = "com.jstevh.viewer.ClassInfo$1";
ClassInfo.main(stringArray);
String string = "com.jstevh.viewer.ClassInfo";
ClassInfo classInfo = new ClassInfo(string);
String[] stringArray = new String[4];
String string = "com.jstevh.viewer.ClassInfo";
ClassInfo.main(stringArray);
((ClassInfo) stringArray).printMethods();

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: org.evosuite.testcase.statements.ArrayStatement@a9e332d2 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f08aeb1e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "com.jstevh.tools.StringList"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
statement is: printConstructors()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printConstructors = classInfo.printConstructors()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
String[] stringArray = new String[7];
stringArray[0] = "com.jstevh.tools.StringList";
ClassInfo.main(stringArray);
classInfo.printConstructors();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "com.jstevh.tools.StringList";
        ClassInfo.main(stringArray);
        classInfo.printConstructors();
        // Improved test data:
        ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
        String[] stringArray = new String[7];
        stringArray[0] = "com.jstevh.tools.StringList";
        stringArray[1] = "com.jstevh.tools.MyClass";
        stringArray[2] = "com.jstevh.tools.YourClass";
        stringArray[3] = "com.jstevh.tools.HisClass";
        stringArray[4] = "com.jstevh.tools.HerClass";
        stringArray[5] = "com.jstevh.tools.OurClass";
        stringArray[6] = "com.jstevh.tools.TheirClass";
        ClassInfo.main(stringArray);
        classInfo.printConstructors();
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.jstevh.tools.StringList", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.StringList" Ct is: stringArray[0] = "com.jstevh.tools.StringList"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ed2c2c61
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: classInfo.printConstructors(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printConstructors() target is: classInfo method is: printConstructors()
statement is: // Improved test data:
ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.jstevh.tools.StringList", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.StringList" Ct is: stringArray[0] = "com.jstevh.tools.StringList"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@8baec7ef
statement is: stringArray[1] = "com.jstevh.tools.MyClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.MyClass" Ct is: stringArray[1] = "com.jstevh.tools.MyClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@804413fe
statement is: stringArray[2] = "com.jstevh.tools.YourClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.YourClass" Ct is: stringArray[2] = "com.jstevh.tools.YourClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7b563690
statement is: stringArray[3] = "com.jstevh.tools.HisClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.HisClass" Ct is: stringArray[3] = "com.jstevh.tools.HisClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@89938155
statement is: stringArray[4] = "com.jstevh.tools.HerClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.HerClass" Ct is: stringArray[4] = "com.jstevh.tools.HerClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@b9f0138f
statement is: stringArray[5] = "com.jstevh.tools.OurClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.OurClass" Ct is: stringArray[5] = "com.jstevh.tools.OurClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@cd9e648d
statement is: stringArray[6] = "com.jstevh.tools.TheirClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.tools.TheirClass" Ct is: stringArray[6] = "com.jstevh.tools.TheirClass"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c2e5b398
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: classInfo.printConstructors(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printConstructors() target is: classInfo method is: printConstructors()
source statement: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V callee: VariableReference: Statement 0, type com.jstevh.viewer.ClassInfoindex is: 4
Matched Method is: printConstructors()[Ljava/lang/String;
* this is vulnerable: String string = "com.jstevh.tools.StringList"
* this is vulnerable: String string = "com.jstevh.tools.StringList"
* this is vulnerable: String string = "com.jstevh.tools.MyClass"
* this is vulnerable: String string = "com.jstevh.tools.YourClass"
* this is vulnerable: String string = "com.jstevh.tools.HisClass"
* this is vulnerable: String string = "com.jstevh.tools.HerClass"
* this is vulnerable: String string = "com.jstevh.tools.OurClass"
* this is vulnerable: String string = "com.jstevh.tools.TheirClass"
TestCase is: String[] stringArray = new String[7];
String string = "com.jstevh.tools.StringList";
ClassInfo.main(stringArray);
String string = "com.jstevh.tools.StringList";
ClassInfo classInfo = new ClassInfo(string);
String[] stringArray = new String[7];
String string = "com.jstevh.tools.StringList";
String string = "com.jstevh.tools.MyClass";
String string = "com.jstevh.tools.YourClass";
String string = "com.jstevh.tools.HisClass";
String string = "com.jstevh.tools.HerClass";
String string = "com.jstevh.tools.OurClass";
String string = "com.jstevh.tools.TheirClass";
ClassInfo.main(stringArray);
((ClassInfo) stringArray).printConstructors();

statement is: org.evosuite.testcase.statements.ArrayStatement@344fccf7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@798e286e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "com.jstevh.viewer.ClassInfo$1"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1")
statement is: printConstructors()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printConstructors = classInfo.printConstructors()
test data is: String[] stringArray = new String[6];
stringArray[0] = "com.jstevh.viewer.ClassInfo$1";
ClassInfo.main(stringArray);
ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
classInfo.printConstructors();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[6];
        stringArray[0] = "com.jstevh.viewer.ClassInfo$1";
        ClassInfo.main(stringArray);
        ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1");
        classInfo.printConstructors();
        String[] stringArray2 = new String[6];
        stringArray2[0] = "com.jstevh.viewer.ClassInfo";
        ClassInfo.main(stringArray2);
        ClassInfo classInfo2 = new ClassInfo("com.jstevh.viewer.ClassInfo");
        classInfo2.printConstructors();
        String[] stringArray3 = new String[6];
        stringArray3[0] = "com.jstevh.viewer.ClassInfo$InnerClass";
        ClassInfo.main(stringArray3);
        ClassInfo classInfo3 = new ClassInfo("com.jstevh.viewer.ClassInfo$InnerClass");
        classInfo3.printConstructors();
    }
}
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.jstevh.viewer.ClassInfo$1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.viewer.ClassInfo$1" Ct is: stringArray[0] = "com.jstevh.viewer.ClassInfo$1"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.ClassInfo$1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classInfo.printConstructors(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printConstructors() target is: classInfo method is: printConstructors()
source statement: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V callee: VariableReference: Statement 3, type com.jstevh.viewer.ClassInfoindex is: 5
Matched Method is: printConstructors()[Ljava/lang/String;
statement is: String[] stringArray2 = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray2[0] = "com.jstevh.viewer.ClassInfo", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.viewer.ClassInfo" Ct is: stringArray2[0] = "com.jstevh.viewer.ClassInfo"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: ClassInfo.main(stringArray2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray2) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: ClassInfo classInfo2 = new ClassInfo("com.jstevh.viewer.ClassInfo"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classInfo2.printConstructors(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo2.printConstructors() target is: classInfo2 method is: printConstructors()
source statement: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V callee: VariableReference: Statement 3, type com.jstevh.viewer.ClassInfoindex is: 12
Matched Method is: printConstructors()[Ljava/lang/String;
statement is: String[] stringArray3 = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray3[0] = "com.jstevh.viewer.ClassInfo$InnerClass", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray3[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.viewer.ClassInfo$InnerClass" Ct is: stringArray3[0] = "com.jstevh.viewer.ClassInfo$InnerClass"
target : stringArray3 class spoon.support.reflect.code.CtLiteralImpl
statement is: ClassInfo.main(stringArray3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray3) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: ClassInfo classInfo3 = new ClassInfo("com.jstevh.viewer.ClassInfo$InnerClass"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classInfo3.printConstructors(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo3.printConstructors() target is: classInfo3 method is: printConstructors()
source statement: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V callee: VariableReference: Statement 3, type com.jstevh.viewer.ClassInfoindex is: 19
Matched Method is: printConstructors()[Ljava/lang/String;
TestCase is: String[] stringArray = new String[6];
String string = "com.jstevh.viewer.ClassInfo$1";
stringArray[0] = string;
ClassInfo.main(stringArray);
String string = "com.jstevh.viewer.ClassInfo$1";
ClassInfo classInfo = new ClassInfo(string);
((ClassInfo) _void).printConstructors();
String[] stringArray = new String[6];
String string = "com.jstevh.viewer.ClassInfo";
stringArray[0] = string;
ClassInfo.main(stringArray);
String string = "com.jstevh.viewer.ClassInfo";
ClassInfo classInfo = new ClassInfo(string);
((ClassInfo) _void).printConstructors();
String[] stringArray = new String[6];
String string = "com.jstevh.viewer.ClassInfo$InnerClass";
stringArray[0] = string;
ClassInfo.main(stringArray);
String string = "com.jstevh.viewer.ClassInfo$InnerClass";
ClassInfo classInfo = new ClassInfo(string);
((ClassInfo) _void).printConstructors();

statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList")
statement is: org.evosuite.testcase.statements.ArrayStatement@d5090bc1 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
statement is: printInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printInterfaces = classInfo.printInterfaces()
test data is: ClassInfo classInfo = new ClassInfo("com.jstevh.tools.StringList");
String[] stringArray = new String[0];
ClassInfo.main(stringArray);
classInfo.printInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Apple", "Banane", "Orange" };
        ClassInfo.main(stringArray);
        classInfo.printInterfaces();
    }
}
statement is: String[] stringArray = new String[]{ "Apple", "Banane", "Orange" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "Apple", "Banane", "Orange" } Elements: ["Apple", "Banane", "Orange"]
lengths: [0] []
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: classInfo.printInterfaces(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printInterfaces() target is: classInfo method is: printInterfaces()
TestCase is: String[] stringArray = null;
ClassInfo.main(stringArray);

statement is: org.evosuite.testcase.statements.ArrayStatement@ad65b479 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@71ae6499 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "com.jstevh.viewer.SAXDirParser"
statement is: main([Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: ClassInfo.main(arg0)
statement is: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.jstevh.viewer.ClassInfo
statement code is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser")
statement is: printInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] printInterfaces = classInfo.printInterfaces()
test data is: String[] stringArray = new String[6];
stringArray[0] = "com.jstevh.viewer.SAXDirParser";
ClassInfo.main(stringArray);
ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
classInfo.printInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[6];
        stringArray[0] = "com.jstevh.viewer.SAXDirParser";
        ClassInfo.main(stringArray);
        ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser");
        classInfo.printInterfaces();
        classInfo.printMethods();
    }
}
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "com.jstevh.viewer.SAXDirParser", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"com.jstevh.viewer.SAXDirParser" Ct is: stringArray[0] = "com.jstevh.viewer.SAXDirParser"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
statement is: ClassInfo.main(stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: ClassInfo.main(stringArray) target is: ClassInfo method is: main(java.lang.String[])
Matched Method is: main([Ljava/lang/String;)V
statement is: ClassInfo classInfo = new ClassInfo("com.jstevh.viewer.SAXDirParser"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classInfo.printInterfaces(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printInterfaces() target is: classInfo method is: printInterfaces()
source statement: com.jstevh.viewer.ClassInfo(Ljava/lang/String;)V callee: VariableReference: Statement 3, type com.jstevh.viewer.ClassInfoindex is: 5
Matched Method is: printInterfaces()[Ljava/lang/String;
statement is: classInfo.printMethods(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classInfo.printMethods() target is: classInfo method is: printMethods()
TestCase is: String[] stringArray = new String[6];
String string = "com.jstevh.viewer.SAXDirParser";
stringArray[0] = string;
ClassInfo.main(stringArray);
String string = "com.jstevh.viewer.SAXDirParser";
ClassInfo classInfo = new ClassInfo(string);
((ClassInfo) _void).printInterfaces();

statement is: org.evosuite.testcase.statements.ArrayStatement@569e2203 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.reflect.Member;
statement code is: Member[] memberArray = new Member[0]
statement is: getData([Ljava/lang/reflect/Member;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] data = ClassInfo.getData(arg0)
test data is: Member[] memberArray = new Member[0];
ClassInfo.getData(memberArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Member[] memberArray = new Member[]{ new Member("John", "Doe", 30, Gender.MALE), new Member("Jane", "Smith", 25, Gender.FEMALE), new Member("Bob", "Johnson", 40, Gender.MALE), new Member("Alice", "Lee", 35, Gender.FEMALE) };
    }
}
statement is: Member[] memberArray = new Member[]{ new Member("John", "Doe", 30, Gender.MALE), new Member("Jane", "Smith", 25, Gender.FEMALE), new Member("Bob", "Johnson", 40, Gender.MALE), new Member("Alice", "Lee", 35, Gender.FEMALE) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: Member[] memberArray = new Member[0] isAssignment: false Array: new Member[]{ new Member("John", "Doe", 30, Gender.MALE), new Member("Jane", "Smith", 25, Gender.FEMALE), new Member("Bob", "Johnson", 40, Gender.MALE), new Member("Alice", "Lee", 35, Gender.FEMALE) } Elements: [new Member("John", "Doe", 30, Gender.MALE), new Member("Jane", "Smith", 25, Gender.FEMALE), new Member("Bob", "Johnson", 40, Gender.MALE), new Member("Alice", "Lee", 35, Gender.FEMALE)]
lengths: [0] []
statement is: org.evosuite.testcase.statements.ArrayStatement@e8b24c3c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.reflect.Member;
statement code is: Member[] memberArray = new Member[5]
statement is: mock(interface java.lang.reflect.Member) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type interface java.lang.reflect.Member
statement code is: Member member = mock(Member.class, new ViolatedAssumptionAnswer())
statement is: org.evosuite.testcase.statements.AssignmentStatement@c2e2041a type is: class org.evosuite.testcase.statements.AssignmentStatement return type interface java.lang.reflect.Member
statement code is: memberArray[0] = member
statement is: org.evosuite.testcase.statements.AssignmentStatement@39f29210 type is: class org.evosuite.testcase.statements.AssignmentStatement return type interface java.lang.reflect.Member
statement code is: memberArray[1] = member
statement is: org.evosuite.testcase.statements.AssignmentStatement@19b422ea type is: class org.evosuite.testcase.statements.AssignmentStatement return type interface java.lang.reflect.Member
statement code is: memberArray[2] = member
statement is: org.evosuite.testcase.statements.AssignmentStatement@20d12dc6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type interface java.lang.reflect.Member
statement code is: memberArray[3] = member
statement is: org.evosuite.testcase.statements.AssignmentStatement@676c02ca type is: class org.evosuite.testcase.statements.AssignmentStatement return type interface java.lang.reflect.Member
statement code is: memberArray[4] = member
statement is: getData([Ljava/lang/reflect/Member;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] data = ClassInfo.getData(arg0)
test data is: Member[] memberArray = new Member[5];
Member member = mock(Member.class, new ViolatedAssumptionAnswer());
memberArray[0] = member;
memberArray[1] = member;
memberArray[2] = member;
memberArray[3] = member;
memberArray[4] = member;
ClassInfo.getData(memberArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Member[] memberArray = new Member[5];
        // Improved test data:
        Member member1 = mock(Member.class, new ViolatedAssumptionAnswer());
        member1.setName("John Doe");
        member1.setAge(30);
        member1.setGender("Male");
        Member member2 = mock(Member.class, new ViolatedAssumptionAnswer());
        member2.setName("Jane Smith");
        member2.setAge(25);
        member2.setGender("Female");
        Member member3 = mock(Member.class, new ViolatedAssumptionAnswer());
        member3.setName("Bob Johnson");
        member3.setAge(40);
        member3.setGender("Male");
        Member member4 = mock(Member.class, new ViolatedAssumptionAnswer());
        member4.setName("Alice Brown");
        member4.setAge(35);
        member4.setGender("Female");
        Member member5 = mock(Member.class, new ViolatedAssumptionAnswer());
        member5.setName("David Patel");
        member5.setAge(45);
        member5.setGender("Male");
        memberArray[0] = member1;
        memberArray[1] = member2;
        memberArray[2] = member3;
        memberArray[3] = member4;
        memberArray[4] = member5;
    }
}
statement is: Member[] memberArray = new Member[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: Member[] memberArray = new Member[5] isAssignment: false Array: new Member[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.reflect.Member; Member[]
statement is: // Improved test data:
Member member1 = mock(Member.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(Member.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Member argument is: Member.class
Matched Method is: mock(interface java.lang.reflect.Member)
statement is: member1.setName("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member1.setName("John Doe") target is: member1 method is: setName(java.lang.String)
statement is: member1.setAge(30), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member1.setAge(30) target is: member1 method is: setAge(int)
statement is: member1.setGender("Male"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member1.setGender("Male") target is: member1 method is: setGender(java.lang.String)
statement is: Member member2 = mock(Member.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(Member.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Member argument is: Member.class
Matched Method is: mock(interface java.lang.reflect.Member)
statement is: member2.setName("Jane Smith"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member2.setName("Jane Smith") target is: member2 method is: setName(java.lang.String)
statement is: member2.setAge(25), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member2.setAge(25) target is: member2 method is: setAge(int)
statement is: member2.setGender("Female"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member2.setGender("Female") target is: member2 method is: setGender(java.lang.String)
statement is: Member member3 = mock(Member.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(Member.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Member argument is: Member.class
Matched Method is: mock(interface java.lang.reflect.Member)
statement is: member3.setName("Bob Johnson"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member3.setName("Bob Johnson") target is: member3 method is: setName(java.lang.String)
statement is: member3.setAge(40), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member3.setAge(40) target is: member3 method is: setAge(int)
statement is: member3.setGender("Male"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member3.setGender("Male") target is: member3 method is: setGender(java.lang.String)
statement is: Member member4 = mock(Member.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(Member.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Member argument is: Member.class
Matched Method is: mock(interface java.lang.reflect.Member)
statement is: member4.setName("Alice Brown"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member4.setName("Alice Brown") target is: member4 method is: setName(java.lang.String)
statement is: member4.setAge(35), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member4.setAge(35) target is: member4 method is: setAge(int)
statement is: member4.setGender("Female"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member4.setGender("Female") target is: member4 method is: setGender(java.lang.String)
statement is: Member member5 = mock(Member.class, new ViolatedAssumptionAnswer()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: mock(Member.class, new ViolatedAssumptionAnswer()) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Member argument is: Member.class
Matched Method is: mock(interface java.lang.reflect.Member)
statement is: member5.setName("David Patel"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member5.setName("David Patel") target is: member5 method is: setName(java.lang.String)
statement is: member5.setAge(45), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member5.setAge(45) target is: member5 method is: setAge(int)
statement is: member5.setGender("Male"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: member5.setGender("Male") target is: member5 method is: setGender(java.lang.String)
statement is: memberArray[0] = member1, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : memberArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:member1 Ct is: memberArray[0] = member1
target : memberArray class spoon.support.reflect.code.CtLiteralImpl
statement is: memberArray[1] = member2, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : memberArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:member2 Ct is: memberArray[1] = member2
target : memberArray class spoon.support.reflect.code.CtLiteralImpl
statement is: memberArray[2] = member3, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : memberArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:member3 Ct is: memberArray[2] = member3
target : memberArray class spoon.support.reflect.code.CtLiteralImpl
statement is: memberArray[3] = member4, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : memberArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:member4 Ct is: memberArray[3] = member4
target : memberArray class spoon.support.reflect.code.CtLiteralImpl
statement is: memberArray[4] = member5, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : memberArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:member5 Ct is: memberArray[4] = member5
target : memberArray class spoon.support.reflect.code.CtLiteralImpl
TestCase is: Member[] memberArray = new Member[5];
Member member = mock(Member.class, new ViolatedAssumptionAnswer());
Member member = mock(Member.class, new ViolatedAssumptionAnswer());
Member member = mock(Member.class, new ViolatedAssumptionAnswer());
Member member = mock(Member.class, new ViolatedAssumptionAnswer());
Member member = mock(Member.class, new ViolatedAssumptionAnswer());
memberArray[0] = member;
memberArray[1] = member;
memberArray[2] = member;
memberArray[3] = member;
memberArray[4] = member;

statement is: org.evosuite.testcase.statements.ArrayStatement@2aa1c37a type is: class org.evosuite.testcase.statements.ArrayStatement return type java.lang.Class<javax.swing.JFrame>[]
statement code is: Class<JFrame>[] classArray = (Class<JFrame>[]) Array.newInstance(Class.class, 0)
statement is: getData([Ljava/lang/Class;)[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] data = ClassInfo.getData(arg0)
test data is: Class<JFrame>[] classArray = (Class<JFrame>[]) Array.newInstance(Class.class, 0);
ClassInfo.getData(classArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Class<JFrame>[] classArray = new Class<?>[2];
        classArray[0] = JFrame.class;
        classArray[1] = JButton.class;
    }
}
statement is: Class<JFrame>[] classArray = new Class<?>[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: Class<JFrame>[] classArray = (Class<JFrame>[]) Array.newInstance(Class.class, 0) isAssignment: false Array: new Class<?>[2] Elements: []
lengths: [0] [2]
Their type are: java.lang.Class<javax.swing.JFrame>[] Class<?>[]
* Computation finished
