/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 15:42:07 GMT 2024
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.sap.managementconsole.soap.axis.sapcontrol.HeapInfo;
import com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.Deserializer;
import org.apache.axis.encoding.Serializer;
import org.apache.axis.encoding.ser.SimpleSerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HeapInfo_Original_ESTest extends HeapInfo_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningNonEmptyString() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setType("S%zLy18;>`ke(a");
      String type = heapInfo.getType();
      assertEquals("S%zLy18;>`ke(a", type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningPositive() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value4;
      HeapInfo heapInfo = new HeapInfo((String) null, "com.sap.managementconsole.soap.axis.sapcontrol.HeapInfo", 1651L, 1651L, 949L, 949L, (-1L), arg7);
      long size = heapInfo.getSize();
      assertEquals(949L, heapInfo.getInitialSize());
      assertEquals(949L, heapInfo.getMaxUsedSize());
      assertEquals(1651L, size);
      assertEquals((-1L), heapInfo.getMaxSize());
      assertEquals(1651L, heapInfo.getCommitSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningNegative() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value1;
      HeapInfo heapInfo = new HeapInfo("irnV^|6", "SAPControl-GRAY", (-1L), 1024L, 3725L, 2171L, 3725L, arg7);
      long size = heapInfo.getSize();
      assertEquals(1024L, heapInfo.getCommitSize());
      assertEquals(3725L, heapInfo.getMaxUsedSize());
      assertEquals((-1L), size);
      assertEquals(2171L, heapInfo.getInitialSize());
      assertEquals(3725L, heapInfo.getMaxSize());
      assertEquals("irnV^|6", heapInfo.getProcessname());
      assertEquals("SAPControl-GRAY", heapInfo.getType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProcessnameReturningNull() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      String processname = heapInfo.getProcessname();
      assertNull(processname);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProcessnameReturningNonEmptyString() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value3;
      HeapInfo heapInfo = new HeapInfo("y5:$Yx%`uIC+Ew0Y!", "SAPControl-RED", (-1L), (-1L), (-1L), (-1L), (-1L), arg7);
      String processname = heapInfo.getProcessname();
      assertEquals("y5:$Yx%`uIC+Ew0Y!", processname);
      assertEquals((-1L), heapInfo.getCommitSize());
      assertEquals((-1L), heapInfo.getMaxSize());
      assertEquals((-1L), heapInfo.getSize());
      assertEquals("SAPControl-RED", heapInfo.getType());
      assertEquals((-1L), heapInfo.getInitialSize());
      assertEquals((-1L), heapInfo.getMaxUsedSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxUsedSizeReturningZero() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      long maxUsedSize = heapInfo.getMaxUsedSize();
      assertEquals(0L, maxUsedSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxUsedSizeReturningPositive() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value4;
      HeapInfo heapInfo = new HeapInfo("native", "native", 0L, 0L, 19L, 0L, 0L, arg7);
      long maxUsedSize = heapInfo.getMaxUsedSize();
      assertEquals(0L, heapInfo.getMaxSize());
      assertEquals(0L, heapInfo.getCommitSize());
      assertEquals(0L, heapInfo.getSize());
      assertEquals(0L, heapInfo.getInitialSize());
      assertEquals(19L, maxUsedSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxSizeReturningPositive() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setMaxSize(3146L);
      long maxSize = heapInfo.getMaxSize();
      assertEquals(3146L, maxSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitialSizeReturningPositive() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setInitialSize(1048576L);
      long initialSize = heapInfo.getInitialSize();
      assertEquals(1048576L, initialSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDispstatusReturningNonNull() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value1;
      HeapInfo heapInfo = new HeapInfo("", "", 539L, (-771L), (-1379L), (-2752L), 2171L, arg7);
      heapInfo.getDispstatus();
      assertEquals((-771L), heapInfo.getCommitSize());
      assertEquals(2171L, heapInfo.getMaxSize());
      assertEquals((-2752L), heapInfo.getInitialSize());
      assertEquals(539L, heapInfo.getSize());
      assertEquals((-1379L), heapInfo.getMaxUsedSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommitSizeReturningZero() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      long commitSize = heapInfo.getCommitSize();
      assertEquals(0L, commitSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommitSizeReturningPositive() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value4;
      HeapInfo heapInfo = new HeapInfo((String) null, "com.sap.managementconsole.soap.axis.sapcontrol.HeapInfo", 1651L, 1651L, 949L, 949L, (-1L), arg7);
      long commitSize = heapInfo.getCommitSize();
      assertEquals(949L, heapInfo.getMaxUsedSize());
      assertEquals(1651L, commitSize);
      assertEquals((-1L), heapInfo.getMaxSize());
      assertEquals(1651L, heapInfo.getSize());
      assertEquals(949L, heapInfo.getInitialSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTaking8ArgumentsAndCallsHashCode() throws Throwable  {
      STATECOLOR arg7 = STATECOLOR.value4;
      HeapInfo heapInfo = new HeapInfo("native", "native", 0L, 0L, 19L, 0L, 0L, arg7);
      heapInfo.hashCode();
      assertEquals(0L, heapInfo.getCommitSize());
      assertEquals(0L, heapInfo.getMaxSize());
      assertEquals(0L, heapInfo.getSize());
      assertEquals(19L, heapInfo.getMaxUsedSize());
      assertEquals(0L, heapInfo.getInitialSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTakingNoArgumentsAndCallsHashCode() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.hashCode();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxSize() throws Throwable  {
      HeapInfo arg0 = new HeapInfo();
      arg0.setMaxSize((-1390L));
      HeapInfo heapInfo = new HeapInfo();
      boolean equals = heapInfo.equals(arg0);
      assertEquals((-1390L), arg0.getMaxSize());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetInitialSize() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setInitialSize((-1390L));
      HeapInfo arg0 = new HeapInfo();
      boolean equals = heapInfo.equals(arg0);
      assertEquals((-1390L), heapInfo.getInitialSize());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTaking8ArgumentsAndCallsEquals() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setType("S%zLy18;>`ke(a");
      STATECOLOR arg7 = STATECOLOR.value2;
      HeapInfo arg0 = new HeapInfo((String) null, "S%zLy18;>`ke(a", 0L, 0L, 925L, (-1144L), 255L, arg7);
      boolean equals = heapInfo.equals(arg0);
      assertEquals(925L, arg0.getMaxUsedSize());
      assertEquals((-1144L), arg0.getInitialSize());
      assertEquals(0L, arg0.getCommitSize());
      assertEquals(255L, arg0.getMaxSize());
      assertFalse(equals);
      assertEquals(0L, arg0.getSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetCommitSize() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      HeapInfo arg0 = new HeapInfo();
      arg0.setCommitSize((-1674L));
      boolean equals = heapInfo.equals(arg0);
      assertEquals((-1674L), arg0.getCommitSize());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetSize() throws Throwable  {
      HeapInfo arg0 = new HeapInfo();
      arg0.setProcessname("Dt");
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setProcessname("Dt");
      heapInfo.setSize(1L);
      boolean equals = heapInfo.equals(arg0);
      assertEquals(1L, heapInfo.getSize());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndEqualsReturningTrue() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setType("=P<");
      HeapInfo arg0 = new HeapInfo();
      assertFalse(arg0.equals((Object)heapInfo));
      
      arg0.setType("=P<");
      boolean equals = heapInfo.equals(arg0);
      assertTrue(arg0.equals((Object)heapInfo));
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetType0() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      HeapInfo arg0 = new HeapInfo();
      assertTrue(arg0.equals((Object)heapInfo));
      
      arg0.setType(":euB42uY+c_*Pl2");
      boolean equals = heapInfo.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetType1() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setType("=P<");
      HeapInfo arg0 = new HeapInfo();
      boolean equals = heapInfo.equals(arg0);
      assertFalse(equals);
      assertFalse(arg0.equals((Object)heapInfo));
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetProcessname0() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      HeapInfo arg0 = new HeapInfo();
      assertTrue(arg0.equals((Object)heapInfo));
      
      arg0.setProcessname("O9efD0YT_");
      boolean equals = heapInfo.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetProcessname1() throws Throwable  {
      HeapInfo arg0 = new HeapInfo();
      HeapInfo heapInfo = new HeapInfo();
      assertTrue(heapInfo.equals((Object)arg0));
      
      heapInfo.setProcessname("sLceq.o=xzOwPe");
      boolean equals = heapInfo.equals(arg0);
      assertFalse(heapInfo.equals((Object)arg0));
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTakingNoArgumentsAndEqualsAndEqualsReturningFalse() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      STATECOLOR arg0 = STATECOLOR.value3;
      boolean equals = heapInfo.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesHeapInfoTakingNoArgumentsAndEqualsAndEqualsReturningTrue() throws Throwable  {
      HeapInfo arg0 = new HeapInfo();
      boolean equals = arg0.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxSizeReturningNegative() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setMaxSize((-1114L));
      long maxSize = heapInfo.getMaxSize();
      assertEquals((-1114L), maxSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetCommitSizeReturningNegative() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo("super", "Scheme is required!", 1073741830L, (-1061L), (-1061L), 1073741830L, 1073741830L, (STATECOLOR) null);
      long commitSize = heapInfo.getCommitSize();
      assertEquals((-1061L), commitSize);
      assertEquals("Scheme is required!", heapInfo.getType());
      assertEquals("super", heapInfo.getProcessname());
      assertEquals(1073741830L, heapInfo.getInitialSize());
      assertEquals(1073741830L, heapInfo.getSize());
      assertEquals(1073741830L, heapInfo.getMaxSize());
      assertEquals((-1061L), heapInfo.getMaxUsedSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxUsedSizeReturningNegative() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo("NULL", "NULL", 0L, 0L, (-3315L), 4442L, (-3315L), (STATECOLOR) null);
      long maxUsedSize = heapInfo.getMaxUsedSize();
      assertEquals(4442L, heapInfo.getInitialSize());
      assertEquals((-3315L), maxUsedSize);
      assertEquals(0L, heapInfo.getSize());
      assertEquals(0L, heapInfo.getCommitSize());
      assertEquals((-3315L), heapInfo.getMaxSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDispstatusReturningNull() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo("NULL", "NULL", 0L, 0L, (-3315L), 4442L, (-3315L), (STATECOLOR) null);
      heapInfo.getDispstatus();
      assertEquals(4442L, heapInfo.getInitialSize());
      assertEquals(0L, heapInfo.getCommitSize());
      assertEquals(0L, heapInfo.getSize());
      assertEquals((-3315L), heapInfo.getMaxSize());
      assertEquals((-3315L), heapInfo.getMaxUsedSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningNull() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      String type = heapInfo.getType();
      assertNull(type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetProcessnameReturningEmptyString() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo("", "_6;/\"{cwRnV<~qX!", (-988L), (-988L), (-988L), (-988L), (-988L), (STATECOLOR) null);
      String processname = heapInfo.getProcessname();
      assertEquals("", processname);
      assertEquals((-988L), heapInfo.getInitialSize());
      assertEquals("_6;/\"{cwRnV<~qX!", heapInfo.getType());
      assertEquals((-988L), heapInfo.getMaxSize());
      assertEquals((-988L), heapInfo.getSize());
      assertEquals((-988L), heapInfo.getCommitSize());
      assertEquals((-988L), heapInfo.getMaxUsedSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitialSizeReturningNegative() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setInitialSize((-793L));
      long initialSize = heapInfo.getInitialSize();
      assertEquals((-793L), initialSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeserializer() throws Throwable  {
      Class<Object> arg1 = Object.class;
      QName arg2 = new QName("A}7[Fj}", "SAPControl-RED", "A}7[Fj}");
      Serializer serializer = STATECOLOR.getSerializer("A}7[Fj}", arg1, arg2);
      Deserializer deserializer = HeapInfo.getDeserializer("com.sap.managementconsole.soap.axis.sapcontrol.HeapInfo", arg1, ((SimpleSerializer) serializer).xmlType);
      assertFalse(deserializer.componentsReady());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetMaxUsedSize() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setMaxUsedSize((-6132L));
      assertEquals((-6132L), heapInfo.getMaxUsedSize());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetMaxSizeReturningZero() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      long maxSize = heapInfo.getMaxSize();
      assertEquals(0L, maxSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeReturningEmptyString() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      heapInfo.setType("");
      String type = heapInfo.getType();
      assertEquals("", type);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSerializer() throws Throwable  {
      Class<Object> arg1 = Object.class;
      QName arg2 = new QName("eg=V", "SAPControl-RED", "org.apache.axis.message.SOAPBodyElement");
      Serializer serializer = HeapInfo.getSerializer("SAPControl-YELLOW", arg1, arg2);
      assertEquals("Axis SAX Mechanism", serializer.getMechanismType());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetInitialSizeReturningZero() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      long initialSize = heapInfo.getInitialSize();
      assertEquals(0L, initialSize);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSizeReturningZero() throws Throwable  {
      HeapInfo heapInfo = new HeapInfo();
      long size = heapInfo.getSize();
      assertEquals(0L, size);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeDesc() throws Throwable  {
      TypeDesc typeDesc = HeapInfo.getTypeDesc();
      assertFalse(typeDesc.hasAttributes());
  }
}
