/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Mon Mar 11 16:02:26 GMT 2024
 */

package com.sap.managementconsole.soap.axis.sapcontrol;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import com.sap.managementconsole.soap.axis.sapcontrol.J2EEApplicationAlias;
import javax.xml.namespace.QName;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.Deserializer;
import org.apache.axis.encoding.Serializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class J2EEApplicationAlias_ESTest extends J2EEApplicationAlias_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalRequestsReturningPositive() throws Throwable  {
      // No Comments were added
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("^Rj,K&!0z", "^Rj,K&!0z", 5873, "Kd", "^Rj,K&!0z");
      int totalRequests = j2EEApplicationAlias.getTotalRequests();
      assertEquals("Kd", j2EEApplicationAlias.getAppActive());
      assertEquals("^Rj,K&!0z", j2EEApplicationAlias.getIgnoreCookie());
      assertEquals("^Rj,K&!0z", j2EEApplicationAlias.getAlias());
      assertEquals(5873, totalRequests);
      assertEquals("^Rj,K&!0z", j2EEApplicationAlias.getAppName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalRequestsReturningNegative() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      // Given: Set the total requests to a negative value
      j2EEApplicationAlias.setTotalRequests(-1815);
      
      // When: Get the total requests
      int totalRequests = j2EEApplicationAlias.getTotalRequests();
      
      // Then: Assert that the returned value is equal to the given negative value
      assertEquals(-1815, totalRequests);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIgnoreCookieReturningNull() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      String ignoreCookie = j2EEApplicationAlias.getIgnoreCookie();
      // Assert that the "ignoreCookie" is null
      assertNull(ignoreCookie);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIgnoreCookieReturningEmptyString() throws Throwable  {
      // Given a J2EEApplicationAlias object with an empty ignoreCookie field
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      j2EEApplicationAlias.setIgnoreCookie("");
      
      // When the getIgnoreCookie method is called on the J2EEApplicationAlias object
      String ignoreCookie = j2EEApplicationAlias.getIgnoreCookie();
      
      // Then the empty string "" is returned
      assertEquals("", ignoreCookie);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppNameReturningNull() throws Throwable  {
      // Given: An empty J2EEApplicationAlias object
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      
      // When: The appName is retrieved using the getter method
      String appName = j2EEApplicationAlias.getAppName();
      
      // Then: The appName should be null
      assertNull(appName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppNameReturningEmptyString() throws Throwable  {
      // Given a J2EEApplicationAlias object with an empty app name
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      j2EEApplicationAlias.setAppName("");
      
      // When the app name is retrieved
      String appName = j2EEApplicationAlias.getAppName();
      
      // Then the returned value should be an empty string
      assertEquals("", appName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppActiveReturningNull() throws Throwable  {
      // Given a J2EEApplicationAlias instance with no value set for appActive
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      
      // When the getAppActive method is called
      String appActive = j2EEApplicationAlias.getAppActive();
      
      // Then the result should be null
      assertNull(appActive);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppActiveReturningEmptyString() throws Throwable  {
      // Given an instance of the J2EEApplicationAlias class with some test data
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("org.apache.log4j.spi.RootCategory", "", 0, "", "uVb JcNM>7yd");
      
      // When the getAppActive method is called on this instance
      String appActive = j2EEApplicationAlias.getAppActive();
      
      // Then the value returned should be the same as what was set for ignoreCookie
      assertEquals("uVb JcNM>7yd", appActive);
      
      // When the getIgnoreCookie method is called on this instance
      String ignoreCookie = j2EEApplicationAlias.getIgnoreCookie();
      
      // Then the value returned should be the same as what was set for ignoreCookie
      assertEquals("uVb JcNM>7yd", ignoreCookie);
      
      // When the getTotalRequests method is called on this instance
      int totalRequests = j2EEApplicationAlias.getTotalRequests();
      
      // Then the value returned should be the same as what was set for totalRequests
      assertEquals(0, totalRequests);
      
      // When the getAlias method is called on this instance
      String alias = j2EEApplicationAlias.getAlias();
      
      // Then the value returned should be the same as what was set for alias
      assertEquals("", alias);
      
      // When the getAppName method is called on this instance
      String appName = j2EEApplicationAlias.getAppName();
      
      // Then the value returned should be the same as what was set for appName
      assertEquals("org.apache.log4j.spi.RootCategory", appName);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAliasReturningNonEmptyString() throws Throwable  {
      // Given a J2EEApplicationAlias instance with some specified values
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("X>XpN", "X>XpN", 9, "X>XpN", "");
      
      // When the getAlias() method is called
      String alias = j2EEApplicationAlias.getAlias();
      
      // Then the expected value is returned
      assertEquals("X>XpN", alias);
      
      // And the other methods return the correct values
      assertEquals(9, j2EEApplicationAlias.getTotalRequests());
      assertEquals("", j2EEApplicationAlias.getIgnoreCookie());
      assertEquals("X>XpN", j2EEApplicationAlias.getAppName());
      assertEquals("X>XpN", j2EEApplicationAlias.getAppActive());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAliasReturningEmptyString() throws Throwable  {
      // Given a J2EE application alias object
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      
      // When the alias is set to an empty string
      j2EEApplicationAlias.setAlias("");
      
      // Then the getAlias method should return an empty string
      String alias = j2EEApplicationAlias.getAlias();
      assertEquals("", alias);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppNameReturningNonEmptyString() throws Throwable  {
      // Given the J2EE application alias "X>XpN"
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("X>XpN", "X>XpN", 9, "X>XpN", "");
      
      // When we retrieve the app name
      String appName = j2EEApplicationAlias.getAppName();
      
      // Then we expect the app name to be "X>XpN"
      assertEquals("X>XpN", appName);
      
      // And we expect the total number of requests to be 9
      assertEquals(9, j2EEApplicationAlias.getTotalRequests());
      
      // And we expect the app to be active
      assertEquals("X>XpN", j2EEApplicationAlias.getAppActive());
      
      // And we expect the alias to be "X>XpN"
      assertEquals("X>XpN", j2EEApplicationAlias.getAlias());
      
      // And we expect the ignore cookie to be empty
      assertEquals("", j2EEApplicationAlias.getIgnoreCookie());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetIgnoreCookieReturningNonEmptyString() throws Throwable  {
      // Test the J2EEApplicationAlias class with various inputs and assert that the output is as expected
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("", "", 975, "QO.", "/CVD)Bc/aR^^=");
      
      // Test getIgnoreCookie() method
      assertEquals("QO.", j2EEApplicationAlias.getAppActive());
      
      // Test getTotalRequests() method
      assertEquals(975, j2EEApplicationAlias.getTotalRequests());
      
      // Test getAppName() method
      assertEquals("", j2EEApplicationAlias.getAppName());
      
      // Test getAlias() method
      assertEquals("", j2EEApplicationAlias.getAlias());
      
      // Test getIgnoreCookie() method
      assertEquals("/CVD)Bc/aR^^=", j2EEApplicationAlias.getIgnoreCookie());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAppActiveReturningNonEmptyString() throws Throwable  {
      // Create a J2EE application alias with the specified parameters
      J2EEApplicationAlias alias = new J2EEApplicationAlias("^Rj,K&!0z", "^Rj,K&!0z", 5873, "Kd", "^Rj,K&!0z");
      
      // Verify that the getter methods return the correct values
      assertEquals("^Rj,K&!0z", alias.getIgnoreCookie());
      assertEquals("^Rj,K&!0z", alias.getAppName());
      assertEquals(5873, alias.getTotalRequests());
      assertEquals("Kd", alias.getAppActive());
      assertEquals("^Rj,K&!0z", alias.getAlias());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetAliasReturningNull() throws Throwable  {
      // Given: we have a J2EEApplicationAlias object and its getAlias() method returns null
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      String alias = j2EEApplicationAlias.getAlias();
      assertNull(alias);
      
      // When: we call the getAlias() method on the J2EEApplicationAlias object
      // Then: the result is null, as expected
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTotalRequestsReturningZero() throws Throwable  {
      // Given: A new instance of J2EEApplicationAlias
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      
      // When: The total requests are retrieved
      int totalRequests = j2EEApplicationAlias.getTotalRequests();
      
      // Then: The total requests should be 0
      assertEquals(0, totalRequests);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTakingNoArgumentsAndCallsHashCode() throws Throwable  {
      // Given: A new J2EEApplicationAlias object is created
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      
      // When: The hashCode method is called on the object
      int actualHashCode = j2EEApplicationAlias.hashCode();
      
      // Then: The hashCode should be 0 as no requests have been made yet
      assertEquals(0, actualHashCode);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetIgnoreCookie0() throws Throwable  {
      // Given
      J2EEApplicationAlias firstAppAlias = new J2EEApplicationAlias();
      J2EEApplicationAlias secondAppAlias = new J2EEApplicationAlias();
      
      // When
      boolean areEqual = firstAppAlias.equals(secondAppAlias);
      
      // Then
      assertTrue(areEqual);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetIgnoreCookie1() throws Throwable  {
      // Given two instances of J2EEApplicationAlias with different values
      J2EEApplicationAlias firstAlias = new J2EEApplicationAlias();
      J2EEApplicationAlias secondAlias = new J2EEApplicationAlias();
      firstAlias.setIgnoreCookie("G*h^w~4vIzcEb3^eVw");
      secondAlias.setIgnoreCookie("G*h^w~4vIzcEb3^eVw");
      
      // When we compare these instances using the equals method
      boolean equal = firstAlias.equals(secondAlias);
      
      // Then they are not equal because they have different values for the ignoreCookie field
      assertFalse(equal);
      
      // And the totalRequests field is 0 for both instances
      assertEquals(0, firstAlias.getTotalRequests());
      assertEquals(0, secondAlias.getTotalRequests());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetAppActive0() throws Throwable  {
      // Given: Two instances of J2EEApplicationAlias with different values for "appActive"
      J2EEApplicationAlias j2EEApplicationAlias1 = new J2EEApplicationAlias();
      j2EEApplicationAlias1.setAppActive("IgnoreCookie");
      J2EEApplicationAlias j2EEApplicationAlias2 = new J2EEApplicationAlias();
      j2EEApplicationAlias2.setAppActive("IgnoreUser");
      
      // When: We compare these instances using the equals method
      boolean equals = j2EEApplicationAlias1.equals(j2EEApplicationAlias2);
      
      // Then: The result is false, as the values for "appActive" are different
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetAppActive1() throws Throwable  {
      // Create two instances of J2EEApplicationAlias with the same values
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      
      // Assert that they are equal
      assertTrue(arg0.equals((Object)j2EEApplicationAlias));
      
      // Modify one of the instances and assert that they are not equal anymore
      arg0.setAppActive("VD@'nh2H?L#;_(`%gv");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTotalRequestsWithPositive() throws Throwable  {
      // No Comments were added
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("", "G*h^w~4vIzcEb3^eVw", 0, "G*h^w~4vIzcEb3^eVw", "");
      j2EEApplicationAlias.setAlias("{~FL VG#8~Q");
      j2EEApplicationAlias.setTotalRequests(1572);
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias("G*h^w~4vIzcEb3^eVw", "{~FL VG#8~Q", 0, "IgnoreCookie", "G*h^w~4vIzcEb3^eVw");
      j2EEApplicationAlias.setAppName("G*h^w~4vIzcEb3^eVw");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertEquals(1572, j2EEApplicationAlias.getTotalRequests());
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetAlias0() throws Throwable  {
      // Set up an instance of J2EEApplicationAlias
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      
      // Create a second instance of J2EEApplicationAlias with an alias set to "P["
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      arg0.setAlias("P[");
      
      // Test that the two instances are equal
      assertTrue(j2EEApplicationAlias.equals((Object)arg0)); // Check if the two instances are equal, based on their contents (in this case, their alias values)
      
      // Modify one of the instances to have a different alias value
      j2EEApplicationAlias.setAlias("P[");
      
      // Test that the two instances are not equal after modifying one of them
      boolean equals = j2EEApplicationAlias.equals(arg0); // Check if the two instances are equal, based on their contents (in this case, their alias values)
      assertFalse(equals); // Assert that the two instances are not equal, as they have different alias values
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndSetAlias1() throws Throwable  {
      // No Comments were added
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      assertTrue(arg0.equals((Object)j2EEApplicationAlias));
      
      arg0.setAlias("f,p$PlBfC2Tct&NunFv");
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTaking5ArgumentsAndEqualsAndEqualsReturningTrue() throws Throwable  {
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("!7Lf$G9NV/zR]Q%", "!7Lf$G9NV/zR]Q%", 2245, "!7Lf$G9NV/zR]Q%", "!7Lf$G9NV/zR]Q%");
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias("!7Lf$G9NV/zR]Q%", "!7Lf$G9NV/zR]Q%", 2245, "!7Lf$G9NV/zR]Q%", "!7Lf$G9NV/zR]Q%");
      assertTrue(j2EEApplicationAlias.equals(arg0)); // checks that two J2EEApplicationAlias objects are equal, based on the specified equals() method
      assertEquals(2245, arg0.getTotalRequests()); // asserts that the getTotalRequests() method returns 2245 for the given J2EEApplicationAlias object
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTakingNoArgumentsAndCallsEquals0() throws Throwable  {
      // No Comments were added
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      boolean equals = j2EEApplicationAlias.equals(arg0);
      assertTrue(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetAppName() throws Throwable  {
      // Given
      J2EEApplicationAlias j2EEApplicationAlias1 = new J2EEApplicationAlias();
      j2EEApplicationAlias1.setAppName("Google Chrome");
      J2EEApplicationAlias arg0 = new J2EEApplicationAlias();
      arg0.setAppName("Google Chrome");
      
      // When
      boolean equals = j2EEApplicationAlias1.equals(arg0);
      
      // Then
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTakingNoArgumentsAndCallsEquals1() throws Throwable  {
      // Given two instances of the same object
      J2EEApplicationAlias alias1 = new J2EEApplicationAlias();
      J2EEApplicationAlias alias2 = new J2EEApplicationAlias();
      
      // When we call equals on them with the same instance
      boolean result = alias1.equals(alias2);
      
      // Then they should return true
      assertTrue(result);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsWithNonNull() throws Throwable  {
      // Given: a QName object representing the name of a metric (TotalRequests)
      QName arg0 = new QName("TotalRequests");
      
      // When: we compare this QName to a J2EEApplicationAlias object that does not have the same name
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias();
      boolean equals = j2EEApplicationAlias.equals(arg0);
      
      // Then: we expect that the comparison returns false, as the two objects do not have the same name
      assertFalse(equals);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetDeserializer() throws Throwable  {
      // Given a J2EEApplicationAlias and a QName for the deserializer
      Class<J2EEApplicationAlias> arg1 = J2EEApplicationAlias.class;
      QName arg2 = QName.valueOf("G*h^w~4vIzcEb3^eVw");
      
      // When the deserializer is created with the given arguments
      Deserializer deserializer = J2EEApplicationAlias.getDeserializer("G*h^w~4vIzcEb3^eVw", arg1, arg2);
      
      // Then the components are not ready
      assertFalse(deserializer.componentsReady());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTypeDesc() throws Throwable  {
      // Given that we have a TypeDesc object
      TypeDesc typeDesc = J2EEApplicationAlias.getTypeDesc();
      
      // When we check if it has any attributes
      boolean hasAttributes = typeDesc.hasAttributes();
      
      // Then we assert that it does not have any attributes
      assertFalse(hasAttributes);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCreatesJ2EEApplicationAliasTaking5ArgumentsAndCallsHashCode() throws Throwable  {
      // rollbacked to evosuite
      J2EEApplicationAlias j2EEApplicationAlias = new J2EEApplicationAlias("", "", (-2147483645), "hR>zG(x[SR_", "HEFl9\"oqQ6VRv0+");
      j2EEApplicationAlias.hashCode();
      assertEquals("", j2EEApplicationAlias.getAppName());
      assertEquals("", j2EEApplicationAlias.getAlias());
      assertEquals("HEFl9\"oqQ6VRv0+", j2EEApplicationAlias.getIgnoreCookie());
      assertEquals((-2147483645), j2EEApplicationAlias.getTotalRequests());
      assertEquals("hR>zG(x[SR_", j2EEApplicationAlias.getAppActive());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEqualsAndCreatesJ2EEApplicationAliasTaking5ArgumentsAndCreatesJ2EEApplicationAliasTakingNoArguments() throws Throwable  {
      // Given two instances of J2EEApplicationAlias with the same values
      J2EEApplicationAlias j2EEApplicationAlias1 = new J2EEApplicationAlias("myApp", "myEnv", 1234567890, "myDB", "myApp");
      J2EEApplicationAlias j2EEApplicationAlias2 = new J2EEApplicationAlias("myApp", "myEnv", 1234567890, "myDB", "myApp");
      
      // When we call the equals method on the two instances
      boolean areEqual = j2EEApplicationAlias1.equals(j2EEApplicationAlias2);
      
      // Then we expect that they are equal and have the same values
      assertTrue(areEqual);
      assertEquals("myApp", j2EEApplicationAlias1.getIgnoreCookie());
      assertEquals(1234567890, j2EEApplicationAlias1.getTotalRequests());
      assertEquals("myEnv", j2EEApplicationAlias1.getAlias());
      assertEquals("myDB", j2EEApplicationAlias1.getAppActive());
      assertEquals("myApp", j2EEApplicationAlias1.getAppName());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetSerializer() throws Throwable  {
      // rollbacked to evosuite
      Class<J2EEApplicationAlias> arg1 = J2EEApplicationAlias.class;
      QName arg2 = QName.valueOf("G*h^w~4vIzcEb3^eVw");
      Serializer serializer = J2EEApplicationAlias.getSerializer("V>)z3p=(+", arg1, arg2);
      assertEquals("Axis SAX Mechanism", serializer.getMechanismType());
  }
}
