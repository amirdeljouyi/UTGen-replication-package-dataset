* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/101_netweaver/evosuite-files/evosuite.properties
* Connecting to master process on port 15378
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 450
* Using seed 1709238085749
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 175 / 450
[Progress:>                             0%] [Cov:==========================>        75%][Progress:>                             1%] [Cov:==========================>        77%][Progress:>                             1%] [Cov:============================>      81%][Progress:>                             1%] [Cov:=============================>     84%][Progress:>                             1%] [Cov:==============================>    86%][Progress:>                             1%] [Cov:===============================>   89%][Progress:>                             2%] [Cov:===============================>   91%][Progress:>                             2%] [Cov:===============================>   91%][Progress:>                             2%] [Cov:================================>  92%][Progress:>                             2%] [Cov:================================>  92%][Progress:>                             2%] [Cov:================================>  93%][Progress:>                             2%] [Cov:================================>  93%][Progress:>                             2%] [Cov:================================>  93%][Progress:>                             3%] [Cov:================================>  93%][Progress:>                             3%] [Cov:================================>  94%][Progress:>                             3%] [Cov:================================>  94%][Progress:>                             3%] [Cov:================================>  94%][Progress:>                             3%] [Cov:================================>  94%][Progress:>                             3%] [Cov:================================>  94%][Progress:>                             3%] [Cov:================================>  94%][Progress:>                             3%] [Cov:=================================> 95%][Progress:>                             3%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            4%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            5%] [Cov:=================================> 95%][Progress:=>                            6%] [Cov:=================================> 95%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:=>                            6%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           7%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           8%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          12%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:===>                          13%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         14%] [Cov:=================================> 96%][Progress:====>                         15%] [Cov:=================================> 96%][Progress:====>                         15%] [Cov:=================================> 96%][Progress:====>                         15%] [Cov:=================================> 96%][Progress:====>                         15%] [Cov:=================================> 96%][Progress:====>                         15%] [Cov:=================================> 96%][Progress:====>                         15%] [Cov:=================================> 96%][Progress:====>                         15%] [Cov:=================================> 96%][Progress:====>                         15%] [Cov:=================================> 96%][Progress:====>                         15%] [Cov:=================================> 96%][Progress:====>                         15%] [Cov:=================================> 96%][Progress:====>                         16%] [Cov:=================================> 96%][Progress:====>                         16%] [Cov:=================================> 96%][Progress:====>                         16%] [Cov:=================================> 96%][Progress:====>                         16%] [Cov:=================================> 96%][Progress:====>                         16%] [Cov:=================================> 96%][Progress:====>                         16%] [Cov:=================================> 96%][Progress:====>                         16%] [Cov:=================================> 96%][Progress:=====>                        17%] [Cov:=================================> 96%][Progress:=====>                        17%] [Cov:=================================> 96%][Progress:=====>                        17%] [Cov:=================================> 96%][Progress:=====>                        17%] [Cov:=================================> 96%][Progress:=====>                        17%] [Cov:=================================> 96%][Progress:=====>                        17%] [Cov:=================================> 96%][Progress:=====>                        17%] [Cov:=================================> 96%][Progress:=====>                        17%] [Cov:=================================> 96%][Progress:=====>                        17%] [Cov:=================================> 96%][Progress:=====>                        17%] [Cov:=================================> 96%][Progress:=====>                        18%] [Cov:=================================> 96%][Progress:=====>                        18%] [Cov:=================================> 96%][Progress:=====>                        18%] [Cov:=================================> 96%][Progress:=====>                        18%] [Cov:=================================> 96%][Progress:=====>                        18%] [Cov:=================================> 96%][Progress:=====>                        18%] [Cov:=================================> 96%][Progress:=====>                        18%] [Cov:=================================> 96%][Progress:=====>                        18%] [Cov:=================================> 96%][Progress:=====>                        18%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:=====>                        19%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       20%] [Cov:=================================> 96%][Progress:======>                       21%] [Cov:=================================> 96%][Progress:======>                       21%] [Cov:=================================> 96%][Progress:======>                       21%] [Cov:=================================> 96%][Progress:======>                       21%] [Cov:=================================> 96%][Progress:======>                       21%] [Cov:=================================> 96%][Progress:======>                       21%] [Cov:=================================> 96%][Progress:======>                       21%] [Cov:=================================> 96%][Progress:======>                       21%] [Cov:=================================> 96%][Progress:======>                       21%] [Cov:=================================> 96%][Progress:======>                       21%] [Cov:=================================> 96%][Progress:======>                       22%] [Cov:=================================> 96%][Progress:======>                       22%] [Cov:=================================> 96%][Progress:======>                       22%] [Cov:=================================> 96%][Progress:======>                       22%] [Cov:=================================> 96%][Progress:======>                       22%] [Cov:=================================> 96%][Progress:======>                       22%] [Cov:=================================> 96%][Progress:======>                       22%] [Cov:=================================> 96%][Progress:======>                       22%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:======>                       23%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      24%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      25%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:=======>                      26%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     27%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     28%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:========>                     29%] [Cov:=================================> 96%][Progress:=========>                    30%] [Cov:=================================> 96%][Progress:=========>                    30%] [Cov:=================================> 96%][Progress:=========>                    30%] [Cov:=================================> 96%][Progress:=========>                    30%] [Cov:=================================> 96%][Progress:=========>                    30%] [Cov:=================================> 96%][Progress:=========>                    30%] [Cov:=================================> 96%][Progress:=========>                    30%] [Cov:=================================> 96%][Progress:=========>                    30%] [Cov:=================================> 96%][Progress:=========>                    31%] [Cov:=================================> 96%][Progress:=========>                    31%] [Cov:=================================> 96%][Progress:=========>                    31%] [Cov:=================================> 96%][Progress:=========>                    31%] [Cov:=================================> 96%][Progress:=========>                    31%] [Cov:=================================> 96%][Progress:=========>                    31%] [Cov:=================================> 96%][Progress:=========>                    31%] [Cov:=================================> 96%][Progress:=========>                    32%] [Cov:=================================> 96%][Progress:=========>                    32%] [Cov:=================================> 96%][Progress:=========>                    32%] [Cov:=================================> 96%][Progress:=========>                    32%] [Cov:=================================> 96%][Progress:=========>                    32%] [Cov:=================================> 96%][Progress:=========>                    32%] [Cov:=================================> 96%][Progress:=========>                    32%] [Cov:=================================> 96%][Progress:=========>                    33%] [Cov:=================================> 96%][Progress:=========>                    33%] [Cov:=================================> 96%][Progress:=========>                    33%] [Cov:=================================> 96%][Progress:=========>                    33%] [Cov:=================================> 96%][Progress:=========>                    33%] [Cov:=================================> 96%][Progress:=========>                    33%] [Cov:=================================> 96%][Progress:=========>                    33%] [Cov:=================================> 96%][Progress:=========>                    33%] [Cov:=================================> 96%][Progress:==========>                   34%] [Cov:=================================> 96%][Progress:==========>                   34%] [Cov:=================================> 96%][Progress:==========>                   34%] [Cov:=================================> 96%][Progress:==========>                   34%] [Cov:=================================> 96%][Progress:==========>                   34%] [Cov:=================================> 96%][Progress:==========>                   34%] [Cov:=================================> 96%][Progress:==========>                   34%] [Cov:=================================> 96%][Progress:==========>                   35%] [Cov:=================================> 96%][Progress:==========>                   35%] [Cov:=================================> 96%][Progress:==========>                   35%] [Cov:=================================> 96%][Progress:==========>                   35%] [Cov:=================================> 96%][Progress:==========>                   35%] [Cov:=================================> 96%][Progress:==========>                   35%] [Cov:=================================> 96%][Progress:==========>                   35%] [Cov:=================================> 96%][Progress:==========>                   35%] [Cov:=================================> 96%][Progress:==========>                   36%] [Cov:=================================> 96%][Progress:==========>                   36%] [Cov:=================================> 96%][Progress:==========>                   36%] [Cov:=================================> 96%][Progress:==========>                   36%] [Cov:=================================> 96%][Progress:==========>                   36%] [Cov:=================================> 96%][Progress:==========>                   36%] [Cov:=================================> 96%][Progress:==========>                   36%] [Cov:=================================> 96%][Progress:===========>                  37%] [Cov:=================================> 96%][Progress:===========>                  37%] [Cov:=================================> 96%][Progress:===========>                  37%] [Cov:=================================> 96%][Progress:===========>                  37%] [Cov:=================================> 96%][Progress:===========>                  37%] [Cov:=================================> 96%][Progress:===========>                  37%] [Cov:=================================> 96%][Progress:===========>                  37%] [Cov:=================================> 96%][Progress:===========>                  37%] [Cov:=================================> 96%][Progress:===========>                  38%] [Cov:=================================> 96%][Progress:===========>                  38%] [Cov:=================================> 96%][Progress:===========>                  38%] [Cov:=================================> 96%][Progress:===========>                  38%] [Cov:=================================> 96%][Progress:===========>                  38%] [Cov:=================================> 96%][Progress:===========>                  38%] [Cov:=================================> 96%][Progress:===========>                  38%] [Cov:=================================> 96%][Progress:===========>                  38%] [Cov:=================================> 96%][Progress:===========>                  39%] [Cov:=================================> 96%][Progress:===========>                  39%] [Cov:=================================> 96%][Progress:===========>                  39%] [Cov:=================================> 96%][Progress:===========>                  39%] [Cov:=================================> 96%][Progress:===========>                  39%] [Cov:=================================> 96%][Progress:===========>                  39%] [Cov:=================================> 96%][Progress:===========>                  39%] [Cov:=================================> 96%][Progress:===========>                  39%] [Cov:=================================> 96%][Progress:============>                 40%] [Cov:=================================> 96%][Progress:============>                 40%] [Cov:=================================> 96%][Progress:============>                 40%] [Cov:=================================> 96%][Progress:============>                 40%] [Cov:=================================> 96%][Progress:============>                 40%] [Cov:=================================> 96%][Progress:============>                 40%] [Cov:=================================> 96%][Progress:============>                 40%] [Cov:=================================> 96%][Progress:============>                 40%] [Cov:=================================> 96%][Progress:============>                 41%] [Cov:=================================> 96%][Progress:============>                 41%] [Cov:=================================> 96%][Progress:============>                 41%] [Cov:=================================> 96%][Progress:============>                 41%] [Cov:=================================> 96%][Progress:============>                 41%] [Cov:=================================> 96%][Progress:============>                 41%] [Cov:=================================> 96%][Progress:============>                 41%] [Cov:=================================> 96%][Progress:============>                 42%] [Cov:=================================> 96%][Progress:============>                 42%] [Cov:=================================> 96%][Progress:============>                 42%] [Cov:=================================> 96%][Progress:============>                 42%] [Cov:=================================> 96%][Progress:============>                 42%] [Cov:=================================> 96%][Progress:============>                 42%] [Cov:=================================> 96%][Progress:============>                 43%] [Cov:=================================> 96%][Progress:============>                 43%] [Cov:=================================> 96%][Progress:============>                 43%] [Cov:=================================> 96%][Progress:============>                 43%] [Cov:=================================> 96%][Progress:============>                 43%] [Cov:=================================> 96%][Progress:============>                 43%] [Cov:=================================> 96%][Progress:============>                 43%] [Cov:=================================> 96%][Progress:=============>                44%] [Cov:=================================> 96%][Progress:=============>                44%] [Cov:=================================> 96%][Progress:=============>                44%] [Cov:=================================> 96%][Progress:=============>                44%] [Cov:=================================> 96%][Progress:=============>                44%] [Cov:=================================> 96%][Progress:=============>                44%] [Cov:=================================> 96%][Progress:=============>                45%] [Cov:=================================> 96%][Progress:=============>                45%] [Cov:=================================> 96%][Progress:=============>                45%] [Cov:=================================> 96%][Progress:=============>                45%] [Cov:=================================> 96%][Progress:=============>                45%] [Cov:=================================> 96%][Progress:=============>                45%] [Cov:=================================> 96%][Progress:=============>                45%] [Cov:=================================> 96%][Progress:=============>                46%] [Cov:=================================> 96%][Progress:=============>                46%] [Cov:=================================> 96%][Progress:=============>                46%] [Cov:=================================> 96%][Progress:=============>                46%] [Cov:=================================> 96%][Progress:=============>                46%] [Cov:=================================> 96%][Progress:=============>                46%] [Cov:=================================> 96%][Progress:=============>                46%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               47%] [Cov:=================================> 96%][Progress:==============>               48%] [Cov:=================================> 96%][Progress:==============>               48%] [Cov:=================================> 96%][Progress:==============>               48%] [Cov:=================================> 96%][Progress:==============>               48%] [Cov:=================================> 96%][Progress:==============>               48%] [Cov:=================================> 96%][Progress:==============>               48%] [Cov:=================================> 96%][Progress:==============>               48%] [Cov:=================================> 96%][Progress:==============>               48%] [Cov:=================================> 96%][Progress:==============>               49%] [Cov:=================================> 96%][Progress:==============>               49%] [Cov:=================================> 96%][Progress:==============>               49%] [Cov:=================================> 96%][Progress:==============>               49%] [Cov:=================================> 96%][Progress:==============>               49%] [Cov:=================================> 96%][Progress:==============>               49%] [Cov:=================================> 96%][Progress:==============>               49%] [Cov:=================================> 96%][Progress:==============>               49%] [Cov:=================================> 96%][Progress:==============>               49%] [Cov:=================================> 96%][Progress:===============>              50%] [Cov:=================================> 96%][Progress:===============>              50%] [Cov:=================================> 96%][Progress:===============>              50%] [Cov:=================================> 96%][Progress:===============>              50%] [Cov:=================================> 96%][Progress:===============>              50%] [Cov:=================================> 96%][Progress:===============>              50%] [Cov:=================================> 96%][Progress:===============>              51%] [Cov:=================================> 96%][Progress:===============>              51%] [Cov:=================================> 96%][Progress:===============>              51%] [Cov:=================================> 96%][Progress:===============>              51%] [Cov:=================================> 96%][Progress:===============>              51%] [Cov:=================================> 96%][Progress:===============>              51%] [Cov:=================================> 96%][Progress:===============>              52%] [Cov:=================================> 96%][Progress:===============>              52%] [Cov:=================================> 96%][Progress:===============>              52%] [Cov:=================================> 96%][Progress:===============>              52%] [Cov:=================================> 96%][Progress:===============>              52%] [Cov:=================================> 96%][Progress:===============>              52%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:===============>              53%] [Cov:=================================> 96%][Progress:================>             54%] [Cov:=================================> 96%][Progress:================>             54%] [Cov:=================================> 96%][Progress:================>             54%] [Cov:=================================> 96%][Progress:================>             54%] [Cov:=================================> 96%][Progress:================>             54%] [Cov:=================================> 96%][Progress:================>             54%] [Cov:=================================> 96%][Progress:================>             55%] [Cov:=================================> 96%][Progress:================>             55%] [Cov:=================================> 96%][Progress:================>             55%] [Cov:=================================> 96%][Progress:================>             55%] [Cov:=================================> 96%][Progress:================>             55%] [Cov:=================================> 96%][Progress:================>             56%] [Cov:=================================> 96%][Progress:================>             56%] [Cov:=================================> 96%][Progress:================>             56%] [Cov:=================================> 96%][Progress:================>             56%] [Cov:=================================> 96%][Progress:================>             56%] [Cov:=================================> 96%][Progress:================>             56%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            57%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            58%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:=================>            59%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           60%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           61%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           62%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:==================>           63%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          64%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          65%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:===================>          66%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         67%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         68%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:====================>         69%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        70%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        71%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        72%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:=====================>        73%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       74%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       75%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:======================>       76%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      77%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      78%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:=======================>      79%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     80%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     81%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     82%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:========================>     83%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    84%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    85%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:=========================>    86%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   87%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   88%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:==========================>   89%] [Cov:=================================> 96%][Progress:===========================>  90%] [Cov:=================================> 96%][Progress:===========================>  90%] [Cov:=================================> 96%][Progress:===========================>  90%] [Cov:=================================> 96%][Progress:===========================>  90%] [Cov:=================================> 96%][Progress:===========================>  90%] [Cov:=================================> 96%][Progress:===========================>  90%] [Cov:=================================> 96%][Progress:===========================>  90%] [Cov:=================================> 96%][Progress:===========================>  90%] [Cov:=================================> 96%][Progress:===========================>  91%] [Cov:=================================> 96%][Progress:===========================>  91%] [Cov:=================================> 96%][Progress:===========================>  91%] [Cov:=================================> 96%][Progress:===========================>  91%] [Cov:=================================> 96%][Progress:===========================>  91%] [Cov:=================================> 96%][Progress:===========================>  91%] [Cov:=================================> 96%][Progress:===========================>  91%] [Cov:=================================> 96%][Progress:===========================>  91%] [Cov:=================================> 96%][Progress:===========================>  92%] [Cov:=================================> 96%][Progress:===========================>  92%] [Cov:=================================> 96%][Progress:===========================>  92%] [Cov:=================================> 96%][Progress:===========================>  92%] [Cov:=================================> 96%][Progress:===========================>  92%] [Cov:=================================> 96%][Progress:===========================>  92%] [Cov:=================================> 96%][Progress:===========================>  92%] [Cov:=================================> 96%][Progress:===========================>  93%] [Cov:=================================> 96%][Progress:===========================>  93%] [Cov:=================================> 96%][Progress:===========================>  93%] [Cov:=================================> 96%][Progress:===========================>  93%] [Cov:=================================> 96%][Progress:===========================>  93%] [Cov:=================================> 96%][Progress:===========================>  93%] [Cov:=================================> 96%][Progress:===========================>  93%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 94%] [Cov:=================================> 96%][Progress:============================> 95%] [Cov:=================================> 96%][Progress:============================> 95%] [Cov:=================================> 96%][Progress:============================> 95%] [Cov:=================================> 96%][Progress:============================> 95%] [Cov:=================================> 96%][Progress:============================> 95%] [Cov:=================================> 96%][Progress:============================> 95%] [Cov:=================================> 96%][Progress:============================> 95%] [Cov:=================================> 96%][Progress:============================> 95%] [Cov:=================================> 96%][Progress:============================> 95%] [Cov:=================================> 96%][Progress:============================> 95%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:============================> 96%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>97%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>98%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:=============================>99%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%][Progress:==============================100%] [Cov:=================================> 96%]
* Search finished after 102s and 1123 generations, 528197 statements, best individual has fitness: 17.0
* Generated before the refinement 77 tests with total length 245
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setDuration(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setDuration(2146212195)
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDuration(2146212195);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setDuration(100);
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setDuration(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setDuration(100) target is: gCInfo2_ method is: setDuration(int)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setDuration(I)V
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
int _int = 100;
gCInfo2_.setDuration(_int);
GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setClsBytesAfter(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setClsBytesAfter(2093L)
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesAfter(2093L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setClsBytesAfter(1048576L);// 1 MB

        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setClsBytesAfter(1048576L)// 1 MB
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setClsBytesAfter(1048576L)// 1 MB
 target is: gCInfo2_ method is: setClsBytesAfter(long)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setClsBytesAfter(J)V
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
long _long = 1048576L;
gCInfo2_.setClsBytesAfter(_long);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setProcessname(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setProcessname(" ")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname(" ");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        GCInfo2 gCInfo2 = new GCInfo2();
        gCInfo2.setProcessName("MyProcess");
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setProcessName("MyProcess");
        Assertions.assertTrue(gCInfo2.equals(gCInfo2_));
    }
}
statement is: // Improved test data
GCInfo2 gCInfo2 = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2.setProcessName("MyProcess"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setProcessName("MyProcess") target is: gCInfo2 method is: setProcessName(java.lang.String)
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setProcessName("MyProcess"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setProcessName("MyProcess") target is: gCInfo2_ method is: setProcessName(java.lang.String)
statement is: Assertions.assertTrue(gCInfo2.equals(gCInfo2_)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assertions.assertTrue(gCInfo2.equals(gCInfo2_)) target is: Assertions method is: assertTrue()
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setType("6pA ufJ|)j6D")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType("6pA ufJ|)j6D");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setType("Motorcycle");
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setType("Motorcycle"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setType("Motorcycle") target is: gCInfo2_ method is: setType(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
String string = "Motorcycle";
gCInfo2_.setType(string);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

statement is: Class<Object> class = Object.class type is: class org.evosuite.testcase.statements.ClassPrimitiveStatement return type java.lang.Class<java.lang.Object>
statement code is: Class<Object> class = Object.class
statement is: javax.xml.namespace.QName(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class javax.xml.namespace.QName
statement code is: QName qName = new QName((String) null, "duration")
statement is: getDeserializer(Ljava/lang/String;Ljava/lang/Class;Ljavax/xml/namespace/QName;)Lorg/apache/axis/encoding/Deserializer; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.apache.axis.encoding.ser.BeanDeserializer
statement code is: BeanDeserializer deserializer = (BeanDeserializer)GCInfo2.getDeserializer("h\"/B>Ux,", arg1, arg2)
test data is: Class<Object> class = Object.class;
QName qName = new QName((String) null, "duration");
GCInfo2.getDeserializer("h\"/B>Ux,", class, qName);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        QName qName = new QName(((String) (null)), "duration");
        GCInfo2.getDeserializer("h\"/B>Ux", $missing$, qName);
    }
}
statement is: QName qName = new QName(((String) (null)), "duration"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2.getDeserializer("h\"/B>Ux", $missing$, qName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: GCInfo2.getDeserializer("h\"/B>Ux", $missing$, qName) target is: GCInfo2 method is: getDeserializer(java.lang.String,QName)
Matched Method is: getDeserializer(Ljava/lang/String;Ljava/lang/Class;Ljavax/xml/namespace/QName;)Lorg/apache/axis/encoding/Deserializer;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: String string = "duration";
QName qName = new QName(string, "duration");
String string = "h\"/B>Ux";
QName qName = null;
GCInfo2.getDeserializer(string, (Class) qName, qName);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: org.evosuite.testcase.statements.FieldStatement@24167381 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value2
statement is: setDispstatus(Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setDispstatus(arg0)
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }
}
statement is: Class<Object> class = Object.class type is: class org.evosuite.testcase.statements.ClassPrimitiveStatement return type java.lang.Class<java.lang.Object>
statement code is: Class<Object> class = Object.class
statement is: valueOf(Ljava/lang/String;)Ljavax/xml/namespace/QName; type is: class org.evosuite.testcase.statements.MethodStatement return type class javax.xml.namespace.QName
statement code is: QName valueOf = QName.valueOf("processname")
statement is: getSerializer(Ljava/lang/String;Ljava/lang/Class;Ljavax/xml/namespace/QName;)Lorg/apache/axis/encoding/Serializer; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.apache.axis.encoding.ser.BeanSerializer
statement code is: BeanSerializer serializer = (BeanSerializer)GCInfo2.getSerializer("SAPControl-RED", arg1, arg2)
test data is: Class<Object> class = Object.class;
QName valueOf = QName.valueOf("processname");
GCInfo2.getSerializer("SAPControl-RED", class, valueOf);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        QName valueOf = QName.valueOf("processname");
        GCInfo2.getSerializer("SAPControl-RED", $missing$, valueOf);
    }
}
statement is: QName valueOf = QName.valueOf("processname"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: QName.valueOf("processname") target is: QName method is: valueOf(java.lang.String)
Matched Method is: valueOf(Ljava/lang/String;)Ljavax/xml/namespace/QName;
statement is: GCInfo2.getSerializer("SAPControl-RED", $missing$, valueOf), class spoon.support.reflect.code.CtInvocationImpl
invocation is: GCInfo2.getSerializer("SAPControl-RED", $missing$, valueOf) target is: GCInfo2 method is: getSerializer(java.lang.String,QName)
Matched Method is: getSerializer(Ljava/lang/String;Ljava/lang/Class;Ljavax/xml/namespace/QName;)Lorg/apache/axis/encoding/Serializer;
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: String string = "processname";
QName valueOf = QName.valueOf(string);
String string = "SAPControl-RED";
QName qName = null;
GCInfo2.getSerializer(string, (Class) valueOf, qName);

statement is: getTypeDesc()Lorg/apache/axis/description/TypeDesc; type is: class org.evosuite.testcase.statements.MethodStatement return type class org.apache.axis.description.TypeDesc
statement code is: TypeDesc typeDesc = GCInfo2.getTypeDesc()
test data is: GCInfo2.getTypeDesc();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int[] improvedNumbers = new int[]{ 10, 20, 30 };
        String[] improvedNames = new String[]{ "Johnny", "Janey", "Bobbington" };
    }
}
statement is: int[] improvedNumbers = new int[]{ 10, 20, 30 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] improvedNames = new String[]{ "Johnny", "Janey", "Bobbington" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setObjBytesAfter(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setObjBytesAfter(486L)
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesAfter(486L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setObjBytesAfter(486L);
        // Improved test data:
        // - Changed the primitive value to a more descriptive example (e.g., 486 instead of 100)
        // - Changed the String value to a more representative example (e.g., "GCInfo2" instead of "")
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setObjBytesAfter(486L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setObjBytesAfter(486L) target is: gCInfo2_ method is: setObjBytesAfter(long)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setObjBytesAfter(J)V
statement is: // Improved test data:
// - Changed the primitive value to a more descriptive example (e.g., 486 instead of 100)
// - Changed the String value to a more representative example (e.g., "GCInfo2" instead of "")
GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
long _long = 486L;
gCInfo2_.setObjBytesAfter(_long);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals("ehwJl-1?jN\"?5y")
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals("ehwJl-1?jN\"?5y");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.equals("1234567890");
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.equals("1234567890"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals("1234567890") target is: gCInfo2_ method is: equals(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
String string = "1234567890";
gCInfo2_.equals(string);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        GCInfo2 gCInfo1 = new GCInfo2();
        gCInfo1.setName("John");
        gCInfo1.setAge(25);
        gCInfo1.setGender("Male");
        GCInfo2 gCInfo2 = new GCInfo2();
        gCInfo2.setName("Jane");
        gCInfo2.setAge(30);
        gCInfo2.setGender("Female");
    }
}
statement is: // Improved test data
GCInfo2 gCInfo1 = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo1.setName("John"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo1.setName("John") target is: gCInfo1 method is: setName(java.lang.String)
statement is: gCInfo1.setAge(25), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo1.setAge(25) target is: gCInfo1 method is: setAge(int)
statement is: gCInfo1.setGender("Male"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo1.setGender("Male") target is: gCInfo1 method is: setGender(java.lang.String)
statement is: GCInfo2 gCInfo2 = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2.setName("Jane"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setName("Jane") target is: gCInfo2 method is: setName(java.lang.String)
statement is: gCInfo2.setAge(30), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setAge(30) target is: gCInfo2 method is: setAge(int)
statement is: gCInfo2.setGender("Female"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setGender("Female") target is: gCInfo2 method is: setGender(java.lang.String)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setProcessname(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setProcessname("*|_tQod!~TgAJc8")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("*|_tQod!~TgAJc8", "sKI[s3tIG", "sKI[s3tIG", "*|_tQod!~TgAJc8", (-1897), (-1897), 853L, 853L, 853L, (-1897), (-531L), (-410L), 853L, (-1897), (-1L), (STATECOLOR) null)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("*|_tQod!~TgAJc8");
GCInfo2 gCInfo2_ = new GCInfo2("*|_tQod!~TgAJc8", "sKI[s3tIG", "sKI[s3tIG", "*|_tQod!~TgAJc8", (-1897), (-1897), 853L, 853L, 853L, (-1897), (-531L), (-410L), 853L, (-1897), (-1L), (STATECOLOR) null);
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2 = new GCInfo2();
        gCInfo2.setProcessName("java");
        gCInfo2.setProjectID("project1");
        gCInfo2.setEnvironment("prod");
        gCInfo2.setParentProcessName("init");
        gCInfo2.setPid(100);
        gCInfo2.setPPid(500);
        gCInfo2.setGID(853L);
        gCInfo2.setSGID(853L);
        gCInfo2.setCGID(853L);
        gCInfo2.setProcessUser("user1");
        gCInfo2.setStateColor(((STATECOLOR) (null)));
        assertTrue(gCInfo2.equals(gCInfo2));
    }
}
statement is: GCInfo2 gCInfo2 = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2.setProcessName("java"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setProcessName("java") target is: gCInfo2 method is: setProcessName(java.lang.String)
statement is: gCInfo2.setProjectID("project1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setProjectID("project1") target is: gCInfo2 method is: setProjectID(java.lang.String)
statement is: gCInfo2.setEnvironment("prod"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setEnvironment("prod") target is: gCInfo2 method is: setEnvironment(java.lang.String)
statement is: gCInfo2.setParentProcessName("init"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setParentProcessName("init") target is: gCInfo2 method is: setParentProcessName(java.lang.String)
statement is: gCInfo2.setPid(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setPid(100) target is: gCInfo2 method is: setPid(int)
statement is: gCInfo2.setPPid(500), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setPPid(500) target is: gCInfo2 method is: setPPid(int)
statement is: gCInfo2.setGID(853L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setGID(853L) target is: gCInfo2 method is: setGID(long)
statement is: gCInfo2.setSGID(853L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setSGID(853L) target is: gCInfo2 method is: setSGID(long)
statement is: gCInfo2.setCGID(853L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setCGID(853L) target is: gCInfo2 method is: setCGID(long)
statement is: gCInfo2.setProcessUser("user1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setProcessUser("user1") target is: gCInfo2 method is: setProcessUser(java.lang.String)
statement is: gCInfo2.setStateColor(((STATECOLOR) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setStateColor(((STATECOLOR) (null))) target is: gCInfo2 method is: setStateColor(STATECOLOR)
statement is: assertTrue(gCInfo2.equals(gCInfo2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(gCInfo2.equals(gCInfo2)) target is:  method is: assertTrue(<unknown>)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setProcessname(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setProcessname("pP9*?w:7\"")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("pP9*?w:7\"");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setProcessname("pP9*?w:7\"");
        // Improved test data
        gCInfo2_.setProcessname("MyJavaProcess123");
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setProcessname("pP9*?w:7\""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setProcessname("pP9*?w:7\"") target is: gCInfo2_ method is: setProcessname(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setProcessname(Ljava/lang/String;)V
statement is: // Improved test data
gCInfo2_.setProcessname("MyJavaProcess123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
gCInfo2_.setProcessname("MyJavaProcess123") target is: gCInfo2_ method is: setProcessname(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setProcessname(Ljava/lang/String;)V
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
String string = "pP9*?w:7\"";
gCInfo2_.setProcessname(string);
String string = "MyJavaProcess123";
gCInfo2_.setProcessname(string);
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setReason(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setReason("ehwJl-1?jN\"?5y")
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setType(".ZWH(B*(;NtQ5i0")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setType(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setType(".ZWH(B*(;NtQ5i0")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2 = new GCInfo2();
        gCInfo2.setReason("Emergency situation");
        gCInfo2.setType(".ZWH(B*(;NtQ5i0");
        gCInfo2.equals(gCInfo2);
    }
}
statement is: GCInfo2 gCInfo2 = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2.setReason("Emergency situation"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setReason("Emergency situation") target is: gCInfo2 method is: setReason(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setReason(Ljava/lang/String;)V
statement is: gCInfo2.setType(".ZWH(B*(;NtQ5i0"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setType(".ZWH(B*(;NtQ5i0") target is: gCInfo2 method is: setType(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setType(Ljava/lang/String;)V
statement is: gCInfo2.equals(gCInfo2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.equals(gCInfo2) target is: gCInfo2 method is: equals(GCInfo2)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
String string = "Emergency situation";
gCInfo2_.setReason(string);
String string = ".ZWH(B*(;NtQ5i0";
gCInfo2_.setType(string);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setReason(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setReason("ehwJl-1?jN\"?5y")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setReason("Fire in the building");
        GCInfo2 gCInfo2_ = new GCInfo2();
        assertEquals(gCInfo2_.hashCode(), gCInfo2_.hashCode());
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setReason("Fire in the building"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setReason("Fire in the building") target is: gCInfo2_ method is: setReason(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setReason(Ljava/lang/String;)V
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals(gCInfo2_.hashCode(), gCInfo2_.hashCode()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(gCInfo2_.hashCode(), gCInfo2_.hashCode()) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
String string = "Fire in the building";
gCInfo2_.setReason(string);
GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setStartTime(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setStartTime("+^ij<i")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setStartTime("2022-03-14T18:30:00Z");
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setStartTime("2022-03-14T18:30:00Z"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setStartTime("2022-03-14T18:30:00Z") target is: gCInfo2_ method is: setStartTime(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setStartTime(Ljava/lang/String;)V
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
String string = "2022-03-14T18:30:00Z";
gCInfo2_.setStartTime(string);
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setStartTime(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setStartTime("badTime00")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("badTime00");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo1 = new GCInfo2("goodTime01", 1.5, "goodString01");
        gCInfo1.equals(gCInfo1);
        GCInfo2 gCInfo2 = new GCInfo2("badTime02", -2.0, "badString02");
        gCInfo2.equals(gCInfo2);
    }
}
statement is: GCInfo2 gCInfo1 = new GCInfo2("goodTime01", 1.5, "goodString01"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo1.equals(gCInfo1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo1.equals(gCInfo1) target is: gCInfo1 method is: equals(GCInfo2)
statement is: GCInfo2 gCInfo2 = new GCInfo2("badTime02", -2.0, "badString02"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2.equals(gCInfo2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.equals(gCInfo2) target is: gCInfo2 method is: equals(GCInfo2)
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setStartTime(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setStartTime("+^ij<i")
statement is: setStartTime(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setStartTime("+^ij<i")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_1 = new GCInfo2();
        gCInfo2_1.setStartTime("2022-01-01T00:00:00+00:00");
        gCInfo2_1.setEndTime("2022-01-31T23:59:59+00:00");
        gCInfo2_1.equals(gCInfo2_2);
        GCInfo2 gCInfo2_2 = new GCInfo2();
        gCInfo2_2.setStartTime("2022-01-01T00:00:00+00:00");
        gCInfo2_2.setEndTime("2022-01-31T23:59:59+00:00");
        gCInfo2_2.equals(gCInfo2_1);
    }
}
statement is: GCInfo2 gCInfo2_1 = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_1.setStartTime("2022-01-01T00:00:00+00:00"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_1.setStartTime("2022-01-01T00:00:00+00:00") target is: gCInfo2_1 method is: setStartTime(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setStartTime(Ljava/lang/String;)V
statement is: gCInfo2_1.setEndTime("2022-01-31T23:59:59+00:00"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_1.setEndTime("2022-01-31T23:59:59+00:00") target is: gCInfo2_1 method is: setEndTime(java.lang.String)
statement is: gCInfo2_1.equals(gCInfo2_2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_1.equals(gCInfo2_2) target is: gCInfo2_1 method is: equals()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: GCInfo2 gCInfo2_2 = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_2.setStartTime("2022-01-01T00:00:00+00:00"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_2.setStartTime("2022-01-01T00:00:00+00:00") target is: gCInfo2_2 method is: setStartTime(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 5
Matched Method is: setStartTime(Ljava/lang/String;)V
statement is: gCInfo2_2.setEndTime("2022-01-31T23:59:59+00:00"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_2.setEndTime("2022-01-31T23:59:59+00:00") target is: gCInfo2_2 method is: setEndTime(java.lang.String)
statement is: gCInfo2_2.equals(gCInfo2_1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_2.equals(gCInfo2_1) target is: gCInfo2_2 method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 5
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
String string = "2022-01-01T00:00:00+00:00";
gCInfo2_.setStartTime(string);
GCInfo2 gCInfo2_ = null;
gCInfo2_.equals(gCInfo2_);
GCInfo2 gCInfo2_ = new GCInfo2();
String string = "2022-01-01T00:00:00+00:00";
gCInfo2_.setStartTime(string);
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setCpuTime(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setCpuTime(464)
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setCpuTime(464);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setCpuTime(90.5);
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setCpuTime(90.5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setCpuTime(90.5) target is: gCInfo2_ method is: setCpuTime(double)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setCpuTime(I)V
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
double _double = 90.5;
gCInfo2_.setCpuTime((int) _double);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setReason(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setReason("ehwJl-1?jN\"?5y")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setReason(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setReason("ehwJl-1?jN\"?5y")
statement is: setObjBytesBefore(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setObjBytesBefore(1518L)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
gCInfo2_.setObjBytesBefore(1518L);
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setReason("Garbage collection for reason 1");
        gCInfo2_.setObjBytesBefore(1000L);
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setReason("Garbage collection for reason 1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setReason("Garbage collection for reason 1") target is: gCInfo2_ method is: setReason(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setReason(Ljava/lang/String;)V
statement is: gCInfo2_.setObjBytesBefore(1000L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setObjBytesBefore(1000L) target is: gCInfo2_ method is: setObjBytesBefore(long)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setObjBytesBefore(J)V
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
String string = "Garbage collection for reason 1";
gCInfo2_.setReason(string);
long _long = 1000L;
gCInfo2_.setObjBytesBefore(_long);
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setObjBytesFreed(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setObjBytesFreed((-2845L))
statement is: setStartTime(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setStartTime("I:_,")
statement is: setStartTime(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setStartTime("I:_,")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesFreed((-2845L));
gCInfo2_.setStartTime("I:_,");
gCInfo2_.setStartTime("I:_,");
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setObjBytesFreed(500);
        gCInfo2_.setStartTime("2021-04-13 18:12:43");
        gCInfo2_.setEndTime("2021-04-13 18:14:23");
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setObjBytesFreed(500), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setObjBytesFreed(500) target is: gCInfo2_ method is: setObjBytesFreed(int)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setObjBytesFreed(J)V
statement is: gCInfo2_.setStartTime("2021-04-13 18:12:43"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setStartTime("2021-04-13 18:12:43") target is: gCInfo2_ method is: setStartTime(java.lang.String)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setStartTime(Ljava/lang/String;)V
statement is: gCInfo2_.setEndTime("2021-04-13 18:14:23"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setEndTime("2021-04-13 18:14:23") target is: gCInfo2_ method is: setEndTime(java.lang.String)
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
int _int = 500;
gCInfo2_.setObjBytesFreed(_int);
String string = "2021-04-13 18:12:43";
gCInfo2_.setStartTime(string);
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setClsBytesBefore(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setClsBytesBefore(1L)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesBefore(1L);
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setClsBytesBefore(10000L);// Set the class bytes before to a more representative value of 10,000.

        gCInfo2_.equals(gCInfo2_);// Compare the object with itself to test for equality. }}

    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setClsBytesBefore(10000L)// Set the class bytes before to a more representative value of 10,000.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setClsBytesBefore(10000L)// Set the class bytes before to a more representative value of 10,000.
 target is: gCInfo2_ method is: setClsBytesBefore(long)
statement is: gCInfo2_.equals(gCInfo2_)// Compare the object with itself to test for equality. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_)// Compare the object with itself to test for equality. }}
 target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setClsBytesFreed(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setClsBytesFreed((-1261L))
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesFreed((-1261L));
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo1_ = new GCInfo2();
        gCInfo1_.setClsBytesFreed(350L);
        gCInfo1_.equals(gCInfo1_);
        // Assert that the method equals returns true when comparing two objects with the same values for "clsBytesFreed"
        assertTrue(gCInfo1_.equals(new GCInfo2(350L)));
    }
}
statement is: GCInfo2 gCInfo1_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo1_.setClsBytesFreed(350L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo1_.setClsBytesFreed(350L) target is: gCInfo1_ method is: setClsBytesFreed(long)
statement is: gCInfo1_.equals(gCInfo1_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo1_.equals(gCInfo1_) target is: gCInfo1_ method is: equals(GCInfo2)
statement is: // Assert that the method equals returns true when comparing two objects with the same values for "clsBytesFreed"
assertTrue(gCInfo1_.equals(new GCInfo2(350L))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Assert that the method equals returns true when comparing two objects with the same values for "clsBytesFreed"
assertTrue(gCInfo1_.equals(new GCInfo2(350L))) target is:  method is: assertTrue(<unknown>)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setHeapSize(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setHeapSize(2148L)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setHeapSize(2148L);
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setHeapSize(100000L);// heap size of 100,000 bytes

        gCInfo2_.setFreeSpaceRatio(0.5);// 50% free space available

        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setHeapSize(100000L)// heap size of 100,000 bytes
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setHeapSize(100000L)// heap size of 100,000 bytes
 target is: gCInfo2_ method is: setHeapSize(long)
statement is: gCInfo2_.setFreeSpaceRatio(0.5)// 50% free space available
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setFreeSpaceRatio(0.5)// 50% free space available
 target is: gCInfo2_ method is: setFreeSpaceRatio(double)
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setUnloadedClasses(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setUnloadedClasses(1421)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setUnloadedClasses(1421);
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        gcInfo2.equals(gcInfo2);
        gcInfo2.setUnloadedClasses(1421);
        gcInfo2.equals(gcInfo2);
        gcInfo2.setUnloadedClasses(10000);
        gcInfo2.equals(gcInfo2);
    }
}
statement is: gcInfo2.equals(gcInfo2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gcInfo2.equals(gcInfo2) target is: gcInfo2 method is: equals()
statement is: gcInfo2.setUnloadedClasses(1421), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gcInfo2.setUnloadedClasses(1421) target is: gcInfo2 method is: setUnloadedClasses(int)
statement is: gcInfo2.equals(gcInfo2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gcInfo2.equals(gcInfo2) target is: gcInfo2 method is: equals()
statement is: gcInfo2.setUnloadedClasses(10000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gcInfo2.setUnloadedClasses(10000) target is: gcInfo2 method is: setUnloadedClasses(int)
statement is: gcInfo2.equals(gcInfo2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gcInfo2.equals(gcInfo2) target is: gcInfo2 method is: equals()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setPageFaults(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setPageFaults(1006L)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(1006L);
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2(1006L, "PageFaults");
        GCInfo2 gCInfo2_ = new GCInfo2(1007L, "PageFaults");
        gCInfo2_.setPageFaults(1006L);
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(1006L, "PageFaults"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2(1007L, "PageFaults"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setPageFaults(1006L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setPageFaults(1006L) target is: gCInfo2_ method is: setPageFaults(long)
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: org.evosuite.testcase.statements.FieldStatement@241673b4 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value3
statement is: setDispstatus(Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setDispstatus(arg0)
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value3;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setDispstatus(value3);// setting the dispstatus to "value3"

        gCInfo2_.setColor("red");// setting the color to "red"

        gCInfo2_.setType(solid);// setting the type to "solid"

        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setDispstatus(value3);// setting the dispstatus to "value3"

        gCInfo2_.setColor("red");// setting the color to "red"

        gCInfo2_.setType(solid);// setting the type to "solid"

        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setDispstatus(value3)// setting the dispstatus to "value3"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setDispstatus(value3)// setting the dispstatus to "value3"
 target is: gCInfo2_ method is: setDispstatus()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setDispstatus(Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: gCInfo2_.setColor("red")// setting the color to "red"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setColor("red")// setting the color to "red"
 target is: gCInfo2_ method is: setColor(java.lang.String)
statement is: gCInfo2_.setType(solid)// setting the type to "solid"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setType(solid)// setting the type to "solid"
 target is: gCInfo2_ method is: setType()
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setDispstatus(value3)// setting the dispstatus to "value3"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setDispstatus(value3)// setting the dispstatus to "value3"
 target is: gCInfo2_ method is: setDispstatus()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 3
Matched Method is: setDispstatus(Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: gCInfo2_.setColor("red")// setting the color to "red"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setColor("red")// setting the color to "red"
 target is: gCInfo2_ method is: setColor(java.lang.String)
statement is: gCInfo2_.setType(solid)// setting the type to "solid"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setType(solid)// setting the type to "solid"
 target is: gCInfo2_ method is: setType()
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = null;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = null;
gCInfo2_.setDispstatus(sTATECOLOR);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: org.evosuite.testcase.statements.FieldStatement@24167381 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value2
statement is: setDispstatus(Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setDispstatus(arg0)
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setDispstatus(Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setDispstatus(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = gCInfo2_.equals(arg0)
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.equals(gCInfo2_);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2 = new GCInfo2();
        STATECOLOR sTATECOLOR = STATECOLOR.value1;
        gCInfo2.setDispstatus(sTATECOLOR);
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setDispstatus(sTATECOLOR);
        gCInfo2_.equals(gCInfo2_);
    }
}
statement is: GCInfo2 gCInfo2 = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value1 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value2 STATECOLOR value2
statement is: gCInfo2.setDispstatus(sTATECOLOR), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.setDispstatus(sTATECOLOR) target is: gCInfo2 method is: setDispstatus(STATECOLOR)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setDispstatus(Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setDispstatus(sTATECOLOR), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setDispstatus(sTATECOLOR) target is: gCInfo2_ method is: setDispstatus(STATECOLOR)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 3
Matched Method is: setDispstatus(Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V
statement is: gCInfo2_.equals(gCInfo2_), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.equals(gCInfo2_) target is: gCInfo2_ method is: equals(GCInfo2)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.equals(gCInfo2_);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = gCInfo2_.hashCode()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2(100, "abcdefghijklmnopqrstuvwxyz", 10);
        gCInfo2_.hashCode();
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(100, "abcdefghijklmnopqrstuvwxyz", 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.hashCode() target is: gCInfo2_ method is: hashCode()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), arg15)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = gCInfo2_.hashCode()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
        GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, -2232, -1575L, sTATECOLOR);
        gCInfo2_.hashCode();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, -2232, -1575L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.hashCode() target is: gCInfo2_ method is: hashCode()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 15
Matched Method is: hashCode()I
TestCase is: String string = "org.apache.log4j.Category";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
int _int = 1;
int _int = 1;
int _int = 1;
int _int = 1;
int _int = 1;
long _long = 0L;
long _long = 1759L;
int _int = 1;
long _long = 255L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _int, _int, _int, _long, _long, _int, _long, (int) sTATECOLOR, (-1575L), (STATECOLOR) string);
sTATECOLOR.hashCode();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getClsBytesFreed()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long clsBytesFreed = gCInfo2_.getClsBytesFreed()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesFreed();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        GCInfo2 gCInfo2_ = new GCInfo2();
        long clsBytesFreed = gCInfo2_.getClsBytesFreed();
        System.out.println("GC bytes freed: " + ((clsBytesFreed * 1000) / 1024));// Convert from bytes to KB and print the result }}

    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: long clsBytesFreed = gCInfo2_.getClsBytesFreed(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getClsBytesFreed() target is: gCInfo2_ method is: getClsBytesFreed()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: getClsBytesFreed()J
statement is: System.out.println("GC bytes freed: " + ((clsBytesFreed * 1000) / 1024))// Convert from bytes to KB and print the result }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: System.out.println("GC bytes freed: " + ((clsBytesFreed * 1000) / 1024))// Convert from bytes to KB and print the result }}
 target is: System.out method is: println(java.lang.String)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesFreed();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getClsBytesBefore()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long clsBytesBefore = gCInfo2_.getClsBytesBefore()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesBefore();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.getClsBytesBefore();
        // Improved test data:
        GCInfo2 gCInfo2_ = new GCInfo2(10000, 5.5, "ABC");
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getClsBytesBefore(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getClsBytesBefore() target is: gCInfo2_ method is: getClsBytesBefore()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: getClsBytesBefore()J
statement is: // Improved test data:
GCInfo2 gCInfo2_ = new GCInfo2(10000, 5.5, "ABC"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesBefore();

statement is: org.evosuite.testcase.statements.FieldStatement@241673e7 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value4
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("", "", "A^rp<E`x2x`\"G#+)rz,", "", (-1312), 39, (-1059L), 39, (-396L), (-3388L), 0L, (-1L), 0L, 1, 0L, arg15)
statement is: getDuration()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int duration = gCInfo2_.getDuration()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "A^rp<E`x2x`\"G#+)rz,", "", (-1312), 39, (-1059L), 39, (-396L), (-3388L), 0L, (-1L), 0L, 1, 0L, sTATECOLOR);
gCInfo2_.getDuration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = STATECOLOR.value4;
        GCInfo2 gCInfo2_ = new GCInfo2("Arizona", "USA", "A^rp<E`x2x`\"G#+)rz,", "Phoenix", -1312, 39, -1059L, 39, -396L, -3388L, 0L, -1L, 0L, 1, 0L, sTATECOLOR);
        gCInfo2_.getDuration();
    }
}
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value4 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value4 STATECOLOR value4
statement is: GCInfo2 gCInfo2_ = new GCInfo2("Arizona", "USA", "A^rp<E`x2x`\"G#+)rz,", "Phoenix", -1312, 39, -1059L, 39, -396L, -3388L, 0L, -1L, 0L, 1, 0L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getDuration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getDuration() target is: gCInfo2_ method is: getDuration()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 11
Matched Method is: getDuration()I
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "Arizona";
String string = "USA";
String string = "A^rp<E`x2x`\"G#+)rz,";
String string = "Phoenix";
int _int = 39;
int _int = 39;
long _long = 0L;
long _long = 0L;
int _int = 1;
long _long = 0L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _long, _long, _int, _long, (long) sTATECOLOR, (-1L), 0L, 1, 0L, sTATECOLOR);
((GCInfo2) string).getDuration();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getUnloadedClasses()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int unloadedClasses = gCInfo2_.getUnloadedClasses()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getUnloadedClasses();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2 = new GCInfo2();
        List<Class<?>> unloadedClasses = gCInfo2.getUnloadedClasses();
        assertTrue(unloadedClasses.isEmpty());// Check that the list is empty

        // Test with a non-empty list
        gCInfo2 = new GCInfo2(new Class[]{ String.class, Integer.class });
    }
}
statement is: GCInfo2 gCInfo2 = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: List<Class<?>> unloadedClasses = gCInfo2.getUnloadedClasses(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2.getUnloadedClasses() target is: gCInfo2 method is: getUnloadedClasses()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: getUnloadedClasses()I
statement is: assertTrue(unloadedClasses.isEmpty())// Check that the list is empty
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(unloadedClasses.isEmpty())// Check that the list is empty
 target is:  method is: assertTrue(<unknown>)
statement is: // Test with a non-empty list
gCInfo2 = new GCInfo2(new Class[]{ String.class, Integer.class }), class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getUnloadedClasses();

statement is: org.evosuite.testcase.statements.FieldStatement@2416734e type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value1
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-3163), (-3163), (-3163), 4381L, (-1954L), 1278L, (-2521L), (-3163), (-2521L), (-3163), 4294967295L, arg15)
statement is: getStartTime()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String startTime = gCInfo2_.getStartTime()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value1;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-3163), (-3163), (-3163), 4381L, (-1954L), 1278L, (-2521L), (-3163), (-2521L), (-3163), 4294967295L, sTATECOLOR);
gCInfo2_.getStartTime();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = STATECOLOR.value1;
        GCInfo2 gCInfo2_ = new GCInfo2("Garbage Collection", "JVM", "Java 8", "", ((long) (300)), ((long) (300)), ((long) (300)), ((long) (400)), ((long) (-1954)), ((long) (1278)), ((long) (-2521)), ((long) (300)), ((long) (4294967295L)), sTATECOLOR);
        gCInfo2_.getStartTime();
    }
}
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value1 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value1 STATECOLOR value1
statement is: GCInfo2 gCInfo2_ = new GCInfo2("Garbage Collection", "JVM", "Java 8", "", ((long) (300)), ((long) (300)), ((long) (300)), ((long) (400)), ((long) (-1954)), ((long) (1278)), ((long) (-2521)), ((long) (300)), ((long) (4294967295L)), sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getStartTime(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getStartTime() target is: gCInfo2_ method is: getStartTime()
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value1;

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getHeapSize()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long heapSize = gCInfo2_.getHeapSize()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getHeapSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setHeapSize(10);// set the value to 10 for demonstration purposes. }}

    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setHeapSize(10)// set the value to 10 for demonstration purposes. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setHeapSize(10)// set the value to 10 for demonstration purposes. }}
 target is: gCInfo2_ method is: setHeapSize(int)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getObjBytesAfter()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long objBytesAfter = gCInfo2_.getObjBytesAfter()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesAfter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.getObjBytesAfter();
        // Improved test data
        gCInfo2_.setObjSize(1000);// instead of 0

        gCInfo2_.setNumObjs(500);// instead of 0 }}

    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getObjBytesAfter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getObjBytesAfter() target is: gCInfo2_ method is: getObjBytesAfter()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: getObjBytesAfter()J
statement is: // Improved test data
gCInfo2_.setObjSize(1000)// instead of 0
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
gCInfo2_.setObjSize(1000)// instead of 0
 target is: gCInfo2_ method is: setObjSize(int)
statement is: gCInfo2_.setNumObjs(500)// instead of 0 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setNumObjs(500)// instead of 0 }}
 target is: gCInfo2_ method is: setNumObjs(int)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesAfter();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getProcessname()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String processname = gCInfo2_.getProcessname()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getProcessname();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.getProcessName();
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getProcessName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getProcessName() target is: gCInfo2_ method is: getProcessName()
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getPageFaults()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long pageFaults = gCInfo2_.getPageFaults()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getPageFaults();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        // Improved test data: replace the primitive values and Strings with more descriptive examples
        gCInfo2_.setPageFaults(10);// This value is used to represent the number of page faults that occurred during the garbage collection.

        gCInfo2_.setMaxHeapSize(4096);// This value is used to represent the maximum size of the heap in bytes.

        gCInfo2_.setUsedHeapSize(3072);// This value is used to represent the amount of used memory in the heap in bytes. }}

    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Improved test data: replace the primitive values and Strings with more descriptive examples
gCInfo2_.setPageFaults(10)// This value is used to represent the number of page faults that occurred during the garbage collection.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data: replace the primitive values and Strings with more descriptive examples
gCInfo2_.setPageFaults(10)// This value is used to represent the number of page faults that occurred during the garbage collection.
 target is: gCInfo2_ method is: setPageFaults(int)
statement is: gCInfo2_.setMaxHeapSize(4096)// This value is used to represent the maximum size of the heap in bytes.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setMaxHeapSize(4096)// This value is used to represent the maximum size of the heap in bytes.
 target is: gCInfo2_ method is: setMaxHeapSize(int)
statement is: gCInfo2_.setUsedHeapSize(3072)// This value is used to represent the amount of used memory in the heap in bytes. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setUsedHeapSize(3072)// This value is used to represent the amount of used memory in the heap in bytes. }}
 target is: gCInfo2_ method is: setUsedHeapSize(int)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();

statement is: org.evosuite.testcase.statements.FieldStatement@241673e7 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value4
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", 1, (-1435), (-1435), (-2629L), 1, 4937L, 0L, 0L, (-96L), (-1435), 1L, arg15)
statement is: getReason()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String reason = gCInfo2_.getReason()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", 1, (-1435), (-1435), (-2629L), 1, 4937L, 0L, 0L, (-96L), (-1435), 1L, sTATECOLOR);
gCInfo2_.getReason();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = STATECOLOR.value4;
        GCInfo2 gCInfo2_ = new GCInfo2("Alice", "123 Main St.", "Anytown", "CA", 1, -1435, -1435, -2629L, 1, 4937L, 0L, 0L, -96L, -1435, 1L, sTATECOLOR);
        gCInfo2_.getReason();
    }
}
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value4 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value4 STATECOLOR value4
statement is: GCInfo2 gCInfo2_ = new GCInfo2("Alice", "123 Main St.", "Anytown", "CA", 1, -1435, -1435, -2629L, 1, 4937L, 0L, 0L, -96L, -1435, 1L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getReason(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getReason() target is: gCInfo2_ method is: getReason()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 11
Matched Method is: getReason()Ljava/lang/String;
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "Alice";
String string = "123 Main St.";
String string = "Anytown";
String string = "CA";
int _int = 1;
int _int = 1;
long _long = 4937L;
long _long = 0L;
long _long = 0L;
long _long = 1L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _long, _long, _long, _long, (long) sTATECOLOR, 0L, (-96L), (-1435), 1L, sTATECOLOR);
((GCInfo2) string).getReason();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("BGY43x", "`\"iqjM^|=%vz", "BGY43x", "", (-1809), 452, 452, 452, 1616L, (-1809), 4294967295L, (-1575L), (-1575L), 142, 4294967295L, arg15)
statement is: getCpuTime()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int cpuTime = gCInfo2_.getCpuTime()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("BGY43x", "`\"iqjM^|=%vz", "BGY43x", "", (-1809), 452, 452, 452, 1616L, (-1809), 4294967295L, (-1575L), (-1575L), 142, 4294967295L, sTATECOLOR);
gCInfo2_.getCpuTime();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("NY");
        GCInfo2 gCInfo2_ = new GCInfo2("BGY43x", "`\"iqjM^|=%vz", "BGY43x", "", -1809, 452, 452, 452, 1616L, -1809, 4294967295L, -1575L, -1575L, 142, 4294967295L, sTATECOLOR);
        gCInfo2_.getCpuTime();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("NY"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("BGY43x", "`\"iqjM^|=%vz", "BGY43x", "", -1809, 452, 452, 452, 1616L, -1809, 4294967295L, -1575L, -1575L, 142, 4294967295L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getCpuTime(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getCpuTime() target is: gCInfo2_ method is: getCpuTime()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 13
Matched Method is: getCpuTime()I
TestCase is: String string = "NY";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "BGY43x";
String string = "`\"iqjM^|=%vz";
String string = "BGY43x";
String string = "";
int _int = 452;
int _int = 452;
int _int = 452;
long _long = 1616L;
long _long = 4294967295L;
int _int = 142;
long _long = 4294967295L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _int, _long, _long, _int, _long, (long) sTATECOLOR, (-1575L), 142, 4294967295L, (STATECOLOR) string);
((GCInfo2) sTATECOLOR).getCpuTime();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getObjBytesBefore()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long objBytesBefore = gCInfo2_.getObjBytesBefore()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesBefore();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.getObjBytesBefore(100);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getObjBytesBefore(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getObjBytesBefore(100) target is: gCInfo2_ method is: getObjBytesBefore(int)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();

statement is: org.evosuite.testcase.statements.FieldStatement@241673e7 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value4
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, arg15)
statement is: getClsBytesAfter()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long clsBytesAfter = gCInfo2_.getClsBytesAfter()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getClsBytesAfter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = STATECOLOR.value4;
        GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", -242, -242, -242, -2649L, -2649L, -2649L, -242, -242, 0L, -242, 0L, sTATECOLOR);
        gCInfo2_.getClsBytesAfter();
    }
}
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value4 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value4 STATECOLOR value4
statement is: GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", -242, -242, -242, -2649L, -2649L, -2649L, -242, -242, 0L, -242, 0L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getClsBytesAfter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getClsBytesAfter() target is: gCInfo2_ method is: getClsBytesAfter()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 7
Matched Method is: getClsBytesAfter()J
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "";
String string = "";
String string = "";
String string = "";
long _long = 0L;
long _long = 0L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, (int) _long, (int) _long, (long) sTATECOLOR, (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
((GCInfo2) string).getClsBytesAfter();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getDispstatus()Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR dispstatus = gCInfo2_.getDispstatus()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getDispstatus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the above code snippet
        GCInfo2 gCInfo2_ = new GCInfo2(100, "XYZ987", 15.67);
        gCInfo2_.getDispstatus();
    }
}
statement is: // Improved test data for the above code snippet
GCInfo2 gCInfo2_ = new GCInfo2(100, "XYZ987", 15.67), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getDispstatus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getDispstatus() target is: gCInfo2_ method is: getDispstatus()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("n@/8#Cd", "wN:#!bCNL==P", "wN:#!bCNL==P", "n@/8#Cd", (-390), (-390), 0L, (-390), (-390), 0L, 0L, 0L, 0L, 946, 0L, (STATECOLOR) null)
statement is: getObjBytesFreed()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long objBytesFreed = gCInfo2_.getObjBytesFreed()
test data is: GCInfo2 gCInfo2_ = new GCInfo2("n@/8#Cd", "wN:#!bCNL==P", "wN:#!bCNL==P", "n@/8#Cd", (-390), (-390), 0L, (-390), (-390), 0L, 0L, 0L, 0L, 946, 0L, (STATECOLOR) null);
gCInfo2_.getObjBytesFreed();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2("name@email.com", "password", "password", "name@email.com", 100, 200, 50L, 300, 400, 50L, 60L, 70L, 80L, 946, 100L, ((STATECOLOR) (null)));
        gCInfo2_.getObjBytesFreed();
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2("name@email.com", "password", "password", "name@email.com", 100, 200, 50L, 300, 400, 50L, 60L, 70L, 80L, 946, 100L, ((STATECOLOR) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getObjBytesFreed(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getObjBytesFreed() target is: gCInfo2_ method is: getObjBytesFreed()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 15
Matched Method is: getObjBytesFreed()J
TestCase is: String string = "name@email.com";
String string = "password";
String string = "password";
String string = "name@email.com";
int _int = 100;
int _int = 200;
long _long = 50L;
int _int = 300;
int _int = 400;
long _long = 50L;
long _long = 60L;
long _long = 70L;
long _long = 80L;
int _int = 946;
long _long = 100L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _long, _int, _int, _long, _long, _long, _long, _int, _long, (STATECOLOR) null);
((GCInfo2) string).getObjBytesFreed();

statement is: org.evosuite.testcase.statements.FieldStatement@241673e7 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value4
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, arg15)
statement is: getType()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String type = gCInfo2_.getType()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR stateColor = STATECOLOR.value4;
        GCInfo2 gcInfo2_ = new GCInfo2("", "", "", "", -242, -242, -242, -2649L, -2649L, -2649L, -242, -242, 0L, -242, 0L, stateColor);
        gcInfo2_.getType();
    }
}
statement is: STATECOLOR stateColor = STATECOLOR.value4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value4 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value4 STATECOLOR value4
statement is: GCInfo2 gcInfo2_ = new GCInfo2("", "", "", "", -242, -242, -242, -2649L, -2649L, -2649L, -242, -242, 0L, -242, 0L, stateColor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gcInfo2_.getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gcInfo2_.getType() target is: gcInfo2_ method is: getType()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 7
Matched Method is: getType()Ljava/lang/String;
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "";
String string = "";
String string = "";
String string = "";
long _long = 0L;
long _long = 0L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, (int) _long, (int) _long, (long) sTATECOLOR, (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
((GCInfo2) string).getType();

statement is: org.evosuite.testcase.statements.FieldStatement@24167381 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value2
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("$5N=Kj`g'\"7", "$5N=Kj`g'\"7", "$5N=Kj`g'\"7", "", 1, 5118, 60000L, 3061L, 3061L, (-752L), 0L, 0L, 247L, 5118, 5118, arg15)
statement is: setClsBytesAfter(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setClsBytesAfter(247L)
statement is: getClsBytesAfter()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long clsBytesAfter = gCInfo2_.getClsBytesAfter()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("$5N=Kj`g'\"7", "$5N=Kj`g'\"7", "$5N=Kj`g'\"7", "", 1, 5118, 60000L, 3061L, 3061L, (-752L), 0L, 0L, 247L, 5118, 5118, sTATECOLOR);
gCInfo2_.setClsBytesAfter(247L);
gCInfo2_.getClsBytesAfter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = STATECOLOR.value2;
        GCInfo2 gCInfo2_ = new GCInfo2("10 MB", "5 MB", "20 MB", "", 1, 5118, 60000L, 3061L, 3061L, -752L, 0L, 0L, 247L, 5118, 5118, sTATECOLOR);
        gCInfo2_.setClsBytesAfter(247L);
        gCInfo2_.getClsBytesAfter();
    }
}
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value2 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value2 STATECOLOR value2
statement is: GCInfo2 gCInfo2_ = new GCInfo2("10 MB", "5 MB", "20 MB", "", 1, 5118, 60000L, 3061L, 3061L, -752L, 0L, 0L, 247L, 5118, 5118, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setClsBytesAfter(247L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setClsBytesAfter(247L) target is: gCInfo2_ method is: setClsBytesAfter(long)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 15
Matched Method is: setClsBytesAfter(J)V
statement is: gCInfo2_.getClsBytesAfter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getClsBytesAfter() target is: gCInfo2_ method is: getClsBytesAfter()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 15
Matched Method is: getClsBytesAfter()J
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value2;
String string = "10 MB";
String string = "5 MB";
String string = "20 MB";
String string = "";
int _int = 1;
int _int = 5118;
long _long = 60000L;
long _long = 3061L;
long _long = 3061L;
long _long = 0L;
long _long = 0L;
long _long = 247L;
int _int = 5118;
int _int = 5118;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _long, _long, _long, _long, _long, _long, _int, _int, (long) sTATECOLOR, sTATECOLOR);
long _long = 247L;
((GCInfo2) string).setClsBytesAfter(_long);
((GCInfo2) string).getClsBytesAfter();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getClsBytesAfter()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long clsBytesAfter = gCInfo2_.getClsBytesAfter()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesAfter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.getClsBytesAfter();
        // Improved test data
        int clsBytesBefore = 100;
        gCInfo2_.setClsBytesBefore(clsBytesBefore);
        int clsBytesAfter = 50;
        gCInfo2_.setClsBytesAfter(clsBytesAfter);
        String gcName = "Garbage Collector";
        gCInfo2_.setGcName(gcName);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getClsBytesAfter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getClsBytesAfter() target is: gCInfo2_ method is: getClsBytesAfter()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: getClsBytesAfter()J
statement is: // Improved test data
int clsBytesBefore = 100, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: gCInfo2_.setClsBytesBefore(clsBytesBefore), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setClsBytesBefore(clsBytesBefore) target is: gCInfo2_ method is: setClsBytesBefore(int)
statement is: int clsBytesAfter = 50, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: gCInfo2_.setClsBytesAfter(clsBytesAfter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setClsBytesAfter(clsBytesAfter) target is: gCInfo2_ method is: setClsBytesAfter(int)
statement is: String gcName = "Garbage Collector", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: gCInfo2_.setGcName(gcName), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setGcName(gcName) target is: gCInfo2_ method is: setGcName(java.lang.String)
* this is vulnerable: int _int = 100
* this is vulnerable: int _int = 50
* this is vulnerable: String string = "Garbage Collector"
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesAfter();
int _int = 100;
int _int = 50;
String string = "Garbage Collector";

statement is: org.evosuite.testcase.statements.FieldStatement@241673b4 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value3
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("sendXsiTypes", "8OfSptWKjO7)P", "heapSize", "8OfSptWKjO7)P", (-1930), (-1930), (-1930), 1527L, 1527L, (-1930), 3881L, (-1930), (-1930), (-314), 1527L, arg15)
statement is: getClsBytesBefore()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long clsBytesBefore = gCInfo2_.getClsBytesBefore()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value3;
GCInfo2 gCInfo2_ = new GCInfo2("sendXsiTypes", "8OfSptWKjO7)P", "heapSize", "8OfSptWKjO7)P", (-1930), (-1930), (-1930), 1527L, 1527L, (-1930), 3881L, (-1930), (-1930), (-314), 1527L, sTATECOLOR);
gCInfo2_.getClsBytesBefore();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = STATECOLOR.value3;
        GCInfo2 gCInfo2_ = new GCInfo2("sendXsiTypes", "8OfSptWKjO7)P", "heapSize", "8OfSptWKjO7)P", -1930, -1930, -1930, 1527L, 1527L, -1930, 3881L, -1930, -1930, -314, 1527L, sTATECOLOR);
        gCInfo2_.getClsBytesBefore();
    }
}
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value3 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value3 STATECOLOR value3
statement is: GCInfo2 gCInfo2_ = new GCInfo2("sendXsiTypes", "8OfSptWKjO7)P", "heapSize", "8OfSptWKjO7)P", -1930, -1930, -1930, 1527L, 1527L, -1930, 3881L, -1930, -1930, -314, 1527L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getClsBytesBefore(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getClsBytesBefore() target is: gCInfo2_ method is: getClsBytesBefore()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 9
Matched Method is: getClsBytesBefore()J
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value3;
String string = "sendXsiTypes";
String string = "8OfSptWKjO7)P";
String string = "heapSize";
String string = "8OfSptWKjO7)P";
long _long = 1527L;
long _long = 1527L;
long _long = 3881L;
long _long = 1527L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, (int) _long, (int) _long, _long, _long, (long) sTATECOLOR, (-1930), 3881L, (-1930), (-1930), (-314), 1527L, sTATECOLOR);
((GCInfo2) string).getClsBytesBefore();

statement is: org.evosuite.testcase.statements.FieldStatement@24167381 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value2
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "SAPControl-GRAY", (-448), 2286, (-56L), (-209L), (-57L), 1L, 0L, (-752L), 0L, 1, (-209L), arg15)
statement is: getClsBytesBefore()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long clsBytesBefore = gCInfo2_.getClsBytesBefore()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "SAPControl-GRAY", (-448), 2286, (-56L), (-209L), (-57L), 1L, 0L, (-752L), 0L, 1, (-209L), sTATECOLOR);
gCInfo2_.getClsBytesBefore();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR stateColor = STATECOLOR.GREEN;
        GCInfo2 gcInfo2_ = new GCInfo2("", "", "", "SAPControl-GRAY", -448, 2286, -56L, -209L, -57L, 1L, 0L, -752L, 0L, 1, -209L, stateColor);
        gcInfo2_.getClsBytesBefore();
    }
}
statement is: STATECOLOR stateColor = STATECOLOR.GREEN, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.GREEN is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value2 STATECOLOR value2
statement is: GCInfo2 gcInfo2_ = new GCInfo2("", "", "", "SAPControl-GRAY", -448, 2286, -56L, -209L, -57L, 1L, 0L, -752L, 0L, 1, -209L, stateColor), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gcInfo2_.getClsBytesBefore(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gcInfo2_.getClsBytesBefore() target is: gcInfo2_ method is: getClsBytesBefore()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 10
Matched Method is: getClsBytesBefore()J
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value2;
String string = "";
String string = "";
String string = "";
String string = "SAPControl-GRAY";
int _int = 2286;
long _long = 1L;
long _long = 0L;
long _long = 0L;
int _int = 1;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, (int) _long, _long, _long, _int, (long) sTATECOLOR, 0L, (-752L), 0L, 1, (-209L), sTATECOLOR);
((GCInfo2) string).getClsBytesBefore();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-RED", "tlU8w6`0;-?g>Xq7", "n.zM{UPW~E0", "SAPControl-RED", (-2145588251), 1, (-511L), 1759L, 255L, (-2521L), 65535L, (-511L), (-1575L), (-3163), 1, arg15)
statement is: getClsBytesFreed()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long clsBytesFreed = gCInfo2_.getClsBytesFreed()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-RED", "tlU8w6`0;-?g>Xq7", "n.zM{UPW~E0", "SAPControl-RED", (-2145588251), 1, (-511L), 1759L, 255L, (-2521L), 65535L, (-511L), (-1575L), (-3163), 1, sTATECOLOR);
gCInfo2_.getClsBytesFreed();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
        GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-RED", "tlU8w6`0;-?g>Xq7", "n.zM{UPW~E0", "SAPControl-RED", -2145588251, 1, -511L, 1759L, 255L, -2521L, 65535L, -511L, -1575L, -3163, 1, sTATECOLOR);
        gCInfo2_.getClsBytesFreed();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-RED", "tlU8w6`0;-?g>Xq7", "n.zM{UPW~E0", "SAPControl-RED", -2145588251, 1, -511L, 1759L, 255L, -2521L, 65535L, -511L, -1575L, -3163, 1, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getClsBytesFreed(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getClsBytesFreed() target is: gCInfo2_ method is: getClsBytesFreed()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 11
Matched Method is: getClsBytesFreed()J
TestCase is: String string = "org.apache.log4j.Category";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "SAPControl-RED";
String string = "tlU8w6`0;-?g>Xq7";
String string = "n.zM{UPW~E0";
String string = "SAPControl-RED";
int _int = 1;
long _long = 1759L;
long _long = 255L;
long _long = 65535L;
int _int = 1;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, (int) _long, _long, _long, _int, (long) sTATECOLOR, 65535L, (-511L), (-1575L), (-3163), 1, (STATECOLOR) string);
((GCInfo2) sTATECOLOR).getClsBytesFreed();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), arg15)
statement is: getClsBytesFreed()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long clsBytesFreed = gCInfo2_.getClsBytesFreed()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getClsBytesFreed();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
        GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1000, 10000, 100000, 1000000, 0L, 1759L, 10000000, 255L, -2232, -1575L, sTATECOLOR);
        gCInfo2_.getClsBytesFreed();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1000, 10000, 100000, 1000000, 0L, 1759L, 10000000, 255L, -2232, -1575L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getClsBytesFreed(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getClsBytesFreed() target is: gCInfo2_ method is: getClsBytesFreed()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 15
Matched Method is: getClsBytesFreed()J
TestCase is: String string = "org.apache.log4j.Category";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
int _int = 1;
int _int = 1000;
int _int = 10000;
int _int = 100000;
int _int = 1000000;
long _long = 0L;
long _long = 1759L;
int _int = 10000000;
long _long = 255L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _int, _int, _int, _long, _long, _int, _long, (int) sTATECOLOR, (-1575L), (STATECOLOR) string);
((GCInfo2) sTATECOLOR).getClsBytesFreed();

statement is: org.evosuite.testcase.statements.FieldStatement@241673e7 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value4
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, arg15)
statement is: getCpuTime()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int cpuTime = gCInfo2_.getCpuTime()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getCpuTime();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = STATECOLOR.value5;// Changed to a more descriptive value

        GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", -300, -300, -300, -400L, -400L, -400L, -300, -300, 0L, -300, 0L, sTATECOLOR);// Changed the primitive values and strings to more illustrative examples

        gCInfo2_.getCpuTime();
    }
}
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value5// Changed to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value5 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value4 STATECOLOR value4
statement is: GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", -300, -300, -300, -400L, -400L, -400L, -300, -300, 0L, -300, 0L, sTATECOLOR)// Changed the primitive values and strings to more illustrative examples
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getCpuTime(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getCpuTime() target is: gCInfo2_ method is: getCpuTime()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 7
Matched Method is: getCpuTime()I
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "";
String string = "";
String string = "";
String string = "";
long _long = 0L;
long _long = 0L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, (int) _long, (int) _long, (long) sTATECOLOR, (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
((GCInfo2) string).getCpuTime();

statement is: org.evosuite.testcase.statements.FieldStatement@241673b4 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value3
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("}ps/j!7Syi", "}ps/j!7Syi", "}ps/j!7Syi", "objBytesFreed", 0, 0, 1073741824L, 0, 0, (-2076L), 0, 0, 0, 0, (-1L), arg15)
statement is: getCpuTime()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int cpuTime = gCInfo2_.getCpuTime()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value3;
GCInfo2 gCInfo2_ = new GCInfo2("}ps/j!7Syi", "}ps/j!7Syi", "}ps/j!7Syi", "objBytesFreed", 0, 0, 1073741824L, 0, 0, (-2076L), 0, 0, 0, 0, (-1L), sTATECOLOR);
gCInfo2_.getCpuTime();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = STATECOLOR.value3;
        GCInfo2 gCInfo2_ = new GCInfo2("1234567890", "1234567890", "1234567890", "objBytesFreed", 0, 0, 1073741824L, 0, 0, -2076L, 0, 0, 0, 0, -1L, sTATECOLOR);
        gCInfo2_.getCpuTime();
    }
}
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value3 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value3 STATECOLOR value3
statement is: GCInfo2 gCInfo2_ = new GCInfo2("1234567890", "1234567890", "1234567890", "objBytesFreed", 0, 0, 1073741824L, 0, 0, -2076L, 0, 0, 0, 0, -1L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getCpuTime(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getCpuTime() target is: gCInfo2_ method is: getCpuTime()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 14
Matched Method is: getCpuTime()I
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value3;
String string = "1234567890";
String string = "1234567890";
String string = "1234567890";
String string = "objBytesFreed";
int _int = 0;
int _int = 0;
long _long = 1073741824L;
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 0;
int _int = 0;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _long, _int, _int, _int, _int, _int, _int, (int) sTATECOLOR, (-1L), sTATECOLOR);
((GCInfo2) string).getCpuTime();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("T+SrXe\"")
statement is: setDispstatus(Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setDispstatus(arg0)
statement is: getDispstatus()Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR; type is: class org.evosuite.testcase.statements.MethodStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR dispstatus = gCInfo2_.getDispstatus()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = new STATECOLOR("T+SrXe\"");
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.getDispstatus();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        STATECOLOR sTATECOLOR = new STATECOLOR("GREEN");// Changed the value of 'sTATECOLOR' to a more descriptive and representative value.

        gCInfo2_.setDispstatus(sTATECOLOR);
        gCInfo2_.getDispstatus();
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("GREEN")// Changed the value of 'sTATECOLOR' to a more descriptive and representative value.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setDispstatus(sTATECOLOR), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setDispstatus(sTATECOLOR) target is: gCInfo2_ method is: setDispstatus(STATECOLOR)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setDispstatus(Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V
statement is: gCInfo2_.getDispstatus(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getDispstatus() target is: gCInfo2_ method is: getDispstatus()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: getDispstatus()Lcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
String string = "GREEN";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.getDispstatus();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, (-3015L), 50000, 0L, 1136L, (-1578), (-1578), arg15)
statement is: getDuration()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int duration = gCInfo2_.getDuration()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, (-3015L), 50000, 0L, 1136L, (-1578), (-1578), sTATECOLOR);
gCInfo2_.getDuration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("CA");
        GCInfo2 gCInfo2_ = new GCInfo2("1", "Q}0B8?E!{f\"z7; 1t$\u007f", "Q}0B8?E!{f\"z7; 1t$\u007f", "Q}0B8?E!{f\"z7; 1t$\u007f", 2614, 50000, 0L, 0L, 0L, -3015L, 50000, 0L, 1136L, -1578, -1578, sTATECOLOR);
        gCInfo2_.getDuration();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("CA"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("1", "Q}0B8?E!{f\"z7; 1t$\u007f", "Q}0B8?E!{f\"z7; 1t$\u007f", "Q}0B8?E!{f\"z7; 1t$\u007f", 2614, 50000, 0L, 0L, 0L, -3015L, 50000, 0L, 1136L, -1578, -1578, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getDuration(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getDuration() target is: gCInfo2_ method is: getDuration()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 14
Matched Method is: getDuration()I
TestCase is: String string = "CA";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "1";
String string = "Q}0B8?E!{f\"z7; 1t$";
String string = "Q}0B8?E!{f\"z7; 1t$";
String string = "Q}0B8?E!{f\"z7; 1t$";
int _int = 2614;
int _int = 50000;
long _long = 0L;
long _long = 0L;
long _long = 0L;
int _int = 50000;
long _long = 0L;
long _long = 1136L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _long, _long, _long, _int, _long, _long, (long) sTATECOLOR, (-1578), (-1578), (STATECOLOR) string);
((GCInfo2) sTATECOLOR).getDuration();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getDuration()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int duration = gCInfo2_.getDuration()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getDuration();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setDuration(100);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setDuration(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setDuration(100) target is: gCInfo2_ method is: setDuration(int)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("D&//")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-YELLOW", "", "", "SAPControl-GRAY", (-1613), (-2232), (-1575L), 0L, 656L, 1024L, 0L, 0L, (-1773L), 3121, (-1773L), arg15)
statement is: getHeapSize()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long heapSize = gCInfo2_.getHeapSize()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("D&//");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-YELLOW", "", "", "SAPControl-GRAY", (-1613), (-2232), (-1575L), 0L, 656L, 1024L, 0L, 0L, (-1773L), 3121, (-1773L), sTATECOLOR);
gCInfo2_.getHeapSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("Dark Blue");
        GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-YELLOW", "", "", "SAPControl-GRAY", -1613, -2232, -1575L, 0L, 656L, 1024L, 0L, 0L, -1773L, 3121, -1773L, sTATECOLOR);
        gCInfo2_.getHeapSize();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("Dark Blue"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-YELLOW", "", "", "SAPControl-GRAY", -1613, -2232, -1575L, 0L, 656L, 1024L, 0L, 0L, -1773L, 3121, -1773L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getHeapSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getHeapSize() target is: gCInfo2_ method is: getHeapSize()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 12
Matched Method is: getHeapSize()J
TestCase is: String string = "Dark Blue";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "SAPControl-YELLOW";
String string = "";
String string = "";
String string = "SAPControl-GRAY";
long _long = 0L;
long _long = 656L;
long _long = 1024L;
long _long = 0L;
long _long = 0L;
int _int = 3121;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, (int) _long, (int) _long, _long, _long, _long, _int, (long) sTATECOLOR, 0L, (-1773L), 3121, (-1773L), (STATECOLOR) string);
((GCInfo2) sTATECOLOR).getHeapSize();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), arg15)
statement is: getHeapSize()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long heapSize = gCInfo2_.getHeapSize()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getHeapSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
        GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, -2232, -1575L, sTATECOLOR);
        gCInfo2_.getHeapSize();
        // The heap size is calculated based on the values provided in the constructor.
        assertEquals(3072L, gCInfo2_.getHeapSize());
    }
}
statement is: // Improved test data
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, -2232, -1575L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getHeapSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getHeapSize() target is: gCInfo2_ method is: getHeapSize()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 15
Matched Method is: getHeapSize()J
statement is: // The heap size is calculated based on the values provided in the constructor.
assertEquals(3072L, gCInfo2_.getHeapSize()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // The heap size is calculated based on the values provided in the constructor.
assertEquals(3072L, gCInfo2_.getHeapSize()) target is:  method is: assertEquals(long,<unknown>)
TestCase is: String string = "org.apache.log4j.Category";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
int _int = 1;
int _int = 1;
int _int = 1;
int _int = 1;
int _int = 1;
long _long = 0L;
long _long = 1759L;
int _int = 1;
long _long = 255L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _int, _int, _int, _long, _long, _int, _long, (int) sTATECOLOR, (-1575L), (STATECOLOR) string);
((GCInfo2) sTATECOLOR).getHeapSize();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("S8=.#0YM(s", "S8=.#0YM(s", "SCN%/^^;R", "", (-2145588251), (-977), (-2145588251), (-2145588251), (-4058L), (-2145588251), (-2145588251), 0L, 945L, (-977), 284L, (STATECOLOR) null)
statement is: getObjBytesAfter()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long objBytesAfter = gCInfo2_.getObjBytesAfter()
test data is: GCInfo2 gCInfo2_ = new GCInfo2("S8=.#0YM(s", "S8=.#0YM(s", "SCN%/^^;R", "", (-2145588251), (-977), (-2145588251), (-2145588251), (-4058L), (-2145588251), (-2145588251), 0L, 945L, (-977), 284L, (STATECOLOR) null);
gCInfo2_.getObjBytesAfter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2("S8=ABC123", "S8=XYZ789", "SCN%/^^;R", "", -2145588251, -977, -2145588251, -2145588251, -4058L, -2145588251, -2145588251, 0L, 945L, -977, 284L, ((STATECOLOR) (null)));
        gCInfo2_.getObjBytesAfter();
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2("S8=ABC123", "S8=XYZ789", "SCN%/^^;R", "", -2145588251, -977, -2145588251, -2145588251, -4058L, -2145588251, -2145588251, 0L, 945L, -977, 284L, ((STATECOLOR) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getObjBytesAfter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getObjBytesAfter() target is: gCInfo2_ method is: getObjBytesAfter()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 7
Matched Method is: getObjBytesAfter()J
TestCase is: String string = "S8=ABC123";
String string = "S8=XYZ789";
String string = "SCN%/^^;R";
String string = "";
long _long = 0L;
long _long = 945L;
long _long = 284L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, (int) _long, (int) _long, _long, (-2145588251), (-4058L), (-2145588251), (-2145588251), 0L, 945L, (-977), 284L, (STATECOLOR) null);
((GCInfo2) string).getObjBytesAfter();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), arg15)
statement is: getObjBytesAfter()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long objBytesAfter = gCInfo2_.getObjBytesAfter()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getObjBytesAfter();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("stateColorRed");
        GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "stateColorRed", "stateColorRed", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1688L, 1688L, 0, 1688L, -2521L, 1688L, -2776, -1469L, sTATECOLOR);
        gCInfo2_.getObjBytesAfter();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("stateColorRed"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "stateColorRed", "stateColorRed", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1688L, 1688L, 0, 1688L, -2521L, 1688L, -2776, -1469L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getObjBytesAfter(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getObjBytesAfter() target is: gCInfo2_ method is: getObjBytesAfter()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 14
Matched Method is: getObjBytesAfter()J
TestCase is: String string = "stateColorRed";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "AXW<";
String string = "stateColorRed";
String string = "stateColorRed";
String string = "J^d4-P| vPsNT*F.%?";
int _int = 0;
int _int = 0;
int _int = 0;
long _long = 1688L;
long _long = 1688L;
int _int = 0;
long _long = 1688L;
long _long = 1688L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _int, _long, _long, _int, _long, _long, (long) sTATECOLOR, (-2776), (-1469L), (STATECOLOR) string);
((GCInfo2) sTATECOLOR).getObjBytesAfter();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setObjBytesBefore(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setObjBytesBefore((-524))
statement is: getObjBytesBefore()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long objBytesBefore = gCInfo2_.getObjBytesBefore()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore((-524));
gCInfo2_.getObjBytesBefore();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setObjBytesBefore(-524);// -524 bytes before object creation

        gCInfo2_.setGcCount(10);// 10 garbage collection cycles

        gCInfo2_.setPeakObjBytes(8192);// peak object size: 8 KB

        gCInfo2_.setTotalBytesBeforeGC(20480);// total bytes before last GC: 20 KB

        gCInfo2_.setTotalBytesAfterGC(16384);// total bytes after last GC: 16 KB }}

    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setObjBytesBefore(-524)// -524 bytes before object creation
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setObjBytesBefore(-524)// -524 bytes before object creation
 target is: gCInfo2_ method is: setObjBytesBefore(int)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setObjBytesBefore(J)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: gCInfo2_.setGcCount(10)// 10 garbage collection cycles
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setGcCount(10)// 10 garbage collection cycles
 target is: gCInfo2_ method is: setGcCount(int)
statement is: gCInfo2_.setPeakObjBytes(8192)// peak object size: 8 KB
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setPeakObjBytes(8192)// peak object size: 8 KB
 target is: gCInfo2_ method is: setPeakObjBytes(int)
statement is: gCInfo2_.setTotalBytesBeforeGC(20480)// total bytes before last GC: 20 KB
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setTotalBytesBeforeGC(20480)// total bytes before last GC: 20 KB
 target is: gCInfo2_ method is: setTotalBytesBeforeGC(int)
statement is: gCInfo2_.setTotalBytesAfterGC(16384)// total bytes after last GC: 16 KB }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setTotalBytesAfterGC(16384)// total bytes after last GC: 16 KB }}
 target is: gCInfo2_ method is: setTotalBytesAfterGC(int)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
int _int = null;
gCInfo2_.setObjBytesBefore(_int);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setObjBytesBefore(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setObjBytesBefore(891L)
statement is: getObjBytesBefore()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long objBytesBefore = gCInfo2_.getObjBytesBefore()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore(891L);
gCInfo2_.getObjBytesBefore();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setObjBytesBefore(10000000L);
        gCInfo2_.getObjBytesBefore();
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setObjBytesBefore(10000000L), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setObjBytesBefore(10000000L) target is: gCInfo2_ method is: setObjBytesBefore(long)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setObjBytesBefore(J)V
statement is: gCInfo2_.getObjBytesBefore(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getObjBytesBefore() target is: gCInfo2_ method is: getObjBytesBefore()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: getObjBytesBefore()J
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
long _long = 10000000L;
gCInfo2_.setObjBytesBefore(_long);
gCInfo2_.getObjBytesBefore();

statement is: org.evosuite.testcase.statements.FieldStatement@24167381 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value2
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("Mw.", "Mw.", "types", "", (-184), 1205, 1132L, (-2164L), 30000, 1132L, (-184), 1132L, (-2164L), 1205, (-903L), arg15)
statement is: getObjBytesFreed()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long objBytesFreed = gCInfo2_.getObjBytesFreed()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("Mw.", "Mw.", "types", "", (-184), 1205, 1132L, (-2164L), 30000, 1132L, (-184), 1132L, (-2164L), 1205, (-903L), sTATECOLOR);
gCInfo2_.getObjBytesFreed();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = STATECOLOR.value1;// Changed from value2 to value1 to make the test data more descriptive

        GCInfo2 gCInfo2_ = new GCInfo2("Mw.", "Mw.", "types", "", -184, 1205, 1132L, -2164L, 30000, 1132L, -184, 1132L, -2164L, 1205, -903L, sTATECOLOR);
        gCInfo2_.getObjBytesFreed();
    }
}
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value1// Changed from value2 to value1 to make the test data more descriptive
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value1 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value2 STATECOLOR value2
statement is: GCInfo2 gCInfo2_ = new GCInfo2("Mw.", "Mw.", "types", "", -184, 1205, 1132L, -2164L, 30000, 1132L, -184, 1132L, -2164L, 1205, -903L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getObjBytesFreed(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getObjBytesFreed() target is: gCInfo2_ method is: getObjBytesFreed()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 11
Matched Method is: getObjBytesFreed()J
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value2;
String string = "Mw.";
String string = "Mw.";
String string = "types";
String string = "";
int _int = 1205;
long _long = 1132L;
int _int = 30000;
long _long = 1132L;
long _long = 1132L;
int _int = 1205;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, (int) _long, _int, _long, _long, _int, (long) sTATECOLOR, 1132L, (-2164L), 1205, (-903L), sTATECOLOR);
((GCInfo2) string).getObjBytesFreed();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getObjBytesFreed()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long objBytesFreed = gCInfo2_.getObjBytesFreed()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesFreed();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setObjBytesFreed(100);
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setObjBytesFreed(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setObjBytesFreed(100) target is: gCInfo2_ method is: setObjBytesFreed(int)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), arg15)
statement is: getPageFaults()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long pageFaults = gCInfo2_.getPageFaults()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getPageFaults();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
        GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, -2232, -1575L, sTATECOLOR);
        gCInfo2_.getPageFaults();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, -2232, -1575L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getPageFaults(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getPageFaults() target is: gCInfo2_ method is: getPageFaults()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 15
Matched Method is: getPageFaults()J
TestCase is: String string = "org.apache.log4j.Category";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Category";
int _int = 1;
int _int = 1;
int _int = 1;
int _int = 1;
int _int = 1;
long _long = 0L;
long _long = 1759L;
int _int = 1;
long _long = 255L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _int, _int, _int, _long, _long, _int, _long, (int) sTATECOLOR, (-1575L), (STATECOLOR) string);
((GCInfo2) sTATECOLOR).getPageFaults();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setPageFaults(J)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setPageFaults(3242L)
statement is: getPageFaults()J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long pageFaults = gCInfo2_.getPageFaults()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(3242L);
gCInfo2_.getPageFaults();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setPageFaults(100L);// 100 page faults

        gCInfo2_.getPageFaults();
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setPageFaults(100L)// 100 page faults
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setPageFaults(100L)// 100 page faults
 target is: gCInfo2_ method is: setPageFaults(long)
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setPageFaults(J)V
statement is: gCInfo2_.getPageFaults(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getPageFaults() target is: gCInfo2_ method is: getPageFaults()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: getPageFaults()J
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
long _long = 100L;
gCInfo2_.setPageFaults(_long);
gCInfo2_.getPageFaults();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, (-3015L), 50000, 0L, 1136L, (-1578), (-1578), arg15)
statement is: getProcessname()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String processname = gCInfo2_.getProcessname()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, (-3015L), 50000, 0L, 1136L, (-1578), (-1578), sTATECOLOR);
gCInfo2_.getProcessname();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("CA");
        GCInfo2 gCInfo2_ = new GCInfo2("California", "Q}0B8?E!{f\"z7; 1t$\u007f", "Q}0B8?E!{f\"z7; 1t$\u007f", "Q}0B8?E!{f\"z7; 1t$\u007f", 2614, 50000, 0L, 0L, 0L, -3015L, 50000, 0L, 1136L, -1578, -1578, sTATECOLOR);
        gCInfo2_.getProcessname();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("CA"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("California", "Q}0B8?E!{f\"z7; 1t$\u007f", "Q}0B8?E!{f\"z7; 1t$\u007f", "Q}0B8?E!{f\"z7; 1t$\u007f", 2614, 50000, 0L, 0L, 0L, -3015L, 50000, 0L, 1136L, -1578, -1578, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getProcessname(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getProcessname() target is: gCInfo2_ method is: getProcessname()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 14
Matched Method is: getProcessname()Ljava/lang/String;
TestCase is: String string = "CA";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "California";
String string = "Q}0B8?E!{f\"z7; 1t$";
String string = "Q}0B8?E!{f\"z7; 1t$";
String string = "Q}0B8?E!{f\"z7; 1t$";
int _int = 2614;
int _int = 50000;
long _long = 0L;
long _long = 0L;
long _long = 0L;
int _int = 50000;
long _long = 0L;
long _long = 1136L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _long, _long, _long, _int, _long, _long, (long) sTATECOLOR, (-1578), (-1578), (STATECOLOR) string);
((GCInfo2) sTATECOLOR).getProcessname();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), arg15)
statement is: getProcessname()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String processname = gCInfo2_.getProcessname()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getProcessname();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        gCInfo2_.getProcessname();
    }
}
statement is: gCInfo2_.getProcessname(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getProcessname() target is: gCInfo2_ method is: getProcessname()
statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), arg15)
statement is: getReason()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String reason = gCInfo2_.getReason()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getReason();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
        GCInfo2 gCInfo2_ = new GCInfo2("John Doe", "Jane Doe", "John Smith", "Jane Smith", 35, 30, 1987, 1990, 1992, 1995, 1, 255L, -2232, -1575L, sTATECOLOR);
        gCInfo2_.getReason();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("John Doe", "Jane Doe", "John Smith", "Jane Smith", 35, 30, 1987, 1990, 1992, 1995, 1, 255L, -2232, -1575L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getReason(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getReason() target is: gCInfo2_ method is: getReason()
TestCase is: String string = "org.apache.log4j.Category";
STATECOLOR sTATECOLOR = new STATECOLOR(string);

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getReason()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String reason = gCInfo2_.getReason()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getReason();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        String reason = "Garbage collection due to memory pressure";
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setReason(reason);
    }
}
statement is: // Improved test data
String reason = "Garbage collection due to memory pressure", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setReason(reason), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setReason(reason) target is: gCInfo2_ method is: setReason(java.lang.String)
* this is vulnerable: String string = "Garbage collection due to memory pressure"
TestCase is: String string = "Garbage collection due to memory pressure";
GCInfo2 gCInfo2_ = new GCInfo2();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: setStartTime(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: gCInfo2_.setStartTime("Mw.")
statement is: getStartTime()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String startTime = gCInfo2_.getStartTime()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("Mw.");
gCInfo2_.getStartTime();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.setStartTime(new Date().toString());
        String startTimeStr = "January 1, 2023";// Replace with a more descriptive date string. }}

    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.setStartTime(new Date().toString()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.setStartTime(new Date().toString()) target is: gCInfo2_ method is: setStartTime()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: setStartTime(Ljava/lang/String;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: String startTimeStr = "January 1, 2023"// Replace with a more descriptive date string. }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "January 1, 2023"
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
String string = null;
gCInfo2_.setStartTime(string);
String string = "January 1, 2023";

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getStartTime()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String startTime = gCInfo2_.getStartTime()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getStartTime();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the getStartTime() method of the GCInfo2 class
        long startTime = 1630598400;// Monday, September 12, 2020 12:00:00 AM UTC in seconds }}

    }
}
statement is: // Improved test data for the getStartTime() method of the GCInfo2 class
long startTime = 1630598400// Monday, September 12, 2020 12:00:00 AM UTC in seconds }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1630598400
TestCase is: int _int = 1630598400;

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), arg15)
statement is: getType()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String type = gCInfo2_.getType()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category", "org.apache.log4j.Logger");
        GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Logger", "org.apache.log4j.Appender", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, -2232, -1575L, sTATECOLOR);
        gCInfo2_.getType();
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category", "org.apache.log4j.Logger"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Logger", "org.apache.log4j.Appender", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, -2232, -1575L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getType() target is: gCInfo2_ method is: getType()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V callee: VariableReference: Statement 1, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 13
Matched Method is: getType()Ljava/lang/String;
TestCase is: String string = "org.apache.log4j.Category";
String string = "org.apache.log4j.Logger";
String string = "org.apache.log4j.Appender";
String string = "org.apache.log4j.Category";
int _int = 1;
int _int = 1;
int _int = 1;
int _int = 1;
int _int = 1;
long _long = 0L;
long _long = 1759L;
int _int = 1;
long _long = 255L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _int, _int, _int, _long, _long, _int, _long, (-2232), (-1575L), (STATECOLOR) string);
((GCInfo2) string).getType();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2()
statement is: getType()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String type = gCInfo2_.getType()
test data is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getType();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        GCInfo2 gCInfo2_ = new GCInfo2();
        gCInfo2_.getType();
        // Improved test data
        gCInfo2_.setType("GarbageCollectionType.MARK_SWEEP");
    }
}
statement is: GCInfo2 gCInfo2_ = new GCInfo2(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: gCInfo2_.getType(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: gCInfo2_.getType() target is: gCInfo2_ method is: getType()
source statement: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2()V callee: VariableReference: Statement 0, type com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2index is: 0
Matched Method is: getType()Ljava/lang/String;
statement is: // Improved test data
gCInfo2_.setType("GarbageCollectionType.MARK_SWEEP"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
gCInfo2_.setType("GarbageCollectionType.MARK_SWEEP") target is: gCInfo2_ method is: setType(java.lang.String)
TestCase is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getType();

statement is: com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w")
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), arg15)
statement is: getUnloadedClasses()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int unloadedClasses = gCInfo2_.getUnloadedClasses()
test data is: STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getUnloadedClasses();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = new STATECOLOR("California");
        GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "California", "California", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, -2521L, 1688L, -2776, -1469L, sTATECOLOR);
    }
}
statement is: STATECOLOR sTATECOLOR = new STATECOLOR("California"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "California", "California", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, -2521L, 1688L, -2776, -1469L, sTATECOLOR), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "California";
STATECOLOR sTATECOLOR = new STATECOLOR(string);
String string = "AXW<";
String string = "California";
String string = "California";
String string = "J^d4-P| vPsNT*F.%?";
int _int = 0;
int _int = 0;
int _int = 0;
long _long = 1024L;
long _long = 1024L;
int _int = 0;
long _long = 1688L;
long _long = 1688L;
GCInfo2 gCInfo2_ = new GCInfo2(string, string, string, string, _int, _int, _int, _long, _long, _int, _long, _long, (long) sTATECOLOR, (-2776), (-1469L), (STATECOLOR) string);

statement is: org.evosuite.testcase.statements.FieldStatement@241673e7 type is: class org.evosuite.testcase.statements.FieldStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR
statement code is: STATECOLOR sTATECOLOR = STATECOLOR.value4
statement is: com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIJJJJJJJIJLcom/sap/managementconsole/soap/axis/sapcontrol/STATECOLOR;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class com.sap.managementconsole.soap.axis.sapcontrol.GCInfo2
statement code is: GCInfo2 gCInfo2_ = new GCInfo2("clsBytesAfter", "clsBytesAfter", "N}Tt`TotVLuqx>>l5R", "N}Tt`TotVLuqx>>l5R", 1024, 746, 99L, 0L, 1024, (-1816L), 0L, 4294967295L, (-1816L), 1, 0L, arg15)
statement is: getUnloadedClasses()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int unloadedClasses = gCInfo2_.getUnloadedClasses()
test data is: STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("clsBytesAfter", "clsBytesAfter", "N}Tt`TotVLuqx>>l5R", "N}Tt`TotVLuqx>>l5R", 1024, 746, 99L, 0L, 1024, (-1816L), 0L, 4294967295L, (-1816L), 1, 0L, sTATECOLOR);
gCInfo2_.getUnloadedClasses();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        STATECOLOR sTATECOLOR = STATECOLOR.value4;
    }
}
statement is: STATECOLOR sTATECOLOR = STATECOLOR.value4, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: STATECOLOR.value4 is STATECOLOR
CtField is: public static com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR com.sap.managementconsole.soap.axis.sapcontrol.STATECOLOR.value4 STATECOLOR value4
TestCase is: STATECOLOR sTATECOLOR = STATECOLOR.value4;

* test suite isTestSuite: 146
Test 0: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDuration(2146212195);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 1: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesAfter(2093L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 2: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname(" ");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 3: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType("6pA ufJ|)j6D");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 4: 
Class<Object> class = Object.class;
QName qName = new QName((String) null, "duration");
GCInfo2.getDeserializer("h\"/B>Ux,", class, qName);
Test 5: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 6: 
Class<Object> class = Object.class;
QName valueOf = QName.valueOf("processname");
GCInfo2.getSerializer("SAPControl-RED", class, valueOf);
Test 7: 
GCInfo2.getTypeDesc();
Test 8: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesAfter(486L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 9: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals("ehwJl-1?jN\"?5y");
Test 10: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 11: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("*|_tQod!~TgAJc8");
GCInfo2 gCInfo2_ = new GCInfo2("*|_tQod!~TgAJc8", "sKI[s3tIG", "sKI[s3tIG", "*|_tQod!~TgAJc8", (-1897), (-1897), 853L, 853L, 853L, (-1897), (-531L), (-410L), 853L, (-1897), (-1L), (STATECOLOR) null);
gCInfo2_.equals(gCInfo2_);
Test 12: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("pP9*?w:7\"");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 13: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");
gCInfo2_.equals(gCInfo2_);
Test 14: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 15: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.equals(gCInfo2_);
Test 16: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("badTime00");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 17: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.equals(gCInfo2_);
Test 18: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setCpuTime(464);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 19: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
gCInfo2_.setObjBytesBefore(1518L);
gCInfo2_.equals(gCInfo2_);
Test 20: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesFreed((-2845L));
gCInfo2_.setStartTime("I:_,");
gCInfo2_.setStartTime("I:_,");
gCInfo2_.equals(gCInfo2_);
Test 21: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesBefore(1L);
gCInfo2_.equals(gCInfo2_);
Test 22: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesFreed((-1261L));
gCInfo2_.equals(gCInfo2_);
Test 23: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setHeapSize(2148L);
gCInfo2_.equals(gCInfo2_);
Test 24: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setUnloadedClasses(1421);
gCInfo2_.equals(gCInfo2_);
Test 25: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(1006L);
gCInfo2_.equals(gCInfo2_);
Test 26: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value3;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 27: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.equals(gCInfo2_);
Test 28: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.hashCode();
Test 29: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.hashCode();
Test 30: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesFreed();
Test 31: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesBefore();
Test 32: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "A^rp<E`x2x`\"G#+)rz,", "", (-1312), 39, (-1059L), 39, (-396L), (-3388L), 0L, (-1L), 0L, 1, 0L, sTATECOLOR);
gCInfo2_.getDuration();
Test 33: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getUnloadedClasses();
Test 34: 
STATECOLOR sTATECOLOR = STATECOLOR.value1;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-3163), (-3163), (-3163), 4381L, (-1954L), 1278L, (-2521L), (-3163), (-2521L), (-3163), 4294967295L, sTATECOLOR);
gCInfo2_.getStartTime();
Test 35: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getHeapSize();
Test 36: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesAfter();
Test 37: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getProcessname();
Test 38: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getPageFaults();
Test 39: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", 1, (-1435), (-1435), (-2629L), 1, 4937L, 0L, 0L, (-96L), (-1435), 1L, sTATECOLOR);
gCInfo2_.getReason();
Test 40: 
STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("BGY43x", "`\"iqjM^|=%vz", "BGY43x", "", (-1809), 452, 452, 452, 1616L, (-1809), 4294967295L, (-1575L), (-1575L), 142, 4294967295L, sTATECOLOR);
gCInfo2_.getCpuTime();
Test 41: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesBefore();
Test 42: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getClsBytesAfter();
Test 43: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getDispstatus();
Test 44: 
GCInfo2 gCInfo2_ = new GCInfo2("n@/8#Cd", "wN:#!bCNL==P", "wN:#!bCNL==P", "n@/8#Cd", (-390), (-390), 0L, (-390), (-390), 0L, 0L, 0L, 0L, 946, 0L, (STATECOLOR) null);
gCInfo2_.getObjBytesFreed();
Test 45: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getType();
Test 46: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("$5N=Kj`g'\"7", "$5N=Kj`g'\"7", "$5N=Kj`g'\"7", "", 1, 5118, 60000L, 3061L, 3061L, (-752L), 0L, 0L, 247L, 5118, 5118, sTATECOLOR);
gCInfo2_.setClsBytesAfter(247L);
gCInfo2_.getClsBytesAfter();
Test 47: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesAfter();
Test 48: 
STATECOLOR sTATECOLOR = STATECOLOR.value3;
GCInfo2 gCInfo2_ = new GCInfo2("sendXsiTypes", "8OfSptWKjO7)P", "heapSize", "8OfSptWKjO7)P", (-1930), (-1930), (-1930), 1527L, 1527L, (-1930), 3881L, (-1930), (-1930), (-314), 1527L, sTATECOLOR);
gCInfo2_.getClsBytesBefore();
Test 49: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "SAPControl-GRAY", (-448), 2286, (-56L), (-209L), (-57L), 1L, 0L, (-752L), 0L, 1, (-209L), sTATECOLOR);
gCInfo2_.getClsBytesBefore();
Test 50: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-RED", "tlU8w6`0;-?g>Xq7", "n.zM{UPW~E0", "SAPControl-RED", (-2145588251), 1, (-511L), 1759L, 255L, (-2521L), 65535L, (-511L), (-1575L), (-3163), 1, sTATECOLOR);
gCInfo2_.getClsBytesFreed();
Test 51: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getClsBytesFreed();
Test 52: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getCpuTime();
Test 53: 
STATECOLOR sTATECOLOR = STATECOLOR.value3;
GCInfo2 gCInfo2_ = new GCInfo2("}ps/j!7Syi", "}ps/j!7Syi", "}ps/j!7Syi", "objBytesFreed", 0, 0, 1073741824L, 0, 0, (-2076L), 0, 0, 0, 0, (-1L), sTATECOLOR);
gCInfo2_.getCpuTime();
Test 54: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = new STATECOLOR("T+SrXe\"");
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.getDispstatus();
Test 55: 
STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, (-3015L), 50000, 0L, 1136L, (-1578), (-1578), sTATECOLOR);
gCInfo2_.getDuration();
Test 56: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getDuration();
Test 57: 
STATECOLOR sTATECOLOR = new STATECOLOR("D&//");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-YELLOW", "", "", "SAPControl-GRAY", (-1613), (-2232), (-1575L), 0L, 656L, 1024L, 0L, 0L, (-1773L), 3121, (-1773L), sTATECOLOR);
gCInfo2_.getHeapSize();
Test 58: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getHeapSize();
Test 59: 
GCInfo2 gCInfo2_ = new GCInfo2("S8=.#0YM(s", "S8=.#0YM(s", "SCN%/^^;R", "", (-2145588251), (-977), (-2145588251), (-2145588251), (-4058L), (-2145588251), (-2145588251), 0L, 945L, (-977), 284L, (STATECOLOR) null);
gCInfo2_.getObjBytesAfter();
Test 60: 
STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getObjBytesAfter();
Test 61: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore((-524));
gCInfo2_.getObjBytesBefore();
Test 62: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore(891L);
gCInfo2_.getObjBytesBefore();
Test 63: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("Mw.", "Mw.", "types", "", (-184), 1205, 1132L, (-2164L), 30000, 1132L, (-184), 1132L, (-2164L), 1205, (-903L), sTATECOLOR);
gCInfo2_.getObjBytesFreed();
Test 64: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesFreed();
Test 65: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getPageFaults();
Test 66: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(3242L);
gCInfo2_.getPageFaults();
Test 67: 
STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, (-3015L), 50000, 0L, 1136L, (-1578), (-1578), sTATECOLOR);
gCInfo2_.getProcessname();
Test 68: 
STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getProcessname();
Test 69: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getReason();
Test 70: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getReason();
Test 71: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("Mw.");
gCInfo2_.getStartTime();
Test 72: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getStartTime();
Test 73: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getType();
Test 74: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getType();
Test 75: 
STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getUnloadedClasses();
Test 76: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("clsBytesAfter", "clsBytesAfter", "N}Tt`TotVLuqx>>l5R", "N}Tt`TotVLuqx>>l5R", 1024, 746, 99L, 0L, 1024, (-1816L), 0L, 4294967295L, (-1816L), 1, 0L, sTATECOLOR);
gCInfo2_.getUnloadedClasses();
Test 77: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDuration(100);
GCInfo2 gCInfo2_ = new GCInfo2();

Test 78: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesAfter(1048576L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 79: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();

Test 80: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType("Motorcycle");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 81: 
QName qName = new QName("duration", "duration");
GCInfo2.getDeserializer("h\"/B>Ux", (Class) qName, (QName) null);

Test 82: 
QName valueOf = QName.valueOf("processname");
GCInfo2.getSerializer("SAPControl-RED", (Class) valueOf, (QName) null);

Test 83: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesAfter(486L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 84: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals("1234567890");

Test 85: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();

Test 86: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 87: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("pP9*?w:7\"");
gCInfo2_.setProcessname("MyJavaProcess123");
gCInfo2_.equals(gCInfo2_);

Test 88: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("Emergency situation");
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");

Test 89: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("Fire in the building");
GCInfo2 gCInfo2_ = new GCInfo2();

Test 90: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("2022-03-14T18:30:00Z");
gCInfo2_.equals(gCInfo2_);

Test 91: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("2022-01-01T00:00:00+00:00");
gCInfo2_.equals((Object) null);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("2022-01-01T00:00:00+00:00");
gCInfo2_.equals(gCInfo2_);

Test 92: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setCpuTime((int) 90.5);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 93: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("Garbage collection for reason 1");
gCInfo2_.setObjBytesBefore(1000L);
gCInfo2_.equals(gCInfo2_);

Test 94: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesFreed(500);
gCInfo2_.setStartTime("2021-04-13 18:12:43");
gCInfo2_.equals(gCInfo2_);

Test 95: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 96: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 97: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 98: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus((STATECOLOR) null);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus((STATECOLOR) null);

Test 99: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.equals(gCInfo2_);

Test 100: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (int) sTATECOLOR, (-1575L), (STATECOLOR) "org.apache.log4j.Category");
sTATECOLOR.hashCode();

Test 101: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesFreed();

Test 102: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesBefore();

Test 103: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "Arizona";
GCInfo2 gCInfo2_ = new GCInfo2("Arizona", "USA", "A^rp<E`x2x`\"G#+)rz,", "Phoenix", 39, 39, 0L, 0L, 1, 0L, (long) sTATECOLOR, (-1L), 0L, 1, 0L, sTATECOLOR);
((GCInfo2) string).getDuration();

Test 104: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getUnloadedClasses();

Test 105: 
STATECOLOR sTATECOLOR = STATECOLOR.value1;

Test 106: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 107: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesAfter();

Test 108: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 109: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 110: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "Alice";
GCInfo2 gCInfo2_ = new GCInfo2("Alice", "123 Main St.", "Anytown", "CA", 1, 1, 4937L, 0L, 0L, 1L, (long) sTATECOLOR, 0L, (-96L), (-1435), 1L, sTATECOLOR);
((GCInfo2) string).getReason();

Test 111: 
STATECOLOR sTATECOLOR = new STATECOLOR("NY");
GCInfo2 gCInfo2_ = new GCInfo2("BGY43x", "`\"iqjM^|=%vz", "BGY43x", "", 452, 452, 452, 1616L, 4294967295L, 142, 4294967295L, (long) sTATECOLOR, (-1575L), 142, 4294967295L, (STATECOLOR) "NY");
((GCInfo2) sTATECOLOR).getCpuTime();

Test 112: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 113: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "";
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (int) 0L, (int) 0L, (long) sTATECOLOR, (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
((GCInfo2) string).getClsBytesAfter();

Test 114: 
GCInfo2 gCInfo2_ = new GCInfo2("name@email.com", "password", "password", "name@email.com", 100, 200, 50L, 300, 400, 50L, 60L, 70L, 80L, 946, 100L, (STATECOLOR) null);
((GCInfo2)"name@email.com").getObjBytesFreed();

Test 115: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "";
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (int) 0L, (int) 0L, (long) sTATECOLOR, (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
((GCInfo2) string).getType();

Test 116: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
String string = "10 MB";
GCInfo2 gCInfo2_ = new GCInfo2("10 MB", "5 MB", "20 MB", "", 1, 5118, 60000L, 3061L, 3061L, 0L, 0L, 247L, 5118, 5118, (long) sTATECOLOR, sTATECOLOR);
long _long = 247L;
((GCInfo2) string).setClsBytesAfter(_long);
((GCInfo2) string).getClsBytesAfter();

Test 117: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesAfter();

Test 118: 
STATECOLOR sTATECOLOR = STATECOLOR.value3;
String string = "sendXsiTypes";
GCInfo2 gCInfo2_ = new GCInfo2("sendXsiTypes", "8OfSptWKjO7)P", "heapSize", "8OfSptWKjO7)P", (int) 1527L, (int) 1527L, 3881L, 1527L, (long) sTATECOLOR, (-1930), 3881L, (-1930), (-1930), (-314), 1527L, sTATECOLOR);
((GCInfo2) string).getClsBytesBefore();

Test 119: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
String string = "";
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "SAPControl-GRAY", 2286, (int) 1L, 0L, 0L, 1, (long) sTATECOLOR, 0L, (-752L), 0L, 1, (-209L), sTATECOLOR);
((GCInfo2) string).getClsBytesBefore();

Test 120: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-RED", "tlU8w6`0;-?g>Xq7", "n.zM{UPW~E0", "SAPControl-RED", 1, (int) 1759L, 255L, 65535L, 1, (long) sTATECOLOR, 65535L, (-511L), (-1575L), (-3163), 1, (STATECOLOR) "org.apache.log4j.Category");
((GCInfo2) sTATECOLOR).getClsBytesFreed();

Test 121: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1000, 10000, 100000, 1000000, 0L, 1759L, 10000000, 255L, (int) sTATECOLOR, (-1575L), (STATECOLOR) "org.apache.log4j.Category");
((GCInfo2) sTATECOLOR).getClsBytesFreed();

Test 122: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "";
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (int) 0L, (int) 0L, (long) sTATECOLOR, (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
((GCInfo2) string).getCpuTime();

Test 123: 
STATECOLOR sTATECOLOR = STATECOLOR.value3;
String string = "1234567890";
GCInfo2 gCInfo2_ = new GCInfo2("1234567890", "1234567890", "1234567890", "objBytesFreed", 0, 0, 1073741824L, 0, 0, 0, 0, 0, 0, (int) sTATECOLOR, (-1L), sTATECOLOR);
((GCInfo2) string).getCpuTime();

Test 124: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = new STATECOLOR("GREEN");
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.getDispstatus();

Test 125: 
STATECOLOR sTATECOLOR = new STATECOLOR("CA");
GCInfo2 gCInfo2_ = new GCInfo2("1", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, 50000, 0L, 1136L, (long) sTATECOLOR, (-1578), (-1578), (STATECOLOR) "CA");
((GCInfo2) sTATECOLOR).getDuration();

Test 126: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 127: 
STATECOLOR sTATECOLOR = new STATECOLOR("Dark Blue");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-YELLOW", "", "", "SAPControl-GRAY", (int) 0L, (int) 656L, 1024L, 0L, 0L, 3121, (long) sTATECOLOR, 0L, (-1773L), 3121, (-1773L), (STATECOLOR) "Dark Blue");
((GCInfo2) sTATECOLOR).getHeapSize();

Test 128: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (int) sTATECOLOR, (-1575L), (STATECOLOR) "org.apache.log4j.Category");
((GCInfo2) sTATECOLOR).getHeapSize();

Test 129: 
String string = "S8=ABC123";
GCInfo2 gCInfo2_ = new GCInfo2("S8=ABC123", "S8=XYZ789", "SCN%/^^;R", "", (int) 0L, (int) 945L, 284L, (-2145588251), (-4058L), (-2145588251), (-2145588251), 0L, 945L, (-977), 284L, (STATECOLOR) null);
((GCInfo2) string).getObjBytesAfter();

Test 130: 
STATECOLOR sTATECOLOR = new STATECOLOR("stateColorRed");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "stateColorRed", "stateColorRed", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1688L, 1688L, 0, 1688L, 1688L, (long) sTATECOLOR, (-2776), (-1469L), (STATECOLOR) "stateColorRed");
((GCInfo2) sTATECOLOR).getObjBytesAfter();

Test 131: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore((long) (Long) null);

Test 132: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore(10000000L);
gCInfo2_.getObjBytesBefore();

Test 133: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
String string = "Mw.";
GCInfo2 gCInfo2_ = new GCInfo2("Mw.", "Mw.", "types", "", 1205, (int) 1132L, 30000, 1132L, 1132L, 1205, (long) sTATECOLOR, 1132L, (-2164L), 1205, (-903L), sTATECOLOR);
((GCInfo2) string).getObjBytesFreed();

Test 134: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 135: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (int) sTATECOLOR, (-1575L), (STATECOLOR) "org.apache.log4j.Category");
((GCInfo2) sTATECOLOR).getPageFaults();

Test 136: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(100L);
gCInfo2_.getPageFaults();

Test 137: 
STATECOLOR sTATECOLOR = new STATECOLOR("CA");
GCInfo2 gCInfo2_ = new GCInfo2("California", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, 50000, 0L, 1136L, (long) sTATECOLOR, (-1578), (-1578), (STATECOLOR) "CA");
((GCInfo2) sTATECOLOR).getProcessname();

Test 138: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");

Test 139: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 140: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime((String) null);

Test 141: 

Test 142: 
String string = "org.apache.log4j.Logger";
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Logger", "org.apache.log4j.Appender", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), (STATECOLOR) "org.apache.log4j.Category");
((GCInfo2) string).getType();

Test 143: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getType();

Test 144: 
STATECOLOR sTATECOLOR = new STATECOLOR("California");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "California", "California", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, 1688L, (long) sTATECOLOR, (-2776), (-1469L), (STATECOLOR) "California");

Test 145: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;


* Generated after the refinement and before minimization 146 tests with total length 435
* test suite isTestSuite: 146
Test 0: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDuration(2146212195);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 1: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesAfter(2093L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 2: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname(" ");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 3: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType("6pA ufJ|)j6D");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 4: 
Class<Object> class = Object.class;
QName qName = new QName((String) null, "duration");
GCInfo2.getDeserializer("h\"/B>Ux,", class, qName);
Test 5: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 6: 
Class<Object> class = Object.class;
QName valueOf = QName.valueOf("processname");
GCInfo2.getSerializer("SAPControl-RED", class, valueOf);
Test 7: 
GCInfo2.getTypeDesc();
Test 8: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesAfter(486L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 9: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals("ehwJl-1?jN\"?5y");
Test 10: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 11: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("*|_tQod!~TgAJc8");
GCInfo2 gCInfo2_ = new GCInfo2("*|_tQod!~TgAJc8", "sKI[s3tIG", "sKI[s3tIG", "*|_tQod!~TgAJc8", (-1897), (-1897), 853L, 853L, 853L, (-1897), (-531L), (-410L), 853L, (-1897), (-1L), (STATECOLOR) null);
gCInfo2_.equals(gCInfo2_);
Test 12: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("pP9*?w:7\"");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 13: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");
gCInfo2_.equals(gCInfo2_);
Test 14: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 15: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.equals(gCInfo2_);
Test 16: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("badTime00");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 17: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.equals(gCInfo2_);
Test 18: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setCpuTime(464);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 19: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
gCInfo2_.setObjBytesBefore(1518L);
gCInfo2_.equals(gCInfo2_);
Test 20: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesFreed((-2845L));
gCInfo2_.setStartTime("I:_,");
gCInfo2_.setStartTime("I:_,");
gCInfo2_.equals(gCInfo2_);
Test 21: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesBefore(1L);
gCInfo2_.equals(gCInfo2_);
Test 22: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesFreed((-1261L));
gCInfo2_.equals(gCInfo2_);
Test 23: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setHeapSize(2148L);
gCInfo2_.equals(gCInfo2_);
Test 24: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setUnloadedClasses(1421);
gCInfo2_.equals(gCInfo2_);
Test 25: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(1006L);
gCInfo2_.equals(gCInfo2_);
Test 26: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value3;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 27: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.equals(gCInfo2_);
Test 28: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.hashCode();
Test 29: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.hashCode();
Test 30: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesFreed();
Test 31: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesBefore();
Test 32: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "A^rp<E`x2x`\"G#+)rz,", "", (-1312), 39, (-1059L), 39, (-396L), (-3388L), 0L, (-1L), 0L, 1, 0L, sTATECOLOR);
gCInfo2_.getDuration();
Test 33: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getUnloadedClasses();
Test 34: 
STATECOLOR sTATECOLOR = STATECOLOR.value1;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-3163), (-3163), (-3163), 4381L, (-1954L), 1278L, (-2521L), (-3163), (-2521L), (-3163), 4294967295L, sTATECOLOR);
gCInfo2_.getStartTime();
Test 35: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getHeapSize();
Test 36: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesAfter();
Test 37: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getProcessname();
Test 38: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getPageFaults();
Test 39: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", 1, (-1435), (-1435), (-2629L), 1, 4937L, 0L, 0L, (-96L), (-1435), 1L, sTATECOLOR);
gCInfo2_.getReason();
Test 40: 
STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("BGY43x", "`\"iqjM^|=%vz", "BGY43x", "", (-1809), 452, 452, 452, 1616L, (-1809), 4294967295L, (-1575L), (-1575L), 142, 4294967295L, sTATECOLOR);
gCInfo2_.getCpuTime();
Test 41: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesBefore();
Test 42: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getClsBytesAfter();
Test 43: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getDispstatus();
Test 44: 
GCInfo2 gCInfo2_ = new GCInfo2("n@/8#Cd", "wN:#!bCNL==P", "wN:#!bCNL==P", "n@/8#Cd", (-390), (-390), 0L, (-390), (-390), 0L, 0L, 0L, 0L, 946, 0L, (STATECOLOR) null);
gCInfo2_.getObjBytesFreed();
Test 45: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getType();
Test 46: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("$5N=Kj`g'\"7", "$5N=Kj`g'\"7", "$5N=Kj`g'\"7", "", 1, 5118, 60000L, 3061L, 3061L, (-752L), 0L, 0L, 247L, 5118, 5118, sTATECOLOR);
gCInfo2_.setClsBytesAfter(247L);
gCInfo2_.getClsBytesAfter();
Test 47: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesAfter();
Test 48: 
STATECOLOR sTATECOLOR = STATECOLOR.value3;
GCInfo2 gCInfo2_ = new GCInfo2("sendXsiTypes", "8OfSptWKjO7)P", "heapSize", "8OfSptWKjO7)P", (-1930), (-1930), (-1930), 1527L, 1527L, (-1930), 3881L, (-1930), (-1930), (-314), 1527L, sTATECOLOR);
gCInfo2_.getClsBytesBefore();
Test 49: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "SAPControl-GRAY", (-448), 2286, (-56L), (-209L), (-57L), 1L, 0L, (-752L), 0L, 1, (-209L), sTATECOLOR);
gCInfo2_.getClsBytesBefore();
Test 50: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-RED", "tlU8w6`0;-?g>Xq7", "n.zM{UPW~E0", "SAPControl-RED", (-2145588251), 1, (-511L), 1759L, 255L, (-2521L), 65535L, (-511L), (-1575L), (-3163), 1, sTATECOLOR);
gCInfo2_.getClsBytesFreed();
Test 51: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getClsBytesFreed();
Test 52: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getCpuTime();
Test 53: 
STATECOLOR sTATECOLOR = STATECOLOR.value3;
GCInfo2 gCInfo2_ = new GCInfo2("}ps/j!7Syi", "}ps/j!7Syi", "}ps/j!7Syi", "objBytesFreed", 0, 0, 1073741824L, 0, 0, (-2076L), 0, 0, 0, 0, (-1L), sTATECOLOR);
gCInfo2_.getCpuTime();
Test 54: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = new STATECOLOR("T+SrXe\"");
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.getDispstatus();
Test 55: 
STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, (-3015L), 50000, 0L, 1136L, (-1578), (-1578), sTATECOLOR);
gCInfo2_.getDuration();
Test 56: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getDuration();
Test 57: 
STATECOLOR sTATECOLOR = new STATECOLOR("D&//");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-YELLOW", "", "", "SAPControl-GRAY", (-1613), (-2232), (-1575L), 0L, 656L, 1024L, 0L, 0L, (-1773L), 3121, (-1773L), sTATECOLOR);
gCInfo2_.getHeapSize();
Test 58: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getHeapSize();
Test 59: 
GCInfo2 gCInfo2_ = new GCInfo2("S8=.#0YM(s", "S8=.#0YM(s", "SCN%/^^;R", "", (-2145588251), (-977), (-2145588251), (-2145588251), (-4058L), (-2145588251), (-2145588251), 0L, 945L, (-977), 284L, (STATECOLOR) null);
gCInfo2_.getObjBytesAfter();
Test 60: 
STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getObjBytesAfter();
Test 61: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore((-524));
gCInfo2_.getObjBytesBefore();
Test 62: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore(891L);
gCInfo2_.getObjBytesBefore();
Test 63: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("Mw.", "Mw.", "types", "", (-184), 1205, 1132L, (-2164L), 30000, 1132L, (-184), 1132L, (-2164L), 1205, (-903L), sTATECOLOR);
gCInfo2_.getObjBytesFreed();
Test 64: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesFreed();
Test 65: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getPageFaults();
Test 66: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(3242L);
gCInfo2_.getPageFaults();
Test 67: 
STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, (-3015L), 50000, 0L, 1136L, (-1578), (-1578), sTATECOLOR);
gCInfo2_.getProcessname();
Test 68: 
STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getProcessname();
Test 69: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getReason();
Test 70: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getReason();
Test 71: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("Mw.");
gCInfo2_.getStartTime();
Test 72: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getStartTime();
Test 73: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getType();
Test 74: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getType();
Test 75: 
STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getUnloadedClasses();
Test 76: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("clsBytesAfter", "clsBytesAfter", "N}Tt`TotVLuqx>>l5R", "N}Tt`TotVLuqx>>l5R", 1024, 746, 99L, 0L, 1024, (-1816L), 0L, 4294967295L, (-1816L), 1, 0L, sTATECOLOR);
gCInfo2_.getUnloadedClasses();
Test 77: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDuration(100);
GCInfo2 gCInfo2_ = new GCInfo2();

Test 78: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesAfter(1048576L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 79: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();

Test 80: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType("Motorcycle");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 81: 
QName qName = new QName("duration", "duration");
GCInfo2.getDeserializer("h\"/B>Ux", (Class) qName, (QName) null);

Test 82: 
QName valueOf = QName.valueOf("processname");
GCInfo2.getSerializer("SAPControl-RED", (Class) valueOf, (QName) null);

Test 83: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesAfter(486L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 84: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals("1234567890");

Test 85: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();

Test 86: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 87: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("pP9*?w:7\"");
gCInfo2_.setProcessname("MyJavaProcess123");
gCInfo2_.equals(gCInfo2_);

Test 88: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("Emergency situation");
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");

Test 89: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("Fire in the building");
GCInfo2 gCInfo2_ = new GCInfo2();

Test 90: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("2022-03-14T18:30:00Z");
gCInfo2_.equals(gCInfo2_);

Test 91: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("2022-01-01T00:00:00+00:00");
gCInfo2_.equals((Object) null);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("2022-01-01T00:00:00+00:00");
gCInfo2_.equals(gCInfo2_);

Test 92: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setCpuTime((int) 90.5);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 93: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("Garbage collection for reason 1");
gCInfo2_.setObjBytesBefore(1000L);
gCInfo2_.equals(gCInfo2_);

Test 94: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesFreed(500);
gCInfo2_.setStartTime("2021-04-13 18:12:43");
gCInfo2_.equals(gCInfo2_);

Test 95: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 96: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 97: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);

Test 98: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus((STATECOLOR) null);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus((STATECOLOR) null);

Test 99: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.equals(gCInfo2_);

Test 100: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (int) sTATECOLOR, (-1575L), (STATECOLOR) "org.apache.log4j.Category");
sTATECOLOR.hashCode();

Test 101: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesFreed();

Test 102: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesBefore();

Test 103: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "Arizona";
GCInfo2 gCInfo2_ = new GCInfo2("Arizona", "USA", "A^rp<E`x2x`\"G#+)rz,", "Phoenix", 39, 39, 0L, 0L, 1, 0L, (long) sTATECOLOR, (-1L), 0L, 1, 0L, sTATECOLOR);
((GCInfo2) string).getDuration();

Test 104: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getUnloadedClasses();

Test 105: 
STATECOLOR sTATECOLOR = STATECOLOR.value1;

Test 106: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 107: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesAfter();

Test 108: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 109: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 110: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "Alice";
GCInfo2 gCInfo2_ = new GCInfo2("Alice", "123 Main St.", "Anytown", "CA", 1, 1, 4937L, 0L, 0L, 1L, (long) sTATECOLOR, 0L, (-96L), (-1435), 1L, sTATECOLOR);
((GCInfo2) string).getReason();

Test 111: 
STATECOLOR sTATECOLOR = new STATECOLOR("NY");
GCInfo2 gCInfo2_ = new GCInfo2("BGY43x", "`\"iqjM^|=%vz", "BGY43x", "", 452, 452, 452, 1616L, 4294967295L, 142, 4294967295L, (long) sTATECOLOR, (-1575L), 142, 4294967295L, (STATECOLOR) "NY");
((GCInfo2) sTATECOLOR).getCpuTime();

Test 112: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 113: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "";
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (int) 0L, (int) 0L, (long) sTATECOLOR, (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
((GCInfo2) string).getClsBytesAfter();

Test 114: 
GCInfo2 gCInfo2_ = new GCInfo2("name@email.com", "password", "password", "name@email.com", 100, 200, 50L, 300, 400, 50L, 60L, 70L, 80L, 946, 100L, (STATECOLOR) null);
((GCInfo2)"name@email.com").getObjBytesFreed();

Test 115: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "";
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (int) 0L, (int) 0L, (long) sTATECOLOR, (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
((GCInfo2) string).getType();

Test 116: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
String string = "10 MB";
GCInfo2 gCInfo2_ = new GCInfo2("10 MB", "5 MB", "20 MB", "", 1, 5118, 60000L, 3061L, 3061L, 0L, 0L, 247L, 5118, 5118, (long) sTATECOLOR, sTATECOLOR);
long _long = 247L;
((GCInfo2) string).setClsBytesAfter(_long);
((GCInfo2) string).getClsBytesAfter();

Test 117: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesAfter();

Test 118: 
STATECOLOR sTATECOLOR = STATECOLOR.value3;
String string = "sendXsiTypes";
GCInfo2 gCInfo2_ = new GCInfo2("sendXsiTypes", "8OfSptWKjO7)P", "heapSize", "8OfSptWKjO7)P", (int) 1527L, (int) 1527L, 3881L, 1527L, (long) sTATECOLOR, (-1930), 3881L, (-1930), (-1930), (-314), 1527L, sTATECOLOR);
((GCInfo2) string).getClsBytesBefore();

Test 119: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
String string = "";
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "SAPControl-GRAY", 2286, (int) 1L, 0L, 0L, 1, (long) sTATECOLOR, 0L, (-752L), 0L, 1, (-209L), sTATECOLOR);
((GCInfo2) string).getClsBytesBefore();

Test 120: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-RED", "tlU8w6`0;-?g>Xq7", "n.zM{UPW~E0", "SAPControl-RED", 1, (int) 1759L, 255L, 65535L, 1, (long) sTATECOLOR, 65535L, (-511L), (-1575L), (-3163), 1, (STATECOLOR) "org.apache.log4j.Category");
((GCInfo2) sTATECOLOR).getClsBytesFreed();

Test 121: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1000, 10000, 100000, 1000000, 0L, 1759L, 10000000, 255L, (int) sTATECOLOR, (-1575L), (STATECOLOR) "org.apache.log4j.Category");
((GCInfo2) sTATECOLOR).getClsBytesFreed();

Test 122: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
String string = "";
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (int) 0L, (int) 0L, (long) sTATECOLOR, (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
((GCInfo2) string).getCpuTime();

Test 123: 
STATECOLOR sTATECOLOR = STATECOLOR.value3;
String string = "1234567890";
GCInfo2 gCInfo2_ = new GCInfo2("1234567890", "1234567890", "1234567890", "objBytesFreed", 0, 0, 1073741824L, 0, 0, 0, 0, 0, 0, (int) sTATECOLOR, (-1L), sTATECOLOR);
((GCInfo2) string).getCpuTime();

Test 124: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = new STATECOLOR("GREEN");
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.getDispstatus();

Test 125: 
STATECOLOR sTATECOLOR = new STATECOLOR("CA");
GCInfo2 gCInfo2_ = new GCInfo2("1", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, 50000, 0L, 1136L, (long) sTATECOLOR, (-1578), (-1578), (STATECOLOR) "CA");
((GCInfo2) sTATECOLOR).getDuration();

Test 126: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 127: 
STATECOLOR sTATECOLOR = new STATECOLOR("Dark Blue");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-YELLOW", "", "", "SAPControl-GRAY", (int) 0L, (int) 656L, 1024L, 0L, 0L, 3121, (long) sTATECOLOR, 0L, (-1773L), 3121, (-1773L), (STATECOLOR) "Dark Blue");
((GCInfo2) sTATECOLOR).getHeapSize();

Test 128: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (int) sTATECOLOR, (-1575L), (STATECOLOR) "org.apache.log4j.Category");
((GCInfo2) sTATECOLOR).getHeapSize();

Test 129: 
String string = "S8=ABC123";
GCInfo2 gCInfo2_ = new GCInfo2("S8=ABC123", "S8=XYZ789", "SCN%/^^;R", "", (int) 0L, (int) 945L, 284L, (-2145588251), (-4058L), (-2145588251), (-2145588251), 0L, 945L, (-977), 284L, (STATECOLOR) null);
((GCInfo2) string).getObjBytesAfter();

Test 130: 
STATECOLOR sTATECOLOR = new STATECOLOR("stateColorRed");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "stateColorRed", "stateColorRed", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1688L, 1688L, 0, 1688L, 1688L, (long) sTATECOLOR, (-2776), (-1469L), (STATECOLOR) "stateColorRed");
((GCInfo2) sTATECOLOR).getObjBytesAfter();

Test 131: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore((long) (Long) null);

Test 132: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore(10000000L);
gCInfo2_.getObjBytesBefore();

Test 133: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
String string = "Mw.";
GCInfo2 gCInfo2_ = new GCInfo2("Mw.", "Mw.", "types", "", 1205, (int) 1132L, 30000, 1132L, 1132L, 1205, (long) sTATECOLOR, 1132L, (-2164L), 1205, (-903L), sTATECOLOR);
((GCInfo2) string).getObjBytesFreed();

Test 134: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 135: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (int) sTATECOLOR, (-1575L), (STATECOLOR) "org.apache.log4j.Category");
((GCInfo2) sTATECOLOR).getPageFaults();

Test 136: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(100L);
gCInfo2_.getPageFaults();

Test 137: 
STATECOLOR sTATECOLOR = new STATECOLOR("CA");
GCInfo2 gCInfo2_ = new GCInfo2("California", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, 50000, 0L, 1136L, (long) sTATECOLOR, (-1578), (-1578), (STATECOLOR) "CA");
((GCInfo2) sTATECOLOR).getProcessname();

Test 138: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");

Test 139: 
GCInfo2 gCInfo2_ = new GCInfo2();

Test 140: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime((String) null);

Test 141: 

Test 142: 
String string = "org.apache.log4j.Logger";
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Logger", "org.apache.log4j.Appender", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), (STATECOLOR) "org.apache.log4j.Category");
((GCInfo2) string).getType();

Test 143: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getType();

Test 144: 
STATECOLOR sTATECOLOR = new STATECOLOR("California");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "California", "California", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, 1688L, (long) sTATECOLOR, (-2776), (-1469L), (STATECOLOR) "California");

Test 145: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;


* Minimizing test suite
* test suite isTestSuite: 77
Test 0: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesAfter(1048576L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 1: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("pP9*?w:7\"");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 2: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(100L);
gCInfo2_.getPageFaults();
Test 3: 
Class<Object> class = Object.class;
QName qName = new QName((String) null, "duration");
GCInfo2.getDeserializer("h\"/B>Ux,", class, qName);
Test 4: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 5: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setCpuTime(464);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 6: 
Class<Object> class = Object.class;
QName valueOf = QName.valueOf("processname");
GCInfo2.getSerializer("SAPControl-RED", class, valueOf);
Test 7: 
GCInfo2.getTypeDesc();
Test 8: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesAfter(486L);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 9: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals((Object) null);
Test 10: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 11: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("*|_tQod!~TgAJc8");
GCInfo2 gCInfo2_ = new GCInfo2("*|_tQod!~TgAJc8", "sKI[s3tIG", "sKI[s3tIG", "*|_tQod!~TgAJc8", (-1897), (-1897), 853L, 853L, 853L, (-1897), (-531L), (-410L), 853L, (-1897), (-1L), (STATECOLOR) null);
gCInfo2_.equals(gCInfo2_);
Test 12: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname(" ");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 13: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType("Motorcycle");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 14: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 15: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");
gCInfo2_.equals(gCInfo2_);
Test 16: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.equals(gCInfo2_);
Test 17: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("badTime00");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 18: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.setStartTime("+^ij<i");
gCInfo2_.equals(gCInfo2_);
Test 19: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDuration(2146212195);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 20: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
gCInfo2_.setObjBytesBefore(1518L);
gCInfo2_.equals(gCInfo2_);
Test 21: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesFreed((-2845L));
gCInfo2_.setStartTime("I:_,");
gCInfo2_.setStartTime("I:_,");
gCInfo2_.equals(gCInfo2_);
Test 22: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesBefore(1L);
gCInfo2_.equals(gCInfo2_);
Test 23: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesFreed((-1261L));
gCInfo2_.equals(gCInfo2_);
Test 24: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setHeapSize(2148L);
gCInfo2_.equals(gCInfo2_);
Test 25: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setUnloadedClasses(1421);
gCInfo2_.equals(gCInfo2_);
Test 26: 
GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(1006L);
gCInfo2_.equals(gCInfo2_);
Test 27: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value3;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.equals(gCInfo2_);
Test 28: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = STATECOLOR.value2;
gCInfo2_.setDispstatus(sTATECOLOR);
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.equals(gCInfo2_);
Test 29: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.hashCode();
Test 30: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.hashCode();
Test 31: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesFreed();
Test 32: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesBefore();
Test 33: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getDuration();
Test 34: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getUnloadedClasses();
Test 35: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getStartTime();
Test 36: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getHeapSize();
Test 37: 
GCInfo2 gCInfo2_ = new GCInfo2("S8=.#0YM(s", "S8=.#0YM(s", "SCN%/^^;R", "", (-2145588251), (-977), (-2145588251), (-2145588251), (-4058L), (-2145588251), (-2145588251), 0L, 945L, (-977), 284L, (STATECOLOR) null);
gCInfo2_.getObjBytesAfter();
Test 38: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getProcessname();
Test 39: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getPageFaults();
Test 40: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getReason();
Test 41: 
STATECOLOR sTATECOLOR = STATECOLOR.value3;
GCInfo2 gCInfo2_ = new GCInfo2("}ps/j!7Syi", "}ps/j!7Syi", "}ps/j!7Syi", "objBytesFreed", 0, 0, 1073741824L, 0, 0, (-2076L), 0, 0, 0, 0, (-1L), sTATECOLOR);
gCInfo2_.getCpuTime();
Test 42: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesBefore();
Test 43: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getClsBytesAfter();
Test 44: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getDispstatus();
Test 45: 
GCInfo2 gCInfo2_ = new GCInfo2("n@/8#Cd", "wN:#!bCNL==P", "wN:#!bCNL==P", "n@/8#Cd", (-390), (-390), 0L, (-390), (-390), 0L, 0L, 0L, 0L, 946, 0L, (STATECOLOR) null);
gCInfo2_.getObjBytesFreed();
Test 46: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getType();
Test 47: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getClsBytesAfter();
Test 48: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("$5N=Kj`g'\"7", "$5N=Kj`g'\"7", "$5N=Kj`g'\"7", "", 1, 5118, 60000L, 3061L, 3061L, (-752L), 0L, 0L, 247L, 5118, 5118, sTATECOLOR);
gCInfo2_.setClsBytesAfter(247L);
gCInfo2_.getClsBytesAfter();
Test 49: 
STATECOLOR sTATECOLOR = STATECOLOR.value3;
GCInfo2 gCInfo2_ = new GCInfo2("sendXsiTypes", "8OfSptWKjO7)P", "heapSize", "8OfSptWKjO7)P", (-1930), (-1930), (-1930), 1527L, 1527L, (-1930), 3881L, (-1930), (-1930), (-314), 1527L, sTATECOLOR);
gCInfo2_.getClsBytesBefore();
Test 50: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "SAPControl-GRAY", (-448), 2286, (-56L), (-209L), (-57L), 1L, 0L, (-752L), 0L, 1, (-209L), sTATECOLOR);
gCInfo2_.getClsBytesBefore();
Test 51: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-RED", "tlU8w6`0;-?g>Xq7", "n.zM{UPW~E0", "SAPControl-RED", (-2145588251), 1, (-511L), 1759L, 255L, (-2521L), 65535L, (-511L), (-1575L), (-3163), 1, sTATECOLOR);
gCInfo2_.getClsBytesFreed();
Test 52: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getClsBytesFreed();
Test 53: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getCpuTime();
Test 54: 
STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("BGY43x", "`\"iqjM^|=%vz", "BGY43x", "", (-1809), 452, 452, 452, 1616L, (-1809), 4294967295L, (-1575L), (-1575L), 142, 4294967295L, sTATECOLOR);
gCInfo2_.getCpuTime();
Test 55: 
GCInfo2 gCInfo2_ = new GCInfo2();
STATECOLOR sTATECOLOR = new STATECOLOR("GREEN");
gCInfo2_.setDispstatus(sTATECOLOR);
gCInfo2_.getDispstatus();
Test 56: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "A^rp<E`x2x`\"G#+)rz,", "", (-1312), 39, (-1059L), 39, (-396L), (-3388L), 0L, (-1L), 0L, 1, 0L, sTATECOLOR);
gCInfo2_.getDuration();
Test 57: 
STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, (-3015L), 50000, 0L, 1136L, (-1578), (-1578), sTATECOLOR);
gCInfo2_.getDuration();
Test 58: 
STATECOLOR sTATECOLOR = new STATECOLOR("D&//");
GCInfo2 gCInfo2_ = new GCInfo2("SAPControl-YELLOW", "", "", "SAPControl-GRAY", (-1613), (-2232), (-1575L), 0L, 656L, 1024L, 0L, 0L, (-1773L), 3121, (-1773L), sTATECOLOR);
gCInfo2_.getHeapSize();
Test 59: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getHeapSize();
Test 60: 
STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getObjBytesAfter();
Test 61: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesAfter();
Test 62: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore((-524));
gCInfo2_.getObjBytesBefore();
Test 63: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesBefore(10000000L);
gCInfo2_.getObjBytesBefore();
Test 64: 
STATECOLOR sTATECOLOR = STATECOLOR.value2;
GCInfo2 gCInfo2_ = new GCInfo2("Mw.", "Mw.", "types", "", (-184), 1205, 1132L, (-2164L), 30000, 1132L, (-184), 1132L, (-2164L), 1205, (-903L), sTATECOLOR);
gCInfo2_.getObjBytesFreed();
Test 65: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.getObjBytesFreed();
Test 66: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getPageFaults();
Test 67: 
STATECOLOR sTATECOLOR = new STATECOLOR("");
GCInfo2 gCInfo2_ = new GCInfo2("", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", "Q}0B8?E!{f\"z7; 1t$", 2614, 50000, 0L, 0L, 0L, (-3015L), 50000, 0L, 1136L, (-1578), (-1578), sTATECOLOR);
gCInfo2_.getProcessname();
Test 68: 
STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getProcessname();
Test 69: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", 1, (-1435), (-1435), (-2629L), 1, 4937L, 0L, 0L, (-96L), (-1435), 1L, sTATECOLOR);
gCInfo2_.getReason();
Test 70: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getReason();
Test 71: 
STATECOLOR sTATECOLOR = STATECOLOR.value1;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-3163), (-3163), (-3163), 4381L, (-1954L), 1278L, (-2521L), (-3163), (-2521L), (-3163), 4294967295L, sTATECOLOR);
gCInfo2_.getStartTime();
Test 72: 
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setStartTime("Mw.");
gCInfo2_.getStartTime();
Test 73: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("", "", "", "", (-242), (-242), (-242), (-2649L), (-2649L), (-2649L), (-242), (-242), 0L, (-242), 0L, sTATECOLOR);
gCInfo2_.getType();
Test 74: 
STATECOLOR sTATECOLOR = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), sTATECOLOR);
gCInfo2_.getType();
Test 75: 
STATECOLOR sTATECOLOR = new STATECOLOR("u1e9TF&.wtqgdM{Vd0w");
GCInfo2 gCInfo2_ = new GCInfo2("AXW<", "u1e9TF&.wtqgdM{Vd0w", "u1e9TF&.wtqgdM{Vd0w", "J^d4-P| vPsNT*F.%?", 0, 0, 0, 1024L, 1024L, 0, 1688L, (-2521L), 1688L, (-2776), (-1469L), sTATECOLOR);
gCInfo2_.getUnloadedClasses();
Test 76: 
STATECOLOR sTATECOLOR = STATECOLOR.value4;
GCInfo2 gCInfo2_ = new GCInfo2("clsBytesAfter", "clsBytesAfter", "N}Tt`TotVLuqx>>l5R", "N}Tt`TotVLuqx>>l5R", 1024, 746, 99L, 0L, 1024, (-1816L), 0L, 4294967295L, (-1816L), 1, 0L, sTATECOLOR);
gCInfo2_.getUnloadedClasses();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 121
* Number of covered goals: 116
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 98%
* Total number of goals: 112
* Number of covered goals: 110
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 91%
* Total number of goals: 57
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 39
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 96%
* Total number of goals: 121
* Number of covered goals: 116
* Generated 77 tests with total length 245
* Resulting test suite's coverage: 96% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 71%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesAfter(1048576L);
GCInfo2 arg0 = new GCInfo2();
boolean equals = gCInfo2_.equals(arg0);
assertEquals(1048576L, gCInfo2_.getClsBytesAfter());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsMethodWithDifferentValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("pP9*?w:7\"");
GCInfo2 arg0 = new GCInfo2();
boolean equals = gCInfo2_.equals(arg0);
assertFalse(equals);
assertFalse(arg0.equals((Object)gCInfo2_));


** It was a parseable test case! 
refined test name is: testEqualsMethodWithDifferentProcessNames
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setPageFaults(100L);
long pageFaults = gCInfo2_.getPageFaults();
assertEquals(100L, pageFaults);


** It was a parseable test case! 
refined test name is: testSetAndGetPageFaults
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Class<Object> arg1 = Object.class;
QName arg2 = new QName((String) null, "duration");
Deserializer deserializer = GCInfo2.getDeserializer("h\"/B>Ux,", arg1, arg2);
assertEquals("Axis SAX Mechanism", deserializer.getMechanismType());


** It was a parseable test case! 
refined test name is: testGetDeserializerWithQNameAndClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setCpuTime(464);
GCInfo2 arg0 = new GCInfo2();
boolean equals = gCInfo2_.equals(arg0);
assertEquals(464, gCInfo2_.getCpuTime());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithDifferentCpuTimesReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: Class<Object> arg1 = Object.class;
QName arg2 = QName.valueOf("processname");
Serializer serializer = GCInfo2.getSerializer("SAPControl-RED", arg1, arg2);
assertEquals("Axis SAX Mechanism", serializer.getMechanismType());


** It was a parseable test case! 
refined test name is: testGetSerializerReturnsCorrectSerializer
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: TypeDesc typeDesc = GCInfo2.getTypeDesc();
assertFalse(typeDesc.hasAttributes());


** It was a parseable test case! 
refined test name is: testIfTypeDescHasNoAttributes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setObjBytesAfter(486L);
GCInfo2 arg0 = new GCInfo2();
boolean equals = gCInfo2_.equals(arg0);
assertEquals(486L, gCInfo2_.getObjBytesAfter());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsDifferentInstancesReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
boolean equals = gCInfo2_.equals((Object) null);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsNullObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 arg0 = new GCInfo2();
boolean equals = arg0.equals(arg0);
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualsSelf
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setProcessname("*|_tQod!~TgAJc8");
GCInfo2 arg0 = new GCInfo2("*|_tQod!~TgAJc8", "sKI[s3tIG", "sKI[s3tIG", "*|_tQod!~TgAJc8", (-1897), (-1897), 853L, 853L, 853L, (-1897), (-531L), (-410L), 853L, (-1897), (-1L), (STATECOLOR) null);
gCInfo2_.equals(arg0);
assertEquals(853L, arg0.getObjBytesBefore());
assertEquals((-1897), arg0.getUnloadedClasses());
assertEquals((-531L), arg0.getClsBytesAfter());
assertEquals((-1897), arg0.getDuration());
assertEquals((-1897), arg0.getCpuTime());
assertEquals("sKI[s3tIG", arg0.getReason());
assertEquals(853L, arg0.getHeapSize());
assertEquals("sKI[s3tIG", arg0.getType());
assertEquals("*|_tQod!~TgAJc8", arg0.getStartTime());
assertEquals((-1L), arg0.getPageFaults());
assertEquals((-1897L), arg0.getClsBytesBefore());
assertEquals((-410L), arg0.getClsBytesFreed());
assertEquals(853L, arg0.getObjBytesAfter());
assertEquals(853L, arg0.getObjBytesFreed());
assertEquals("*|_tQod!~TgAJc8", arg0.getProcessname());


** It was a parseable test case! 
refined test name is: testGettersAndSetters
* Compiling Tests
refined test name is: testGettersAndEquals
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 arg0 = new GCInfo2();
arg0.setProcessname(" ");
GCInfo2 gCInfo2_ = new GCInfo2();
boolean equals = gCInfo2_.equals(arg0);
assertFalse(arg0.equals((Object)gCInfo2_));
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testNotEqualsOnDifferentProcessNames
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType("Motorcycle");
GCInfo2 arg0 = new GCInfo2();
boolean equals = gCInfo2_.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsDifferentTypesReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
GCInfo2 arg0 = new GCInfo2();
boolean equals = gCInfo2_.equals(arg0);
assertFalse(equals);
assertFalse(arg0.equals((Object)gCInfo2_));


** It was a parseable test case! 
refined test name is: testEquals
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 arg0 = new GCInfo2();
arg0.setReason("ehwJl-1?jN\"?5y");
arg0.setType(".ZWH(B*(;NtQ5i0");
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setType(".ZWH(B*(;NtQ5i0");
boolean equals = gCInfo2_.equals(arg0);
assertFalse(arg0.equals((Object)gCInfo2_));
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsDifferentReasonAndTypeReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 arg0 = new GCInfo2();
assertTrue(arg0.equals((Object)gCInfo2_));

gCInfo2_.setStartTime("+^ij<i");
boolean equals = gCInfo2_.equals(arg0);
assertFalse(arg0.equals((Object)gCInfo2_));
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsMethodModifiedStartTimeNotEqual
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 arg0 = new GCInfo2();
arg0.setStartTime("badTime00");
GCInfo2 gCInfo2_ = new GCInfo2();
boolean equals = gCInfo2_.equals(arg0);
assertFalse(equals);
assertFalse(arg0.equals((Object)gCInfo2_));


** It was a parseable test case! 
refined test name is: testDifferentStartTimesAreNotEqual
* Compiling Tests
refined test name is: testNotEqualsWithDifferentStartTimes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 arg0 = new GCInfo2();
gCInfo2_.setStartTime("+^ij<i");
assertFalse(gCInfo2_.equals((Object)arg0));

arg0.setStartTime("+^ij<i");
boolean equals = gCInfo2_.equals(arg0);
assertTrue(arg0.equals((Object)gCInfo2_));
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualsWhenDifferentStartTimeReturnsFalse
* Compiling Tests
refined test name is: testEqualsWhenDifferentStartTimeReturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 arg0 = new GCInfo2();
arg0.setDuration(2146212195);
GCInfo2 gCInfo2_ = new GCInfo2();
boolean equals = gCInfo2_.equals(arg0);
assertEquals(2146212195, arg0.getDuration());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testGcInfoEqualsWithDifferentDurations
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setReason("ehwJl-1?jN\"?5y");
GCInfo2 arg0 = new GCInfo2();
arg0.setReason("ehwJl-1?jN\"?5y");
gCInfo2_.setObjBytesBefore(1518L);
boolean equals = gCInfo2_.equals(arg0);
assertEquals(1518L, gCInfo2_.getObjBytesBefore());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsDifferentReasonReturnsFalse
* Compiling Tests
refined test name is: testEqualsWithDifferentReasonFields
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 arg0 = new GCInfo2();
gCInfo2_.setObjBytesFreed((-2845L));
gCInfo2_.setStartTime("I:_,");
arg0.setStartTime("I:_,");
boolean equals = gCInfo2_.equals(arg0);
assertEquals((-2845L), gCInfo2_.getObjBytesFreed());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testShouldNotEqualWhenDifferentValuesForBytesFreed
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 arg0 = new GCInfo2();
arg0.setClsBytesBefore(1L);
boolean equals = gCInfo2_.equals(arg0);
assertEquals(1L, arg0.getClsBytesBefore());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsDifferentValuesForClsBytesBefore
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 arg0 = new GCInfo2();
GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.setClsBytesFreed((-1261L));
boolean equals = gCInfo2_.equals(arg0);
assertEquals((-1261L), gCInfo2_.getClsBytesFreed());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 arg0 = new GCInfo2();
arg0.setHeapSize(2148L);
boolean equals = gCInfo2_.equals(arg0);
assertEquals(2148L, arg0.getHeapSize());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testGcInfo2EqualsWhenHeapSizesAreEqual
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 arg0 = new GCInfo2();
arg0.setUnloadedClasses(1421);
boolean equals = gCInfo2_.equals(arg0);
assertEquals(1421, arg0.getUnloadedClasses());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithSameUnloadedClasses
* Compiling Tests
refined test name is: testEqualsEqualUnloadedClasses
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
GCInfo2 arg0 = new GCInfo2();
arg0.setPageFaults(1006L);
boolean equals = gCInfo2_.equals(arg0);
assertEquals(1006L, arg0.getPageFaults());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsAndHashCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
gCInfo2_.hashCode();
assertEquals(0, gCInfo2_.getUnloadedClasses());
assertEquals(0, gCInfo2_.getCpuTime());
assertEquals(0, gCInfo2_.getDuration());


** It was a parseable test case! 
refined test name is: testHashCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: STATECOLOR arg15 = new STATECOLOR("org.apache.log4j.Category");
GCInfo2 gCInfo2_ = new GCInfo2("org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", "org.apache.log4j.Category", 1, 1, 1, 1, 1, 0L, 1759L, 1, 255L, (-2232), (-1575L), arg15);
gCInfo2_.hashCode();
assertEquals(255L, gCInfo2_.getHeapSize());
assertEquals(0L, gCInfo2_.getClsBytesBefore());
assertEquals((-2232), gCInfo2_.getUnloadedClasses());
assertEquals(1L, gCInfo2_.getObjBytesFreed());
assertEquals(1L, gCInfo2_.getObjBytesBefore());
assertEquals(1, gCInfo2_.getDuration());
assertEquals(1L, gCInfo2_.getObjBytesAfter());
assertEquals(1759L, gCInfo2_.getClsBytesAfter());
assertEquals((-1575L), gCInfo2_.getPageFaults());
assertEquals(1, gCInfo2_.getCpuTime());
assertEquals(1L, gCInfo2_.getClsBytesFreed());


** It was a parseable test case! 
refined test name is: testGarbageCollectionInformation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
long clsBytesFreed = gCInfo2_.getClsBytesFreed();
assertEquals(0L, clsBytesFreed);


** It was a parseable test case! 
refined test name is: testGarbageCollector
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
long clsBytesBefore = gCInfo2_.getClsBytesBefore();
assertEquals(0L, clsBytesBefore);


** It was a parseable test case! 
refined test name is: testGcInfo2getClsBytesBefore
* Compiling Tests
refined test name is: testGarbageCollectorRun
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
int duration = gCInfo2_.getDuration();
assertEquals(0, duration);


** It was a parseable test case! 
refined test name is: testGetDurationdefaultValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
int unloadedClasses = gCInfo2_.getUnloadedClasses();
assertEquals(0, unloadedClasses);


** It was a parseable test case! 
refined test name is: testGetUnloadedClasses
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
String startTime = gCInfo2_.getStartTime();
assertNull(startTime);


** It was a parseable test case! 
refined test name is: testGetStartTimeWithEmptyField
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
long heapSize = gCInfo2_.getHeapSize();
assertEquals(0L, heapSize);


** It was a parseable test case! 
refined test name is: testGetHeapSizeReturnsZeroWhenNewInstanceCreated
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2("S8=.#0YM(s", "S8=.#0YM(s", "SCN%/^^;R", "", (-2145588251), (-977), (-2145588251), (-2145588251), (-4058L), (-2145588251), (-2145588251), 0L, 945L, (-977), 284L, (STATECOLOR) null);
long objBytesAfter = gCInfo2_.getObjBytesAfter();
assertEquals("SCN%/^^;R", gCInfo2_.getReason());
assertEquals("S8=.#0YM(s", gCInfo2_.getProcessname());
assertEquals(284L, gCInfo2_.getPageFaults());
assertEquals((-2145588251L), gCInfo2_.getClsBytesAfter());
assertEquals((-4058L), gCInfo2_.getObjBytesFreed());
assertEquals((-2145588251L), objBytesAfter);
assertEquals((-2145588251L), gCInfo2_.getObjBytesBefore());
assertEquals((-977), gCInfo2_.getCpuTime());
assertEquals(945L, gCInfo2_.getHeapSize());
assertEquals((-2145588251), gCInfo2_.getDuration());
assertEquals(0L, gCInfo2_.getClsBytesFreed());
assertEquals("", gCInfo2_.getStartTime());
assertEquals((-2145588251L), gCInfo2_.getClsBytesBefore());
assertEquals("S8=.#0YM(s", gCInfo2_.getType());
assertEquals((-977), gCInfo2_.getUnloadedClasses());


** It was a parseable test case! 
refined test name is: testGetObjBytesAfter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: GCInfo2 gCInfo2_ = new GCInfo2();
String processname = gCInfo2_.getProcessname();
assertNull(processname);


