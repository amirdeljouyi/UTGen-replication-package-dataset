* EvoSuite 1.2.0
* WARNING - Generating JUnit 5 tests with the option to use a separate classloader will result in not runnable tests. Set either -Dtest_format=JUNIT4 or -Duse_separate_classloader=false
* Going to generate test cases for class: wheel.asm.ClassReader
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-ES-res/80_wheelwebtool/evosuite-files/evosuite.properties
* Connecting to master process on port 14350
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 12:31:18.404 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 12:31:18.407 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 12:31:18.407 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 12:31:18.417 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 12:31:18.417 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 12:31:18.418 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 12:31:18.418 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 12:31:18.419 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 12:31:18.419 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 12:31:18.420 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 12:31:18.421 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 12:31:18.422 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 12:31:18.423 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 12:31:18.438 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 12:31:18.439 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class wheel.asm.ClassReader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2563
* Using seed 1709814674238
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 240 / 2563
[Progress:>                             0%] [Cov:====>                              13%][Progress:=>                            6%] [Cov:====>                              13%][Progress:=>                            6%] [Cov:=========>                         26%][Progress:=>                            6%] [Cov:=============>                     38%][Progress:===>                          12%] [Cov:==============>                    41%][Progress:===>                          12%] [Cov:===============>                   43%][Progress:===>                          12%] [Cov:===============>                   43%][Progress:===>                          13%] [Cov:===============>                   44%][Progress:===>                          13%] [Cov:===============>                   44%][Progress:====>                         14%] [Cov:=================>                 49%][Progress:====>                         15%] [Cov:=================>                 51%][Progress:=====>                        18%] [Cov:=================>                 51%][Progress:======>                       20%] [Cov:===================>               57%][Progress:======>                       20%] [Cov:===================>               57%][Progress:======>                       21%] [Cov:===================>               57%][Progress:======>                       23%] [Cov:===================>               57%][Progress:=======>                      26%] [Cov:====================>              58%][Progress:========>                     29%] [Cov:====================>              58%][Progress:===========>                  38%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              59%][Progress:=============>                46%] [Cov:====================>              59%][Progress:==============>               48%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:====================>              59%][Progress:===============>              52%] [Cov:====================>              59%][Progress:===============>              53%] [Cov:====================>              59%][Progress:================>             54%] [Cov:====================>              59%][Progress:================>             55%] [Cov:=====================>             60%][Progress:=================>            57%] [Cov:=====================>             60%][Progress:=================>            58%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:===================>          64%] [Cov:=====================>             61%][Progress:===================>          66%] [Cov:=====================>             61%][Progress:====================>         67%] [Cov:=====================>             61%][Progress:====================>         69%] [Cov:=====================>             61%][Progress:=====================>        71%] [Cov:=====================>             61%][Progress:=====================>        73%] [Cov:=====================>             61%][Progress:======================>       75%] [Cov:=====================>             62%][Progress:======================>       76%] [Cov:=====================>             62%][Progress:=======================>      77%] [Cov:=====================>             62%][Progress:=======================>      79%] [Cov:=====================>             62%][Progress:========================>     80%] [Cov:=====================>             62%][Progress:========================>     82%] [Cov:=====================>             62%][Progress:=========================>    84%] [Cov:=====================>             62%][Progress:=========================>    86%] [Cov:=====================>             62%][Progress:=========================>    86%] [Cov:=====================>             62%][Progress:==========================>   88%] [Cov:=====================>             62%][Progress:==========================>   88%] [Cov:=====================>             62%][Progress:===========================>  90%] [Cov:=====================>             62%][Progress:===========================>  91%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  92%] [Cov:=====================>             62%][Progress:===========================>  93%] [Cov:=====================>             62%][Progress:============================> 94%] [Cov:=====================>             62%][Progress:============================> 95%] [Cov:=====================>             62%][Progress:=============================>97%] [Cov:======================>            63%][Progress:=============================>97%] [Cov:======================>            63%][Progress:=============================>98%] [Cov:======================>            63%][Progress:==============================100%] [Cov:======================>            63%]
* Search finished after 109s and 58 generations, 22625 statements, best individual has fitness: 1138.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 53%
* Total number of goals: 817
* Number of covered goals: 432
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 64%
* Total number of goals: 868
* Number of covered goals: 555
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 40
* Number of covered goals: 20
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 50%
* Total number of goals: 817
* Number of covered goals: 407
* Generated 40 tests with total length 103
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 31%
* Compiling and checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'ClassReader_ESTest' to evosuite-tests
* Done!

* Computation finished
