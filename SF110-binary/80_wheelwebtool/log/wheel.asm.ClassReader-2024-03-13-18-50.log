* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: wheel.asm.ClassReader
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/80_wheelwebtool/evosuite-files/evosuite.properties
* Connecting to master process on port 13836
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:50:59.829 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:50:59.835 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:50:59.836 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:50:59.859 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 18:50:59.860 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 18:50:59.862 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 18:50:59.862 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 18:50:59.864 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 18:50:59.864 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 18:50:59.865 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 18:50:59.869 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 18:50:59.870 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 18:50:59.872 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 18:50:59.947 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 18:50:59.949 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class wheel.asm.ClassReader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2563
* Using seed 1710355852306
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 240 / 2563
[Progress:>                             0%] [Cov:=>                                 3%][MASTER] 18:51:03.119 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 13 TABLESWITCH L174 Case 12 - false
[MASTER] 18:51:03.119 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 13 TABLESWITCH L174 Case 12 - true
[MASTER] 18:51:03.123 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 9 TABLESWITCH L174 Case 8 - false
[MASTER] 18:51:03.124 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 11 TABLESWITCH L174 Case 10 - true
[MASTER] 18:51:03.124 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 11 TABLESWITCH L174 Case 10 - false
[MASTER] 18:51:03.126 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 6 TABLESWITCH L174 Case 5 - false
[MASTER] 18:51:03.127 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 8 TABLESWITCH L174 Case 7 - false
[MASTER] 18:51:03.127 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 8 TABLESWITCH L174 Case 7 - true
[MASTER] 18:51:03.128 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I95 Branch 15 IF_ICMPLE L190 - true
[MASTER] 18:51:03.128 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I95 Branch 15 IF_ICMPLE L190 - false
[MASTER] 18:51:03.129 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 2 TABLESWITCH L174 Case 1 - false
[MASTER] 18:51:03.130 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 4 TABLESWITCH L174 Case 3 - false
[MASTER] 18:51:03.131 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 2 TABLESWITCH L174 Case 1 - true
[MASTER] 18:51:03.132 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 14 TABLESWITCH L174 Default-Case - false
[MASTER] 18:51:03.134 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 10 TABLESWITCH L174 Case 9 - true
[MASTER] 18:51:03.134 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 10 TABLESWITCH L174 Case 9 - false
[MASTER] 18:51:03.135 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 12 TABLESWITCH L174 Case 11 - false
[MASTER] 18:51:03.136 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 5 TABLESWITCH L174 Case 4 - false
[MASTER] 18:51:03.138 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 7 TABLESWITCH L174 Case 6 - false
[MASTER] 18:51:03.141 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was wheel.asm.ClassReader.<init>([BII)V: I63 Branch 3 TABLESWITCH L174 Case 2 - false
[Progress:>                             1%] [Cov:=>                                 5%][Progress:>                             1%] [Cov:===>                               10%][Progress:>                             2%] [Cov:===========>                       32%][Progress:>                             3%] [Cov:==============>                    41%][Progress:=>                            4%] [Cov:===============>                   43%][Progress:=>                            5%] [Cov:================>                  46%][Progress:=>                            6%] [Cov:================>                  47%][Progress:=>                            6%] [Cov:================>                  47%][Progress:==>                           7%] [Cov:==================>                53%][Progress:==>                           8%] [Cov:==================>                53%][Progress:==>                           8%] [Cov:==================>                54%][Progress:==>                           9%] [Cov:===================>               55%][Progress:====>                         14%] [Cov:===================>               56%][Progress:=====>                        18%] [Cov:====================>              59%][Progress:======>                       23%] [Cov:====================>              59%][Progress:=======>                      25%] [Cov:====================>              59%][Progress:=========>                    30%] [Cov:====================>              59%][Progress:==========>                   35%] [Cov:====================>              59%][Progress:===========>                  39%] [Cov:=====================>             60%][Progress:============>                 41%] [Cov:=====================>             61%][Progress:============>                 42%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:==============>               47%] [Cov:=====================>             61%][Progress:================>             54%] [Cov:=====================>             61%][Progress:==================>           62%] [Cov:=====================>             62%][Progress:===================>          64%] [Cov:=====================>             62%][Progress:===================>          65%] [Cov:=====================>             62%][Progress:====================>         69%] [Cov:=====================>             62%][Progress:=====================>        72%] [Cov:=====================>             62%][Progress:=========================>    84%] [Cov:=====================>             62%][Progress:===========================>  90%] [Cov:=====================>             62%][Progress:============================> 94%] [Cov:=====================>             62%][Progress:=============================>99%] [Cov:======================>            63%][Progress:==============================100%] [Cov:======================>            63%]
* Search finished after 202s and 34 generations, 15729 statements, best individual has fitness: 1171.0
* Generated before the refinement 41 tests with total length 103
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, (-1416))
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, (-1416));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 10000);
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 10000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 10000) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(15)
statement is: accept(Lwheel/asm/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 2)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassWriter classWriter = new ClassWriter(15);
classReader.accept((ClassVisitor) classWriter, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        int numberOfFiles = 10;
        String[] fileNames = new String[]{ "file1", "file2", "file3", "file4", "file5" };
        String directoryPath = "/path/to/directory";
        for (int i = 0; i < numberOfFiles; i++) {
            File file = new File((directoryPath + "/") + fileNames[i]);
            // Check if the file is a directory and if it has read permissions.
            if (file.isDirectory() && file.canRead()) {
                classReader.accept(((ClassVisitor) (classWriter)), 2);
            }
        }
        // Improved test data:
        int[] numbers = new int[]{ 1, 2, 3, 4, 5 };
        String[] strings = new String[]{ "hello", "world", "goodbye", "cruel", "world" };
        double[] doubles = new double[]{ 1.0, 2.0, 3.0, 4.0, 5.0 };
        char[] chars = new char[]{ 'a', 'b', 'c', 'd', 'e' };
        for (int i = 0; i < numbers.length; i++) {
            int number = numbers[i];
            String string = strings[i];
            double doubleValue = doubles[i];
            char character = chars[i];
        }
        // Use the improved test data to test the functionality of the code. }}
    }
}
statement is: // Improved test data:
int numberOfFiles = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] fileNames = new String[]{ "file1", "file2", "file3", "file4", "file5" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String directoryPath = "/path/to/directory", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: for (int i = 0; i < numberOfFiles; i++) {
    File file = new File((directoryPath + "/") + fileNames[i]);
    // Check if the file is a directory and if it has read permissions.
    if (file.isDirectory() && file.canRead()) {
        classReader.accept(((ClassVisitor) (classWriter)), 2);
    }
}, class spoon.support.reflect.code.CtForImpl
statement is: // Improved test data:
int[] numbers = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] strings = new String[]{ "hello", "world", "goodbye", "cruel", "world" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] doubles = new double[]{ 1.0, 2.0, 3.0, 4.0, 5.0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] chars = new char[]{ 'a', 'b', 'c', 'd', 'e' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: for (int i = 0; i < numbers.length; i++) {
    int number = numbers[i];
    String string = strings[i];
    double doubleValue = doubles[i];
    char character = chars[i];
}, class spoon.support.reflect.code.CtForImpl
statement is: // Use the improved test data to test the functionality of the code. }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "/path/to/directory"
TestCase is: int _int = 10;
String string = "/path/to/directory";

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/Object")
statement is: getAccess()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access = classReader.getAccess()
test data is: ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getAccess();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getAccess();
    }
}
statement is: classReader.getAccess(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getAccess() target is: classReader method is: getAccess()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: getItem(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int item = classReader.getItem(70)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.getItem(70);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getItem(95);
    }
}
statement is: classReader.getItem(95), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getItem(95) target is: classReader method is: getItem(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: readByte(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readByte = classReader.readByte(303)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readByte(303);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        ClassReader classReader = new ClassReader("com.example.ClassName");
        classReader.readByte(1234567890);
    }
}
statement is: // Improved test data:
ClassReader classReader = new ClassReader("com.example.ClassName"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.readByte(1234567890), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readByte(1234567890) target is: classReader method is: readByte(int)
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 1
Matched Method is: readByte(I)I
TestCase is: String string = "com.example.ClassName";
ClassReader classReader = new ClassReader(string);
int _int = 1234567890;
((ClassReader) string).readByte(_int);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter")
statement is: getClassName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String className = classReader.getClassName()
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.getClassName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter")
statement is: wheel.asm.ClassReader([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(classReader.b, 166, (-2501))
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassReader classReader = new ClassReader(classReader.b, 166, (-2501));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter")
statement is: getSuperName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superName = classReader.getSuperName()
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
classReader.getSuperName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getSuperName();
        // Improved test data
        // Replace the primitive values with more descriptive examples
        int age = 30;// Replace this with a more descriptive value, such as "age = 35" or "age = 42"

        double height = 1.7;// Replace this with a more descriptive value, such as "height = 1.80" or "height = 1.90"

        String name = "John Doe";// Replace this with a more descriptive value, such as "name = 'Jane Doe'" or "name = 'Bob Smith'"

        char initial = 'A';// Replace this with a more descriptive value, such as "initial = 'J'" or "initial = 'B'"

        // Use the improved test data to test the code
        assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", classReader.getSuperName());
    }
}
statement is: classReader.getSuperName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getSuperName() target is: classReader method is: getSuperName()
statement is: // Improved test data
// Replace the primitive values with more descriptive examples
int age = 30// Replace this with a more descriptive value, such as "age = 35" or "age = 42"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double height = 1.7// Replace this with a more descriptive value, such as "height = 1.80" or "height = 1.90"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe"// Replace this with a more descriptive value, such as "name = 'Jane Doe'" or "name = 'Bob Smith'"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char initial = 'A'// Replace this with a more descriptive value, such as "initial = 'J'" or "initial = 'B'"
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Use the improved test data to test the code
assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", classReader.getSuperName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Use the improved test data to test the code
assertEquals("org.apache.commons.io.filefilter.HiddenFileFilter", classReader.getSuperName()) target is:  method is: assertEquals(java.lang.String,<unknown>)
* this is vulnerable: int _int = 30
* this is vulnerable: double _double = 1.7
* this is vulnerable: String string = "John Doe"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 30;
double _double = 1.7;
String string = "John Doe";
char _char = 'A';

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/Object")
statement is: getSuperName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superName = classReader.getSuperName()
test data is: ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getSuperName();
    }
}
statement is: classReader.getSuperName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getSuperName() target is: classReader method is: getSuperName()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter")
statement is: getInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] interfaces = classReader.getInterfaces()
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.getInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getInterfaces();
    }
}
statement is: classReader.getInterfaces(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getInterfaces() target is: classReader method is: getInterfaces()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter")
statement is: getInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] interfaces = classReader.getInterfaces()
test data is: ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
classReader.getInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getInterfaces();
    }
}
statement is: classReader.getInterfaces(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getInterfaces() target is: classReader method is: getInterfaces()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1743)
statement is: copyPool(Lwheel/asm/ClassWriter;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.copyPool(arg0)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
ClassWriter classWriter = new ClassWriter(1743);
classReader.copyPool(classWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.copyPool(classWriter);
        // Improved test data
        int[] integers = new int[]{ 1, 2, 3, 4, 5 };
        double[] doubles = new double[]{ 1.0, 2.0, 3.0, 4.0, 5.0 };
        String[] strings = new String[]{ "apple", "banana", "cherry" };
        char[] chars = new char[]{ 'a', 'b', 'c' };
        // Test data with improved values
        classReader.copyPool(classWriter);
        classReader.copyPool(classWriter, integers);
        classReader.copyPool(classWriter, doubles);
        classReader.copyPool(classWriter, strings);
        classReader.copyPool(classWriter, chars);
    }
}
statement is: classReader.copyPool(classWriter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.copyPool(classWriter) target is: classReader method is: copyPool()
statement is: // Improved test data
int[] integers = new int[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] doubles = new double[]{ 1.0, 2.0, 3.0, 4.0, 5.0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] strings = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] chars = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: // Test data with improved values
classReader.copyPool(classWriter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Test data with improved values
classReader.copyPool(classWriter) target is: classReader method is: copyPool()
statement is: classReader.copyPool(classWriter, integers), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.copyPool(classWriter, integers) target is: classReader method is: copyPool(int[])
statement is: classReader.copyPool(classWriter, doubles), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.copyPool(classWriter, doubles) target is: classReader method is: copyPool(double[])
statement is: classReader.copyPool(classWriter, strings), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.copyPool(classWriter, strings) target is: classReader method is: copyPool(java.lang.String[])
statement is: classReader.copyPool(classWriter, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.copyPool(classWriter, chars) target is: classReader method is: copyPool(char[])
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("}")
test data is: ClassReader classReader = new ClassReader("}");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int myInt = 1234;
        double myDouble = 3.14;
        String myString = "hello world";
    }
}
statement is: int myInt = 1234, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double myDouble = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String myString = "hello world", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1234
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello world"
TestCase is: int _int = 1234;
double _double = 3.14;
String string = "hello world";

statement is: mock(java.util.Enumeration<java.io.InputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.InputStream>
statement code is: Enumeration<InputStream> enumeration = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: wheel.asm.ClassReader(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
test data is: Enumeration<InputStream> enumeration = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
ClassReader classReader = new ClassReader(sequenceInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<InputStream> enumeration = ((Enumeration<InputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer())));
        doReturn(false).when(enumeration).hasMoreElements();
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
    }
}
statement is: Enumeration<InputStream> enumeration = ((Enumeration<InputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: ((Enumeration<InputStream>) (mock(Enumeration.class, new ViolatedAssumptionAnswer()))) target is:  method is: mock(java.lang.Class,<unknown>)
target name is: Enumeration argument is: Enumeration.class
Matched Method is: mock(java.util.Enumeration<java.io.InputStream>)
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: doReturn(false).when(enumeration).hasMoreElements(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: doReturn(false).when(enumeration).hasMoreElements() target is: doReturn(false).when(enumeration) method is: hasMoreElements()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: boolean _boolean = null;
Enumeration<InputStream> enumeration = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(_boolean).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
test data is: ClassReader classReader = new ClassReader("java/lang/String");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/Object")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 1)
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 2)
test data is: ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 1);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 2);
        // Modified test data to include a more descriptive and representative String value
        String testString = "Hello, World!";
        assertEquals("Incorrect string length", 13, testString.length());
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 2) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: // Modified test data to include a more descriptive and representative String value
String testString = "Hello, World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: assertEquals("Incorrect string length", 13, testString.length()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("Incorrect string length", 13, testString.length()) target is:  method is: assertEquals(java.lang.String,int,int)
* this is vulnerable: String string = "Hello, World!"
TestCase is: String string = "Hello, World!";

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(4)
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(4);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 1);
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 1) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 4)
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 4)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(classReader, 4);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 4);// An array of attributes associated with the class, or null if there are none }}

    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 4)// An array of attributes associated with the class, or null if there are none }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 4)// An array of attributes associated with the class, or null if there are none }}
 target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(70)
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 2)
statement is: org.evosuite.testcase.statements.ArrayStatement@fadd588c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[2]
statement is: readClass(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readClass = classReader.readClass(224, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(70);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 2);
char[] charArray = new char[2];
classReader.readClass(224, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 2);
        char[] charArray = new char[5];
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 2) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: char[] charArray = new char[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: char[] charArray = new char[2] isAssignment: false Array: new char[5] Elements: []
lengths: [2] [5]
Their type are: class [C char[]
TestCase is: char[] charArray = new char[2];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3463))
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 12)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter((-3463));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 12);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 12);
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 12), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 12) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter")
statement is: org.evosuite.testcase.statements.ArrayStatement@12bb0e38 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[9]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(6, arg1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
char[] charArray = new char[9];
classReader.readConst(6, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[9];
        classReader.readConst(6, charArray);
        // Improved test data
        classReader.readConst(10, charArray);// 10 is a more descriptive value for the constant integer

        classReader.readConst("Hello", charArray);// "Hello" is a more illustrative String value }}

    }
}
statement is: char[] charArray = new char[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: char[] charArray = new char[9] isAssignment: false Array: new char[9] Elements: []
lengths: [9] [9]
Their type are: class [C char[]
statement is: classReader.readConst(6, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(6, charArray) target is: classReader method is: readConst(int,char[])
statement is: // Improved test data
classReader.readConst(10, charArray)// 10 is a more descriptive value for the constant integer
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
classReader.readConst(10, charArray)// 10 is a more descriptive value for the constant integer
 target is: classReader method is: readConst(int,char[])
statement is: classReader.readConst("Hello", charArray)// "Hello" is a more illustrative String value }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst("Hello", charArray)// "Hello" is a more illustrative String value }}
 target is: classReader method is: readConst(java.lang.String,char[])
TestCase is: char[] charArray = new char[9];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@17ab2b78 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[9]
statement is: readUTF8(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readUTF8 = classReader.readUTF8(4, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[9];
classReader.readUTF8(4, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClassReader classReader = new ClassReader("com.example.MyClass");
        char[] charArray = new char[9];
        classReader.readUTF8(4, charArray);
    }
}
statement is: // Improved test data
ClassReader classReader = new ClassReader("com.example.MyClass"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: char[] charArray = new char[9] isAssignment: false Array: new char[9] Elements: []
lengths: [9] [9]
Their type are: class [C char[]
statement is: classReader.readUTF8(4, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(4, charArray) target is: classReader method is: readUTF8(int,char[])
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 1
Matched Method is: readUTF8(I[C)Ljava/lang/String;
TestCase is: String string = "com.example.MyClass";
ClassReader classReader = new ClassReader(string);
char[] charArray = new char[9];
int _int = 4;
((ClassReader) string).readUTF8(_int, charArray);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@1316a819 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[9]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(13, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[9];
classReader.readConst(13, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[10];
        classReader.readConst(23, charArray);
    }
}
statement is: char[] charArray = new char[10], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: char[] charArray = new char[9] isAssignment: false Array: new char[10] Elements: []
lengths: [9] [10]
Their type are: class [C char[]
statement is: classReader.readConst(23, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(23, charArray) target is: classReader method is: readConst(int,char[])
TestCase is: char[] charArray = new char[9];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@9240f61a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[10]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(46, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[10];
classReader.readConst(46, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[10];
        classReader.readConst(46, charArray);
        // Improved test data
        charArray = "Hello World!".toCharArray();
    }
}
statement is: char[] charArray = new char[10], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: char[] charArray = new char[10] isAssignment: false Array: new char[10] Elements: []
lengths: [10] [10]
Their type are: class [C char[]
statement is: classReader.readConst(46, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(46, charArray) target is: classReader method is: readConst(int,char[])
statement is: // Improved test data
charArray = "Hello World!".toCharArray(), class spoon.support.reflect.code.CtAssignmentImpl
TestCase is: char[] charArray = new char[10];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(8)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readShort(8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readShort(16);
    }
}
statement is: classReader.readShort(16), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readShort(16) target is: classReader method is: readShort(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: readLong(I)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long readLong = classReader.readLong(258)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readLong(258);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readLong(100);
    }
}
statement is: classReader.readLong(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLong(100) target is: classReader method is: readLong(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: readInt(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = classReader.readInt(70)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readInt(70);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt(100);
    }
}
statement is: classReader.readInt(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(100) target is: classReader method is: readInt(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@5093739a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[2]
statement is: readClass(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readClass = classReader.readClass(224, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[2];
classReader.readClass(224, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[100];
    }
}
statement is: char[] charArray = new char[100], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [100] Ct is: char[] charArray = new char[2] isAssignment: false Array: new char[100] Elements: []
lengths: [2] [100]
Their type are: class [C char[]
TestCase is: char[] charArray = new char[2];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, (-1039))
statement is: org.evosuite.testcase.statements.ArrayStatement@fa5e7aca type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[8]
statement is: readUTF8(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readUTF8 = classReader.readUTF8(21, arg1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, (-1039));
char[] charArray = new char[8];
classReader.readUTF8(21, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
        ClassWriter classWriter = new ClassWriter(classReader, -1039);
        char[] charArray = new char[8];
        classReader.readUTF8(21, charArray);
        // Original test data:
        ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
        ClassWriter classWriter = new ClassWriter(classReader, 0);
        char[] charArray = new char[8];
        classReader.readUTF8(21, charArray);
    }
}
statement is: // Improved test data:
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClassWriter classWriter = new ClassWriter(classReader, -1039), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: char[] charArray = new char[8] isAssignment: false Array: new char[8] Elements: []
lengths: [8] [8]
Their type are: class [C char[]
statement is: classReader.readUTF8(21, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(21, charArray) target is: classReader method is: readUTF8(int,char[])
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 1
Matched Method is: readUTF8(I[C)Ljava/lang/String;
statement is: // Original test data:
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClassWriter classWriter = new ClassWriter(classReader, 0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: char[] charArray = new char[8] isAssignment: false Array: new char[8] Elements: []
lengths: [8] [8]
Their type are: class [C char[]
statement is: classReader.readUTF8(21, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(21, charArray) target is: classReader method is: readUTF8(int,char[])
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 7
Matched Method is: readUTF8(I[C)Ljava/lang/String;
TestCase is: String string = "org.apache.commons.io.filefilter.CanReadFileFilter";
ClassReader classReader = new ClassReader(string);
ClassWriter classWriter = new ClassWriter(classReader, (-1039));
char[] charArray = new char[8];
int _int = 21;
((ClassReader) string).readUTF8(_int, charArray);
String string = "org.apache.commons.io.filefilter.CanReadFileFilter";
ClassReader classReader = new ClassReader(string);
int _int = 0;
ClassWriter classWriter = new ClassWriter(classReader, _int);
char[] charArray = new char[8];
int _int = 21;
((ClassReader) string).readUTF8(_int, charArray);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Double
statement code is: Double readConst = (Double)classReader.readConst(8, (char[]) null)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readConst(8, (char[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readConst(10, "This is a string value.");
    }
}
statement is: classReader.readConst(10, "This is a string value."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(10, "This is a string value.") target is: classReader method is: readConst(int,java.lang.String)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/Object")
statement is: org.evosuite.testcase.statements.ArrayStatement@8708223a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[0]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Integer
statement code is: Integer readConst = (Integer)classReader.readConst(13, arg1)
test data is: ClassReader classReader = new ClassReader("java/lang/Object");
char[] charArray = new char[0];
classReader.readConst(13, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[]{ 'H', 'e', 'l', 'l', 'o' };
        classReader.readConst(13, charArray);
    }
}
statement is: char[] charArray = new char[]{ 'H', 'e', 'l', 'l', 'o' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[0] isAssignment: false Array: new char[]{ 'H', 'e', 'l', 'l', 'o' } Elements: ['H', 'e', 'l', 'l', 'o']
lengths: [0] []
statement is: classReader.readConst(13, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(13, charArray) target is: classReader method is: readConst(int,char[])
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter")
statement is: readByte(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readByte = classReader.readByte(11)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readByte(11);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readByte(9);// Changed the value from 11 to 9 to make it more descriptive and representative of the situation being tested. }}

    }
}
statement is: classReader.readByte(9)// Changed the value from 11 to 9 to make it more descriptive and representative of the situation being tested. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readByte(9)// Changed the value from 11 to 9 to make it more descriptive and representative of the situation being tested. }}
 target is: classReader method is: readByte(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 883)
statement is: org.evosuite.testcase.statements.ArrayStatement@f10edabe type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[3]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readConst = (String)classReader.readConst(26, arg1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 883);
char[] charArray = new char[3];
classReader.readConst(26, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[5];
        classReader.readConst(26, charArray);
    }
}
statement is: char[] charArray = new char[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: char[] charArray = new char[3] isAssignment: false Array: new char[5] Elements: []
lengths: [3] [5]
Their type are: class [C char[]
statement is: classReader.readConst(26, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(26, charArray) target is: classReader method is: readConst(int,char[])
TestCase is: char[] charArray = new char[3];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter")
statement is: readInt(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = classReader.readInt(1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
classReader.readInt(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt(Integer.MAX_VALUE);
    }
}
statement is: classReader.readInt(Integer.MAX_VALUE), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(Integer.MAX_VALUE) target is: classReader method is: readInt(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter")
statement is: org.evosuite.testcase.statements.ArrayStatement@1cd25767 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Label;
statement code is: Label[] labelArray = new Label[1]
statement is: readLabel(I[Lwheel/asm/Label;)Lwheel/asm/Label; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Label
statement code is: Label readLabel = classReader.readLabel(0, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
Label[] labelArray = new Label[1];
classReader.readLabel(0, labelArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label[] labelArray = new Label[1];
        labelArray[0] = new Label("L1");
        classReader.readLabel(2, labelArray);
    }
}
statement is: Label[] labelArray = new Label[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: Label[] labelArray = new Label[1] isAssignment: false Array: new Label[1] Elements: []
lengths: [1] [1]
Their type are: class [Lwheel.asm.Label; Label[]
statement is: labelArray[0] = new Label("L1"), class spoon.support.reflect.code.CtAssignmentImpl
Assigned : labelArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl null Assignment:new Label("L1") Ct is: labelArray[0] = new Label("L1")
target : labelArray class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readLabel(2, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLabel(2, labelArray) target is: classReader method is: readLabel(int,Label[])
TestCase is: Label[] labelArray = new Label[1];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter")
statement is: readLong(I)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long readLong = classReader.readLong(8)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
classReader.readLong(8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readLong(1234567890);
    }
}
statement is: classReader.readLong(1234567890), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLong(1234567890) target is: classReader method is: readLong(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(2)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readShort(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readShort(42);// Changed to a more descriptive value for the test case }}

    }
}
statement is: classReader.readShort(42)// Changed to a more descriptive value for the test case }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readShort(42)// Changed to a more descriptive value for the test case }}
 target is: classReader method is: readShort(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(4)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.readShort(4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readShort(42);
    }
}
statement is: classReader.readShort(42), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readShort(42) target is: classReader method is: readShort(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter")
statement is: readUnsignedShort(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readUnsignedShort = classReader.readUnsignedShort(440)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readUnsignedShort(440);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readUnsignedShort(440);// This line reads a 2-byte unsigned short value from the file at offset 440 in the class file format. }}

    }
}
statement is: classReader.readUnsignedShort(440)// This line reads a 2-byte unsigned short value from the file at offset 440 in the class file format. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUnsignedShort(440)// This line reads a 2-byte unsigned short value from the file at offset 440 in the class file format. }}
 target is: classReader method is: readUnsignedShort(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter")
statement is: readUnsignedShort(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readUnsignedShort = classReader.readUnsignedShort(1065)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readUnsignedShort(1065);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readUnsignedShort(1065);
        // Improved test data:
        ClassReader classReader = new ClassReader("com.example.mypackage.MyClass");
        classReader.readUnsignedShort(3456);
    }
}
statement is: classReader.readUnsignedShort(1065), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUnsignedShort(1065) target is: classReader method is: readUnsignedShort(int)
statement is: // Improved test data:
ClassReader classReader = new ClassReader("com.example.mypackage.MyClass"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.readUnsignedShort(3456), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUnsignedShort(3456) target is: classReader method is: readUnsignedShort(int)
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 1
Matched Method is: readUnsignedShort(I)I
TestCase is: String string = "com.example.mypackage.MyClass";
ClassReader classReader = new ClassReader(string);
int _int = 3456;
((ClassReader) string).readUnsignedShort(_int);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter")
statement is: wheel.asm.ClassReader([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(classReader.b)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassReader classReader = new ClassReader(classReader.b);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String filePath = "path/to/file";
        boolean expectedResult = true;// assuming the file exists and is readable by the current user }}

    }
}
statement is: String filePath = "path/to/file", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean expectedResult = true// assuming the file exists and is readable by the current user }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "path/to/file"
* this is vulnerable: boolean _boolean = true
TestCase is: String string = "path/to/file";
boolean _boolean = true;

* test suite isTestSuite: 58
Test 0: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, (-1416));
Test 1: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassWriter classWriter = new ClassWriter(15);
classReader.accept((ClassVisitor) classWriter, 2);
Test 2: 
ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getAccess();
Test 3: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.getItem(70);
Test 4: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readByte(303);
Test 5: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.getClassName();
Test 6: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 166, (-2501));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 7: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
classReader.getSuperName();
Test 8: 
ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();
Test 9: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.getInterfaces();
Test 10: 
ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
classReader.getInterfaces();
Test 11: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
ClassWriter classWriter = new ClassWriter(1743);
classReader.copyPool(classWriter);
Test 12: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("}");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("wheel.asm.ClassReader", e);
}

Test 13: 
Enumeration<InputStream> enumeration = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
ClassReader classReader = null;
try {
  classReader = new ClassReader(sequenceInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("java/lang/String");
Test 15: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 1);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 2);
Test 16: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(4);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);
Test 17: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(classReader, 4);
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 4);
Test 18: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(70);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 2);
char[] charArray = new char[2];
classReader.readClass(224, charArray);
Test 19: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter((-3463));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 12);
Test 20: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
char[] charArray = new char[9];
// Undeclared exception!
try { 
  classReader.readConst(6, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[9];
// Undeclared exception!
try { 
  classReader.readUTF8(4, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 22: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[9];
// Undeclared exception!
try { 
  classReader.readConst(13, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 23: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[10];
// Undeclared exception!
try { 
  classReader.readConst(46, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 24: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readShort(8);
Test 25: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readLong(258);
Test 26: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readInt(70);
Test 27: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[2];
// Undeclared exception!
try { 
  classReader.readClass(224, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 28: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, (-1039));
char[] charArray = new char[8];
classReader.readUTF8(21, charArray);
Test 29: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readConst(8, (char[]) null);
Test 30: 
ClassReader classReader = new ClassReader("java/lang/Object");
char[] charArray = new char[0];
classReader.readConst(13, charArray);
Test 31: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readByte(11);
Test 32: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 883);
char[] charArray = new char[3];
classReader.readConst(26, charArray);
Test 33: 
ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
classReader.readInt(1);
Test 34: 
ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
Label[] labelArray = new Label[1];
classReader.readLabel(0, labelArray);
Test 35: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
classReader.readLong(8);
Test 36: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readShort(2);
Test 37: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.readShort(4);
Test 38: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readUnsignedShort(440);
Test 39: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readUnsignedShort(1065);
Test 40: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassReader classReader = new ClassReader(classReader.b);
Test 41: 

Test 42: 
String string = "com.example.ClassName";
ClassReader classReader = new ClassReader("com.example.ClassName");
int _int = 1234567890;
((ClassReader) string).readByte(_int);

Test 43: 

Test 44: 

Test 45: 
Enumeration<InputStream> enumeration = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);

Test 46: 

Test 47: 
char[] charArray = new char[2];

Test 48: 
char[] charArray = new char[9];

Test 49: 
String string = "com.example.MyClass";
ClassReader classReader = new ClassReader("com.example.MyClass");
char[] charArray = new char[9];
int _int = 4;
((ClassReader) string).readUTF8(_int, charArray);

Test 50: 
char[] charArray = new char[9];

Test 51: 
char[] charArray = new char[10];

Test 52: 
char[] charArray = new char[2];

Test 53: 
String string = "org.apache.commons.io.filefilter.CanReadFileFilter";
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, (-1039));
char[] charArray = new char[8];
((ClassReader)"org.apache.commons.io.filefilter.CanReadFileFilter").readUTF8(21, charArray);
String string = "org.apache.commons.io.filefilter.CanReadFileFilter";
ClassReader classReader = new ClassReader(string);
int _int = 0;
ClassWriter classWriter = new ClassWriter(classReader, _int);
char[] charArray = new char[8];
int _int = 21;
((ClassReader) string).readUTF8(_int, charArray);

Test 54: 
char[] charArray = new char[3];

Test 55: 
Label[] labelArray = new Label[1];

Test 56: 
String string = "com.example.mypackage.MyClass";
ClassReader classReader = new ClassReader("com.example.mypackage.MyClass");
int _int = 3456;
((ClassReader) string).readUnsignedShort(_int);

Test 57: 


* Generated after the refinement and before minimization 58 tests with total length 137
* test suite isTestSuite: 58
Test 0: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, (-1416));
Test 1: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassWriter classWriter = new ClassWriter(15);
classReader.accept((ClassVisitor) classWriter, 2);
Test 2: 
ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getAccess();
Test 3: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.getItem(70);
Test 4: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readByte(303);
Test 5: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.getClassName();
Test 6: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 166, (-2501));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 7: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
classReader.getSuperName();
Test 8: 
ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();
Test 9: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.getInterfaces();
Test 10: 
ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
classReader.getInterfaces();
Test 11: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
ClassWriter classWriter = new ClassWriter(1743);
classReader.copyPool(classWriter);
Test 12: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("}");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("wheel.asm.ClassReader", e);
}

Test 13: 
Enumeration<InputStream> enumeration = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
ClassReader classReader = null;
try {
  classReader = new ClassReader(sequenceInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("java/lang/String");
Test 15: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 1);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 2);
Test 16: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(4);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);
Test 17: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(classReader, 4);
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 4);
Test 18: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(70);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 2);
char[] charArray = new char[2];
classReader.readClass(224, charArray);
Test 19: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter((-3463));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 12);
Test 20: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
char[] charArray = new char[9];
// Undeclared exception!
try { 
  classReader.readConst(6, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 21: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[9];
// Undeclared exception!
try { 
  classReader.readUTF8(4, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 22: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[9];
// Undeclared exception!
try { 
  classReader.readConst(13, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 23: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[10];
// Undeclared exception!
try { 
  classReader.readConst(46, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 24: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readShort(8);
Test 25: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readLong(258);
Test 26: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readInt(70);
Test 27: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[2];
// Undeclared exception!
try { 
  classReader.readClass(224, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 28: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, (-1039));
char[] charArray = new char[8];
classReader.readUTF8(21, charArray);
Test 29: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readConst(8, (char[]) null);
Test 30: 
ClassReader classReader = new ClassReader("java/lang/Object");
char[] charArray = new char[0];
classReader.readConst(13, charArray);
Test 31: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readByte(11);
Test 32: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 883);
char[] charArray = new char[3];
classReader.readConst(26, charArray);
Test 33: 
ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
classReader.readInt(1);
Test 34: 
ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
Label[] labelArray = new Label[1];
classReader.readLabel(0, labelArray);
Test 35: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
classReader.readLong(8);
Test 36: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readShort(2);
Test 37: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.readShort(4);
Test 38: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readUnsignedShort(440);
Test 39: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readUnsignedShort(1065);
Test 40: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassReader classReader = new ClassReader(classReader.b);
Test 41: 

Test 42: 
String string = "com.example.ClassName";
ClassReader classReader = new ClassReader("com.example.ClassName");
int _int = 1234567890;
((ClassReader) string).readByte(_int);

Test 43: 

Test 44: 

Test 45: 
Enumeration<InputStream> enumeration = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);

Test 46: 

Test 47: 
char[] charArray = new char[2];

Test 48: 
char[] charArray = new char[9];

Test 49: 
String string = "com.example.MyClass";
ClassReader classReader = new ClassReader("com.example.MyClass");
char[] charArray = new char[9];
int _int = 4;
((ClassReader) string).readUTF8(_int, charArray);

Test 50: 
char[] charArray = new char[9];

Test 51: 
char[] charArray = new char[10];

Test 52: 
char[] charArray = new char[2];

Test 53: 
String string = "org.apache.commons.io.filefilter.CanReadFileFilter";
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, (-1039));
char[] charArray = new char[8];
((ClassReader)"org.apache.commons.io.filefilter.CanReadFileFilter").readUTF8(21, charArray);
String string = "org.apache.commons.io.filefilter.CanReadFileFilter";
ClassReader classReader = new ClassReader(string);
int _int = 0;
ClassWriter classWriter = new ClassWriter(classReader, _int);
char[] charArray = new char[8];
int _int = 21;
((ClassReader) string).readUTF8(_int, charArray);

Test 54: 
char[] charArray = new char[3];

Test 55: 
Label[] labelArray = new Label[1];

Test 56: 
String string = "com.example.mypackage.MyClass";
ClassReader classReader = new ClassReader("com.example.mypackage.MyClass");
int _int = 3456;
((ClassReader) string).readUnsignedShort(_int);

Test 57: 


* Minimizing test suite
* test suite isTestSuite: 41
Test 0: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readShort(2);
Test 1: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassWriter classWriter = new ClassWriter(15);
classReader.accept((ClassVisitor) classWriter, 2);
Test 2: 
ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getAccess();
Test 3: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.getItem(70);
Test 4: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readByte(11);
Test 5: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
classReader.readLong(8);
Test 6: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.getClassName();
Test 7: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 166, (-2501));
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 8: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
classReader.getSuperName();
Test 9: 
ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();
Test 10: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.getInterfaces();
Test 11: 
ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
classReader.getInterfaces();
Test 12: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, (-1039));
char[] charArray = new char[8];
classReader.readUTF8(21, charArray);
Test 13: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 1);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 2);
Test 14: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
ClassWriter classWriter = new ClassWriter(1743);
classReader.copyPool(classWriter);
Test 15: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("com.example.ClassName");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("wheel.asm.ClassReader", e);
}

Test 16: 
Enumeration<InputStream> enumeration = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
ClassReader classReader = null;
try {
  classReader = new ClassReader(sequenceInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 17: 
ClassReader classReader = new ClassReader("java/lang/String");
Test 18: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(4);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 1);
Test 19: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter((-3463));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 12);
Test 20: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, (-1416));
Test 21: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(classReader, 4);
// Undeclared exception!
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 4);
Test 22: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(70);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 2);
char[] charArray = new char[2];
classReader.readClass(224, charArray);
Test 23: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
char[] charArray = new char[9];
// Undeclared exception!
try { 
  classReader.readConst(6, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 24: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[9];
// Undeclared exception!
try { 
  classReader.readUTF8(4, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 25: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[9];
// Undeclared exception!
try { 
  classReader.readConst(13, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 26: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[10];
// Undeclared exception!
try { 
  classReader.readConst(46, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 27: 
ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
classReader.readInt(1);
Test 28: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
char[] charArray = new char[2];
// Undeclared exception!
try { 
  classReader.readClass(224, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 29: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readUnsignedShort(1065);
Test 30: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readConst(8, (char[]) null);
Test 31: 
ClassReader classReader = new ClassReader("java/lang/Object");
char[] charArray = new char[0];
classReader.readConst(13, charArray);
Test 32: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readByte(303);
Test 33: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 883);
char[] charArray = new char[3];
classReader.readConst(26, charArray);
Test 34: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readInt(70);
Test 35: 
ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
Label[] labelArray = new Label[1];
classReader.readLabel(0, labelArray);
Test 36: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readLong(258);
Test 37: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
classReader.readShort(8);
Test 38: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.readShort(4);
Test 39: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
classReader.readUnsignedShort(440);
Test 40: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
ClassReader classReader = new ClassReader(classReader.b);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 51%
* Total number of goals: 817
* Number of covered goals: 416
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 61%
* Total number of goals: 868
* Number of covered goals: 526
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 55%
* Total number of goals: 40
* Number of covered goals: 22
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 51%
* Total number of goals: 817
* Number of covered goals: 416
* Generated 41 tests with total length 103
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 32%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
short readShort = classReader.readShort(2);
assertEquals(883, classReader.header);
assertEquals((short) (-17730), readShort);


** It was a parseable test case! 
refined test name is: testReadShort
* Compiling Tests
refined test name is: testReadShort
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassWriter arg0 = new ClassWriter(15);
classReader.accept((ClassVisitor) arg0, 2);
assertEquals(1, ClassReader.SKIP_CODE);


** It was a parseable test case! 
refined test name is: testDirectoryFileFiltershouldHaveSkipCodeOfOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("java/lang/Object");
int access = classReader.getAccess();
assertEquals(33, access);


** It was a parseable test case! 
refined test name is: testGetAccessReturnsExpectedValue
* Compiling Tests
refined test name is: testGetAccessReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
int item = classReader.getItem(70);
assertEquals(327, item);
assertEquals(7316, classReader.header);


** It was a parseable test case! 
refined test name is: testGetItemWithIndexSeventy
* Compiling Tests
refined test name is: testGetItemWithIndexOfSeventy
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
int readByte = classReader.readByte(11);
assertEquals(883, classReader.header);
assertEquals(0, readByte);


** It was a parseable test case! 
refined test name is: testReadHeaderAndSingleByte
* Compiling Tests
refined test name is: testReadSingleByteFromClassFileAtOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
long readLong = classReader.readLong(8);
assertEquals(510, classReader.header);
assertEquals(9862619418597642L, readLong);


** It was a parseable test case! 
refined test name is: testReadingHeader
* Compiling Tests
refined test name is: testReadLongValueFromClassFileHeader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
assertEquals(883, classReader.header);

String className = classReader.getClassName();
assertNotNull(className);
assertEquals("org/apache/commons/io/filefilter/CanReadFileFilter", className);


** It was a parseable test case! 
refined test name is: testClassReaderHeaderAndClassName
* Compiling Tests
refined test name is: testGetClassNameCorrectness
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
String superName = classReader.getSuperName();
assertEquals(609, classReader.header);
assertEquals("org/apache/commons/io/filefilter/AbstractFileFilter", superName);
assertNotNull(superName);


** It was a parseable test case! 
refined test name is: testGetSuperName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();
assertEquals(927, classReader.header);


** It was a parseable test case! 
refined test name is: testGetSuperNameReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
String[] interfaces = classReader.getInterfaces();
assertEquals(0, interfaces.length);
assertEquals(883, classReader.header);


** It was a parseable test case! 
refined test name is: testGetInterfacesLengthIsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.AnnotationWriter");
assertEquals(2149, classReader.header);

String[] interfaces = classReader.getInterfaces();
assertEquals(1, interfaces.length);


** It was a parseable test case! 
refined test name is: testReadHeaderAndInterfaces
* Compiling Tests
refined test name is: testHeaderAndInterfaces
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader arg0 = new ClassReader("org.apache.commons.io.filefilter.CanReadFileFilter");
assertEquals(883, arg0.header);

ClassWriter classWriter = new ClassWriter(arg0, (-1039));
char[] arg1 = new char[8];
String readUTF8 = arg0.readUTF8(21, arg1);
assertEquals("org/apache/commons/io/filefilter/CanReadFileFilter", readUTF8);


** It was a parseable test case! 
refined test name is: TestReadUTF8
* Compiling Tests
* Computation finished
