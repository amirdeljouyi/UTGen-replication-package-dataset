* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: wheel.asm.ClassReader
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/80_wheelwebtool/evosuite-files/evosuite.properties
* Connecting to master process on port 13280
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:27:39.659 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:27:39.663 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:27:39.664 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:27:39.680 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 06:27:39.680 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 06:27:39.681 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 06:27:39.681 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 06:27:39.682 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 06:27:39.682 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 06:27:39.682 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 06:27:39.685 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 06:27:39.685 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 06:27:39.687 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:27:39.709 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:27:39.710 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class wheel.asm.ClassReader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2563
* Using seed 1709274453405
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 240 / 2563
[Progress:>                             1%] [Cov:==>                                6%][Progress:=>                            6%] [Cov:==>                                6%][Progress:==>                           7%] [Cov:=======>                           20%][Progress:==>                           8%] [Cov:==========>                        29%][Progress:===>                          10%] [Cov:===============>                   43%][Progress:===>                          12%] [Cov:================>                  48%][Progress:====>                         15%] [Cov:==================>                53%][Progress:=====>                        17%] [Cov:===================>               56%][Progress:=====>                        19%] [Cov:===================>               56%][Progress:========>                     27%] [Cov:====================>              58%][Progress:========>                     28%] [Cov:====================>              58%][Progress:=========>                    30%] [Cov:====================>              58%][Progress:==========>                   34%] [Cov:====================>              58%][Progress:==========>                   36%] [Cov:====================>              58%][Progress:===========>                  39%] [Cov:====================>              58%][Progress:============>                 42%] [Cov:====================>              58%][Progress:=============>                45%] [Cov:====================>              59%][Progress:==============>               47%] [Cov:====================>              59%][Progress:===============>              50%] [Cov:=====================>             60%][Progress:=================>            57%] [Cov:=====================>             60%][Progress:==================>           60%] [Cov:=====================>             60%][Progress:==================>           62%] [Cov:=====================>             60%][Progress:===================>          65%] [Cov:=====================>             60%][Progress:===================>          66%] [Cov:=====================>             60%][Progress:====================>         68%] [Cov:=====================>             60%][Progress:======================>       76%] [Cov:=====================>             60%][Progress:========================>     83%] [Cov:=====================>             60%][Progress:=========================>    85%] [Cov:=====================>             60%][Progress:==========================>   87%] [Cov:=====================>             60%][Progress:==========================>   89%] [Cov:=====================>             60%][Progress:===========================>  91%] [Cov:=====================>             60%][Progress:===========================>  93%] [Cov:=====================>             60%][Progress:==============================100%] [Cov:=====================>             60%][Progress:==============================100%] [Cov:=====================>             60%]
* Search finished after 101s and 33 generations, 14750 statements, best individual has fitness: 1241.0
* Generated before the refinement 39 tests with total length 110
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(28)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.readShort(28);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readShort(1024);
    }
}
statement is: classReader.readShort(1024), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readShort(1024) target is: classReader method is: readShort(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: getAccess()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access = classReader.getAccess()
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getAccess();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getAccess();
    }
}
statement is: classReader.getAccess(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getAccess() target is: classReader method is: getAccess()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: readByte(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readByte = classReader.readByte(199)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readByte(199);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readByte(200);
    }
}
statement is: classReader.readByte(200), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readByte(200) target is: classReader method is: readByte(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: readLong(I)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long readLong = classReader.readLong(2)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readLong(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readLong(42);
    }
}
statement is: classReader.readLong(42), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLong(42) target is: classReader method is: readLong(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter")
statement is: getClassName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String className = classReader.getClassName()
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
classReader.getClassName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int age = 25;
        String name = "John Doe";
        File file = new File("/path/to/file.txt");
        classReader.setAge(age);
        classReader.setName(name);
        classReader.accept(file);
    }
}
statement is: // Improved test data
int age = 25, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: File file = new File("/path/to/file.txt"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.setAge(age), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.setAge(age) target is: classReader method is: setAge(int)
statement is: classReader.setName(name), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.setName(name) target is: classReader method is: setName(java.lang.String)
statement is: classReader.accept(file), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(file) target is: classReader method is: accept(File)
* this is vulnerable: int _int = 25
* this is vulnerable: String string = "John Doe"
TestCase is: int _int = 25;
String string = "John Doe";

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter")
statement is: wheel.asm.ClassReader([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(classReader.b, 4, 1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
ClassReader classReader = new ClassReader(classReader.b, 4, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: getSuperName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superName = classReader.getSuperName()
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getSuperName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getSuperName();
    }
}
statement is: classReader.getSuperName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getSuperName() target is: classReader method is: getSuperName()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/Object")
statement is: getSuperName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superName = classReader.getSuperName()
test data is: ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: getInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] interfaces = classReader.getInterfaces()
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getInterfaces();
        // Improved test data
        List<String> interfaces = Arrays.asList("interface1", "interface2", "interface3");
        assertEquals(interfaces, classReader.getInterfaces());
    }
}
statement is: classReader.getInterfaces(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getInterfaces() target is: classReader method is: getInterfaces()
statement is: // Improved test data
List<String> interfaces = Arrays.asList("interface1", "interface2", "interface3"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.asList("interface1", "interface2", "interface3") target is: Arrays method is: asList(java.lang.String,java.lang.String,java.lang.String)
statement is: assertEquals(interfaces, classReader.getInterfaces()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(interfaces, classReader.getInterfaces()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter")
statement is: getInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] interfaces = classReader.getInterfaces()
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.getInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getInterfaces();
    }
}
statement is: classReader.getInterfaces(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getInterfaces() target is: classReader method is: getInterfaces()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassReader")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 384)
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassReader");
ClassWriter classWriter = new ClassWriter(classReader, 384);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassReader([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(classReader.b, 8, 8)
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 165)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader(classReader.b, 8, 8);
ClassWriter classWriter = new ClassWriter(classReader, 165);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.am.Label")
test data is: ClassReader classReader = new ClassReader("wheel.am.Label");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(new EmptyVisitor(), 0);
    }
}
statement is: classReader.accept(new EmptyVisitor(), 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(new EmptyVisitor(), 0) target is: classReader method is: accept(EmptyVisitor,int)
statement is: mock(java.util.Enumeration<java.io.FilterInputStream>) type is: class org.evosuite.testcase.statements.FunctionalMockStatement return type java.util.Enumeration<java.io.FilterInputStream>
statement code is: Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements()
statement is: java.io.SequenceInputStream(Ljava/util/Enumeration;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.SequenceInputStream
statement code is: SequenceInputStream sequenceInputStream = new SequenceInputStream(arg0)
statement is: wheel.asm.ClassReader(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
test data is: Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
ClassReader classReader = new ClassReader(sequenceInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Enumeration<FilterInputStream> enumeration = Collections.enumeration(Arrays.asList(new FileInputStream("path/to/file1"), new FileInputStream("path/to/file2")));
        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
    }
}
statement is: Enumeration<FilterInputStream> enumeration = Collections.enumeration(Arrays.asList(new FileInputStream("path/to/file1"), new FileInputStream("path/to/file2"))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Collections.enumeration(Arrays.asList(new FileInputStream("path/to/file1"), new FileInputStream("path/to/file2"))) target is: Collections method is: enumeration()
statement is: SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase Could not be added: java.io.SequenceInputStream(Ljava/util/Enumeration;)V
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/Object")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 37)
statement is: accept(Lwheel/asm/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 8)
test data is: ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 37);
classReader.accept((ClassVisitor) classWriter, 8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(4)
statement is: accept(Lwheel/asm/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 8)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(4);
classReader.accept((ClassVisitor) classWriter, 8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byte[] originalByteCode = new byte[]{ 0x2a, 0xb1, 0x4, 0x0 };
        // The modified bytecode of the ModifiedClass class
        byte[] modifiedByteCode = new byte[]{ 0x2a, 0xb2, 0x5, 0x0 };
    }
}
statement is: byte[] originalByteCode = new byte[]{ 0x2a, 0xb1, 0x4, 0x0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: // The modified bytecode of the ModifiedClass class
byte[] modifiedByteCode = new byte[]{ 0x2a, 0xb2, 0x5, 0x0 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: org.evosuite.testcase.statements.ArrayStatement@48e42ea6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[4]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(132, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[4];
classReader.readConst(132, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[4];
        classReader.readConst(132, "Hello World!");
    }
}
statement is: char[] charArray = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: classReader.readConst(132, "Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(132, "Hello World!") target is: classReader method is: readConst(int,java.lang.String)
TestCase is: char[] charArray = new char[4];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: org.evosuite.testcase.statements.ArrayStatement@7821cd98 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[13]
statement is: readUTF8(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readUTF8 = classReader.readUTF8(2114, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[13];
classReader.readUTF8(2114, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[13];
        classReader.readUTF8(2114, charArray);
        // Improved test data:
        ClassReader classReader = new ClassReader("com.example.mypackage.MyClass");
        char[] charArray = new char[256];// use a larger array size to ensure that the method reads more characters from the input stream

        classReader.readUTF8(1000, charArray);
        // Improved test data:
        ClassReader classReader = new ClassReader("com.example.mypackage.MyClass");
        char[] charArray = new char[256];// use a larger array size to ensure that the method reads more characters from the input stream

        classReader.readUTF8(1000, charArray);
    }
}
statement is: char[] charArray = new char[13], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [13] Ct is: char[] charArray = new char[13] isAssignment: false Array: new char[13] Elements: []
lengths: [13] [13]
Their type are: class [C char[]
statement is: classReader.readUTF8(2114, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(2114, charArray) target is: classReader method is: readUTF8(int,char[])
statement is: // Improved test data:
ClassReader classReader = new ClassReader("com.example.mypackage.MyClass"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[256]// use a larger array size to ensure that the method reads more characters from the input stream
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [256] Ct is: char[] charArray = new char[13] isAssignment: false Array: new char[256] Elements: []
lengths: [13] [256]
Their type are: class [C char[]
statement is: classReader.readUTF8(1000, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(1000, charArray) target is: classReader method is: readUTF8(int,char[])
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 2
Matched Method is: readUTF8(I[C)Ljava/lang/String;
statement is: // Improved test data:
ClassReader classReader = new ClassReader("com.example.mypackage.MyClass"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[256]// use a larger array size to ensure that the method reads more characters from the input stream
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [256] Ct is: char[] charArray = new char[13] isAssignment: false Array: new char[256] Elements: []
lengths: [13] [256]
Their type are: class [C char[]
statement is: classReader.readUTF8(1000, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(1000, charArray) target is: classReader method is: readUTF8(int,char[])
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 7
Matched Method is: readUTF8(I[C)Ljava/lang/String;
TestCase is: char[] charArray = new char[13];
String string = "com.example.mypackage.MyClass";
ClassReader classReader = new ClassReader(string);
char[] charArray = new char[13];
int _int = 1000;
((ClassReader) charArray).readUTF8(_int, charArray);
String string = "com.example.mypackage.MyClass";
ClassReader classReader = new ClassReader(string);
char[] charArray = new char[13];
int _int = 1000;
((ClassReader) charArray).readUTF8(_int, charArray);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: org.evosuite.testcase.statements.ArrayStatement@3da68fcb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[1]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(175, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[1];
classReader.readConst(175, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[1];
        classReader.readConst(1234, charArray);
    }
}
statement is: char[] charArray = new char[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: char[] charArray = new char[1] isAssignment: false Array: new char[1] Elements: []
lengths: [1] [1]
Their type are: class [C char[]
statement is: classReader.readConst(1234, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(1234, charArray) target is: classReader method is: readConst(int,char[])
TestCase is: char[] charArray = new char[1];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: readInt(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = classReader.readInt(57)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readInt(57);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt(34);// Changed the value to a more descriptive example (e.g., 34) }}

    }
}
statement is: classReader.readInt(34)// Changed the value to a more descriptive example (e.g., 34) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(34)// Changed the value to a more descriptive example (e.g., 34) }}
 target is: classReader method is: readInt(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 4)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/Object")
statement is: org.evosuite.testcase.statements.ArrayStatement@4a6b6a01 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[1]
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 161)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 4);
ClassReader classReader = new ClassReader("java/lang/Object");
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 161);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Attribute[] attributeArray = new Attribute[1];
        // Improved test data: using more descriptive and representative values for the primitive types
        int[] intArray = new int[]{ 0, 1, 2, 3, 4 };
        String[] stringArray = new String[]{ "apple", "banana", "cherry" };
        double[] doubleArray = new double[]{ 3.14, 6.28, 9.42 };
        char[] charArray = new char[]{ 'a', 'b', 'c' };
    }
}
statement is: Attribute[] attributeArray = new Attribute[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: Attribute[] attributeArray = new Attribute[1] isAssignment: false Array: new Attribute[1] Elements: []
lengths: [1] [1]
Their type are: class [Lwheel.asm.Attribute; Attribute[]
statement is: // Improved test data: using more descriptive and representative values for the primitive types
int[] intArray = new int[]{ 0, 1, 2, 3, 4 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: Attribute[] attributeArray = new Attribute[1] isAssignment: false Array: new int[]{ 0, 1, 2, 3, 4 } Elements: [0, 1, 2, 3, 4]
lengths: [1] []
statement is: String[] stringArray = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: Attribute[] attributeArray = new Attribute[1] isAssignment: false Array: new String[]{ "apple", "banana", "cherry" } Elements: ["apple", "banana", "cherry"]
lengths: [1] []
statement is: double[] doubleArray = new double[]{ 3.14, 6.28, 9.42 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: Attribute[] attributeArray = new Attribute[1] isAssignment: false Array: new double[]{ 3.14, 6.28, 9.42 } Elements: [3.14, 6.28, 9.42]
lengths: [1] []
statement is: char[] charArray = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: Attribute[] attributeArray = new Attribute[1] isAssignment: false Array: new char[]{ 'a', 'b', 'c' } Elements: ['a', 'b', 'c']
lengths: [1] []
TestCase is: Attribute[] attributeArray = new Attribute[1];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 8)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter")
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 91)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
ClassReader classReader = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 91);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), new String[]{ "age", "lastModified" }, 91);
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), new String[]{ "age", "lastModified" }, 91), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), new String[]{ "age", "lastModified" }, 91) target is: classReader method is: accept(ClassVisitor,java.lang.String[],int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 884)
statement is: org.evosuite.testcase.statements.ArrayStatement@5229e58a type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[1]
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 4)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 884);
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        ClassReader classReader = new ClassReader("wheel.asm.Label");
        ClassWriter classWriter = new ClassWriter(classReader, 884);
        Attribute[] attributeArray = new Attribute[1];
        String className = "MyClass";
        int instanceFieldCount = 5;
        int staticFieldCount = 3;
        int methodCount = 10;
        int constructorCount = 2;
        classReader.accept(((ClassVisitor) (classWriter)), attributeArray, className);
        // The above test data is more descriptive and representative of the situation being tested: }}
    }
}
statement is: // Improved test data:
ClassReader classReader = new ClassReader("wheel.asm.Label"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClassWriter classWriter = new ClassWriter(classReader, 884), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute[] attributeArray = new Attribute[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: Attribute[] attributeArray = new Attribute[1] isAssignment: false Array: new Attribute[1] Elements: []
lengths: [1] [1]
Their type are: class [Lwheel.asm.Attribute; Attribute[]
statement is: String className = "MyClass", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int instanceFieldCount = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int staticFieldCount = 3, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int methodCount = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int constructorCount = 2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.accept(((ClassVisitor) (classWriter)), attributeArray, className), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), attributeArray, className) target is: classReader method is: accept(ClassVisitor,Attribute[],java.lang.String)
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 1
Matched Method is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V
statement is: // The above test data is more descriptive and representative of the situation being tested: }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: int _int = 5
* this is vulnerable: int _int = 3
* this is vulnerable: int _int = 10
* this is vulnerable: int _int = 2
TestCase is: String string = "wheel.asm.Label";
ClassReader classReader = new ClassReader(string);
int _int = 884;
ClassWriter classWriter = new ClassWriter(classReader, _int);
Attribute[] attributeArray = new Attribute[1];
String string = "MyClass";
int _int = 5;
int _int = 3;
int _int = 10;
int _int = 2;
((ClassReader) string).accept((ClassVisitor) classWriter, attributeArray, (int) string);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 884)
statement is: org.evosuite.testcase.statements.ArrayStatement@f3c338db type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[1]
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 4)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 884);
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        classReader = new ClassReader("wheel.asm.Label");
        classWriter = new ClassWriter(classReader, 1234567890);
        attributeArray = new Attribute[]{ new LabelAttribute("my_label", "label") };
    }
}
statement is: // Improved test data
classReader = new ClassReader("wheel.asm.Label"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter = new ClassWriter(classReader, 1234567890), class spoon.support.reflect.code.CtAssignmentImpl
statement is: attributeArray = new Attribute[]{ new LabelAttribute("my_label", "label") }, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 2)
statement is: org.evosuite.testcase.statements.ArrayStatement@debd6693 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[8]
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 2)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 2);
Attribute[] attributeArray = new Attribute[8];
classReader.accept((ClassVisitor) classWriter, attributeArray, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Attribute[] attributeArray = new Attribute[8];
        classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 2);
        // Modified test data
        String className = "wheel.asm.Label";
        ClassReader reader = new ClassReader(className);
        ClassWriter writer = new ClassWriter(reader, 2);
        Attribute[] attributes = new Attribute[8];
    }
}
statement is: Attribute[] attributeArray = new Attribute[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: Attribute[] attributeArray = new Attribute[8] isAssignment: false Array: new Attribute[8] Elements: []
lengths: [8] [8]
Their type are: class [Lwheel.asm.Attribute; Attribute[]
statement is: classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 2) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: // Modified test data
String className = "wheel.asm.Label", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: ClassReader reader = new ClassReader(className), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClassWriter writer = new ClassWriter(reader, 2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute[] attributes = new Attribute[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: Attribute[] attributeArray = new Attribute[8] isAssignment: false Array: new Attribute[8] Elements: []
lengths: [8] [8]
Their type are: class [Lwheel.asm.Attribute; Attribute[]
TestCase is: Attribute[] attributeArray = new Attribute[8];
String string = "wheel.asm.Label";
ClassReader classReader = new ClassReader(string);
int _int = 2;
ClassWriter classWriter = new ClassWriter(classReader, _int);
Attribute[] attributeArray = new Attribute[8];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 2)
statement is: org.evosuite.testcase.statements.ArrayStatement@c061180d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[8]
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 8)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 2);
Attribute[] attributeArray = new Attribute[8];
classReader.accept((ClassVisitor) classWriter, attributeArray, 8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Attribute[] attributeArray = new Attribute[8];
    }
}
statement is: Attribute[] attributeArray = new Attribute[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: Attribute[] attributeArray = new Attribute[8] isAssignment: false Array: new Attribute[8] Elements: []
lengths: [8] [8]
Their type are: class [Lwheel.asm.Attribute; Attribute[]
TestCase is: Attribute[] attributeArray = new Attribute[8];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter")
statement is: org.evosuite.testcase.statements.ArrayStatement@37df8f21 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[9]
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(746)
statement is: org.evosuite.testcase.statements.ArrayStatement@65baf536 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Attribute;
statement code is: Attribute[] attributeArray = new Attribute[0]
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, arg1, 161)
statement is: readUTF8(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readUTF8 = classReader.readUTF8(56, arg1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
char[] charArray = new char[9];
ClassWriter classWriter = new ClassWriter(746);
Attribute[] attributeArray = new Attribute[0];
classReader.accept((ClassVisitor) classWriter, attributeArray, 161);
classReader.readUTF8(56, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[9];
        ClassWriter classWriter = new ClassWriter(746);
        Attribute[] attributeArray = new Attribute[0];
        classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 161);
        classReader.readUTF8(56, charArray);
        // Improved test data:
        ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
        char[] charArray = new char[9];
        Arrays.fill(charArray, 'A');// Filling the character array with capital letters "A"

        ClassWriter classWriter = new ClassWriter(746);
        Attribute[] attributeArray = new Attribute[0];
        classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 161);
        classReader.readUTF8(56, charArray);
    }
}
statement is: char[] charArray = new char[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: char[] charArray = new char[9] isAssignment: false Array: new char[9] Elements: []
lengths: [9] [9]
Their type are: class [C char[]
statement is: ClassWriter classWriter = new ClassWriter(746), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute[] attributeArray = new Attribute[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: char[] charArray = new char[9] isAssignment: false Array: new Attribute[0] Elements: []
lengths: [9] [0]
Their type are: class [C Attribute[]
Dimension: [0] Ct is: Attribute[] attributeArray = new Attribute[0] isAssignment: false Array: new Attribute[0] Elements: []
lengths: [0] [0]
Their type are: class [Lwheel.asm.Attribute; Attribute[]
statement is: classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 161), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 161) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: classReader.readUTF8(56, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(56, charArray) target is: classReader method is: readUTF8(int,char[])
statement is: // Improved test data:
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: char[] charArray = new char[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: char[] charArray = new char[9] isAssignment: false Array: new char[9] Elements: []
lengths: [9] [9]
Their type are: class [C char[]
statement is: Arrays.fill(charArray, 'A')// Filling the character array with capital letters "A"
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: Arrays.fill(charArray, 'A')// Filling the character array with capital letters "A"
 target is: Arrays method is: fill(char[],char)
statement is: ClassWriter classWriter = new ClassWriter(746), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute[] attributeArray = new Attribute[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: char[] charArray = new char[9] isAssignment: false Array: new Attribute[0] Elements: []
lengths: [9] [0]
Their type are: class [C Attribute[]
Dimension: [0] Ct is: Attribute[] attributeArray = new Attribute[0] isAssignment: false Array: new Attribute[0] Elements: []
lengths: [0] [0]
Their type are: class [Lwheel.asm.Attribute; Attribute[]
statement is: classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 161), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), attributeArray, 161) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 5
Matched Method is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V
statement is: classReader.readUTF8(56, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(56, charArray) target is: classReader method is: readUTF8(int,char[])
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 5
Matched Method is: readUTF8(I[C)Ljava/lang/String;
TestCase is: char[] charArray = new char[9];
int _int = 746;
ClassWriter classWriter = new ClassWriter(_int);
Attribute[] attributeArray = new Attribute[0];
String string = "org.apache.commons.io.filefilter.AgeFileFilter";
ClassReader classReader = new ClassReader(string);
char[] charArray = new char[9];
int _int = 746;
ClassWriter classWriter = new ClassWriter(_int);
Attribute[] attributeArray = new Attribute[0];
int _int = 161;
((ClassReader) charArray).accept((ClassVisitor) classWriter, attributeArray, _int);
int _int = 56;
((ClassReader) charArray).readUTF8(_int, charArray);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: getItem(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int item = classReader.getItem(2)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getItem(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getItem(2);
        // Improved test data:
        ClassReader classReader = new ClassReader("car.asm.Engine");
        classReader.getItem(3);
    }
}
statement is: classReader.getItem(2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getItem(2) target is: classReader method is: getItem(int)
statement is: // Improved test data:
ClassReader classReader = new ClassReader("car.asm.Engine"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.getItem(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getItem(3) target is: classReader method is: getItem(int)
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 1
Matched Method is: getItem(I)I
TestCase is: String string = "car.asm.Engine";
ClassReader classReader = new ClassReader(string);
int _int = 3;
((ClassReader) string).getItem(_int);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: readByte(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readByte = classReader.readByte(8)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readByte(8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readByte(8);// read a byte from the input stream

        String str = "Hello, World!";// a string to be printed on the console

        int num = 42;// an integer variable with the value of 42

        double dbl = 3.14;// a double variable with the value of pi

        char ch = 'a';// a character variable with the value of 'a'

        classReader.readString(str);// read a string from the input stream

        classReader.readInt(num);// read an integer from the input stream

        classReader.readDouble(dbl);// read a double from the input stream

        classReader.readChar(ch);// read a character from the input stream }}

    }
}
statement is: classReader.readByte(8)// read a byte from the input stream
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readByte(8)// read a byte from the input stream
 target is: classReader method is: readByte(int)
statement is: String str = "Hello, World!"// a string to be printed on the console
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int num = 42// an integer variable with the value of 42
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double dbl = 3.14// a double variable with the value of pi
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char ch = 'a'// a character variable with the value of 'a'
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: classReader.readString(str)// read a string from the input stream
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readString(str)// read a string from the input stream
 target is: classReader method is: readString(java.lang.String)
statement is: classReader.readInt(num)// read an integer from the input stream
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(num)// read an integer from the input stream
 target is: classReader method is: readInt(int)
statement is: classReader.readDouble(dbl)// read a double from the input stream
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readDouble(dbl)// read a double from the input stream
 target is: classReader method is: readDouble(double)
statement is: classReader.readChar(ch)// read a character from the input stream }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readChar(ch)// read a character from the input stream }}
 target is: classReader method is: readChar(char)
* this is vulnerable: String string = "Hello, World!"
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: char _char = 'a'
TestCase is: String string = "Hello, World!";
int _int = 42;
double _double = 3.14;
char _char = 'a';

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: org.evosuite.testcase.statements.ArrayStatement@80b59d06 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[8]
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 650)
statement is: readClass(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readClass = classReader.readClass(132, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[8];
ClassWriter classWriter = new ClassWriter(classReader, 650);
classReader.readClass(132, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[8];
        ClassWriter classWriter = new ClassWriter(classReader, 650);
        classReader.readClass(132, charArray);
        // Improved test data
        int numberOfClasses = 10;
        String className = "com.example.MyClass";
        char[] charArray = new char[8];
        ClassWriter classWriter = new ClassWriter(classReader, 650);
        classReader.readClass(numberOfClasses, charArray);
        // Improved test data (2)
        int numberOfMethods = 10;
        String methodName = "myMethod";
        char[] charArray = new char[8];
        ClassWriter classWriter = new ClassWriter(classReader, 650);
        classReader.readMethod(numberOfMethods, methodName, charArray);
    }
}
statement is: char[] charArray = new char[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: char[] charArray = new char[8] isAssignment: false Array: new char[8] Elements: []
lengths: [8] [8]
Their type are: class [C char[]
statement is: ClassWriter classWriter = new ClassWriter(classReader, 650), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.readClass(132, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readClass(132, charArray) target is: classReader method is: readClass(int,char[])
statement is: // Improved test data
int numberOfClasses = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String className = "com.example.MyClass", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] charArray = new char[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: char[] charArray = new char[8] isAssignment: false Array: new char[8] Elements: []
lengths: [8] [8]
Their type are: class [C char[]
statement is: ClassWriter classWriter = new ClassWriter(classReader, 650), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.readClass(numberOfClasses, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readClass(numberOfClasses, charArray) target is: classReader method is: readClass(int,char[])
statement is: // Improved test data (2)
int numberOfMethods = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String methodName = "myMethod", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] charArray = new char[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: char[] charArray = new char[8] isAssignment: false Array: new char[8] Elements: []
lengths: [8] [8]
Their type are: class [C char[]
statement is: ClassWriter classWriter = new ClassWriter(classReader, 650), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.readMethod(numberOfMethods, methodName, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readMethod(numberOfMethods, methodName, charArray) target is: classReader method is: readMethod(int,java.lang.String,char[])
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "com.example.MyClass"
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "myMethod"
TestCase is: char[] charArray = new char[8];
int _int = 650;
ClassWriter classWriter = new ClassWriter((ClassReader) _int, 650);
int _int = 10;
String string = "com.example.MyClass";
char[] charArray = new char[8];
int _int = 650;
ClassWriter classWriter = new ClassWriter((ClassReader) _int, 650);
int _int = 10;
String string = "myMethod";
char[] charArray = new char[8];
int _int = 650;
ClassWriter classWriter = new ClassWriter((ClassReader) _int, 650);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: org.evosuite.testcase.statements.ArrayStatement@146320db type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[5]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readConst = (String)classReader.readConst(133, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[5];
classReader.readConst(133, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[5];
        classReader.readConst(133, "Hello World!");
    }
}
statement is: char[] charArray = new char[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: char[] charArray = new char[5] isAssignment: false Array: new char[5] Elements: []
lengths: [5] [5]
Their type are: class [C char[]
statement is: classReader.readConst(133, "Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(133, "Hello World!") target is: classReader method is: readConst(int,java.lang.String)
TestCase is: char[] charArray = new char[5];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: readInt(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = classReader.readInt(1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readInt(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt(234567890);// Replace 1 with a more representative integer value }}

    }
}
statement is: classReader.readInt(234567890)// Replace 1 with a more representative integer value }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(234567890)// Replace 1 with a more representative integer value }}
 target is: classReader method is: readInt(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter")
statement is: readLong(I)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long readLong = classReader.readLong(185)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
classReader.readLong(185);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readLong(100);
    }
}
statement is: classReader.readLong(100), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLong(100) target is: classReader method is: readLong(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(2)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readShort(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readShort(((short) (0x102)));// read a short value of 0x0102 }}

    }
}
statement is: classReader.readShort(((short) (0x102)))// read a short value of 0x0102 }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readShort(((short) (0x102)))// read a short value of 0x0102 }}
 target is: classReader method is: readShort(short)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: org.evosuite.testcase.statements.ArrayStatement@3e8fbb94 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[8]
statement is: readUTF8(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readUTF8 = classReader.readUTF8(3077, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[8];
classReader.readUTF8(3077, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[8];
    }
}
statement is: char[] charArray = new char[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: char[] charArray = new char[8] isAssignment: false Array: new char[8] Elements: []
lengths: [8] [8]
Their type are: class [C char[]
TestCase is: char[] charArray = new char[8];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: readUnsignedShort(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readUnsignedShort = classReader.readUnsignedShort(8)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readUnsignedShort(8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt();
    }
}
statement is: classReader.readInt(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt() target is: classReader method is: readInt()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassReader([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(classReader.b)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader(classReader.b);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: copyPool(Lwheel/asm/ClassWriter;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.copyPool(arg0)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(2);
classReader.copyPool(classWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String labelName = "my_label";// A descriptive name for the label

        int labelIndex = 3;// The index of the label in the constant pool

        Label label = new Label();// An instance of the Label class with a unique name and index

        label.setName(labelName);// Set the name of the label to the desired value

        label.setIndex(labelIndex);// Set the index of the label to the desired value

        classReader.addSymbol(label);// Add the label to the constant pool }}

    }
}
statement is: String labelName = "my_label"// A descriptive name for the label
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int labelIndex = 3// The index of the label in the constant pool
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Label label = new Label()// An instance of the Label class with a unique name and index
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: label.setName(labelName)// Set the name of the label to the desired value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: label.setName(labelName)// Set the name of the label to the desired value
 target is: label method is: setName(java.lang.String)
statement is: label.setIndex(labelIndex)// Set the index of the label to the desired value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: label.setIndex(labelIndex)// Set the index of the label to the desired value
 target is: label method is: setIndex(int)
statement is: classReader.addSymbol(label)// Add the label to the constant pool }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.addSymbol(label)// Add the label to the constant pool }}
 target is: classReader method is: addSymbol(Label)
* this is vulnerable: String string = "my_label"
* this is vulnerable: int _int = 3
TestCase is: String string = "my_label";
int _int = 3;

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Label")
statement is: org.evosuite.testcase.statements.ArrayStatement@4301e04f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Label;
statement code is: Label[] labelArray = new Label[0]
statement is: readLabel(I[Lwheel/asm/Label;)Lwheel/asm/Label; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Label
statement code is: Label readLabel = classReader.readLabel(28, arg1)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Label");
Label[] labelArray = new Label[0];
classReader.readLabel(28, labelArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Label[] labelArray = new Label[0];
        classReader.readLabel(28, labelArray);
        // Test case 1: Read a valid label from the class file
        classReader = new ClassReader("wheel.asm.Label");
        labelArray = new Label[3];
        classReader.readLabel(28, labelArray);
        Assert.assertEquals("Expected to read three labels", 3, labelArray.length);
        Assert.assertEquals("Expected the first label to be 'foo'", "foo", labelArray[0].getName());
        Assert.assertEquals("Expected the second label to be 'bar'", "bar", labelArray[1].getName());
        Assert.assertEquals("Expected the third label to be 'baz'", "baz", labelArray[2].getName());
        // Test case 2: Read a label with an invalid offset
        classReader = new ClassReader("wheel.asm.Label");
        labelArray = new Label[0];
        try {
            classReader.readLabel(15, labelArray);
        } catch (IOException e) {
            Assert.fail("Expected to read a valid label");
        }
        Assert.assertEquals("Expected the first label to be 'foo'", "foo", labelArray[0].getName());
        // Test case 3: Read a label with an invalid length
        classReader = new ClassReader("wheel.asm.Label");
        labelArray = new Label[0];
        try {
            classReader.readLabel(28, labelArray);
        } catch (IOException e) {
            Assert.fail("Expected to read a valid label");
        }
        Assert.assertEquals("Expected the first label to be 'foo'", "foo", labelArray[0].getName());
    }
}
statement is: Label[] labelArray = new Label[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: Label[] labelArray = new Label[0] isAssignment: false Array: new Label[0] Elements: []
lengths: [0] [0]
Their type are: class [Lwheel.asm.Label; Label[]
statement is: classReader.readLabel(28, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLabel(28, labelArray) target is: classReader method is: readLabel(int,Label[])
statement is: // Test case 1: Read a valid label from the class file
classReader = new ClassReader("wheel.asm.Label"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: labelArray = new Label[3], class spoon.support.reflect.code.CtAssignmentImpl
statement is: classReader.readLabel(28, labelArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLabel(28, labelArray) target is: classReader method is: readLabel(int,Label[])
statement is: Assert.assertEquals("Expected to read three labels", 3, labelArray.length), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals("Expected to read three labels", 3, labelArray.length) target is: Assert method is: assertEquals(java.lang.String,int)
statement is: Assert.assertEquals("Expected the first label to be 'foo'", "foo", labelArray[0].getName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals("Expected the first label to be 'foo'", "foo", labelArray[0].getName()) target is: Assert method is: assertEquals(java.lang.String,java.lang.String)
statement is: Assert.assertEquals("Expected the second label to be 'bar'", "bar", labelArray[1].getName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals("Expected the second label to be 'bar'", "bar", labelArray[1].getName()) target is: Assert method is: assertEquals(java.lang.String,java.lang.String)
statement is: Assert.assertEquals("Expected the third label to be 'baz'", "baz", labelArray[2].getName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals("Expected the third label to be 'baz'", "baz", labelArray[2].getName()) target is: Assert method is: assertEquals(java.lang.String,java.lang.String)
statement is: // Test case 2: Read a label with an invalid offset
classReader = new ClassReader("wheel.asm.Label"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: labelArray = new Label[0], class spoon.support.reflect.code.CtAssignmentImpl
statement is: try {
    classReader.readLabel(15, labelArray);
} catch (IOException e) {
    Assert.fail("Expected to read a valid label");
}, class spoon.support.reflect.code.CtTryImpl
statement is: Assert.assertEquals("Expected the first label to be 'foo'", "foo", labelArray[0].getName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals("Expected the first label to be 'foo'", "foo", labelArray[0].getName()) target is: Assert method is: assertEquals(java.lang.String,java.lang.String)
statement is: // Test case 3: Read a label with an invalid length
classReader = new ClassReader("wheel.asm.Label"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: labelArray = new Label[0], class spoon.support.reflect.code.CtAssignmentImpl
statement is: try {
    classReader.readLabel(28, labelArray);
} catch (IOException e) {
    Assert.fail("Expected to read a valid label");
}, class spoon.support.reflect.code.CtTryImpl
statement is: Assert.assertEquals("Expected the first label to be 'foo'", "foo", labelArray[0].getName()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Assert.assertEquals("Expected the first label to be 'foo'", "foo", labelArray[0].getName()) target is: Assert method is: assertEquals(java.lang.String,java.lang.String)
TestCase is: Label[] labelArray = new Label[0];

* test suite isTestSuite: 55
Test 0: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.readShort(28);
Test 1: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getAccess();
Test 2: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readByte(199);
Test 3: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readLong(2);
Test 4: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
classReader.getClassName();
Test 5: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 4, 1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 6: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getSuperName();
Test 7: 
ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();
Test 8: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getInterfaces();
Test 9: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.getInterfaces();
Test 10: 
ClassReader classReader = new ClassReader("wheel.asm.ClassReader");
ClassWriter classWriter = new ClassWriter(classReader, 384);
Test 11: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader(classReader.b, 8, 8);
ClassWriter classWriter = null;
try {
  classWriter = new ClassWriter(classReader, 165);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 12: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("wheel.am.Label");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("wheel.asm.ClassReader", e);
}

Test 13: 
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
ClassReader classReader = null;
try {
  classReader = new ClassReader(sequenceInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 37);
classReader.accept((ClassVisitor) classWriter, 8);
Test 15: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(4);
classReader.accept((ClassVisitor) classWriter, 8);
Test 16: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(132, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 17: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[13];
// Undeclared exception!
try { 
  classReader.readUTF8(2114, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[1];
// Undeclared exception!
try { 
  classReader.readConst(175, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 19: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readInt(57);
Test 20: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 4);
ClassReader classReader = new ClassReader("java/lang/Object");
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 161);
Test 21: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
ClassReader classReader = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 91);
Test 22: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 884);
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 4);
Test 23: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 884);
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 4);
Test 24: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 2);
Attribute[] attributeArray = new Attribute[8];
classReader.accept((ClassVisitor) classWriter, attributeArray, 2);
Test 25: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 2);
Attribute[] attributeArray = new Attribute[8];
classReader.accept((ClassVisitor) classWriter, attributeArray, 8);
Test 26: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
char[] charArray = new char[9];
ClassWriter classWriter = new ClassWriter(746);
Attribute[] attributeArray = new Attribute[0];
classReader.accept((ClassVisitor) classWriter, attributeArray, 161);
classReader.readUTF8(56, charArray);
Test 27: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getItem(2);
Test 28: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readByte(8);
Test 29: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[8];
ClassWriter classWriter = new ClassWriter(classReader, 650);
classReader.readClass(132, charArray);
Test 30: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[5];
classReader.readConst(133, charArray);
Test 31: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readInt(1);
Test 32: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
classReader.readLong(185);
Test 33: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readShort(2);
Test 34: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[8];
classReader.readUTF8(3077, charArray);
Test 35: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readUnsignedShort(8);
Test 36: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader(classReader.b);
Test 37: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(2);
classReader.copyPool(classWriter);
Test 38: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
Label[] labelArray = new Label[0];
// Undeclared exception!
try { 
  classReader.readLabel(28, labelArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 39: 

Test 40: 
char[] charArray = new char[4];

Test 41: 
char[] charArray = new char[13];
ClassReader classReader = new ClassReader("com.example.mypackage.MyClass");
char[] charArray = new char[13];
int _int = 1000;
((ClassReader) charArray).readUTF8(_int, charArray);
String string = "com.example.mypackage.MyClass";
ClassReader classReader = new ClassReader(string);
char[] charArray = new char[13];
int _int = 1000;
((ClassReader) charArray).readUTF8(_int, charArray);

Test 42: 
char[] charArray = new char[1];

Test 43: 
Attribute[] attributeArray = new Attribute[1];

Test 44: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 884);
Attribute[] attributeArray = new Attribute[1];
((ClassReader)"wheel.asm.Label").accept((ClassVisitor) classWriter, attributeArray, (int) "MyClass");

Test 45: 
Attribute[] attributeArray = new Attribute[8];
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 2);
Attribute[] attributeArray = new Attribute[8];

Test 46: 
Attribute[] attributeArray = new Attribute[8];

Test 47: 
char[] charArray = new char[9];
ClassWriter classWriter = new ClassWriter(746);
Attribute[] attributeArray = new Attribute[0];
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
char[] charArray = new char[9];
ClassWriter classWriter = new ClassWriter(746);
Attribute[] attributeArray = new Attribute[0];
((ClassReader) charArray).accept((ClassVisitor) classWriter, attributeArray, 161);
int _int = 56;
((ClassReader) charArray).readUTF8(_int, charArray);

Test 48: 
String string = "car.asm.Engine";
ClassReader classReader = new ClassReader("car.asm.Engine");
int _int = 3;
((ClassReader) string).getItem(_int);

Test 49: 

Test 50: 
char[] charArray = new char[8];
ClassWriter classWriter = new ClassWriter((ClassReader) 650, 650);
char[] charArray = new char[8];
int _int = 650;
ClassWriter classWriter = new ClassWriter((ClassReader) _int, 650);
char[] charArray = new char[8];
int _int = 650;
ClassWriter classWriter = new ClassWriter((ClassReader) _int, 650);

Test 51: 
char[] charArray = new char[5];

Test 52: 
char[] charArray = new char[8];

Test 53: 

Test 54: 
Label[] labelArray = new Label[0];


* Generated after the refinement and before minimization 55 tests with total length 157
* test suite isTestSuite: 55
Test 0: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.readShort(28);
Test 1: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getAccess();
Test 2: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readByte(199);
Test 3: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readLong(2);
Test 4: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
classReader.getClassName();
Test 5: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 4, 1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 6: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getSuperName();
Test 7: 
ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();
Test 8: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getInterfaces();
Test 9: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.getInterfaces();
Test 10: 
ClassReader classReader = new ClassReader("wheel.asm.ClassReader");
ClassWriter classWriter = new ClassWriter(classReader, 384);
Test 11: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader(classReader.b, 8, 8);
ClassWriter classWriter = null;
try {
  classWriter = new ClassWriter(classReader, 165);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 12: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("wheel.am.Label");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("wheel.asm.ClassReader", e);
}

Test 13: 
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
ClassReader classReader = null;
try {
  classReader = new ClassReader(sequenceInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 37);
classReader.accept((ClassVisitor) classWriter, 8);
Test 15: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(4);
classReader.accept((ClassVisitor) classWriter, 8);
Test 16: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(132, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 17: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[13];
// Undeclared exception!
try { 
  classReader.readUTF8(2114, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 18: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[1];
// Undeclared exception!
try { 
  classReader.readConst(175, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 19: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readInt(57);
Test 20: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 4);
ClassReader classReader = new ClassReader("java/lang/Object");
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 161);
Test 21: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
ClassReader classReader = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 91);
Test 22: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 884);
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 4);
Test 23: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 884);
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 4);
Test 24: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 2);
Attribute[] attributeArray = new Attribute[8];
classReader.accept((ClassVisitor) classWriter, attributeArray, 2);
Test 25: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 2);
Attribute[] attributeArray = new Attribute[8];
classReader.accept((ClassVisitor) classWriter, attributeArray, 8);
Test 26: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
char[] charArray = new char[9];
ClassWriter classWriter = new ClassWriter(746);
Attribute[] attributeArray = new Attribute[0];
classReader.accept((ClassVisitor) classWriter, attributeArray, 161);
classReader.readUTF8(56, charArray);
Test 27: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getItem(2);
Test 28: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readByte(8);
Test 29: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[8];
ClassWriter classWriter = new ClassWriter(classReader, 650);
classReader.readClass(132, charArray);
Test 30: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[5];
classReader.readConst(133, charArray);
Test 31: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readInt(1);
Test 32: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
classReader.readLong(185);
Test 33: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readShort(2);
Test 34: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[8];
classReader.readUTF8(3077, charArray);
Test 35: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readUnsignedShort(8);
Test 36: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader(classReader.b);
Test 37: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(2);
classReader.copyPool(classWriter);
Test 38: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
Label[] labelArray = new Label[0];
// Undeclared exception!
try { 
  classReader.readLabel(28, labelArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 39: 

Test 40: 
char[] charArray = new char[4];

Test 41: 
char[] charArray = new char[13];
ClassReader classReader = new ClassReader("com.example.mypackage.MyClass");
char[] charArray = new char[13];
int _int = 1000;
((ClassReader) charArray).readUTF8(_int, charArray);
String string = "com.example.mypackage.MyClass";
ClassReader classReader = new ClassReader(string);
char[] charArray = new char[13];
int _int = 1000;
((ClassReader) charArray).readUTF8(_int, charArray);

Test 42: 
char[] charArray = new char[1];

Test 43: 
Attribute[] attributeArray = new Attribute[1];

Test 44: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 884);
Attribute[] attributeArray = new Attribute[1];
((ClassReader)"wheel.asm.Label").accept((ClassVisitor) classWriter, attributeArray, (int) "MyClass");

Test 45: 
Attribute[] attributeArray = new Attribute[8];
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 2);
Attribute[] attributeArray = new Attribute[8];

Test 46: 
Attribute[] attributeArray = new Attribute[8];

Test 47: 
char[] charArray = new char[9];
ClassWriter classWriter = new ClassWriter(746);
Attribute[] attributeArray = new Attribute[0];
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
char[] charArray = new char[9];
ClassWriter classWriter = new ClassWriter(746);
Attribute[] attributeArray = new Attribute[0];
((ClassReader) charArray).accept((ClassVisitor) classWriter, attributeArray, 161);
int _int = 56;
((ClassReader) charArray).readUTF8(_int, charArray);

Test 48: 
String string = "car.asm.Engine";
ClassReader classReader = new ClassReader("car.asm.Engine");
int _int = 3;
((ClassReader) string).getItem(_int);

Test 49: 

Test 50: 
char[] charArray = new char[8];
ClassWriter classWriter = new ClassWriter((ClassReader) 650, 650);
char[] charArray = new char[8];
int _int = 650;
ClassWriter classWriter = new ClassWriter((ClassReader) _int, 650);
char[] charArray = new char[8];
int _int = 650;
ClassWriter classWriter = new ClassWriter((ClassReader) _int, 650);

Test 51: 
char[] charArray = new char[5];

Test 52: 
char[] charArray = new char[8];

Test 53: 

Test 54: 
Label[] labelArray = new Label[0];


* Minimizing test suite
* test suite isTestSuite: 39
Test 0: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.readShort(28);
Test 1: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 37);
classReader.accept((ClassVisitor) classWriter, 8);
Test 2: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getAccess();
Test 3: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getItem(2);
Test 4: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readByte(199);
Test 5: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
classReader.readLong(185);
Test 6: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
classReader.getClassName();
Test 7: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
ClassReader classReader = null;
try {
  classReader = new ClassReader(classReader.b, 4, 1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 8: 
ClassReader classReader = new ClassReader("wheel.asm.ClassReader");
ClassWriter classWriter = new ClassWriter(classReader, 384);
Test 9: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getSuperName();
Test 10: 
ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();
Test 11: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getInterfaces();
Test 12: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
classReader.getInterfaces();
Test 13: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader(classReader.b, 8, 8);
ClassWriter classWriter = null;
try {
  classWriter = new ClassWriter(classReader, 165);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 14: 
ClassReader classReader = null;
try {
  classReader = new ClassReader("car.asm.Engine");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("wheel.asm.ClassReader", e);
}

Test 15: 
Enumeration<FilterInputStream> enumeration = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
doReturn(false).when(enumeration).hasMoreElements();
SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);
ClassReader classReader = null;
try {
  classReader = new ClassReader(sequenceInputStream);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 16: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(4);
classReader.accept((ClassVisitor) classWriter, 8);
Test 17: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
ClassReader classReader = new ClassReader("org/apache/commons/io/filefilter/AbstractFileFilter");
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 91);
Test 18: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 884);
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 4);
Test 19: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 2);
Attribute[] attributeArray = new Attribute[8];
classReader.accept((ClassVisitor) classWriter, attributeArray, 2);
Test 20: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 884);
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 4);
Test 21: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[13];
// Undeclared exception!
try { 
  classReader.readUTF8(2114, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 22: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(132, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 23: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[1];
// Undeclared exception!
try { 
  classReader.readConst(175, charArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 24: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readInt(1);
Test 25: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readUnsignedShort(8);
Test 26: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 4);
ClassReader classReader = new ClassReader("java/lang/Object");
Attribute[] attributeArray = new Attribute[1];
classReader.accept((ClassVisitor) classWriter, attributeArray, 161);
Test 27: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(classReader, 2);
Attribute[] attributeArray = new Attribute[8];
classReader.accept((ClassVisitor) classWriter, attributeArray, 8);
Test 28: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
char[] charArray = new char[9];
ClassWriter classWriter = new ClassWriter(746);
Attribute[] attributeArray = new Attribute[0];
classReader.accept((ClassVisitor) classWriter, attributeArray, 161);
classReader.readUTF8(56, charArray);
Test 29: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readByte(8);
Test 30: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[8];
ClassWriter classWriter = new ClassWriter(classReader, 650);
classReader.readClass(132, charArray);
Test 31: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[5];
classReader.readConst(133, charArray);
Test 32: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readInt(57);
Test 33: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readLong(2);
Test 34: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.readShort(2);
Test 35: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] charArray = new char[8];
classReader.readUTF8(3077, charArray);
Test 36: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader classReader = new ClassReader(classReader.b);
Test 37: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter classWriter = new ClassWriter(2);
classReader.copyPool(classWriter);
Test 38: 
ClassReader classReader = new ClassReader("wheel.asm.Label");
Label[] labelArray = new Label[0];
// Undeclared exception!
try { 
  classReader.readLabel(28, labelArray);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 49%
* Total number of goals: 817
* Number of covered goals: 401
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 58%
* Total number of goals: 868
* Number of covered goals: 502
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 40
* Number of covered goals: 20
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 48%
* Total number of goals: 817
* Number of covered goals: 394
* Generated 39 tests with total length 110
* Resulting test suite's coverage: 61% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 32%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
short readShort = classReader.readShort(28);
assertEquals((short)2560, readShort);
assertEquals(1512, classReader.header);


** It was a parseable test case! 
refined test name is: testReadShortFromValidOffset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
int access = classReader.getAccess();
assertEquals(33, access);
assertEquals(1903, classReader.header);


** It was a parseable test case! 
refined test name is: testGetAccessAndHeader
* Compiling Tests
refined test name is: testGetClassReaderAccessAndHeader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
int item = classReader.getItem(2);
assertEquals(1903, classReader.header);
assertEquals(16, item);


** It was a parseable test case! 
refined test name is: testGetItem
* Compiling Tests
refined test name is: testGetItem
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
int readByte = classReader.readByte(199);
assertEquals(1903, classReader.header);
assertEquals(3, readByte);


** It was a parseable test case! 
refined test name is: testReadByteMethod
* Compiling Tests
refined test name is: testReadByteMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
long readLong = classReader.readLong(185);
assertEquals(8011734865091585641L, readLong);
assertEquals(746, classReader.header);


** It was a parseable test case! 
refined test name is: testReadLongAtOffsetReturnsExpectedValueAndHeader
* Compiling Tests
refined test name is: testReadLongAtOffsetOneHundredFifty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.AgeFileFilter");
assertEquals(746, classReader.header);

String className = classReader.getClassName();
assertEquals("org/apache/commons/io/filefilter/AgeFileFilter", className);


** It was a parseable test case! 
refined test name is: testClassHeader
* Compiling Tests
refined test name is: testClassHeader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader arg0 = new ClassReader("wheel.asm.ClassReader");
ClassWriter classWriter = new ClassWriter(arg0, 384);
assertEquals(2, ClassWriter.COMPUTE_FRAMES);


** It was a parseable test case! 
refined test name is: testComputeFrames
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
assertEquals(1903, classReader.header);

String superName = classReader.getSuperName();
assertEquals("java/lang/Object", superName);


** It was a parseable test case! 
refined test name is: testLabelClassHeader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();
assertEquals(927, classReader.header);


** It was a parseable test case! 
refined test name is: testGetSuperName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
classReader.getInterfaces();
assertEquals(1903, classReader.header);


** It was a parseable test case! 
refined test name is: testGetInterfaces
* Compiling Tests
refined test name is: testGetInterfaces
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.OrFileFilter");
String[] interfaces = classReader.getInterfaces();
assertEquals(1, interfaces.length);


** It was a parseable test case! 
refined test name is: testGetInterfacesReturnsCorrectLengthOfOne
* Compiling Tests
refined test name is: testGetInterfacesReturnsCorrectArrayLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassReader arg0 = new ClassReader(classReader.b, 8, 8);
ClassWriter classWriter = null;
try {
  classWriter = new ClassWriter(arg0, 165);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testClassReaderConstructorWithInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = null;
try {
  classReader = new ClassReader("car.asm.Engine");
  fail("Expecting exception: IOException");

} catch(Throwable e) {
   //
   // Class not found
   //
   verifyException("wheel.asm.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testIOExceptionWhenCreatingEngineClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter arg0 = new ClassWriter(4);
classReader.accept((ClassVisitor) arg0, 8);
assertEquals(33, classReader.getAccess());


** It was a parseable test case! 
refined test name is: testClassReaderAcceptWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] arg1 = new char[13];
// Undeclared exception!
try { 
  classReader.readUTF8(2114, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 13
   //
   verifyException("wheel.asm.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadUTF8throwsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] arg1 = new char[4];
// Undeclared exception!
try { 
  classReader.readConst(132, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 4
   //
   verifyException("wheel.asm.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadConstThrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] arg1 = new char[1];
// Undeclared exception!
try { 
  classReader.readConst(175, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // 1
   //
   verifyException("wheel.asm.ClassReader", e);
}


** It was a parseable test case! 
refined test name is: testReadConstthrowsArrayIndexOutOfBoundsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
int readInt = classReader.readInt(1);
assertEquals((-21316096), readInt);
assertEquals(1903, classReader.header);


** It was a parseable test case! 
refined test name is: testReadInt
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
int readUnsignedShort = classReader.readUnsignedShort(8);
assertEquals(1903, classReader.header);
assertEquals(181, readUnsignedShort);


** It was a parseable test case! 
refined test name is: testReadUnsignedShortFromHeader
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
int readByte = classReader.readByte(8);
assertEquals(1903, classReader.header);
assertEquals(0, readByte);


** It was a parseable test case! 
refined test name is: testReadByteWithValidIndexReturnsCorrectValue
* Compiling Tests
refined test name is: testReadByteReturnsExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader arg0 = new ClassReader("wheel.asm.Label");
assertEquals(1903, arg0.header);

char[] arg1 = new char[8];
ClassWriter classWriter = new ClassWriter(arg0, 650);
String readClass = arg0.readClass(132, arg1);
assertEquals("visitSubroutine", readClass);


** It was a parseable test case! 
refined test name is: testClassReaderReadClassWithHeaderAndName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
assertEquals(1903, classReader.header);

char[] arg1 = new char[5];
Object readConst = classReader.readConst(133, arg1);
assertEquals("", readConst);


** It was a parseable test case! 
refined test name is: testReadConstreturnsEmptyStringWhenIndexIsInvalid
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
int readInt = classReader.readInt(57);
assertEquals(2228365, readInt);
assertEquals(1903, classReader.header);


** It was a parseable test case! 
refined test name is: testReadIntMethodWithArgumentOf57
* Compiling Tests
refined test name is: testReadIntWithArgumentOfFiveSeven
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
long readLong = classReader.readLong(2);
assertEquals((-4990551337076653899L), readLong);
assertEquals(1903, classReader.header);


** It was a parseable test case! 
refined test name is: testReadLongWithOffset
* Compiling Tests
refined test name is: testReadLongWithOffset2Bytes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
short readShort = classReader.readShort(2);
assertEquals(1903, classReader.header);
assertEquals((short) (-17730), readShort);


** It was a parseable test case! 
refined test name is: testReadShort
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
char[] arg1 = new char[8];
String readUTF8 = classReader.readUTF8(3077, arg1);
assertEquals(1903, classReader.header);
assertEquals("", readUTF8);


** It was a parseable test case! 
refined test name is: testReadUTF8
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
ClassWriter arg0 = new ClassWriter(2);
classReader.copyPool(arg0);
assertEquals(1903, classReader.header);


** It was a parseable test case! 
refined test name is: testCopyPool
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader classReader = new ClassReader("wheel.asm.Label");
Label[] arg1 = new Label[0];
// Undeclared exception!
try { 
  classReader.readLabel(28, arg1);
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testReadLabelWithInvalidIndex
* Compiling Tests
refined test name is: testReadLabelWithInvalidIndex
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:22.023 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:22.050 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:37:22.200 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:22.203 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:22.351 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:22.353 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:37:22.506 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:22.508 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:37:22.630 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:22.633 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:37:22.764 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:22.767 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:23.583 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:23.586 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:23.700 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:23.701 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:23.782 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:23.784 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:37:23.895 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:23.896 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:37:24.017 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:24.018 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:24.162 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:24.163 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:24.237 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:24.238 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:24.704 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:24.706 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:24.844 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:24.845 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:24.979 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:24.981 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:25.126 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:25.128 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:25.271 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:25.273 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:25.416 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:25.418 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:37:25.565 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:25.570 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:25.873 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:25.875 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:25.972 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:25.973 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:37:26.087 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:26.089 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:37:26.236 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:26.240 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:26.400 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:26.402 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:26.554 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:37:26.557 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
[MASTER] 06:37:26.860 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:26.862 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:37:27.003 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:27.005 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 3 called: 2 to improve: false
** Write a test suite: 4 called: 3 to improve: false
** Write a test suite: 5 called: 4 to improve: false
** Write a test suite: 9 called: 5 to improve: false
** Write a test suite: 10 called: 6 to improve: false
** Write a test suite: 19 called: 7 to improve: false
** Write a test suite: 22 called: 8 to improve: false
** Write a test suite: 23 called: 9 to improve: false
** Write a test suite: 27 called: 10 to improve: false
[MASTER] 06:37:29.513 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:29.515 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 4 called: 1 to improve: false
** Write a test suite: 5 called: 2 to improve: false
** Write a test suite: 8 called: 3 to improve: false
** Write a test suite: 17 called: 4 to improve: false
** Write a test suite: 18 called: 5 to improve: false
** Write a test suite: 22 called: 6 to improve: false
** Write a test suite: 23 called: 7 to improve: false
** Write a test suite: 24 called: 8 to improve: false
** Write a test suite: 25 called: 9 to improve: false
** Write a test suite: 26 called: 10 to improve: false
[MASTER] 06:37:32.304 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/tmp/EvoSuite_pathingJar714680822050405791.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:37:32.306 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar714680822050405791.jar
* Writing tests to file
* Writing JUnit test case 'ClassReader_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 4 called: 1 to improve: false
** Write a test suite: 5 called: 2 to improve: false
** Write a test suite: 8 called: 3 to improve: false
** Write a test suite: 17 called: 4 to improve: false
** Write a test suite: 18 called: 5 to improve: false
** Write a test suite: 22 called: 6 to improve: false
** Write a test suite: 23 called: 7 to improve: false
** Write a test suite: 24 called: 8 to improve: false
** Write a test suite: 25 called: 9 to improve: false
** Write a test suite: 26 called: 10 to improve: false
* Done!

* Computation finished
