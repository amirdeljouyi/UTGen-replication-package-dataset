* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: wheel.asm.FieldWriter
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/80_wheelwebtool/evosuite-files/evosuite.properties
* Connecting to master process on port 17267
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 19:06:07.066 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 19:06:07.070 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 19:06:07.071 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 19:06:07.079 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 19:06:07.080 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 19:06:07.081 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 19:06:07.081 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 19:06:07.082 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 19:06:07.083 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 19:06:07.084 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 19:06:07.086 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 19:06:07.088 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 19:06:07.091 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 19:06:07.125 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 19:06:07.126 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class wheel.asm.FieldWriter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 212
* Using seed 1710270364708
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 103 / 212
[Progress:>                             0%] [Cov:================>                  46%][Progress:>                             1%] [Cov:====================>              58%][Progress:>                             1%] [Cov:======================>            65%][Progress:>                             1%] [Cov:========================>          70%][Progress:>                             2%] [Cov:========================>          71%][Progress:>                             2%] [Cov:=========================>         74%][Progress:>                             2%] [Cov:===========================>       79%][Progress:>                             2%] [Cov:===========================>       79%][Progress:>                             2%] [Cov:===========================>       79%][Progress:>                             2%] [Cov:===========================>       79%][Progress:>                             3%] [Cov:============================>      81%][Progress:>                             3%] [Cov:=============================>     83%][Progress:>                             3%] [Cov:=============================>     83%][Progress:>                             3%] [Cov:=============================>     84%][Progress:>                             3%] [Cov:=============================>     84%][Progress:>                             3%] [Cov:=============================>     84%][Progress:>                             3%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:===>                          10%] [Cov:==============================>    86%][Progress:===>                          10%] [Cov:==============================>    86%][Progress:===>                          10%] [Cov:==============================>    86%][Progress:===>                          10%] [Cov:==============================>    86%][Progress:===>                          10%] [Cov:==============================>    86%][Progress:===>                          10%] [Cov:==============================>    86%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          10%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          11%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:===>                          12%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        17%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        18%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:=====>                        19%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:======>                       20%] [Cov:==============================>    88%][Progress:=======>                      25%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:=======>                      26%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     27%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:========>                     28%] [Cov:==============================>    88%][Progress:=========>                    33%] [Cov:==============================>    88%][Progress:=========>                    33%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   34%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   35%] [Cov:==============================>    88%][Progress:==========>                   36%] [Cov:==============================>    88%][Progress:==========>                   36%] [Cov:==============================>    88%][Progress:==========>                   36%] [Cov:==============================>    88%][Progress:==========>                   36%] [Cov:==============================>    88%][Progress:==========>                   36%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 41%] [Cov:==============================>    88%][Progress:============>                 42%] [Cov:==============================>    88%][Progress:============>                 42%] [Cov:==============================>    88%][Progress:============>                 42%] [Cov:==============================>    88%][Progress:============>                 42%] [Cov:==============================>    88%][Progress:============>                 42%] [Cov:==============================>    88%][Progress:==============>               47%] [Cov:==============================>    88%][Progress:==============>               47%] [Cov:==============================>    88%][Progress:=================>            57%] [Cov:==============================>    88%][Progress:=================>            57%] [Cov:==============================>    88%][Progress:=================>            57%] [Cov:==============================>    88%][Progress:=================>            57%] [Cov:==============================>    88%][Progress:=================>            57%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            58%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           61%] [Cov:==============================>    88%][Progress:==================>           62%] [Cov:==============================>    88%][Progress:==================>           62%] [Cov:==============================>    88%][Progress:==================>           62%] [Cov:==============================>    88%][Progress:====================>         67%] [Cov:==============================>    88%][Progress:====================>         67%] [Cov:==============================>    88%][Progress:====================>         67%] [Cov:==============================>    88%][Progress:====================>         67%] [Cov:==============================>    88%][Progress:====================>         67%] [Cov:==============================>    88%][Progress:=====================>        72%] [Cov:==============================>    88%][Progress:=====================>        72%] [Cov:==============================>    88%][Progress:=====================>        72%] [Cov:==============================>    88%][Progress:=====================>        72%] [Cov:==============================>    88%][Progress:=====================>        72%] [Cov:==============================>    88%][Progress:=====================>        73%] [Cov:==============================>    88%][Progress:=====================>        73%] [Cov:==============================>    88%][Progress:=====================>        73%] [Cov:==============================>    88%][Progress:=====================>        73%] [Cov:==============================>    88%][Progress:=====================>        73%] [Cov:==============================>    88%][Progress:=====================>        73%] [Cov:==============================>    88%][Progress:=====================>        73%] [Cov:==============================>    88%][Progress:=====================>        73%] [Cov:==============================>    88%][Progress:=====================>        73%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:=======================>      79%] [Cov:==============================>    88%][Progress:========================>     80%] [Cov:==============================>    88%][Progress:========================>     80%] [Cov:==============================>    88%][Progress:========================>     80%] [Cov:==============================>    88%][Progress:========================>     80%] [Cov:==============================>    88%][Progress:========================>     80%] [Cov:==============================>    88%][Progress:========================>     80%] [Cov:==============================>    88%][Progress:========================>     80%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    85%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:==========================>   87%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%]
* Search finished after 104s and 346 generations, 132948 statements, best individual has fitness: 3.0
* Generated before the refinement 15 tests with total length 62
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1091))
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 0, "Q", "Q", "%u@-zBSlLrcVb-C{", "%u@-zBSlLrcVb-C{")
statement is: visitEnd()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.visitEnd()
test data is: ClassWriter classWriter = new ClassWriter((-1091));
FieldWriter fieldWriter = new FieldWriter(classWriter, 0, "Q", "Q", "%u@-zBSlLrcVb-C{", "%u@-zBSlLrcVb-C{");
fieldWriter.visitEnd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        fieldWriter.visitEnd();
    }
}
statement is: fieldWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitEnd() target is: fieldWriter method is: visitEnd()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII")
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 36, "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", arg5)
test data is: ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
Object object = new Object();
FieldWriter fieldWriter = new FieldWriter(classWriter, 36, "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        FieldWriter fieldWriter = new FieldWriter(classWriter, 36, "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", object);
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 36, "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: Object object = new Object();
int _int = 36;
String string = "`";
String string = "org.apache.commons.io.filefilter.CanReadFileFilter";
String string = "\"p<";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, (String) object, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-13))
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2, "!1m55{3`", "!1m55{3`", "!1m55{3`", (Object) null)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-13));
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m55{3`", "!1m55{3`", "!1m55{3`", (Object) null);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "This is a test string.", "This is another test string.", "This is a third test string.", ((Object) (null)));
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "This is a test string.", "This is another test string.", "This is a third test string.", ((Object) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: getSize()I
TestCase is: int _int = 2;
String string = "This is a test string.";
String string = "This is another test string.";
String string = "This is a third test string.";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, "!1m55{3`", (Object) null);
((FieldWriter) string).getSize();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII")
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, -1532, "A long string of characters", "Another long string of characters", "Yet another long string of characters", "And another long string of characters");
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, -1532, "A long string of characters", "Another long string of characters", "Yet another long string of characters", "And another long string of characters"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: getSize()I
TestCase is: String string = "A long string of characters";
String string = "Another long string of characters";
String string = "Yet another long string of characters";
String string = "And another long string of characters";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) string, (int) string, string, string, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
((FieldWriter) string).getSize();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII")
statement is: org.evosuite.testcase.statements.AssignmentStatement@5bddecd7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.version = (-1532)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.version = -1532;
        fieldWriter.getSize();
    }
}
statement is: classWriter.version = -1532, class spoon.support.reflect.code.CtAssignmentImpl
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L")
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        fieldWriter.getSize();
        // Improved test data
        ClassWriter classWriter = new ClassWriter(0);
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "myField", "myDescription", ((String) (null)), "L");
        fieldWriter.getSize();
    }
}
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
statement is: // Improved test data
ClassWriter classWriter = new ClassWriter(0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "myField", "myDescription", ((String) (null)), "L"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 6
Matched Method is: getSize()I
TestCase is: int _int = 0;
ClassWriter classWriter = new ClassWriter(_int);
int _int = 2;
String string = "myField";
String string = "myDescription";
String string = "L";
FieldWriter fieldWriter = new FieldWriter(classWriter, _int, string, string, string, "L");
((FieldWriter) classWriter).getSize();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII")
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)fieldWriter.visitAnnotation("The list of names must not be null", true)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.visitAnnotation("The list of names must not be null", true);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "The list of names must not be null", "The list of names must not be null", "The list of names must not be null", "The list of names must not be null");
        fieldWriter.visitAnnotation("The list of names must not be null", true);
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "The list of names must not be null", "The list of names must not be null", "The list of names must not be null", "The list of names must not be null"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAnnotation("The list of names must not be null", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAnnotation("The list of names must not be null", true) target is: fieldWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor;
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: getSize()I
TestCase is: int _int = 2;
String string = "The list of names must not be null";
String string = "The list of names must not be null";
String string = "The list of names must not be null";
String string = "The list of names must not be null";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
String string = "The list of names must not be null";
boolean _boolean = true;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2, "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]")
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)fieldWriter.visitAnnotation("!1m5y{3`]", false)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]");
fieldWriter.visitAnnotation("!1m5y{3`]", false);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "myInt", "myDouble", "myString", "myChar");
        fieldWriter.visitAnnotation("myAnnotation", false);
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "myInt", "myDouble", "myString", "myChar"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAnnotation("myAnnotation", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAnnotation("myAnnotation", false) target is: fieldWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor;
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: getSize()I
TestCase is: int _int = 2;
String string = "myInt";
String string = "myDouble";
String string = "myString";
String string = "myChar";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "!1m5y{3`]");
String string = "myAnnotation";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(18)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2, "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]")
statement is: wheel.asm.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.Attribute
statement code is: Attribute attribute = new Attribute("!1m!5Ly{g`]")
statement is: visitAttribute(Lwheel/asm/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.visitAttribute(arg0)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(18);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]");
Attribute attribute = new Attribute("!1m!5Ly{g`]");
fieldWriter.visitAttribute(attribute);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "my_field", "int", "my_value");
        Attribute attribute = new Attribute("my_attribute");
        fieldWriter.visitAttribute(attribute);
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "my_field", "int", "my_value"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("my_attribute"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAttribute(attribute) target is: fieldWriter method is: visitAttribute(Attribute)
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
TestCase is: String string = "my_attribute";
Attribute attribute = new Attribute(string);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2, "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", (Object) null)
statement is: wheel.asm.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", (Object) null);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", ((Object) (null)));
        ByteVector byteVector = new ByteVector();
        fieldWriter.put(byteVector);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", ((Object) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put(ByteVector)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: put(Lwheel/asm/ByteVector;)V
TestCase is: int _int = 2;
String string = "";
String string = "27e/pc|%(tn5BMeCf?";
String string = "RuntimeInvisibleAnnotations";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, "RuntimeInvisibleAnnotations", (Object) null);
ByteVector byteVector = new ByteVector();
((FieldWriter) string).put(byteVector);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII")
statement is: org.evosuite.testcase.statements.AssignmentStatement@7e36ac0d type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.version = (-1532)
statement is: wheel.asm.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        fieldWriter.put(new ByteVector());
    }
}
statement is: fieldWriter.put(new ByteVector()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(new ByteVector()) target is: fieldWriter method is: put(ByteVector)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L")
statement is: org.evosuite.testcase.statements.FieldStatement@3166a69b type is: class org.evosuite.testcase.statements.FieldStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = classWriter.pool
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        ByteVector byteVector = classWriter.pool;
        fieldWriter.put(byteVector);
    }
}
statement is: ByteVector byteVector = classWriter.pool, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: classWriter.pool is classWriter
CtField is: wheel.asm.ByteVector wheel.asm.ClassWriter.pool ByteVector pool
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put(ByteVector)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII")
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)classWriter.lastField.visitAnnotation("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", true)
statement is: wheel.asm.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = new ByteVector(0)
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.lastField.visitAnnotation("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", true);
ByteVector byteVector = new ByteVector(0);
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2, -1234567890, "Error", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
        lastField.visitAnnotation("Error", true);
        ByteVector byteVector = new ByteVector(0);
        fieldWriter.put(byteVector);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2, -1234567890, "Error", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: lastField.visitAnnotation("Error", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: lastField.visitAnnotation("Error", true) target is: lastField method is: visitAnnotation(java.lang.String,boolean)
statement is: ByteVector byteVector = new ByteVector(0), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put(ByteVector)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: put(Lwheel/asm/ByteVector;)V
TestCase is: int _int = 2;
String string = "Error";
String string = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
String string = "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
int _int = 0;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?")
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)fieldWriter.visitAnnotation("=b&23t@=9O/", false)
statement is: wheel.asm.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
fieldWriter.visitAnnotation("=b&23t@=9O/", false);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        fieldWriter = new FieldWriter(classWriter, -1302, "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?)");
        fieldWriter.visitAnnotation("=b&23t@=9O/", false);
        byteVector = new ByteVector();
        fieldWriter.put(byteVector);
    }
}
statement is: fieldWriter = new FieldWriter(classWriter, -1302, "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?)"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: fieldWriter.visitAnnotation("=b&23t@=9O/", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAnnotation("=b&23t@=9O/", false) target is: fieldWriter method is: visitAnnotation(java.lang.String,boolean)
statement is: byteVector = new ByteVector(), class spoon.support.reflect.code.CtAssignmentImpl
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?")
statement is: wheel.asm.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: wheel.asm.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.Attribute
statement code is: Attribute attribute = new Attribute("b7|*s?^Kvvc[s}/%n}@")
statement is: visitAttribute(Lwheel/asm/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.visitAttribute(arg0)
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
ByteVector byteVector = new ByteVector();
Attribute attribute = new Attribute("b7|*s?^Kvvc[s}/%n}@");
fieldWriter.visitAttribute(attribute);
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, -1302, "+ueVh@o;s9$_", "Lorem Ipsum", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
        ByteVector byteVector = new ByteVector();
        Attribute attribute = new Attribute("b7|*s?^Kvvc[s}/%n}@");
        fieldWriter.visitAttribute(attribute);
        fieldWriter.put(byteVector);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, -1302, "+ueVh@o;s9$_", "Lorem Ipsum", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = new ByteVector(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("b7|*s?^Kvvc[s}/%n}@"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAttribute(attribute) target is: fieldWriter method is: visitAttribute(Attribute)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: visitAttribute(Lwheel/asm/Attribute;)V
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put(ByteVector)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: put(Lwheel/asm/ByteVector;)V
TestCase is: String string = "+ueVh@o;s9$_";
String string = "Lorem Ipsum";
String string = "27e/pc|%(tn5BMeCf?";
String string = "27e/pc|%(tn5BMeCf?";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) string, (int) string, string, string, "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
ByteVector byteVector = new ByteVector();
String string = "b7|*s?^Kvvc[s}/%n}@";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
((FieldWriter) string).put(byteVector);

* test suite isTestSuite: 25
Test 0: 
ClassWriter classWriter = new ClassWriter((-1091));
FieldWriter fieldWriter = new FieldWriter(classWriter, 0, "Q", "Q", "%u@-zBSlLrcVb-C{", "%u@-zBSlLrcVb-C{");
fieldWriter.visitEnd();
Test 1: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
Object object = new Object();
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 36, "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", object);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value java.lang.Object@17cdc87d
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 2: 
ClassWriter classWriter = new ClassWriter((-13));
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m55{3`", "!1m55{3`", "!1m55{3`", (Object) null);
fieldWriter.getSize();
Test 3: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
fieldWriter.getSize();
Test 6: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.visitAnnotation("The list of names must not be null", true);
fieldWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]");
fieldWriter.visitAnnotation("!1m5y{3`]", false);
fieldWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(18);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]");
Attribute attribute = new Attribute("!1m!5Ly{g`]");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 9: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", (Object) null);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 10: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 11: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);
Test 12: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.lastField.visitAnnotation("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", true);
ByteVector byteVector = new ByteVector(0);
fieldWriter.put(byteVector);
Test 13: 
ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
fieldWriter.visitAnnotation("=b&23t@=9O/", false);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 14: 
ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
ByteVector byteVector = new ByteVector();
Attribute attribute = new Attribute("b7|*s?^Kvvc[s}/%n}@");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 15: 
Object object = new Object();
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 36, (int) "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", (String) object, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");

Test 16: 
String string = "This is a test string.";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "This is a test string.", "This is another test string.", "This is a third test string.", "!1m55{3`", (Object) null);
((FieldWriter) string).getSize();

Test 17: 
String string = "Another long string of characters";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "A long string of characters", (int) "Another long string of characters", "Yet another long string of characters", "And another long string of characters", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
((FieldWriter) string).getSize();

Test 18: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "myField", "myDescription", "L", "L");
((FieldWriter) classWriter).getSize();

Test 19: 
String string = "The list of names must not be null";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "The list of names must not be null", "The list of names must not be null", "The list of names must not be null", "The list of names must not be null", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
String string = "The list of names must not be null";
boolean _boolean = true;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

Test 20: 
String string = "myInt";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "myInt", "myDouble", "myString", "myChar", "!1m5y{3`]");
String string = "myAnnotation";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

Test 21: 
Attribute attribute = new Attribute("my_attribute");

Test 22: 
String string = "";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (Object) null);
ByteVector byteVector = new ByteVector();
((FieldWriter) string).put(byteVector);

Test 23: 
String string = "Error";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "Error", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
int _int = 0;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);

Test 24: 
String string = "Lorem Ipsum";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "+ueVh@o;s9$_", (int) "Lorem Ipsum", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
ByteVector byteVector = new ByteVector();
String string = "b7|*s?^Kvvc[s}/%n}@";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
((FieldWriter) string).put(byteVector);


* Generated after the refinement and before minimization 25 tests with total length 102
* test suite isTestSuite: 25
Test 0: 
ClassWriter classWriter = new ClassWriter((-1091));
FieldWriter fieldWriter = new FieldWriter(classWriter, 0, "Q", "Q", "%u@-zBSlLrcVb-C{", "%u@-zBSlLrcVb-C{");
fieldWriter.visitEnd();
Test 1: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
Object object = new Object();
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 36, "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", object);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value java.lang.Object@17cdc87d
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 2: 
ClassWriter classWriter = new ClassWriter((-13));
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m55{3`", "!1m55{3`", "!1m55{3`", (Object) null);
fieldWriter.getSize();
Test 3: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
fieldWriter.getSize();
Test 6: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.visitAnnotation("The list of names must not be null", true);
fieldWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]");
fieldWriter.visitAnnotation("!1m5y{3`]", false);
fieldWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(18);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]");
Attribute attribute = new Attribute("!1m!5Ly{g`]");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 9: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", (Object) null);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 10: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 11: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);
Test 12: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.lastField.visitAnnotation("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", true);
ByteVector byteVector = new ByteVector(0);
fieldWriter.put(byteVector);
Test 13: 
ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
fieldWriter.visitAnnotation("=b&23t@=9O/", false);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 14: 
ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
ByteVector byteVector = new ByteVector();
Attribute attribute = new Attribute("b7|*s?^Kvvc[s}/%n}@");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 15: 
Object object = new Object();
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 36, (int) "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", (String) object, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");

Test 16: 
String string = "This is a test string.";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "This is a test string.", "This is another test string.", "This is a third test string.", "!1m55{3`", (Object) null);
((FieldWriter) string).getSize();

Test 17: 
String string = "Another long string of characters";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "A long string of characters", (int) "Another long string of characters", "Yet another long string of characters", "And another long string of characters", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
((FieldWriter) string).getSize();

Test 18: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "myField", "myDescription", "L", "L");
((FieldWriter) classWriter).getSize();

Test 19: 
String string = "The list of names must not be null";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "The list of names must not be null", "The list of names must not be null", "The list of names must not be null", "The list of names must not be null", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
String string = "The list of names must not be null";
boolean _boolean = true;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

Test 20: 
String string = "myInt";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "myInt", "myDouble", "myString", "myChar", "!1m5y{3`]");
String string = "myAnnotation";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

Test 21: 
Attribute attribute = new Attribute("my_attribute");

Test 22: 
String string = "";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", (Object) null);
ByteVector byteVector = new ByteVector();
((FieldWriter) string).put(byteVector);

Test 23: 
String string = "Error";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "Error", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
int _int = 0;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);

Test 24: 
String string = "Lorem Ipsum";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "+ueVh@o;s9$_", (int) "Lorem Ipsum", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
ByteVector byteVector = new ByteVector();
String string = "b7|*s?^Kvvc[s}/%n}@";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
((FieldWriter) string).put(byteVector);


* Minimizing test suite
* test suite isTestSuite: 15
Test 0: 
ClassWriter classWriter = new ClassWriter(18);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]");
Attribute attribute = new Attribute("!1m!5Ly{g`]");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 1: 
ClassWriter classWriter = new ClassWriter((-1091));
FieldWriter fieldWriter = new FieldWriter(classWriter, 0, "Q", "Q", "%u@-zBSlLrcVb-C{", "%u@-zBSlLrcVb-C{");
fieldWriter.visitEnd();
Test 2: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
Object object = new Object();
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 36, "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", object);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value java.lang.Object@3b80867e
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter((-13));
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m55{3`", "!1m55{3`", "!1m55{3`", (Object) null);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]");
fieldWriter.visitAnnotation("!1m5y{3`]", false);
fieldWriter.getSize();
Test 6: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.visitAnnotation("The list of names must not be null", true);
fieldWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
fieldWriter.getSize();
Test 9: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", (Object) null);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 10: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);
Test 11: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 12: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.lastField.visitAnnotation("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", true);
ByteVector byteVector = new ByteVector(0);
fieldWriter.put(byteVector);
Test 13: 
ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
fieldWriter.visitAnnotation("=b&23t@=9O/", false);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 14: 
ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
ByteVector byteVector = new ByteVector();
Attribute attribute = new Attribute("b7|*s?^Kvvc[s}/%n}@");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 85
* Number of covered goals: 85
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 5
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Generated 15 tests with total length 62
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 37%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1091));
FieldWriter fieldWriter = new FieldWriter(arg0, 0, "Q", "Q", "%u@-zBSlLrcVb-C{", "%u@-zBSlLrcVb-C{");
fieldWriter.visitEnd();

** It was a parseable test case! 
refined test name is: testFieldWriterVisitEnd
* Compiling Tests
refined test name is: testFieldWriterVisitEnd
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(arg0, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
int size = fieldWriter.getSize();
assertEquals(16, size);


** It was a parseable test case! 
refined test name is: testCalculateFieldWriterSize
* Compiling Tests
refined test name is: testFieldWriterSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-13));
FieldWriter fieldWriter = new FieldWriter(arg0, 2, "!1m55{3`", "!1m55{3`", "!1m55{3`", (Object) null);
int size = fieldWriter.getSize();
assertEquals(16, size);


** It was a parseable test case! 
refined test name is: testGetSizeReturnsExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(arg0, 2, "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]");
fieldWriter.visitAnnotation("!1m5y{3`]", false);
int size = fieldWriter.getSize();
assertEquals(36, size);


** It was a parseable test case! 
refined test name is: testFieldWriterSetsCorrectSize
* Compiling Tests
refined test name is: testFieldWriterSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(arg0, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.visitAnnotation("The list of names must not be null", true);
int size = fieldWriter.getSize();
assertEquals(36, size);


** It was a parseable test case! 
refined test name is: testGetSizeReturnsExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(arg0, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
int size = fieldWriter.getSize();
assertEquals(36, size);


** It was a parseable test case! 
refined test name is: testGetSizeReturnsExpectedValue
* Compiling Tests
refined test name is: testFieldWriterSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(arg0, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
arg0.version = (-1532);
int size = fieldWriter.getSize();
assertEquals(30, size);


** It was a parseable test case! 
refined test name is: testFieldWriterGetSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:34.241 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:34.264 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:34.320 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:34.321 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 19:22:34.375 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:34.376 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:34.425 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:34.426 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 19:22:34.480 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:34.482 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:34.534 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:34.535 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 19:22:34.693 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:34.696 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 3 called: 2 to improve: false
** Write a test suite: 5 called: 3 to improve: false
[MASTER] 19:22:34.788 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:34.789 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
** Write a test suite: 5 called: 2 to improve: false
** Write a test suite: 6 called: 3 to improve: false
[MASTER] 19:22:34.884 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:34.885 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
[MASTER] 19:22:35.071 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 15
Test 0: 
ClassWriter classWriter = new ClassWriter((-1091));
FieldWriter fieldWriter = new FieldWriter(classWriter, 0, "Q", "Q", "%u@-zBSlLrcVb-C{", "%u@-zBSlLrcVb-C{");
fieldWriter.visitEnd();
Test 1: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
Object object = new Object();
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 36, "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", object);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value java.lang.Object@6ed65c90
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 2: 
ClassWriter classWriter = new ClassWriter((-13));
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m55{3`", "!1m55{3`", "!1m55{3`", (Object) null);
fieldWriter.getSize();
Test 3: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
fieldWriter.getSize();
Test 6: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.visitAnnotation("The list of names must not be null", true);
fieldWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]");
fieldWriter.visitAnnotation("!1m5y{3`]", false);
fieldWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(18);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]");
Attribute attribute = new Attribute("!1m!5Ly{g`]");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 9: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", (Object) null);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 10: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 11: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);
Test 12: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.lastField.visitAnnotation("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", true);
ByteVector byteVector = new ByteVector(0);
fieldWriter.put(byteVector);
Test 13: 
ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
fieldWriter.visitAnnotation("=b&23t@=9O/", false);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 14: 
ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
ByteVector byteVector = new ByteVector();
Attribute attribute = new Attribute("b7|*s?^Kvvc[s}/%n}@");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}


* Minimizing test suite
[MASTER] 19:22:36.600 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 15
Test 0: 
ClassWriter classWriter = new ClassWriter(18);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]", "!1m!5Ly{g`]");
Attribute attribute = new Attribute("!1m!5Ly{g`]");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 1: 
ClassWriter classWriter = new ClassWriter((-1091));
FieldWriter fieldWriter = new FieldWriter(classWriter, 0, "Q", "Q", "%u@-zBSlLrcVb-C{", "%u@-zBSlLrcVb-C{");
fieldWriter.visitEnd();
Test 2: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
Object object = new Object();
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 36, "`", "org.apache.commons.io.filefilter.CanReadFileFilter", "\"p<", object);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value java.lang.Object@52084fd0
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter((-13));
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m55{3`", "!1m55{3`", "!1m55{3`", (Object) null);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]", "!1m5y{3`]");
fieldWriter.visitAnnotation("!1m5y{3`]", false);
fieldWriter.getSize();
Test 6: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.visitAnnotation("The list of names must not be null", true);
fieldWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
fieldWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
fieldWriter.getSize();
Test 9: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "", "27e/pc|%(tn5BMeCf?", "RuntimeInvisibleAnnotations", (Object) null);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 10: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "zo2DX}Z", "zo2DX}Z", (String) null, "L");
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);
Test 11: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1532), "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.version = (-1532);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 12: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII");
classWriter.lastField.visitAnnotation("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", true);
ByteVector byteVector = new ByteVector(0);
fieldWriter.put(byteVector);
Test 13: 
ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
fieldWriter.visitAnnotation("=b&23t@=9O/", false);
ByteVector byteVector = new ByteVector();
fieldWriter.put(byteVector);
Test 14: 
ClassWriter classWriter = new ClassWriter(7);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1302), "+ueVh@o;s9$_", "", "27e/pc|%(tn5BMeCf?", "27e/pc|%(tn5BMeCf?");
ByteVector byteVector = new ByteVector();
Attribute attribute = new Attribute("b7|*s?^Kvvc[s}/%n}@");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 85
* Number of covered goals: 85
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 5
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Generated 15 tests with total length 62
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 19:22:36.658 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 37%
* Compiling and checking tests
[MASTER] 19:22:39.238 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:40.337 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:40.338 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:40.403 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:40.404 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:40.456 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:40.457 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:40.518 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:40.520 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:40.597 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:40.598 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:40.669 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:40.670 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 19:22:40.731 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:40.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
[MASTER] 19:22:40.848 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:40.849 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
[MASTER] 19:22:40.970 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/tmp/EvoSuite_pathingJar8697222687541346792.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 19:22:40.971 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8697222687541346792.jar
* Writing tests to file
[MASTER] 19:22:40.973 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'FieldWriter_ESTest' to evosuite-tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
** Write a test suite: 5 called: 2 to improve: false
** Write a test suite: 6 called: 3 to improve: false
* Writing JUnit test case 'FieldWriter_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
* Done!

* Computation finished
