* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: wheel.asm.ClassWriter
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/80_wheelwebtool/evosuite-files/evosuite.properties
* Connecting to master process on port 5472
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 12:06:20.011 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 12:06:20.016 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 12:06:20.017 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 12:06:20.024 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 12:06:20.025 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 12:06:20.026 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 12:06:20.026 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 12:06:20.028 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 12:06:20.029 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 12:06:20.030 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 12:06:20.032 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 12:06:20.034 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 12:06:20.037 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 12:06:20.061 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 12:06:20.063 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class wheel.asm.ClassWriter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 778
* Using seed 1710331576711
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 346 / 778
[Progress:>                             0%] [Cov:==================>                53%][Progress:>                             0%] [Cov:====================>              58%][Progress:>                             0%] [Cov:=====================>             62%][Progress:>                             1%] [Cov:======================>            65%][Progress:>                             1%] [Cov:=======================>           68%][Progress:>                             1%] [Cov:========================>          69%][Progress:>                             1%] [Cov:========================>          70%][Progress:>                             2%] [Cov:========================>          70%][Progress:>                             2%] [Cov:========================>          70%][Progress:>                             2%] [Cov:========================>          70%][Progress:>                             2%] [Cov:========================>          71%][Progress:>                             2%] [Cov:=========================>         72%][Progress:>                             2%] [Cov:=========================>         72%][Progress:>                             2%] [Cov:=========================>         72%][Progress:>                             2%] [Cov:=========================>         72%][Progress:>                             2%] [Cov:=========================>         72%][Progress:>                             2%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:=========================>         73%][Progress:>                             3%] [Cov:=========================>         74%][Progress:>                             3%] [Cov:==========================>        75%][Progress:=>                            5%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        75%][Progress:=>                            6%] [Cov:==========================>        76%][Progress:=>                            6%] [Cov:==========================>        76%][Progress:=>                            6%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           8%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:==========================>        76%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:==>                           9%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       78%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          10%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:===========================>       79%][Progress:===>                          13%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:===>                          13%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         14%] [Cov:============================>      80%][Progress:====>                         16%] [Cov:============================>      80%][Progress:====>                         16%] [Cov:============================>      80%][Progress:====>                         16%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      80%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        17%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      81%][Progress:======>                       23%] [Cov:============================>      81%][Progress:=======>                      26%] [Cov:============================>      81%][Progress:=======>                      26%] [Cov:============================>      81%][Progress:=======>                      26%] [Cov:============================>      81%][Progress:=======>                      26%] [Cov:============================>      81%][Progress:=======>                      26%] [Cov:============================>      81%][Progress:=======>                      26%] [Cov:============================>      81%][Progress:=======>                      26%] [Cov:============================>      81%][Progress:=======>                      26%] [Cov:============================>      81%][Progress:========>                     29%] [Cov:============================>      81%][Progress:========>                     29%] [Cov:============================>      81%][Progress:========>                     29%] [Cov:============================>      81%][Progress:========>                     29%] [Cov:============================>      81%][Progress:========>                     29%] [Cov:============================>      81%][Progress:========>                     29%] [Cov:============================>      81%][Progress:=========>                    32%] [Cov:============================>      81%][Progress:=========>                    32%] [Cov:============================>      81%][Progress:=========>                    32%] [Cov:============================>      81%][Progress:=========>                    32%] [Cov:============================>      81%][Progress:==========>                   34%] [Cov:============================>      81%][Progress:===========>                  37%] [Cov:============================>      81%][Progress:===========>                  37%] [Cov:============================>      81%][Progress:===========>                  37%] [Cov:============================>      81%][Progress:===========>                  37%] [Cov:============================>      81%][Progress:===========>                  37%] [Cov:============================>      81%][Progress:===========>                  37%] [Cov:============================>      81%][Progress:===========>                  37%] [Cov:============================>      81%][Progress:===========>                  37%] [Cov:============================>      81%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  37%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:===========>                  38%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:============>                 41%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:============================>      82%][Progress:=============>                44%] [Cov:=============================>     83%][Progress:=============>                44%] [Cov:=============================>     83%][Progress:=============>                44%] [Cov:=============================>     83%][Progress:=============>                44%] [Cov:=============================>     83%][Progress:=============>                44%] [Cov:=============================>     83%][Progress:=============>                44%] [Cov:=============================>     83%][Progress:=============>                44%] [Cov:=============================>     83%][Progress:=============>                44%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                45%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:=============>                46%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               48%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     84%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              51%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:===============>              52%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             54%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:=============================>     85%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:================>             55%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            58%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:=================>            59%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           62%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:==================>           63%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          64%] [Cov:==============================>    86%][Progress:===================>          66%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:====================>         67%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        70%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:=====================>        71%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       74%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:======================>       75%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      77%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:=======================>      78%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:========================>     81%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    84%] [Cov:==============================>    86%][Progress:=========================>    86%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:==========================>   89%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  92%] [Cov:==============================>    86%][Progress:===========================>  93%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 95%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:============================> 96%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:=============================>98%] [Cov:==============================>    86%][Progress:==============================100%] [Cov:==============================>    86%]
* Search finished after 203s and 503 generations, 156954 statements, best individual has fitness: 62.0
* Generated before the refinement 51 tests with total length 157
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(92)
statement is: newField(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newField = classWriter.newField("", "", "")
test data is: ClassWriter classWriter = new ClassWriter(92);
classWriter.newField("", "", "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newField("java.lang.String", "employeeName", "\"John Doe\"");
        classWriter.newField("int", "ageOfEmployee", "35");
        classWriter.newField("double", "annualSalary", "10000.00");
    }
}
statement is: classWriter.newField("java.lang.String", "employeeName", "\"John Doe\""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newField("java.lang.String", "employeeName", "\"John Doe\"") target is: classWriter method is: newField(java.lang.String,java.lang.String,java.lang.String)
statement is: classWriter.newField("int", "ageOfEmployee", "35"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newField("int", "ageOfEmployee", "35") target is: classWriter method is: newField(java.lang.String,java.lang.String,java.lang.String)
statement is: classWriter.newField("double", "annualSalary", "10000.00"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newField("double", "annualSalary", "10000.00") target is: classWriter method is: newField(java.lang.String,java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(35)
statement is: valueOf(C)Ljava/lang/Character; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Character
statement code is: Character valueOf = Character.valueOf('P')
statement is: visitField(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Lwheel/asm/FieldVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter visitField = (FieldWriter)classWriter.visitField(35, "", "", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", arg4)
test data is: ClassWriter classWriter = new ClassWriter(35);
Character valueOf = Character.valueOf('P');
classWriter.visitField(35, "", "", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", valueOf);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Character valueOf = Character.valueOf('P');
        classWriter.visitField(35, "", "", "This is a descriptive field name", valueOf);
    }
}
statement is: Character valueOf = Character.valueOf('P'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Character.valueOf('P') target is: Character method is: valueOf(char)
Matched Method is: valueOf(C)Ljava/lang/Character;
statement is: classWriter.visitField(35, "", "", "This is a descriptive field name", valueOf), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitField(35, "", "", "This is a descriptive field name", valueOf) target is: classWriter method is: visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Character)
TestCase is: char _char = 'P';
Character.valueOf(_char);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(92)
statement is: newMethod(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newMethod = classWriter.newMethod("", "", "", false)
test data is: ClassWriter classWriter = new ClassWriter(92);
classWriter.newMethod("", "", "", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newMethod("calculateSum", "int, int", "return sum of two integers", true);
    }
}
statement is: classWriter.newMethod("calculateSum", "int, int", "return sum of two integers", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newMethod("calculateSum", "int, int", "return sum of two integers", true) target is: classWriter method is: newMethod(java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(384)
statement is: org.evosuite.testcase.statements.ArrayStatement@87ff9f64 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dd1c72ab type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ")V"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(384, 384, "", ")V", "", arg5)
statement is: org.evosuite.testcase.statements.AssignmentStatement@b7ebdf01 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: classWriter.invalidFrames = true
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(384);
String[] stringArray = new String[1];
stringArray[0] = ")V";
classWriter.visit(384, 384, "", ")V", "", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello, world!";
        classWriter.visit(384, 384, "", ")V", "", stringArray);
        classWriter.invalidFrames = true;
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello, world!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello, world!" Ct is: stringArray[0] = "Hello, world!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@5f5cb1f2
statement is: classWriter.visit(384, 384, "", ")V", "", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(384, 384, "", ")V", "", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: classWriter.invalidFrames = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "Hello, world!"
TestCase is: String[] stringArray = new String[1];
String string = "Hello, world!";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3318))
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: newConst(Ljava/lang/Object;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newConst = classWriter.newConst(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-3318));
Object object = new Object();
classWriter.newConst(object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Object object = new Object();
        classWriter.newConst(object);
        // Improved test data
        ClassWriter classWriter = new ClassWriter(1024);
        Object object = new Object();
        classWriter.newConst(object);
    }
}
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classWriter.newConst(object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConst(object) target is: classWriter method is: newConst(java.lang.Object)
statement is: // Improved test data
ClassWriter classWriter = new ClassWriter(1024), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classWriter.newConst(object), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConst(object) target is: classWriter method is: newConst(java.lang.Object)
source statement: wheel.asm.ClassWriter(I)V callee: VariableReference: Statement 0, type wheel.asm.ClassWriterindex is: 2
Matched Method is: newConst(Ljava/lang/Object;)I
TestCase is: Object object = new Object();
int _int = 1024;
ClassWriter classWriter = new ClassWriter(_int);
Object object = new Object();
((ClassWriter) object).newConst(object);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(77)
statement is: org.evosuite.testcase.statements.ArrayStatement@30024189 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(200, 21, "(Gh}-lSQz5[", "aRl2DhUn-IW&,74I", (String) null, arg5)
test data is: ClassWriter classWriter = new ClassWriter(77);
String[] stringArray = new String[0];
classWriter.visit(200, 21, "(Gh}-lSQz5[", "aRl2DhUn-IW&,74I", (String) null, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        classWriter.visit(200, 21, "Hello World!", "This is a test string.", ((String) (null)), stringArray);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: classWriter.visit(200, 21, "Hello World!", "This is a test string.", ((String) (null)), stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(200, 21, "Hello World!", "This is a test string.", ((String) (null)), stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
TestCase is: String[] stringArray = new String[0];

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(192)
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(19, 2720, "Synthetic", "", "", (String[]) null)
test data is: ClassWriter classWriter = new ClassWriter(192);
classWriter.visit(19, 2720, "Synthetic", "", "", (String[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visit(19, 2720, "Synthetic", "", "", ((String[]) (null)));
        // Improved test data
        int accessFlags = 19;// Access flags for the class writer

        int version = 2720;// Class file version number

        String className = "Synthetic";// Name of the class to be written

        String superClassName = "";// Name of the superclass for the class being written

        String[] interfaces = ((String[]) (null));// Names of the interfaces implemented by the class }}

    }
}
statement is: classWriter.visit(19, 2720, "Synthetic", "", "", ((String[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(19, 2720, "Synthetic", "", "", ((String[]) (null))) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: // Improved test data
int accessFlags = 19// Access flags for the class writer
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int version = 2720// Class file version number
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String className = "Synthetic"// Name of the class to be written
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String superClassName = ""// Name of the superclass for the class being written
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] interfaces = ((String[]) (null))// Names of the interfaces implemented by the class }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 19
* this is vulnerable: int _int = 2720
* this is vulnerable: String string = "Synthetic"
* this is vulnerable: String string = ""
TestCase is: int _int = 19;
int _int = 2720;
String string = "Synthetic";
String string = "";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(115)
statement is: visitSource(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitSource((String) null, (String) null)
test data is: ClassWriter classWriter = new ClassWriter(115);
classWriter.visitSource((String) null, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClassWriter classWriter = new ClassWriter(42);
        classWriter.visitSource("example_source_file", "ASCII");
    }
}
statement is: // Improved test data
ClassWriter classWriter = new ClassWriter(42), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classWriter.visitSource("example_source_file", "ASCII"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitSource("example_source_file", "ASCII") target is: classWriter method is: visitSource(java.lang.String,java.lang.String)
source statement: wheel.asm.ClassWriter(I)V callee: VariableReference: Statement 0, type wheel.asm.ClassWriterindex is: 1
Matched Method is: visitSource(Ljava/lang/String;Ljava/lang/String;)V
TestCase is: int _int = 42;
ClassWriter classWriter = new ClassWriter(_int);
String string = "example_source_file";
String string = "ASCII";
((ClassWriter) _int).visitSource(string, string);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1255))
statement is: visitSource(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitSource("a@bYe8&BN", "a@bYe8&BN")
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter((-1255));
classWriter.visitSource("a@bYe8&BN", "a@bYe8&BN");
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitSource("testData", "testData");
        byte[] byteArray = classWriter.toByteArray();
    }
}
statement is: classWriter.visitSource("testData", "testData"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitSource("testData", "testData") target is: classWriter method is: visitSource(java.lang.String,java.lang.String)
statement is: byte[] byteArray = classWriter.toByteArray(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-47))
statement is: visitOuterClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitOuterClass("SFfmq*Q'W)HJ{-7=R", (String) null, ";osa'4c")
test data is: ClassWriter classWriter = new ClassWriter((-47));
classWriter.visitOuterClass("SFfmq*Q'W)HJ{-7=R", (String) null, ";osa'4c");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int i = Integer.MAX_VALUE;// primitive int

        double d = Double.MIN_VALUE;// primitive double

        String s = "This is a very long string that represents a large dataset.";// String

        char c = 'a';// character }}

    }
}
statement is: int i = Integer.MAX_VALUE// primitive int
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Integer.MAX_VALUE is Integer
statement is: double d = Double.MIN_VALUE// primitive double
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: Double.MIN_VALUE is Double
statement is: String s = "This is a very long string that represents a large dataset."// String
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a'// character }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "This is a very long string that represents a large dataset."
* this is vulnerable: char _char = 'a'
TestCase is: String string = "This is a very long string that represents a large dataset.";
char _char = 'a';

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(16)
statement is: visitOuterClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitOuterClass("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations")
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(16);
classWriter.visitOuterClass("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        classWriter = new ClassWriter(16);
        classWriter.visitOuterClass("com/example/MyClass", "com/example/MyOtherClass", "java/lang/String");
        classWriter.toByteArray();
    }
}
statement is: // Improved test data
classWriter = new ClassWriter(16), class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.visitOuterClass("com/example/MyClass", "com/example/MyOtherClass", "java/lang/String"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitOuterClass("com/example/MyClass", "com/example/MyOtherClass", "java/lang/String") target is: classWriter method is: visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(24)
statement is: visitOuterClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitOuterClass("SFfmq*Q'W)HJ{-7=R", "qd(:(So]", (String) null)
test data is: ClassWriter classWriter = new ClassWriter(24);
classWriter.visitOuterClass("SFfmq*Q'W)HJ{-7=R", "qd(:(So]", (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(53)
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)classWriter.visitAnnotation("", false)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(53);
classWriter.visitAnnotation("", false);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitAnnotation("Ljava/lang/Override;", true);
        classWriter.toByteArray();
    }
}
statement is: classWriter.visitAnnotation("Ljava/lang/Override;", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitAnnotation("Ljava/lang/Override;", true) target is: classWriter method is: visitAnnotation(java.lang.String,boolean)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2906)
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)classWriter.visitAnnotation("RuntimeVisibleParameterAnnotations", true)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(2906);
classWriter.visitAnnotation("RuntimeVisibleParameterAnnotations", true);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitAnnotation("MyCustomAnnotation", true);
        classWriter.toByteArray();
    }
}
statement is: classWriter.visitAnnotation("MyCustomAnnotation", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitAnnotation("MyCustomAnnotation", true) target is: classWriter method is: visitAnnotation(java.lang.String,boolean)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(59)
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass((String) null, "IW<", (String) null, 59)
test data is: ClassWriter classWriter = new ClassWriter(59);
classWriter.visitInnerClass((String) null, "IW<", (String) null, 59);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(285212683)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2, "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "H\"P';?", "H\"P';?")
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(285212683);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "H\"P';?", "H\"P';?");
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "H\"P\';?", "H\"P\';?");
        fieldWriter.writeField("java.lang.String", "name", "John Doe");
        classWriter.toByteArray();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "H\"P\';?", "H\"P\';?"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.writeField("java.lang.String", "name", "John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.writeField("java.lang.String", "name", "John Doe") target is: fieldWriter method is: writeField(java.lang.String,java.lang.String,java.lang.String)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
TestCase is: int _int = 2;
String string = "org.apache.commons.io.filefilter.TrueFileFilter";
String string = "org.apache.commons.io.filefilter.TrueFileFilter";
String string = "H\"P';?";
String string = "H\"P';?";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "H\"P';?");

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-32))
statement is: org.evosuite.testcase.statements.ArrayStatement@8cd340c4 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@3e92a41b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "boolean"
statement is: org.evosuite.testcase.statements.AssignmentStatement@7de4a2c4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "A|&"
statement is: org.evosuite.testcase.statements.AssignmentStatement@1264c4ff type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "boolean"
statement is: org.evosuite.testcase.statements.AssignmentStatement@3f2092a4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "long"
statement is: visitMethod(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lwheel/asm/MethodVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.MethodWriter
statement code is: MethodWriter visitMethod = (MethodWriter)classWriter.visitMethod((-1460), "boolean", "boolean", "long", arg4)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter((-32));
String[] stringArray = new String[4];
stringArray[0] = "boolean";
stringArray[1] = "A|&";
stringArray[2] = "boolean";
stringArray[3] = "long";
classWriter.visitMethod((-1460), "boolean", "boolean", "long", stringArray);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "int", "float", "boolean", "long" };
        classWriter.visitMethod(1460, "boolean", "boolean", "long", stringArray);
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[]{ "int", "float", "boolean", "long" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[]{ "int", "float", "boolean", "long" } Elements: ["int", "float", "boolean", "long"]
lengths: [4] []
statement is: classWriter.visitMethod(1460, "boolean", "boolean", "long", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitMethod(1460, "boolean", "boolean", "long", stringArray) target is: classWriter method is: visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(92)
statement is: org.evosuite.testcase.statements.ArrayStatement@e142fd49 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@e421a71e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "m_n0<sa"
statement is: org.evosuite.testcase.statements.AssignmentStatement@dacadf9f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(7, (-2632), "sFc#qoY#LWIET", "", "RuntimeInvisibleAnnotations", arg5)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(92);
String[] stringArray = new String[2];
stringArray[0] = "m_n0<sa";
stringArray[1] = "";
classWriter.visit(7, (-2632), "sFc#qoY#LWIET", "", "RuntimeInvisibleAnnotations", stringArray);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "m_n0<sa";
        stringArray[1] = "This is a sample annotation";
        classWriter.visit(7, -2632, "sFc#qoY#LWIET", "", "RuntimeInvisibleAnnotations", stringArray);
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[2] isAssignment: false Array: new String[2] Elements: []
lengths: [2] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "m_n0<sa", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"m_n0<sa" Ct is: stringArray[0] = "m_n0<sa"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@64a8f97
statement is: stringArray[1] = "This is a sample annotation", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a sample annotation" Ct is: stringArray[1] = "This is a sample annotation"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@590dd057
statement is: classWriter.visit(7, -2632, "sFc#qoY#LWIET", "", "RuntimeInvisibleAnnotations", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(7, -2632, "sFc#qoY#LWIET", "", "RuntimeInvisibleAnnotations", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "m_n0<sa"
* this is vulnerable: String string = "This is a sample annotation"
TestCase is: String[] stringArray = new String[2];
String string = "m_n0<sa";
String string = "This is a sample annotation";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(268435455)
statement is: org.evosuite.testcase.statements.ArrayStatement@40375c7b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[7]
statement is: org.evosuite.testcase.statements.AssignmentStatement@30439890 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "'BG?9Q(bhuVG#~iUG"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f8017c1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "wheel.asm.Item"
statement is: org.evosuite.testcase.statements.AssignmentStatement@b3358558 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "wheel.asm.Item"
statement is: org.evosuite.testcase.statements.AssignmentStatement@6d5d96 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "wheel.asm.Item"
statement is: org.evosuite.testcase.statements.AssignmentStatement@821d565d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = "wheel.asm.Item"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f53426e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "wheel.asm.Item"
statement is: org.evosuite.testcase.statements.AssignmentStatement@b279236 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = "wheel.asm.Item"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(1887, (-1094), "wheel.asm.Item", "wheel.asm.Item", "wheel.asm.Item", arg5)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(268435455);
String[] stringArray = new String[7];
stringArray[0] = "'BG?9Q(bhuVG#~iUG";
stringArray[1] = "wheel.asm.Item";
stringArray[2] = "wheel.asm.Item";
stringArray[3] = "wheel.asm.Item";
stringArray[4] = "wheel.asm.Item";
stringArray[5] = "wheel.asm.Item";
stringArray[6] = "wheel.asm.Item";
classWriter.visit(1887, (-1094), "wheel.asm.Item", "wheel.asm.Item", "wheel.asm.Item", stringArray);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[7];
        stringArray[0] = "A1B2C3";// A unique identifier for the item

        stringArray[1] = "WheelItem";// The name of the item class

        stringArray[2] = "WheelItem";// The superclass of the item class

        stringArray[3] = "WheelItem";// The interface implemented by the item class

        stringArray[4] = "WheelItem";// The method used to retrieve the item

        stringArray[5] = "WheelItem";// The method used to set the item

        stringArray[6] = "WheelItem";// The method used to delete the item

        classWriter.visit(1887, -1094, stringArray[0], stringArray[1], stringArray[2], stringArray[3], stringArray[4], stringArray[5], stringArray[6]);
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[7], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [7] Ct is: String[] stringArray = new String[7] isAssignment: false Array: new String[7] Elements: []
lengths: [7] [7]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "A1B2C3"// A unique identifier for the item
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"A1B2C3" Ct is: stringArray[0] = "A1B2C3"// A unique identifier for the item

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d82decf8
statement is: stringArray[1] = "WheelItem"// The name of the item class
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WheelItem" Ct is: stringArray[1] = "WheelItem"// The name of the item class

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@c0fd60f1
statement is: stringArray[2] = "WheelItem"// The superclass of the item class
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WheelItem" Ct is: stringArray[2] = "WheelItem"// The superclass of the item class

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@777fcc42
statement is: stringArray[3] = "WheelItem"// The interface implemented by the item class
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WheelItem" Ct is: stringArray[3] = "WheelItem"// The interface implemented by the item class

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fbdf9a35
statement is: stringArray[4] = "WheelItem"// The method used to retrieve the item
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WheelItem" Ct is: stringArray[4] = "WheelItem"// The method used to retrieve the item

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1a747fa
statement is: stringArray[5] = "WheelItem"// The method used to set the item
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WheelItem" Ct is: stringArray[5] = "WheelItem"// The method used to set the item

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@695aeeea
statement is: stringArray[6] = "WheelItem"// The method used to delete the item
, class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"WheelItem" Ct is: stringArray[6] = "WheelItem"// The method used to delete the item

target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@80b62843
statement is: classWriter.visit(1887, -1094, stringArray[0], stringArray[1], stringArray[2], stringArray[3], stringArray[4], stringArray[5], stringArray[6]), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(1887, -1094, stringArray[0], stringArray[1], stringArray[2], stringArray[3], stringArray[4], stringArray[5], stringArray[6]) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "A1B2C3"
* this is vulnerable: String string = "WheelItem"
* this is vulnerable: String string = "WheelItem"
* this is vulnerable: String string = "WheelItem"
* this is vulnerable: String string = "WheelItem"
* this is vulnerable: String string = "WheelItem"
* this is vulnerable: String string = "WheelItem"
TestCase is: String[] stringArray = new String[7];
String string = "A1B2C3";
String string = "WheelItem";
String string = "WheelItem";
String string = "WheelItem";
String string = "WheelItem";
String string = "WheelItem";
String string = "WheelItem";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(92)
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass("", "", "", 143)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(92);
classWriter.visitInnerClass("", "", "", 143);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.toByteArray();
    }
}
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(268435455)
statement is: wheel.asm.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.Attribute
statement code is: Attribute attribute = new Attribute("'BG?9Q(bhuVG#~iUG")
statement is: org.evosuite.testcase.statements.ArrayStatement@9e817042 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[2]
statement is: org.evosuite.testcase.statements.AssignmentStatement@23938ee5 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [B
statement code is: attribute.value = byteArray
statement is: visitAttribute(Lwheel/asm/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitAttribute(arg0)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(268435455);
Attribute attribute = new Attribute("'BG?9Q(bhuVG#~iUG");
byte[] byteArray = new byte[2];
attribute.value = byteArray;
classWriter.visitAttribute(attribute);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Attribute attribute = new Attribute("'BG?9Q(bhuVG#~iUG");
        byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)) };
        attribute.value = byteArray;
        classWriter.visitAttribute(attribute);
        classWriter.toByteArray();
    }
}
statement is: Attribute attribute = new Attribute("'BG?9Q(bhuVG#~iUG"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: byte[] byteArray = new byte[2] isAssignment: false Array: new byte[]{ ((byte) (0xca)), ((byte) (0xfe)) } Elements: [((byte) (0xca)), ((byte) (0xfe))]
lengths: [2] []
statement is: attribute.value = byteArray, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitAttribute(attribute) target is: classWriter method is: visitAttribute(Attribute)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
TestCase is: String string = "'BG?9Q(bhuVG#~iUG";
Attribute attribute = new Attribute(string);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1677))
statement is: wheel.asm.ClassAdapter(Lwheel/asm/ClassVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassAdapter
statement code is: ClassAdapter classAdapter = new ClassAdapter(arg0)
statement is: accept(Lwheel/asm/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 192)
statement is: getMergedType(II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mergedType = classWriter.getMergedType(2, 4)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter((-1677));
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 192);
classWriter.getMergedType(2, 4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.getMergedType(5, 7);
    }
}
statement is: classWriter.getMergedType(5, 7), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.getMergedType(5, 7) target is: classWriter method is: getMergedType(int,int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-889275714))
statement is: newConstItem(Ljava/lang/Object;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newConstItem = classWriter.newConstItem((byte)0)
test data is: ClassWriter classWriter = new ClassWriter((-889275714));
classWriter.newConstItem((byte)0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newConstItem(((byte) (50)));
    }
}
statement is: classWriter.newConstItem(((byte) (50))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConstItem(((byte) (50))) target is: classWriter method is: newConstItem(byte)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-17))
statement is: newFloat(F)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFloat = classWriter.newFloat((-17))
statement is: newFloat(F)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFloat = classWriter.newFloat((-17))
test data is: ClassWriter classWriter = new ClassWriter((-17));
classWriter.newFloat((-17));
classWriter.newFloat((-17));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newFloat(0);
        classWriter.newFloat(-1);
    }
}
statement is: classWriter.newFloat(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFloat(0) target is: classWriter method is: newFloat(int)
statement is: classWriter.newFloat(-1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFloat(-1) target is: classWriter method is: newFloat(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 2)
statement is: wheel.asm.ClassAdapter(Lwheel/asm/ClassVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassAdapter
statement code is: ClassAdapter classAdapter = new ClassAdapter(arg0)
statement is: accept(Lwheel/asm/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 192)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter(classReader, 2);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 192);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int numberOfIntegers = 5;
        double[] integers = new double[]{ 1, 2, 3, 4, 5 };
        String[] strings = new String[]{ "apple", "banana", "cherry" };
        char[] characters = new char[]{ 'a', 'b', 'c' };
    }
}
statement is: int numberOfIntegers = 5, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double[] integers = new double[]{ 1, 2, 3, 4, 5 }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] strings = new String[]{ "apple", "banana", "cherry" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] characters = new char[]{ 'a', 'b', 'c' }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
* this is vulnerable: int _int = 5
TestCase is: int _int = 5;

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1006)
statement is: newDouble(D)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newDouble = classWriter.newDouble(1006)
statement is: newDouble(D)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newDouble = classWriter.newDouble(1006)
test data is: ClassWriter classWriter = new ClassWriter(1006);
classWriter.newDouble(1006);
classWriter.newDouble(1006);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newDouble(1006);
        classWriter.newDouble(1006);
    }
}
statement is: classWriter.newDouble(1006), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newDouble(1006) target is: classWriter method is: newDouble(int)
statement is: classWriter.newDouble(1006), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newDouble(1006) target is: classWriter method is: newDouble(int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1677))
statement is: getMergedType(II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mergedType = classWriter.getMergedType(2, 4)
test data is: ClassWriter classWriter = new ClassWriter((-1677));
classWriter.getMergedType(2, 4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.getMergedType(5, 9);
    }
}
statement is: classWriter.getMergedType(5, 9), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.getMergedType(5, 9) target is: classWriter method is: getMergedType(int,int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1190))
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "java/lang/Object")
test data is: ClassWriter classWriter = new ClassWriter((-1190));
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "java/lang/Object");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // The first argument is a String representing the name of a class or interface,
        // and the second argument is a String representing the name of another class or interface.
        // The method returns a String representing the common superclass or interface for the two classes or interfaces.
        // In this case, the common superclass for "org.apache.commons.io.filefilter.WildcardFileFilter" and "java/lang/Object" is "java/lang/Object". }}
    }
}
statement is: // The first argument is a String representing the name of a class or interface,, class spoon.support.reflect.code.CtCommentImpl
statement is: // and the second argument is a String representing the name of another class or interface., class spoon.support.reflect.code.CtCommentImpl
statement is: // The method returns a String representing the common superclass or interface for the two classes or interfaces., class spoon.support.reflect.code.CtCommentImpl
statement is: // In this case, the common superclass for "org.apache.commons.io.filefilter.WildcardFileFilter" and "java/lang/Object" is "java/lang/Object". }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(285212683)
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("wheel.asm.Attribute", "wheel.asm.Attribute")
test data is: ClassWriter classWriter = new ClassWriter(285212683);
classWriter.getCommonSuperClass("wheel.asm.Attribute", "wheel.asm.Attribute");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1391)
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "wheel.asm.ClassWriter")
test data is: ClassWriter classWriter = new ClassWriter(1391);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "wheel.asm.ClassWriter");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int size = 1391;// Changed from a hardcoded value to a more descriptive variable name

        String classA = "org.apache.commons.io.filefilter.WildcardFileFilter";
    }
}
statement is: // Improved test data
int size = 1391// Changed from a hardcoded value to a more descriptive variable name
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String classA = "org.apache.commons.io.filefilter.WildcardFileFilter", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 1391
* this is vulnerable: String string = "org.apache.commons.io.filefilter.WildcardFileFilter"
TestCase is: int _int = 1391;
String string = "org.apache.commons.io.filefilter.WildcardFileFilter";

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Frame")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1048595))
statement is: wheel.asm.ClassAdapter(Lwheel/asm/ClassVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassAdapter
statement code is: ClassAdapter classAdapter = new ClassAdapter(arg0)
statement is: accept(Lwheel/asm/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 65)
test data is: ClassReader classReader = new ClassReader("wheel.asm.Frame");
ClassWriter classWriter = new ClassWriter((-1048595));
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 65);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int intValue = 10;// This value is more descriptive and accurately reflects the situation being tested.

        double doubleValue = 3.14159;// This value is also more descriptive and accurately reflects the situation being tested.

        String stringValue = "world";// This value is also more descriptive and accurately reflects the situation being tested.

        char charValue = 'A';// This value is also more descriptive and accurately reflects the situation being tested. }}

    }
}
statement is: int intValue = 10// This value is more descriptive and accurately reflects the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14159// This value is also more descriptive and accurately reflects the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "world"// This value is also more descriptive and accurately reflects the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'A'// This value is also more descriptive and accurately reflects the situation being tested. }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14159
* this is vulnerable: String string = "world"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 10;
double _double = 3.14159;
String string = "world";
char _char = 'A';

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(4072)
statement is: newNameType(Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newNameType = classWriter.newNameType("Signature", "Signature")
statement is: newNameType(Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newNameType = classWriter.newNameType("Signature", "Signature")
test data is: ClassWriter classWriter = new ClassWriter(4072);
classWriter.newNameType("Signature", "Signature");
classWriter.newNameType("Signature", "Signature");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newNameType("Signature", "Ljava/lang/String;");
        classWriter.newNameType("Signature", "Ljava/lang/String;");
    }
}
statement is: classWriter.newNameType("Signature", "Ljava/lang/String;"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newNameType("Signature", "Ljava/lang/String;") target is: classWriter method is: newNameType(java.lang.String,java.lang.String)
statement is: classWriter.newNameType("Signature", "Ljava/lang/String;"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newNameType("Signature", "Ljava/lang/String;") target is: classWriter method is: newNameType(java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1985))
statement is: org.evosuite.testcase.statements.AssignmentStatement@d2874736 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.threshold = (-1985)
statement is: newDouble(D)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newDouble = classWriter.newDouble((-1985))
test data is: ClassWriter classWriter = new ClassWriter((-1985));
classWriter.threshold = (-1985);
classWriter.newDouble((-1985));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.threshold = 1000;
        classWriter.newDouble(1000);
    }
}
statement is: classWriter.threshold = 1000, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.newDouble(1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newDouble(1000) target is: classWriter method is: newDouble(int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-668))
statement is: addType(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addType = classWriter.addType("")
test data is: ClassWriter classWriter = new ClassWriter((-668));
classWriter.addType("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Carefully
        review the;
        snippet.@Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your Improved;
    }
}
statement is: @Carefully
review the, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your Improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType(",qYLxjPe5nd,#", 2)
test data is: ClassWriter classWriter = new ClassWriter(2);
classWriter.addUninitializedType(",qYLxjPe5nd,#", 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    public static void main(String[] args) {
        ClassWriter classWriter = new ClassWriter(2);
        String className = "com.example.ClassName";
        int accessFlags = 2;
        classWriter.addUninitializedType(className, accessFlags);
    }
}
statement is: ClassWriter classWriter = new ClassWriter(2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String className = "com.example.ClassName", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int accessFlags = 2, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: classWriter.addUninitializedType(className, accessFlags), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addUninitializedType(className, accessFlags) target is: classWriter method is: addUninitializedType(java.lang.String,int)
source statement: wheel.asm.ClassWriter(I)V callee: VariableReference: Statement 0, type wheel.asm.ClassWriterindex is: 1
Matched Method is: addUninitializedType(Ljava/lang/String;I)I
TestCase is: int _int = 2;
ClassWriter classWriter = new ClassWriter(_int);
String string = "com.example.ClassName";
int _int = 2;
((ClassWriter) _int).addUninitializedType(string, _int);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: org.evosuite.testcase.statements.AssignmentStatement@66b3e794 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-3055)
statement is: newClass(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newClass = classWriter.newClass("VUN6FdU%V")
test data is: ClassWriter classWriter = new ClassWriter(2);
classWriter.index = (-3055);
classWriter.newClass("VUN6FdU%V");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = -3055;
    }
}
statement is: classWriter.index = -3055, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Frame")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, (-1048595))
statement is: newClass(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newClass = classWriter.newClass("java/lang/String")
test data is: ClassReader classReader = new ClassReader("wheel.asm.Frame");
ClassWriter classWriter = new ClassWriter(classReader, (-1048595));
classWriter.newClass("java/lang/String");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Improved code;
    }
}
statement is: Improved code, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(474)
statement is: newClassItem(Ljava/lang/String;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newClassItem = classWriter.newClassItem("{*&v0x^]v04?_dX9")
test data is: ClassWriter classWriter = new ClassWriter(474);
classWriter.newClassItem("{*&v0x^]v04?_dX9");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(256)
statement is: org.evosuite.testcase.statements.AssignmentStatement@2dfe4f7b type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-1676)
statement is: newConst(Ljava/lang/Object;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newConst = classWriter.newConst("")
test data is: ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newConst("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = Integer.MIN_VALUE;
        classWriter.newConst("This is a test string");
    }
}
statement is: classWriter.index = Integer.MIN_VALUE, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.newConst("This is a test string"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConst("This is a test string") target is: classWriter method is: newConst(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(998)
statement is: newConst(Ljava/lang/Object;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newConst = classWriter.newConst("java/lang/String")
test data is: ClassWriter classWriter = new ClassWriter(998);
classWriter.newConst("java/lang/String");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newConst("A descriptive string that illustrates a situation where a String constant is being used");
    }
}
statement is: classWriter.newConst("A descriptive string that illustrates a situation where a String constant is being used"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConst("A descriptive string that illustrates a situation where a String constant is being used") target is: classWriter method is: newConst(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(256)
statement is: org.evosuite.testcase.statements.AssignmentStatement@2d594e6d type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-1676)
statement is: newField(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newField = classWriter.newField("", "", "G]{3/iu!>")
test data is: ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newField("", "", "G]{3/iu!>");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = -1676;
        classWriter.newField("name", "java.lang.String", "John Doe");
    }
}
statement is: classWriter.index = -1676, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.newField("name", "java.lang.String", "John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newField("name", "java.lang.String", "John Doe") target is: classWriter method is: newField(java.lang.String,java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1006)
statement is: newFieldItem(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFieldItem = classWriter.newFieldItem("p]PtB+d", "", "org.apache.commons.io.filefilter.WildcardFilter")
test data is: ClassWriter classWriter = new ClassWriter(1006);
classWriter.newFieldItem("p]PtB+d", "", "org.apache.commons.io.filefilter.WildcardFilter");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newFieldItem("*.txt", "", "org.apache.commons.io.filefilter.WildcardFilter");
    }
}
statement is: classWriter.newFieldItem("*.txt", "", "org.apache.commons.io.filefilter.WildcardFilter"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFieldItem("*.txt", "", "org.apache.commons.io.filefilter.WildcardFilter") target is: classWriter method is: newFieldItem(java.lang.String,java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(4090)
statement is: newInteger(I)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newInteger = classWriter.newInteger(4090)
test data is: ClassWriter classWriter = new ClassWriter(4090);
classWriter.newInteger(4090);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newInteger(123456789);
    }
}
statement is: classWriter.newInteger(123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newInteger(123456789) target is: classWriter method is: newInteger(int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1695))
statement is: newLong(J)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newLong = classWriter.newLong((-1695))
test data is: ClassWriter classWriter = new ClassWriter((-1695));
classWriter.newLong((-1695));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newLong(34);
    }
}
statement is: classWriter.newLong(34), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newLong(34) target is: classWriter method is: newLong(int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(256)
statement is: org.evosuite.testcase.statements.AssignmentStatement@b2f5f3b6 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-1676)
statement is: newMethod(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newMethod = classWriter.newMethod("zv{^xH'1'c_.Fw6jx:", "w~):A~F24k a/yFU)", "zv{^xH'1'c_.Fw6jx:", false)
test data is: ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newMethod("zv{^xH'1'c_.Fw6jx:", "w~):A~F24k a/yFU)", "zv{^xH'1'c_.Fw6jx:", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = -1676;
    }
}
statement is: classWriter.index = -1676, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(750)
statement is: newMethodItem(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newMethodItem = classWriter.newMethodItem("?\"*4W$3<yR", "?\"*4W$3<yR", "ZUQ{R@U&FU>A6&KN6\"", true)
test data is: ClassWriter classWriter = new ClassWriter(750);
classWriter.newMethodItem("?\"*4W$3<yR", "?\"*4W$3<yR", "ZUQ{R@U&FU>A6&KN6\"", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newMethodItem("calculateArea", "double", "int, int", true);
    }
}
statement is: classWriter.newMethodItem("calculateArea", "double", "int, int", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newMethodItem("calculateArea", "double", "int, int", true) target is: classWriter method is: newMethodItem(java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(256)
statement is: org.evosuite.testcase.statements.AssignmentStatement@55e9d82d type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-1676)
statement is: newNameType(Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newNameType = classWriter.newNameType("", "cUb0tamjLJ")
test data is: ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newNameType("", "cUb0tamjLJ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        assertEquals(-1676, index);
        assertEquals("", classWriter.newNameType("", "cUb0tamjLJ"));
    }
}
statement is: assertEquals(-1676, index), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(-1676, index) target is:  method is: assertEquals(int,<unknown>)
statement is: assertEquals("", classWriter.newNameType("", "cUb0tamjLJ")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("", classWriter.newNameType("", "cUb0tamjLJ")) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(256)
statement is: org.evosuite.testcase.statements.AssignmentStatement@d261707e type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-1676)
statement is: newUTF8(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newUTF8 = classWriter.newUTF8("")
test data is: ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newUTF8("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = CLASS_FILE;
        classWriter.newUTF8("Welcome to Java");
    }
}
statement is: classWriter.index = CLASS_FILE, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.newUTF8("Welcome to Java"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newUTF8("Welcome to Java") target is: classWriter method is: newUTF8(java.lang.String)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.Edge")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 4)
statement is: newUTF8(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newUTF8 = classWriter.newUTF8("wheel.asm.Edge")
test data is: ClassReader classReader = new ClassReader("wheel.asm.Edge");
ClassWriter classWriter = new ClassWriter(classReader, 4);
classWriter.newUTF8("wheel.asm.Edge");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Return the name of the class to test from a configuration file or database
        return "wheel.asm.Edge";
    }
}
statement is: // Return the name of the class to test from a configuration file or database
return "wheel.asm.Edge", class spoon.support.reflect.code.CtReturnImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(285212683)
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("", "")
test data is: ClassWriter classWriter = new ClassWriter(285212683);
classWriter.getCommonSuperClass("", "");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // The input parameters are strings representing the fully qualified names of two classes. }}
    }
}
statement is: // The input parameters are strings representing the fully qualified names of two classes. }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2407)
statement is: visitEnd()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitEnd()
test data is: ClassWriter classWriter = new ClassWriter(2407);
classWriter.visitEnd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitEnd();
    }
}
statement is: classWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitEnd() target is: classWriter method is: visitEnd()
* test suite isTestSuite: 66
Test 0: 
ClassWriter classWriter = new ClassWriter(92);
classWriter.newField("", "", "");
Test 1: 
ClassWriter classWriter = new ClassWriter(35);
Character valueOf = Character.valueOf('P');
classWriter.visitField(35, "", "", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", valueOf);
Test 2: 
ClassWriter classWriter = new ClassWriter(92);
classWriter.newMethod("", "", "", false);
Test 3: 
ClassWriter classWriter = new ClassWriter(384);
String[] stringArray = new String[1];
stringArray[0] = ")V";
classWriter.visit(384, 384, "", ")V", "", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 4: 
ClassWriter classWriter = new ClassWriter((-3318));
Object object = new Object();
// Undeclared exception!
try { 
  classWriter.newConst(object);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value java.lang.Object@7295c8e2
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 5: 
ClassWriter classWriter = new ClassWriter(77);
String[] stringArray = new String[0];
classWriter.visit(200, 21, "(Gh}-lSQz5[", "aRl2DhUn-IW&,74I", (String) null, stringArray);
Test 6: 
ClassWriter classWriter = new ClassWriter(192);
classWriter.visit(19, 2720, "Synthetic", "", "", (String[]) null);
Test 7: 
ClassWriter classWriter = new ClassWriter(115);
classWriter.visitSource((String) null, (String) null);
Test 8: 
ClassWriter classWriter = new ClassWriter((-1255));
classWriter.visitSource("a@bYe8&BN", "a@bYe8&BN");
classWriter.toByteArray();
Test 9: 
ClassWriter classWriter = new ClassWriter((-47));
classWriter.visitOuterClass("SFfmq*Q'W)HJ{-7=R", (String) null, ";osa'4c");
Test 10: 
ClassWriter classWriter = new ClassWriter(16);
classWriter.visitOuterClass("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
classWriter.toByteArray();
Test 11: 
ClassWriter classWriter = new ClassWriter(24);
classWriter.visitOuterClass("SFfmq*Q'W)HJ{-7=R", "qd(:(So]", (String) null);
Test 12: 
ClassWriter classWriter = new ClassWriter(53);
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 13: 
ClassWriter classWriter = new ClassWriter(2906);
classWriter.visitAnnotation("RuntimeVisibleParameterAnnotations", true);
classWriter.toByteArray();
Test 14: 
ClassWriter classWriter = new ClassWriter(59);
classWriter.visitInnerClass((String) null, "IW<", (String) null, 59);
Test 15: 
ClassWriter classWriter = new ClassWriter(285212683);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "H\"P';?", "H\"P';?");
classWriter.toByteArray();
Test 16: 
ClassWriter classWriter = new ClassWriter((-32));
String[] stringArray = new String[4];
stringArray[0] = "boolean";
stringArray[1] = "A|&";
stringArray[2] = "boolean";
stringArray[3] = "long";
classWriter.visitMethod((-1460), "boolean", "boolean", "long", stringArray);
classWriter.toByteArray();
Test 17: 
ClassWriter classWriter = new ClassWriter(92);
String[] stringArray = new String[2];
stringArray[0] = "m_n0<sa";
stringArray[1] = "";
classWriter.visit(7, (-2632), "sFc#qoY#LWIET", "", "RuntimeInvisibleAnnotations", stringArray);
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter(268435455);
String[] stringArray = new String[7];
stringArray[0] = "'BG?9Q(bhuVG#~iUG";
stringArray[1] = "wheel.asm.Item";
stringArray[2] = "wheel.asm.Item";
stringArray[3] = "wheel.asm.Item";
stringArray[4] = "wheel.asm.Item";
stringArray[5] = "wheel.asm.Item";
stringArray[6] = "wheel.asm.Item";
classWriter.visit(1887, (-1094), "wheel.asm.Item", "wheel.asm.Item", "wheel.asm.Item", stringArray);
classWriter.toByteArray();
Test 19: 
ClassWriter classWriter = new ClassWriter(92);
classWriter.visitInnerClass("", "", "", 143);
classWriter.toByteArray();
Test 20: 
ClassWriter classWriter = new ClassWriter(268435455);
Attribute attribute = new Attribute("'BG?9Q(bhuVG#~iUG");
byte[] byteArray = new byte[2];
attribute.value = byteArray;
classWriter.visitAttribute(attribute);
classWriter.toByteArray();
Test 21: 
ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter((-1677));
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 192);
classWriter.getMergedType(2, 4);
Test 22: 
ClassWriter classWriter = new ClassWriter((-889275714));
classWriter.newConstItem((byte)0);
Test 23: 
ClassWriter classWriter = new ClassWriter((-17));
classWriter.newFloat((-17));
classWriter.newFloat((-17));
Test 24: 
ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter(classReader, 2);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 192);
Test 25: 
ClassWriter classWriter = new ClassWriter(1006);
classWriter.newDouble(1006);
classWriter.newDouble(1006);
Test 26: 
ClassWriter classWriter = new ClassWriter((-1677));
// Undeclared exception!
try { 
  classWriter.getMergedType(2, 4);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 27: 
ClassWriter classWriter = new ClassWriter((-1190));
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "java/lang/Object");
Test 28: 
ClassWriter classWriter = new ClassWriter(285212683);
classWriter.getCommonSuperClass("wheel.asm.Attribute", "wheel.asm.Attribute");
Test 29: 
ClassWriter classWriter = new ClassWriter(1391);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "wheel.asm.ClassWriter");
Test 30: 
ClassReader classReader = new ClassReader("wheel.asm.Frame");
ClassWriter classWriter = new ClassWriter((-1048595));
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 65);
Test 31: 
ClassWriter classWriter = new ClassWriter(4072);
classWriter.newNameType("Signature", "Signature");
classWriter.newNameType("Signature", "Signature");
Test 32: 
ClassWriter classWriter = new ClassWriter((-1985));
classWriter.threshold = (-1985);
classWriter.newDouble((-1985));
Test 33: 
ClassWriter classWriter = new ClassWriter((-668));
classWriter.addType("");
Test 34: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.addUninitializedType(",qYLxjPe5nd,#", 2);
Test 35: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.index = (-3055);
classWriter.newClass("VUN6FdU%V");
Test 36: 
ClassReader classReader = new ClassReader("wheel.asm.Frame");
ClassWriter classWriter = new ClassWriter(classReader, (-1048595));
classWriter.newClass("java/lang/String");
Test 37: 
ClassWriter classWriter = new ClassWriter(474);
classWriter.newClassItem("{*&v0x^]v04?_dX9");
Test 38: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newConst("");
Test 39: 
ClassWriter classWriter = new ClassWriter(998);
classWriter.newConst("java/lang/String");
Test 40: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newField("", "", "G]{3/iu!>");
Test 41: 
ClassWriter classWriter = new ClassWriter(1006);
classWriter.newFieldItem("p]PtB+d", "", "org.apache.commons.io.filefilter.WildcardFilter");
Test 42: 
ClassWriter classWriter = new ClassWriter(4090);
classWriter.newInteger(4090);
Test 43: 
ClassWriter classWriter = new ClassWriter((-1695));
classWriter.newLong((-1695));
Test 44: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newMethod("zv{^xH'1'c_.Fw6jx:", "w~):A~F24k a/yFU)", "zv{^xH'1'c_.Fw6jx:", false);
Test 45: 
ClassWriter classWriter = new ClassWriter(750);
classWriter.newMethodItem("?\"*4W$3<yR", "?\"*4W$3<yR", "ZUQ{R@U&FU>A6&KN6\"", true);
Test 46: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newNameType("", "cUb0tamjLJ");
Test 47: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newUTF8("");
Test 48: 
ClassReader classReader = new ClassReader("wheel.asm.Edge");
ClassWriter classWriter = new ClassWriter(classReader, 4);
classWriter.newUTF8("wheel.asm.Edge");
Test 49: 
ClassWriter classWriter = new ClassWriter(285212683);
// Undeclared exception!
try { 
  classWriter.getCommonSuperClass("", "");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: 
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 50: 
ClassWriter classWriter = new ClassWriter(2407);
classWriter.visitEnd();
Test 51: 
Character.valueOf('P');

Test 52: 
String[] stringArray = new String[1];

Test 53: 
Object object = new Object();
ClassWriter classWriter = new ClassWriter(1024);
Object object = new Object();
((ClassWriter) object).newConst(object);

Test 54: 
String[] stringArray = new String[0];

Test 55: 

Test 56: 
ClassWriter classWriter = new ClassWriter(42);
((ClassWriter)42).visitSource("example_source_file", "ASCII");

Test 57: 

Test 58: 
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "H\"P';?", "H\"P';?", "H\"P';?");

Test 59: 
String[] stringArray = new String[2];

Test 60: 
String[] stringArray = new String[7];

Test 61: 
Attribute attribute = new Attribute("'BG?9Q(bhuVG#~iUG");

Test 62: 

Test 63: 

Test 64: 

Test 65: 
ClassWriter classWriter = new ClassWriter(2);
((ClassWriter)2).addUninitializedType("com.example.ClassName", 2);


* Generated after the refinement and before minimization 66 tests with total length 172
* test suite isTestSuite: 66
Test 0: 
ClassWriter classWriter = new ClassWriter(92);
classWriter.newField("", "", "");
Test 1: 
ClassWriter classWriter = new ClassWriter(35);
Character valueOf = Character.valueOf('P');
classWriter.visitField(35, "", "", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", valueOf);
Test 2: 
ClassWriter classWriter = new ClassWriter(92);
classWriter.newMethod("", "", "", false);
Test 3: 
ClassWriter classWriter = new ClassWriter(384);
String[] stringArray = new String[1];
stringArray[0] = ")V";
classWriter.visit(384, 384, "", ")V", "", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 4: 
ClassWriter classWriter = new ClassWriter((-3318));
Object object = new Object();
// Undeclared exception!
try { 
  classWriter.newConst(object);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value java.lang.Object@7295c8e2
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 5: 
ClassWriter classWriter = new ClassWriter(77);
String[] stringArray = new String[0];
classWriter.visit(200, 21, "(Gh}-lSQz5[", "aRl2DhUn-IW&,74I", (String) null, stringArray);
Test 6: 
ClassWriter classWriter = new ClassWriter(192);
classWriter.visit(19, 2720, "Synthetic", "", "", (String[]) null);
Test 7: 
ClassWriter classWriter = new ClassWriter(115);
classWriter.visitSource((String) null, (String) null);
Test 8: 
ClassWriter classWriter = new ClassWriter((-1255));
classWriter.visitSource("a@bYe8&BN", "a@bYe8&BN");
classWriter.toByteArray();
Test 9: 
ClassWriter classWriter = new ClassWriter((-47));
classWriter.visitOuterClass("SFfmq*Q'W)HJ{-7=R", (String) null, ";osa'4c");
Test 10: 
ClassWriter classWriter = new ClassWriter(16);
classWriter.visitOuterClass("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
classWriter.toByteArray();
Test 11: 
ClassWriter classWriter = new ClassWriter(24);
classWriter.visitOuterClass("SFfmq*Q'W)HJ{-7=R", "qd(:(So]", (String) null);
Test 12: 
ClassWriter classWriter = new ClassWriter(53);
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 13: 
ClassWriter classWriter = new ClassWriter(2906);
classWriter.visitAnnotation("RuntimeVisibleParameterAnnotations", true);
classWriter.toByteArray();
Test 14: 
ClassWriter classWriter = new ClassWriter(59);
classWriter.visitInnerClass((String) null, "IW<", (String) null, 59);
Test 15: 
ClassWriter classWriter = new ClassWriter(285212683);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "H\"P';?", "H\"P';?");
classWriter.toByteArray();
Test 16: 
ClassWriter classWriter = new ClassWriter((-32));
String[] stringArray = new String[4];
stringArray[0] = "boolean";
stringArray[1] = "A|&";
stringArray[2] = "boolean";
stringArray[3] = "long";
classWriter.visitMethod((-1460), "boolean", "boolean", "long", stringArray);
classWriter.toByteArray();
Test 17: 
ClassWriter classWriter = new ClassWriter(92);
String[] stringArray = new String[2];
stringArray[0] = "m_n0<sa";
stringArray[1] = "";
classWriter.visit(7, (-2632), "sFc#qoY#LWIET", "", "RuntimeInvisibleAnnotations", stringArray);
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter(268435455);
String[] stringArray = new String[7];
stringArray[0] = "'BG?9Q(bhuVG#~iUG";
stringArray[1] = "wheel.asm.Item";
stringArray[2] = "wheel.asm.Item";
stringArray[3] = "wheel.asm.Item";
stringArray[4] = "wheel.asm.Item";
stringArray[5] = "wheel.asm.Item";
stringArray[6] = "wheel.asm.Item";
classWriter.visit(1887, (-1094), "wheel.asm.Item", "wheel.asm.Item", "wheel.asm.Item", stringArray);
classWriter.toByteArray();
Test 19: 
ClassWriter classWriter = new ClassWriter(92);
classWriter.visitInnerClass("", "", "", 143);
classWriter.toByteArray();
Test 20: 
ClassWriter classWriter = new ClassWriter(268435455);
Attribute attribute = new Attribute("'BG?9Q(bhuVG#~iUG");
byte[] byteArray = new byte[2];
attribute.value = byteArray;
classWriter.visitAttribute(attribute);
classWriter.toByteArray();
Test 21: 
ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter((-1677));
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 192);
classWriter.getMergedType(2, 4);
Test 22: 
ClassWriter classWriter = new ClassWriter((-889275714));
classWriter.newConstItem((byte)0);
Test 23: 
ClassWriter classWriter = new ClassWriter((-17));
classWriter.newFloat((-17));
classWriter.newFloat((-17));
Test 24: 
ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter(classReader, 2);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 192);
Test 25: 
ClassWriter classWriter = new ClassWriter(1006);
classWriter.newDouble(1006);
classWriter.newDouble(1006);
Test 26: 
ClassWriter classWriter = new ClassWriter((-1677));
// Undeclared exception!
try { 
  classWriter.getMergedType(2, 4);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 27: 
ClassWriter classWriter = new ClassWriter((-1190));
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "java/lang/Object");
Test 28: 
ClassWriter classWriter = new ClassWriter(285212683);
classWriter.getCommonSuperClass("wheel.asm.Attribute", "wheel.asm.Attribute");
Test 29: 
ClassWriter classWriter = new ClassWriter(1391);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "wheel.asm.ClassWriter");
Test 30: 
ClassReader classReader = new ClassReader("wheel.asm.Frame");
ClassWriter classWriter = new ClassWriter((-1048595));
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 65);
Test 31: 
ClassWriter classWriter = new ClassWriter(4072);
classWriter.newNameType("Signature", "Signature");
classWriter.newNameType("Signature", "Signature");
Test 32: 
ClassWriter classWriter = new ClassWriter((-1985));
classWriter.threshold = (-1985);
classWriter.newDouble((-1985));
Test 33: 
ClassWriter classWriter = new ClassWriter((-668));
classWriter.addType("");
Test 34: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.addUninitializedType(",qYLxjPe5nd,#", 2);
Test 35: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.index = (-3055);
classWriter.newClass("VUN6FdU%V");
Test 36: 
ClassReader classReader = new ClassReader("wheel.asm.Frame");
ClassWriter classWriter = new ClassWriter(classReader, (-1048595));
classWriter.newClass("java/lang/String");
Test 37: 
ClassWriter classWriter = new ClassWriter(474);
classWriter.newClassItem("{*&v0x^]v04?_dX9");
Test 38: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newConst("");
Test 39: 
ClassWriter classWriter = new ClassWriter(998);
classWriter.newConst("java/lang/String");
Test 40: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newField("", "", "G]{3/iu!>");
Test 41: 
ClassWriter classWriter = new ClassWriter(1006);
classWriter.newFieldItem("p]PtB+d", "", "org.apache.commons.io.filefilter.WildcardFilter");
Test 42: 
ClassWriter classWriter = new ClassWriter(4090);
classWriter.newInteger(4090);
Test 43: 
ClassWriter classWriter = new ClassWriter((-1695));
classWriter.newLong((-1695));
Test 44: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newMethod("zv{^xH'1'c_.Fw6jx:", "w~):A~F24k a/yFU)", "zv{^xH'1'c_.Fw6jx:", false);
Test 45: 
ClassWriter classWriter = new ClassWriter(750);
classWriter.newMethodItem("?\"*4W$3<yR", "?\"*4W$3<yR", "ZUQ{R@U&FU>A6&KN6\"", true);
Test 46: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newNameType("", "cUb0tamjLJ");
Test 47: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newUTF8("");
Test 48: 
ClassReader classReader = new ClassReader("wheel.asm.Edge");
ClassWriter classWriter = new ClassWriter(classReader, 4);
classWriter.newUTF8("wheel.asm.Edge");
Test 49: 
ClassWriter classWriter = new ClassWriter(285212683);
// Undeclared exception!
try { 
  classWriter.getCommonSuperClass("", "");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: 
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 50: 
ClassWriter classWriter = new ClassWriter(2407);
classWriter.visitEnd();
Test 51: 
Character.valueOf('P');

Test 52: 
String[] stringArray = new String[1];

Test 53: 
Object object = new Object();
ClassWriter classWriter = new ClassWriter(1024);
Object object = new Object();
((ClassWriter) object).newConst(object);

Test 54: 
String[] stringArray = new String[0];

Test 55: 

Test 56: 
ClassWriter classWriter = new ClassWriter(42);
((ClassWriter)42).visitSource("example_source_file", "ASCII");

Test 57: 

Test 58: 
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2, (int) "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "H\"P';?", "H\"P';?", "H\"P';?");

Test 59: 
String[] stringArray = new String[2];

Test 60: 
String[] stringArray = new String[7];

Test 61: 
Attribute attribute = new Attribute("'BG?9Q(bhuVG#~iUG");

Test 62: 

Test 63: 

Test 64: 

Test 65: 
ClassWriter classWriter = new ClassWriter(2);
((ClassWriter)2).addUninitializedType("com.example.ClassName", 2);


* Minimizing test suite
* test suite isTestSuite: 51
Test 0: 
ClassWriter classWriter = new ClassWriter(92);
classWriter.newField("", "", "");
Test 1: 
ClassWriter classWriter = new ClassWriter(35);
Character valueOf = Character.valueOf('P');
classWriter.visitField(35, "", "", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", valueOf);
Test 2: 
ClassReader classReader = new ClassReader("wheel.asm.Edge");
ClassWriter classWriter = new ClassWriter(classReader, 4);
classWriter.newUTF8("wheel.asm.Edge");
Test 3: 
ClassWriter classWriter = new ClassWriter(92);
classWriter.newMethod("", "", "", false);
Test 4: 
ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter(classReader, 2);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 192);
Test 5: 
ClassWriter classWriter = new ClassWriter(998);
classWriter.newConst("java/lang/String");
Test 6: 
ClassReader classReader = new ClassReader("wheel.asm.Frame");
ClassWriter classWriter = new ClassWriter((-1048595));
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 65);
Test 7: 
ClassWriter classWriter = new ClassWriter(77);
String[] stringArray = new String[0];
classWriter.visit(200, 21, "(Gh}-lSQz5[", "aRl2DhUn-IW&,74I", (String) null, stringArray);
Test 8: 
ClassWriter classWriter = new ClassWriter(192);
classWriter.visit(19, 2720, "Synthetic", "", "", (String[]) null);
Test 9: 
ClassWriter classWriter = new ClassWriter(115);
classWriter.visitSource((String) null, (String) null);
Test 10: 
ClassWriter classWriter = new ClassWriter((-1255));
classWriter.visitSource("a@bYe8&BN", "a@bYe8&BN");
classWriter.toByteArray();
Test 11: 
ClassWriter classWriter = new ClassWriter((-47));
classWriter.visitOuterClass("SFfmq*Q'W)HJ{-7=R", (String) null, ";osa'4c");
Test 12: 
ClassWriter classWriter = new ClassWriter(24);
classWriter.visitOuterClass("SFfmq*Q'W)HJ{-7=R", "qd(:(So]", (String) null);
Test 13: 
ClassWriter classWriter = new ClassWriter(16);
classWriter.visitOuterClass("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations");
classWriter.toByteArray();
Test 14: 
ClassWriter classWriter = new ClassWriter(53);
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 15: 
ClassWriter classWriter = new ClassWriter(2906);
classWriter.visitAnnotation("RuntimeVisibleParameterAnnotations", true);
classWriter.toByteArray();
Test 16: 
ClassWriter classWriter = new ClassWriter(59);
classWriter.visitInnerClass((String) null, "IW<", (String) null, 59);
Test 17: 
ClassWriter classWriter = new ClassWriter(285212683);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2, "org.apache.commons.io.filefilter.TrueFileFilter", "org.apache.commons.io.filefilter.TrueFileFilter", "H\"P';?", "H\"P';?");
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter((-32));
String[] stringArray = new String[4];
stringArray[0] = "boolean";
stringArray[1] = "A|&";
stringArray[2] = "boolean";
stringArray[3] = "long";
classWriter.visitMethod((-1460), "boolean", "boolean", "long", stringArray);
classWriter.toByteArray();
Test 19: 
ClassWriter classWriter = new ClassWriter(92);
String[] stringArray = new String[2];
stringArray[0] = "m_n0<sa";
stringArray[1] = "";
classWriter.visit(7, (-2632), "sFc#qoY#LWIET", "", "RuntimeInvisibleAnnotations", stringArray);
classWriter.toByteArray();
Test 20: 
ClassWriter classWriter = new ClassWriter(268435455);
String[] stringArray = new String[7];
stringArray[0] = "'BG?9Q(bhuVG#~iUG";
stringArray[1] = "wheel.asm.Item";
stringArray[2] = "wheel.asm.Item";
stringArray[3] = "wheel.asm.Item";
stringArray[4] = "wheel.asm.Item";
stringArray[5] = "wheel.asm.Item";
stringArray[6] = "wheel.asm.Item";
classWriter.visit(1887, (-1094), "wheel.asm.Item", "wheel.asm.Item", "wheel.asm.Item", stringArray);
classWriter.toByteArray();
Test 21: 
ClassWriter classWriter = new ClassWriter(92);
classWriter.visitInnerClass("", "", "", 143);
classWriter.toByteArray();
Test 22: 
ClassWriter classWriter = new ClassWriter(268435455);
Attribute attribute = new Attribute("'BG?9Q(bhuVG#~iUG");
byte[] byteArray = new byte[2];
attribute.value = byteArray;
classWriter.visitAttribute(attribute);
classWriter.toByteArray();
Test 23: 
ClassWriter classWriter = new ClassWriter(384);
classWriter.invalidFrames = true;
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 24: 
ClassWriter classWriter = new ClassWriter((-889275714));
classWriter.newConstItem((byte)0);
Test 25: 
ClassWriter classWriter = new ClassWriter((-3318));
Object object = new Object();
// Undeclared exception!
try { 
  classWriter.newConst(object);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value java.lang.Object@64aca007
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 26: 
ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter((-1677));
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, 192);
classWriter.getMergedType(2, 4);
Test 27: 
ClassWriter classWriter = new ClassWriter((-17));
classWriter.newFloat((-17));
classWriter.newFloat((-17));
Test 28: 
ClassWriter classWriter = new ClassWriter(1006);
classWriter.newDouble(1006);
classWriter.newDouble(1006);
Test 29: 
ClassWriter classWriter = new ClassWriter((-1677));
// Undeclared exception!
try { 
  classWriter.getMergedType(2, 4);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 30: 
ClassWriter classWriter = new ClassWriter((-1190));
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "java/lang/Object");
Test 31: 
ClassWriter classWriter = new ClassWriter(285212683);
classWriter.getCommonSuperClass("wheel.asm.Attribute", "wheel.asm.Attribute");
Test 32: 
ClassWriter classWriter = new ClassWriter(1391);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.WildcardFileFilter", "wheel.asm.ClassWriter");
Test 33: 
ClassWriter classWriter = new ClassWriter(4072);
classWriter.newNameType("Signature", "Signature");
classWriter.newNameType("Signature", "Signature");
Test 34: 
ClassWriter classWriter = new ClassWriter((-668));
classWriter.addType("");
Test 35: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.addUninitializedType(",qYLxjPe5nd,#", 2);
Test 36: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.index = (-3055);
classWriter.newClass("VUN6FdU%V");
Test 37: 
ClassReader classReader = new ClassReader("wheel.asm.Frame");
ClassWriter classWriter = new ClassWriter(classReader, (-1048595));
classWriter.newClass("java/lang/String");
Test 38: 
ClassWriter classWriter = new ClassWriter(474);
classWriter.newClassItem("{*&v0x^]v04?_dX9");
Test 39: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newConst("");
Test 40: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newField("", "", "G]{3/iu!>");
Test 41: 
ClassWriter classWriter = new ClassWriter(1006);
classWriter.newFieldItem("p]PtB+d", "", "org.apache.commons.io.filefilter.WildcardFilter");
Test 42: 
ClassWriter classWriter = new ClassWriter(4090);
classWriter.newInteger(4090);
Test 43: 
ClassWriter classWriter = new ClassWriter((-1695));
classWriter.newLong((-1695));
Test 44: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newMethod("zv{^xH'1'c_.Fw6jx:", "w~):A~F24k a/yFU)", "zv{^xH'1'c_.Fw6jx:", false);
Test 45: 
ClassWriter classWriter = new ClassWriter(750);
classWriter.newMethodItem("?\"*4W$3<yR", "?\"*4W$3<yR", "ZUQ{R@U&FU>A6&KN6\"", true);
Test 46: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newNameType("", "cUb0tamjLJ");
Test 47: 
ClassWriter classWriter = new ClassWriter(256);
classWriter.index = (-1676);
classWriter.newUTF8("");
Test 48: 
ClassWriter classWriter = new ClassWriter(285212683);
// Undeclared exception!
try { 
  classWriter.getCommonSuperClass("", "");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: 
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 49: 
ClassWriter classWriter = new ClassWriter(384);
String[] stringArray = new String[1];
stringArray[0] = ")V";
classWriter.visit(384, 384, "", ")V", "", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 50: 
ClassWriter classWriter = new ClassWriter(2407);
classWriter.visitEnd();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 93%
* Total number of goals: 174
* Number of covered goals: 162
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 345
* Number of covered goals: 334
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 51%
* Total number of goals: 55
* Number of covered goals: 28
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 174
* Number of covered goals: 162
* Generated 51 tests with total length 157
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(92);
int newField = classWriter.newField("", "", "");
assertEquals(4, newField);


** It was a parseable test case! 
refined test name is: testWriteNewFieldToClassFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(35);
Character arg4 = Character.valueOf('P');
FieldVisitor visitField = classWriter.visitField(35, "", "", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", arg4);
assertNotNull(visitField);


** It was a parseable test case! 
refined test name is: testVisitFieldreturnsNonNullValue
* Compiling Tests
refined test name is: testVisitFieldReturnsNonNullValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader arg0 = new ClassReader("wheel.asm.Edge");
ClassWriter classWriter = new ClassWriter(arg0, 4);
int newUTF8 = classWriter.newUTF8("wheel.asm.Edge");
assertEquals(26, newUTF8);


* Computation finished
