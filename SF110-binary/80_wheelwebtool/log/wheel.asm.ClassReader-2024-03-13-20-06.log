* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: wheel.asm.ClassReader
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/80_wheelwebtool/evosuite-files/evosuite.properties
* Connecting to master process on port 16918
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 20:06:41.592 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 20:06:41.600 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 20:06:41.601 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 20:06:41.619 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 20:06:41.621 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 20:06:41.622 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 20:06:41.623 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 20:06:41.624 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 20:06:41.625 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 20:06:41.626 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 20:06:41.630 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 20:06:41.633 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 20:06:41.635 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 20:06:41.669 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 20:06:41.672 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class wheel.asm.ClassReader
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2563
* Using seed 1710360393301
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 240 / 2563
[Progress:>                             2%] [Cov:==>                                7%][Progress:>                             3%] [Cov:=====>                             17%][Progress:=>                            4%] [Cov:============>                      35%][Progress:=>                            4%] [Cov:==============>                    40%][Progress:=>                            5%] [Cov:==============>                    41%][Progress:=>                            6%] [Cov:===============>                   44%][Progress:==>                           7%] [Cov:================>                  46%][Progress:==>                           7%] [Cov:================>                  47%][Progress:==>                           8%] [Cov:================>                  48%][Progress:===>                          11%] [Cov:================>                  48%][Progress:===>                          13%] [Cov:===================>               57%][Progress:====>                         14%] [Cov:===================>               57%][Progress:====>                         14%] [Cov:===================>               57%][Progress:====>                         16%] [Cov:====================>              59%][Progress:=====>                        17%] [Cov:=====================>             61%][Progress:=======>                      25%] [Cov:=====================>             61%][Progress:=========>                    31%] [Cov:=====================>             61%][Progress:===========>                  37%] [Cov:=====================>             61%][Progress:============>                 43%] [Cov:=====================>             61%][Progress:=============>                44%] [Cov:=====================>             61%][Progress:==============>               48%] [Cov:=====================>             61%][Progress:================>             54%] [Cov:=====================>             62%][Progress:=================>            57%] [Cov:=====================>             62%][Progress:=================>            59%] [Cov:=====================>             62%][Progress:==================>           61%] [Cov:=====================>             62%][Progress:==================>           63%] [Cov:=====================>             62%][Progress:===================>          65%] [Cov:=====================>             62%][Progress:====================>         68%] [Cov:=====================>             62%][Progress:=====================>        70%] [Cov:======================>            63%][Progress:=====================>        73%] [Cov:======================>            63%][Progress:======================>       75%] [Cov:======================>            63%][Progress:=======================>      79%] [Cov:======================>            63%][Progress:========================>     80%] [Cov:======================>            63%][Progress:========================>     83%] [Cov:======================>            63%][Progress:=========================>    86%] [Cov:======================>            63%][Progress:===========================>  91%] [Cov:======================>            63%][Progress:============================> 96%] [Cov:======================>            63%][Progress:==============================100%] [Cov:======================>            64%][Progress:==============================100%] [Cov:======================>            64%]
* Search finished after 202s and 38 generations, 17632 statements, best individual has fitness: 1142.0
* Generated before the refinement 42 tests with total length 106
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: readShort(I)S type is: class org.evosuite.testcase.statements.MethodStatement return type short
statement code is: short readShort = classReader.readShort(2)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
classReader.readShort(2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readShort(3);
    }
}
statement is: classReader.readShort(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readShort(3) target is: classReader method is: readShort(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: getAccess()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int access = classReader.getAccess()
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
classReader.getAccess();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getAccess();
    }
}
statement is: classReader.getAccess(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getAccess() target is: classReader method is: getAccess()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: getItem(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int item = classReader.getItem(1)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
classReader.getItem(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getItem(5);
    }
}
statement is: classReader.getItem(5), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getItem(5) target is: classReader method is: getItem(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: getClassName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String className = classReader.getClassName()
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
classReader.getClassName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int numFiles = 10;
        String[] fileNames = new String[]{ "test1.txt", "test2.jpg", "test3.pdf", "test4.docx", "test5.png", "test6.zip", "test7.mp3", "test8.xlsx", "test9.pptx", "test10.doc" };
        String[] acceptedFileNames = new String[]{ "test1.txt", "test2.jpg", "test3.pdf", "test4.docx", "test5.png", "test6.zip" };
    }
}
statement is: // Improved test data
int numFiles = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String[] fileNames = new String[]{ "test1.txt", "test2.jpg", "test3.pdf", "test4.docx", "test5.png", "test6.zip", "test7.mp3", "test8.xlsx", "test9.pptx", "test10.doc" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] acceptedFileNames = new String[]{ "test1.txt", "test2.jpg", "test3.pdf", "test4.docx", "test5.png", "test6.zip" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
* this is vulnerable: int _int = 10
TestCase is: int _int = 10;

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: wheel.asm.ClassReader([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(classReader.b, 315, 315)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
ClassReader classReader = new ClassReader(classReader.b, 315, 315);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.b = $missing$;
    }
}
statement is: classReader.b = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: getSuperName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superName = classReader.getSuperName()
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
classReader.getSuperName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String superName = classReader.getSuperName();
        assertEquals(superName, "org/apache/commons/io/filefilter/AbstractFileFilter");
    }
}
statement is: String superName = classReader.getSuperName(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getSuperName() target is: classReader method is: getSuperName()
statement is: assertEquals(superName, "org/apache/commons/io/filefilter/AbstractFileFilter"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(superName, "org/apache/commons/io/filefilter/AbstractFileFilter") target is:  method is: assertEquals(java.lang.String,java.lang.String)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/Object")
statement is: getSuperName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String superName = classReader.getSuperName()
test data is: ClassReader classReader = new ClassReader("java/lang/Object");
classReader.getSuperName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getSuperName();
    }
}
statement is: classReader.getSuperName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getSuperName() target is: classReader method is: getSuperName()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter")
statement is: getInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] interfaces = classReader.getInterfaces()
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.HiddenFileFilter");
classReader.getInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        @Improve
        the test;
        by changing;
        primitive values;
        Strings(such instanceof , doubles, strings, chars);
        more illustrative;
        @Place
        your Improved;
    }
}
statement is: @Improve
the test, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: by changing, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: primitive values, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: Strings(such instanceof , doubles, strings, chars), class spoon.support.reflect.code.CtInvocationImpl
invocation is: Strings(such instanceof , doubles, strings, chars) target is:  method is: Strings(<unknown>,<unknown>,<unknown>,<unknown>)
statement is: more illustrative, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: @Place
your Improved, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: getInterfaces()[Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] interfaces = classReader.getInterfaces()
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
classReader.getInterfaces();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getInterfaces();
    }
}
statement is: classReader.getInterfaces(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getInterfaces() target is: classReader method is: getInterfaces()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: wheel.asm.ClassReader([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(classReader.b, 534, 2)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(155)
statement is: copyPool(Lwheel/asm/ClassWriter;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.copyPool(arg0)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
ClassReader classReader = new ClassReader(classReader.b, 534, 2);
ClassWriter classWriter = new ClassWriter(155);
classReader.copyPool(classWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.copyPool(classWriter);
    }
}
statement is: classReader.copyPool(classWriter), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.copyPool(classWriter) target is: classReader method is: copyPool()
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("eg;7%s.sp!Xr=otN\"yC")
test data is: ClassReader classReader = new ClassReader("eg;7%s.sp!Xr=otN\"yC");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        and = $missing$;
    }
}
statement is: and = $missing$, class spoon.support.reflect.code.CtAssignmentImpl
statement is: org.evosuite.testcase.statements.ArrayStatement@b99f79b7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[0]
statement is: java.io.ByteArrayInputStream([B)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.io.ByteArrayInputStream
statement code is: ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(arg0)
statement is: wheel.asm.ClassReader(Ljava/io/InputStream;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(arg0)
test data is: byte[] byteArray = new byte[0];
ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);
ClassReader classReader = new ClassReader(byteArrayInputStream);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        byteArray = new byte[]{ 0xca, 0xfe, 0xba, 0xbe, 0x13, 0x37 };
    }
}
statement is: byteArray = new byte[]{ 0xca, 0xfe, 0xba, 0xbe, 0x13, 0x37 }, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1)
statement is: accept(Lwheel/asm/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 938)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter(1);
classReader.accept((ClassVisitor) classWriter, 938);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int someIntValue = 42;// A random integer value

        double someDoubleValue = 3.14;// Pi

        String someStringValue = "Hello, world!";// A simple string

        char someCharValue = 'a';// A lowercase letter }}

    }
}
statement is: // Improved test data
int someIntValue = 42// A random integer value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double someDoubleValue = 3.14// Pi
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String someStringValue = "Hello, world!"// A simple string
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char someCharValue = 'a'// A lowercase letter }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello, world!"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 42;
double _double = 3.14;
String string = "Hello, world!";
char _char = 'a';

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: accept(Lwheel/asm/ClassVisitor;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, 2)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter(2);
classReader.accept((ClassVisitor) classWriter, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int sampleAccessFlags = 0x11;
        byte[] sampleBytes = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)) };
    }
}
statement is: int sampleAccessFlags = 0x11, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: byte[] sampleBytes = new byte[]{ ((byte) (0xca)), ((byte) (0xfe)) }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
* this is vulnerable: int _int = 17
TestCase is: int _int = 17;

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: org.evosuite.testcase.statements.ArrayStatement@aa61954b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[4]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readConst = (String)classReader.readConst(8, arg1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
char[] charArray = new char[4];
classReader.readConst(8, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[4];
        classReader.readConst(8, charArray);
        // Improved test data
        Integer integer = 10;
        Double doubleValue = 3.14;
        String string = "Hello World!";
        Character character = 'a';
        // Use the improved test data to perform the same operation as before
        classReader.readConst(integer, charArray);
    }
}
statement is: char[] charArray = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: classReader.readConst(8, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(8, charArray) target is: classReader method is: readConst(int,char[])
statement is: // Improved test data
Integer integer = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Double doubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String string = "Hello World!", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: Character character = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Use the improved test data to perform the same operation as before
classReader.readConst(integer, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Use the improved test data to perform the same operation as before
classReader.readConst(integer, charArray) target is: classReader method is: readConst(java.lang.Integer,char[])
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: char _char = 'a'
TestCase is: char[] charArray = new char[4];
int _int = 10;
double _double = 3.14;
String string = "Hello World!";
char _char = 'a';

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: org.evosuite.testcase.statements.ArrayStatement@c54b882b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[4]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readConst = (String)classReader.readConst(5, arg1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
char[] charArray = new char[4];
classReader.readConst(5, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[4];
        classReader.readConst(5, charArray);
    }
}
statement is: char[] charArray = new char[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: char[] charArray = new char[4] isAssignment: false Array: new char[4] Elements: []
lengths: [4] [4]
Their type are: class [C char[]
statement is: classReader.readConst(5, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(5, charArray) target is: classReader method is: readConst(int,char[])
TestCase is: char[] charArray = new char[4];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: wheel.asm.ClassReader([BII)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader(classReader.b, 151, 8)
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 151)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
ClassReader classReader = new ClassReader(classReader.b, 151, 8);
ClassWriter classWriter = new ClassWriter(classReader, 151);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        The refined;
        data is;
        now : {
        }
        // Improved test data
        ClassReader classReader = new ClassReader("com/example/MyClass");
        ClassReader classReader = new ClassReader(classReader.b, 151, 8);
        ClassWriter classWriter = new ClassWriter(classReader, 151);
    }
}
statement is: The refined, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: data is, class spoon.support.reflect.code.CtLocalVariableImpl
statement is: now : {
}, class spoon.support.reflect.code.CtBlockImpl
statement is: // Improved test data
ClassReader classReader = new ClassReader("com/example/MyClass"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClassReader classReader = new ClassReader(classReader.b, 151, 8), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClassWriter classWriter = new ClassWriter(classReader, 151), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: String string = "com/example/MyClass";
ClassReader classReader = new ClassReader(string);
int _int = 151;
int _int = 8;
ClassReader classReader = new ClassReader((byte[]) _int, _int, 8);
int _int = 151;
ClassWriter classWriter = new ClassWriter(classReader, _int);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: org.evosuite.testcase.statements.ArrayStatement@4d3351ba type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[7]
statement is: readUTF8(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readUTF8 = classReader.readUTF8(4, arg1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
char[] charArray = new char[7];
classReader.readUTF8(4, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[10];
        classReader.readUTF8(5, charArray);
    }
}
statement is: char[] charArray = new char[10], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [10] Ct is: char[] charArray = new char[7] isAssignment: false Array: new char[10] Elements: []
lengths: [7] [10]
Their type are: class [C char[]
statement is: classReader.readUTF8(5, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(5, charArray) target is: classReader method is: readUTF8(int,char[])
TestCase is: char[] charArray = new char[7];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: org.evosuite.testcase.statements.ArrayStatement@12704636 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[3]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(1, arg1)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
char[] charArray = new char[3];
classReader.readConst(1, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[3];
        classReader.readConst(1, charArray);
        // Improved test data
        int integerValue = 42;
        double doubleValue = 3.14;
        String stringValue = "Hello World";
        char characterValue = 'A';
        // Use the improved test data to perform the tests
        classReader.readConst(integerValue, charArray);
        classReader.readConst(doubleValue, charArray);
        classReader.readConst(stringValue, charArray);
        classReader.readConst(characterValue, charArray);
    }
}
statement is: char[] charArray = new char[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: char[] charArray = new char[3] isAssignment: false Array: new char[3] Elements: []
lengths: [3] [3]
Their type are: class [C char[]
statement is: classReader.readConst(1, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(1, charArray) target is: classReader method is: readConst(int,char[])
statement is: // Improved test data
int integerValue = 42, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello World", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char characterValue = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Use the improved test data to perform the tests
classReader.readConst(integerValue, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Use the improved test data to perform the tests
classReader.readConst(integerValue, charArray) target is: classReader method is: readConst(int,char[])
statement is: classReader.readConst(doubleValue, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(doubleValue, charArray) target is: classReader method is: readConst(double,char[])
statement is: classReader.readConst(stringValue, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(stringValue, charArray) target is: classReader method is: readConst(java.lang.String,char[])
statement is: classReader.readConst(characterValue, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(characterValue, charArray) target is: classReader method is: readConst(char,char[])
* this is vulnerable: int _int = 42
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello World"
* this is vulnerable: char _char = 'A'
TestCase is: char[] charArray = new char[3];
int _int = 42;
double _double = 3.14;
String string = "Hello World";
char _char = 'A';

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: org.evosuite.testcase.statements.ArrayStatement@5ebdb564 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[1]
statement is: readUTF8(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readUTF8 = classReader.readUTF8(54, arg1)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
char[] charArray = new char[1];
classReader.readUTF8(54, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[1];
        classReader.readUTF8(54, charArray);
        // Test data
        int bytesToRead = 10;// A more descriptive example of the number of bytes to read

        char[] expectedChars = new char[]{ 'a', 'b', 'c' };// An array of characters representing the expected result

        assertEquals(expectedChars, charArray);
    }
}
statement is: char[] charArray = new char[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: char[] charArray = new char[1] isAssignment: false Array: new char[1] Elements: []
lengths: [1] [1]
Their type are: class [C char[]
statement is: classReader.readUTF8(54, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(54, charArray) target is: classReader method is: readUTF8(int,char[])
statement is: // Test data
int bytesToRead = 10// A more descriptive example of the number of bytes to read
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char[] expectedChars = new char[]{ 'a', 'b', 'c' }// An array of characters representing the expected result
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: char[] charArray = new char[1] isAssignment: false Array: new char[]{ 'a', 'b', 'c' } Elements: ['a', 'b', 'c']
lengths: [1] []
statement is: assertEquals(expectedChars, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedChars, charArray) target is:  method is: assertEquals(char[],char[])
* this is vulnerable: int _int = 10
TestCase is: char[] charArray = new char[1];
int _int = 10;

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: org.evosuite.testcase.statements.ArrayStatement@5c2925fc type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[11]
statement is: readConst(I[C)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Object
statement code is: Object readConst = classReader.readConst(2, arg1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
char[] charArray = new char[11];
classReader.readConst(2, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[11];
        classReader.readConst(2, charArray);
    }
}
statement is: char[] charArray = new char[11], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [11] Ct is: char[] charArray = new char[11] isAssignment: false Array: new char[11] Elements: []
lengths: [11] [11]
Their type are: class [C char[]
statement is: classReader.readConst(2, charArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readConst(2, charArray) target is: classReader method is: readConst(int,char[])
TestCase is: char[] charArray = new char[11];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: readLong(I)J type is: class org.evosuite.testcase.statements.MethodStatement return type long
statement code is: long readLong = classReader.readLong(945)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
classReader.readLong(945);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readLong(845321);// Improved test data: changed the primitive value to a more descriptive and representative example, such as the actual value of the long variable being tested. }}

    }
}
statement is: classReader.readLong(845321)// Improved test data: changed the primitive value to a more descriptive and representative example, such as the actual value of the long variable being tested. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readLong(845321)// Improved test data: changed the primitive value to a more descriptive and representative example, such as the actual value of the long variable being tested. }}
 target is: classReader method is: readLong(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: readInt(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = classReader.readInt(1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
classReader.readInt(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt(3);
    }
}
statement is: classReader.readInt(3), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(3) target is: classReader method is: readInt(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: readUnsignedShort(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readUnsignedShort = classReader.readUnsignedShort(4)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
classReader.readUnsignedShort(4);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readUnsignedShort(4);
        // Improved test data:
        ClassReader classReader = new ClassReader("java/lang/Integer");
        classReader.readUnsignedShort(10);
    }
}
statement is: classReader.readUnsignedShort(4), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUnsignedShort(4) target is: classReader method is: readUnsignedShort(int)
statement is: // Improved test data:
ClassReader classReader = new ClassReader("java/lang/Integer"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.readUnsignedShort(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUnsignedShort(10) target is: classReader method is: readUnsignedShort(int)
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 1
Matched Method is: readUnsignedShort(I)I
TestCase is: String string = "java/lang/Integer";
ClassReader classReader = new ClassReader(string);
int _int = 10;
((ClassReader) string).readUnsignedShort(_int);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-68))
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 2)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter((-68));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 2);
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 2) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 10)
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 391)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter(classReader, 10);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 391);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        ClassReader classReader = new ClassReader("java/lang/String");
        ClassWriter classWriter = new ClassWriter(classReader, 10);
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 391);
    }
}
statement is: // Improved test data
ClassReader classReader = new ClassReader("java/lang/String"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ClassWriter classWriter = new ClassWriter(classReader, 10), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 391), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 391) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 1
Matched Method is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V
i 2 Parameters size() 2 Num of Method Parameters: 3
TestCase is: String string = "java/lang/String";
ClassReader classReader = new ClassReader(string);
int _int = 10;
ClassWriter classWriter = new ClassWriter(classReader, _int);
int _int = 391;
int _int = null;
((ClassReader) string).accept((ClassVisitor) classWriter, (Attribute[]) _int, _int);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-68))
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, (-1232))
test data is: ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter((-68));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, (-1232));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), -1232);
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), -1232), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), -1232) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-68))
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, (-68))
test data is: ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter((-68));
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, (-68));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), COMPUTE_MAXS);
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), COMPUTE_MAXS), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), COMPUTE_MAXS) target is: classReader method is: accept(ClassVisitor,Attribute[])
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 534)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
ClassWriter classWriter = new ClassWriter(8);
classReader.accept((ClassVisitor) classWriter, (Attribute[]) null, 534);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 534);
    }
}
statement is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 534), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classWriter)), ((Attribute[]) (null)), 534) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: wheel.asm.ClassAdapter(Lwheel/asm/ClassVisitor;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassAdapter
statement code is: ClassAdapter classAdapter = new ClassAdapter(arg0)
statement is: accept(Lwheel/asm/ClassVisitor;[Lwheel/asm/Attribute;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classReader.accept((ClassVisitor) arg0, (Attribute[]) null, 0)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
ClassWriter classWriter = new ClassWriter(2);
ClassAdapter classAdapter = new ClassAdapter(classWriter);
classReader.accept((ClassVisitor) classAdapter, (Attribute[]) null, 0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.accept(((ClassVisitor) (classAdapter)), ((Attribute[]) (null)), 0);
    }
}
statement is: classReader.accept(((ClassVisitor) (classAdapter)), ((Attribute[]) (null)), 0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.accept(((ClassVisitor) (classAdapter)), ((Attribute[]) (null)), 0) target is: classReader method is: accept(ClassVisitor,Attribute[],int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 1)
statement is: org.evosuite.testcase.statements.ArrayStatement@cd7cd3dd type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[1]
statement is: readUTF8(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readUTF8 = classReader.readUTF8(34, arg1)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
ClassWriter classWriter = new ClassWriter(classReader, 1);
char[] charArray = new char[1];
classReader.readUTF8(34, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[1];
        classReader.readUTF8(34, "Hello World!");
    }
}
statement is: char[] charArray = new char[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: char[] charArray = new char[1] isAssignment: false Array: new char[1] Elements: []
lengths: [1] [1]
Their type are: class [C char[]
statement is: classReader.readUTF8(34, "Hello World!"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readUTF8(34, "Hello World!") target is: classReader method is: readUTF8(int,java.lang.String)
TestCase is: char[] charArray = new char[1];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: getItem(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int item = classReader.getItem(0)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
classReader.getItem(0);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.getItem(0);// returns true

        classReader.getItem(1);// returns false

        classReader.getItem(2);// throws IndexOutOfBoundsException }}

    }
}
statement is: classReader.getItem(0)// returns true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getItem(0)// returns true
 target is: classReader method is: getItem(int)
statement is: classReader.getItem(1)// returns false
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getItem(1)// returns false
 target is: classReader method is: getItem(int)
statement is: classReader.getItem(2)// throws IndexOutOfBoundsException }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.getItem(2)// throws IndexOutOfBoundsException }}
 target is: classReader method is: getItem(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: readByte(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readByte = classReader.readByte(43)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
classReader.readByte(43);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
        classReader.readByte(1024);
    }
}
statement is: // Improved test data:
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classReader.readByte(1024), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readByte(1024) target is: classReader method is: readByte(int)
source statement: wheel.asm.ClassReader(Ljava/lang/String;)V callee: VariableReference: Statement 0, type wheel.asm.ClassReaderindex is: 1
Matched Method is: readByte(I)I
TestCase is: String string = "org.apache.commons.io.filefilter.TrueFileFilter";
ClassReader classReader = new ClassReader(string);
int _int = 1024;
((ClassReader) string).readByte(_int);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: readByte(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readByte = classReader.readByte(21)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
classReader.readByte(21);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readByte(34);
    }
}
statement is: classReader.readByte(34), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readByte(34) target is: classReader method is: readByte(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: org.evosuite.testcase.statements.ArrayStatement@ce8c40ba type is: class org.evosuite.testcase.statements.ArrayStatement return type class [C
statement code is: char[] charArray = new char[9]
statement is: readClass(I[C)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String readClass = classReader.readClass(534, arg1)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
char[] charArray = new char[9];
classReader.readClass(534, charArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        char[] charArray = new char[9];
    }
}
statement is: char[] charArray = new char[9], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [9] Ct is: char[] charArray = new char[9] isAssignment: false Array: new char[9] Elements: []
lengths: [9] [9]
Their type are: class [C char[]
TestCase is: char[] charArray = new char[9];

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter")
statement is: readInt(I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int readInt = classReader.readInt(8)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.FalseFileFilter");
classReader.readInt(8);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classReader.readInt(10);
    }
}
statement is: classReader.readInt(10), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classReader.readInt(10) target is: classReader method is: readInt(int)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/String")
statement is: org.evosuite.testcase.statements.ArrayStatement@694f7fd6 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Label;
statement code is: Label[] labelArray = new Label[8]
statement is: readLabel(I[Lwheel/asm/Label;)Lwheel/asm/Label; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Label
statement code is: Label readLabel = classReader.readLabel(1, arg1)
test data is: ClassReader classReader = new ClassReader("java/lang/String");
Label[] labelArray = new Label[8];
classReader.readLabel(1, labelArray);

* Computation finished
