* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: wheel.asm.FieldWriter
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/80_wheelwebtool/evosuite-files/evosuite.properties
* Connecting to master process on port 8223
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 18:58:32.945 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 18:58:32.950 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 18:58:32.957 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 18:58:32.972 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 18:58:32.973 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 18:58:32.974 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 18:58:32.975 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 18:58:32.976 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 18:58:32.977 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 18:58:32.978 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 18:58:32.980 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 18:58:32.982 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 18:58:32.985 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 18:58:33.017 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 18:58:33.019 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class wheel.asm.FieldWriter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 212
* Using seed 1710356309865
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 103 / 212
[Progress:>                             0%] [Cov:==============>                    40%][Progress:>                             0%] [Cov:======================>            63%][Progress:>                             1%] [Cov:======================>            64%][Progress:>                             1%] [Cov:========================>          71%][Progress:>                             1%] [Cov:==========================>        75%][Progress:>                             1%] [Cov:==========================>        75%][Progress:=>                            4%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           7%] [Cov:=============================>     84%][Progress:==>                           9%] [Cov:=============================>     84%][Progress:===>                          10%] [Cov:=============================>     85%][Progress:===>                          10%] [Cov:=============================>     85%][Progress:===>                          10%] [Cov:=============================>     85%][Progress:====>                         15%] [Cov:=============================>     85%][Progress:====>                         15%] [Cov:=============================>     85%][Progress:=====>                        18%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       20%] [Cov:=============================>     85%][Progress:======>                       23%] [Cov:=============================>     85%][Progress:=======>                      26%] [Cov:=============================>     85%][Progress:=========>                    31%] [Cov:=============================>     85%][Progress:=========>                    31%] [Cov:=============================>     85%][Progress:==========>                   34%] [Cov:=============================>     85%][Progress:==========>                   36%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:=============================>     85%][Progress:============>                 41%] [Cov:==============================>    87%][Progress:============>                 42%] [Cov:==============================>    88%][Progress:=============>                44%] [Cov:==============================>    88%][Progress:==============>               47%] [Cov:==============================>    88%][Progress:==============>               49%] [Cov:==============================>    88%][Progress:===============>              52%] [Cov:==============================>    88%][Progress:===============>              52%] [Cov:==============================>    88%][Progress:================>             55%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:==================>           60%] [Cov:==============================>    88%][Progress:=====================>        70%] [Cov:==============================>    88%][Progress:=====================>        70%] [Cov:==============================>    88%][Progress:=====================>        73%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:========================>     80%] [Cov:==============================>    88%][Progress:========================>     80%] [Cov:==============================>    88%][Progress:========================>     83%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:=========================>    86%] [Cov:==============================>    88%][Progress:==========================>   88%] [Cov:==============================>    88%][Progress:==========================>   88%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:============================> 96%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%]
* Search finished after 203s and 55 generations, 35425 statements, best individual has fitness: 3.0
* Generated before the refinement 13 tests with total length 58
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2795)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2795, "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations")
statement is: wheel.asm.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.Attribute
statement code is: Attribute attribute = new Attribute("'pZ<Q[@C)=KR(2/")
statement is: visitAttribute(Lwheel/asm/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.visitAttribute(arg0)
statement is: org.evosuite.testcase.statements.FieldStatement@3581403f type is: class org.evosuite.testcase.statements.FieldStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = classWriter.pool
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2795, "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations");
Attribute attribute = new Attribute("'pZ<Q[@C)=KR(2/");
fieldWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2795, "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations");
        Attribute attribute = new Attribute("'pZ<Q[@C)=KR(2/");
        fieldWriter.visitAttribute(attribute);
        ByteVector byteVector = classWriter.pool;
        fieldWriter.put(byteVector);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2795, "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("'pZ<Q[@C)=KR(2/"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAttribute(attribute) target is: fieldWriter method is: visitAttribute(Attribute)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: visitAttribute(Lwheel/asm/Attribute;)V
statement is: ByteVector byteVector = classWriter.pool, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: classWriter.pool is classWriter
CtField is: wheel.asm.ByteVector wheel.asm.ClassWriter.pool ByteVector pool
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put(ByteVector)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: put(Lwheel/asm/ByteVector;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 2795;
String string = "RntimeInvisibeAnnotations";
String string = "RntimeInvisibeAnnotations";
String string = "RntimeInvisibeAnnotations";
String string = "RntimeInvisibeAnnotations";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "RntimeInvisibeAnnotations");
String string = "'pZ<Q[@C)=KR(2/";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
ByteVector byteVector = null;
((FieldWriter) string).put(byteVector);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1379))
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 1222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC")
statement is: visitEnd()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.visitEnd()
test data is: ClassWriter classWriter = new ClassWriter((-1379));
FieldWriter fieldWriter = new FieldWriter(classWriter, 1222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC");
fieldWriter.visitEnd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC");
        fieldWriter.visitEnd();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitEnd() target is: fieldWriter method is: visitEnd()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: visitEnd()V
TestCase is: int _int = 222;
String string = "J6DY*,kiRnC";
String string = "oAyT+D1E`2|7O6^Q";
String string = "J6DY*,kiRnC";
String string = "J6DY*,kiRnC";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "J6DY*,kiRnC");
((FieldWriter) string).visitEnd();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2793)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-1329), "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz")
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2793, "StackMap", "StackMap", "6H1*k!UK/u/[?Wz", arg5)
test data is: ClassWriter classWriter = new ClassWriter(2793);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");
FieldWriter fieldWriter = new FieldWriter(classWriter, 2793, "StackMap", "StackMap", "6H1*k!UK/u/[?Wz", fieldWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2793, "StackMap", "stackMap", "6H1*k!UK/u/[?Wz", fieldWriter);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2793, "StackMap", "stackMap", "6H1*k!UK/u/[?Wz", fieldWriter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 2793;
String string = "StackMap";
String string = "stackMap";
String string = "6H1*k!UK/u/[?Wz";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2782)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations")
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
        fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false);
        // Improved test data: using a more descriptive example for the annotation value
        fieldWriter.visitString("RuntimeVisibleAnnotations", "This is a sample annotation");
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false) target is: fieldWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor;
statement is: // Improved test data: using a more descriptive example for the annotation value
fieldWriter.visitString("RuntimeVisibleAnnotations", "This is a sample annotation"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data: using a more descriptive example for the annotation value
fieldWriter.visitString("RuntimeVisibleAnnotations", "This is a sample annotation") target is: fieldWriter method is: visitString(java.lang.String,java.lang.String)
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: getSize()I
TestCase is: int _int = 2782;
String string = "RuntimeVisibleAnnotations";
String string = "RuntimeVisibleAnnotations";
String string = "RuntimeVisibleAnnotations";
String string = "RuntimeVisibleAnnotations";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "RuntimeVisibleAnnotations");
String string = "RuntimeVisibleAnnotations";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 1, "+fvY }Qp\"", "", (String) null, (Object) null)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        fieldWriter.getSize();
    }
}
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1329))
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-1329), "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;")
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1329));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;");
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 0, "myIntField", "I", 12345);
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 0, "myIntField", "I", 12345), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1))
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+")
statement is: org.evosuite.testcase.statements.ArrayStatement@2938501 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8588281c type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "/=dB%gg,xmS+&"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", arg5)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[1];
        stringArray[0] = "Hello World";
        classWriter.visit(283, -3281, "%H#g", "Hello World", "uTwHX#u=|] asr", stringArray);
        fieldWriter.getSize();
    }
}
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello World", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World" Ct is: stringArray[0] = "Hello World"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@151100c2
statement is: classWriter.visit(283, -3281, "%H#g", "Hello World", "uTwHX#u=|] asr", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(283, -3281, "%H#g", "Hello World", "uTwHX#u=|] asr", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
* this is vulnerable: String string = "Hello World"
TestCase is: String[] stringArray = new String[1];
String string = "Hello World";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2780)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2780, "6H2", "6H2", "6H2", "6H2")
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)fieldWriter.visitAnnotation("6H2", true)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2780);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2780, "6H2", "6H2", "6H2", "6H2");
fieldWriter.visitAnnotation("6H2", true);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2780, "6H2", "6H2", "6H2", "6H2");
        fieldWriter.visitAnnotation("6H2", true);
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2780, "6H2", "6H2", "6H2", "6H2"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAnnotation("6H2", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAnnotation("6H2", true) target is: fieldWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor;
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: getSize()I
TestCase is: int _int = 2780;
String string = "6H2";
String string = "6H2";
String string = "6H2";
String string = "6H2";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "6H2");
String string = "6H2";
boolean _boolean = true;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2795)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 1, "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q")
statement is: wheel.asm.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.Attribute
statement code is: Attribute attribute = new Attribute("oAyT+D2|7O^Q")
statement is: visitAttribute(Lwheel/asm/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.visitAttribute(arg0)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q");
Attribute attribute = new Attribute("oAyT+D2|7O^Q");
fieldWriter.visitAttribute(attribute);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "Java", "String", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q");
        Attribute attribute = new Attribute("testAttribute");
        fieldWriter.visitAttribute(attribute);
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "Java", "String", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("testAttribute"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAttribute(attribute) target is: fieldWriter method is: visitAttribute(Attribute)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: visitAttribute(Lwheel/asm/Attribute;)V
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: getSize()I
TestCase is: int _int = 1;
String string = "Java";
String string = "String";
String string = "oAyT+D2|7O^Q";
String string = "oAyT+D2|7O^Q";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "oAyT+D2|7O^Q");
String string = "testAttribute";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
((FieldWriter) string).getSize();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(8)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 1, "+fvY }Qp\"", "", (String) null, (Object) null)
statement is: wheel.asm.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = new ByteVector(949)
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
ByteVector byteVector = new ByteVector(949);
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 100, "helloWorld", "", ((String) (null)), ((Object) (null)));
        ByteVector byteVector = new ByteVector(949);
        fieldWriter.put(byteVector);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 100, "helloWorld", "", ((String) (null)), ((Object) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = new ByteVector(949), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put(ByteVector)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 3
Matched Method is: put(Lwheel/asm/ByteVector;)V
TestCase is: int _int = 100;
String string = "helloWorld";
String string = "";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, "", (String) null, (Object) null);
int _int = 949;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1))
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+")
statement is: org.evosuite.testcase.statements.ArrayStatement@e8d66a8f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@dbda46c1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "/=dB%gg,xmS+&"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", arg5)
statement is: wheel.asm.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = new ByteVector(4096)
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
ByteVector byteVector = new ByteVector(4096);
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, -1345, "myField", "myField", "myField", "myField");
        String[] stringArray = new String[1];
        stringArray[0] = "/=dB%gg,xmS+&";
        classWriter.visit(283, -3281, "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
        ByteVector byteVector = new ByteVector(4096);
        fieldWriter.put(byteVector);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, -1345, "myField", "myField", "myField", "myField"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray = new String[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[1] Elements: []
lengths: [1] [1]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "/=dB%gg,xmS+&", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"/=dB%gg,xmS+&" Ct is: stringArray[0] = "/=dB%gg,xmS+&"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ae5a957a
statement is: classWriter.visit(283, -3281, "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(283, -3281, "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: ByteVector byteVector = new ByteVector(4096), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put(ByteVector)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: put(Lwheel/asm/ByteVector;)V
* this is vulnerable: String string = "/=dB%gg,xmS+&"
TestCase is: String string = "myField";
String string = "myField";
String string = "myField";
String string = "myField";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) string, (int) string, string, string, " ooFO+", " ooFO+");
String[] stringArray = new String[1];
String string = "/=dB%gg,xmS+&";
int _int = 4096;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2795)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-1345), "ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue")
statement is: wheel.asm.ByteVector()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = new ByteVector()
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)fieldWriter.visitAnnotation("ConstantValue", true)
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), "ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue");
ByteVector byteVector = new ByteVector();
fieldWriter.visitAnnotation("ConstantValue", true);
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        fieldWriter = new FieldWriter(classWriter, FieldWriter.ACC_PRIVATE, "com.example.ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue");
        byteVector = new ByteVector();
        fieldWriter.visitAnnotation("com.example.ConstantValue", true);
        fieldWriter.put(byteVector);
    }
}
statement is: fieldWriter = new FieldWriter(classWriter, FieldWriter.ACC_PRIVATE, "com.example.ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: byteVector = new ByteVector(), class spoon.support.reflect.code.CtAssignmentImpl
statement is: fieldWriter.visitAnnotation("com.example.ConstantValue", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAnnotation("com.example.ConstantValue", true) target is: fieldWriter method is: visitAnnotation(java.lang.String,boolean)
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2782)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations")
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)fieldWriter.visitAnnotation("", false)
statement is: wheel.asm.ByteVector(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = new ByteVector(2)
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("", false);
ByteVector byteVector = new ByteVector(2);
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
        fieldWriter.visitAnnotation("Ljava/lang/annotation/Retention; value=RUNTIME", false);
        ByteVector byteVector = new ByteVector(2);
        fieldWriter.put(byteVector);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAnnotation("Ljava/lang/annotation/Retention; value=RUNTIME", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAnnotation("Ljava/lang/annotation/Retention; value=RUNTIME", false) target is: fieldWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor;
statement is: ByteVector byteVector = new ByteVector(2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put(ByteVector)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: put(Lwheel/asm/ByteVector;)V
TestCase is: int _int = 2782;
String string = "RuntimeVisibleAnnotations";
String string = "RuntimeVisibleAnnotations";
String string = "RuntimeVisibleAnnotations";
String string = "RuntimeVisibleAnnotations";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "RuntimeVisibleAnnotations");
String string = "Ljava/lang/annotation/Retention; value=RUNTIME";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);

* test suite isTestSuite: 23
Test 0: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2795, "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations");
Attribute attribute = new Attribute("'pZ<Q[@C)=KR(2/");
fieldWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 1: 
ClassWriter classWriter = new ClassWriter((-1379));
FieldWriter fieldWriter = new FieldWriter(classWriter, 1222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC");
fieldWriter.visitEnd();
Test 2: 
ClassWriter classWriter = new ClassWriter(2793);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 2793, "StackMap", "StackMap", "6H1*k!UK/u/[?Wz", fieldWriter);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.FieldWriter@8
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false);
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter((-1329));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;");
fieldWriter.getSize();
Test 6: 
ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
fieldWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter(2780);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2780, "6H2", "6H2", "6H2", "6H2");
fieldWriter.visitAnnotation("6H2", true);
fieldWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q");
Attribute attribute = new Attribute("oAyT+D2|7O^Q");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 9: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
ByteVector byteVector = new ByteVector(949);
fieldWriter.put(byteVector);
Test 10: 
ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
ByteVector byteVector = new ByteVector(4096);
fieldWriter.put(byteVector);
Test 11: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), "ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue");
ByteVector byteVector = new ByteVector();
fieldWriter.visitAnnotation("ConstantValue", true);
fieldWriter.put(byteVector);
Test 12: 
ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("", false);
ByteVector byteVector = new ByteVector(2);
fieldWriter.put(byteVector);
Test 13: 
String string = "RntimeInvisibeAnnotations";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2795, (int) "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations");
String string = "'pZ<Q[@C)=KR(2/";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
ByteVector byteVector = null;
((FieldWriter) string).put(byteVector);

Test 14: 
String string = "J6DY*,kiRnC";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 222, (int) "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC", "J6DY*,kiRnC");
((FieldWriter) string).visitEnd();

Test 15: 
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2793, (int) "StackMap", "stackMap", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");

Test 16: 
String string = "RuntimeVisibleAnnotations";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2782, (int) "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
String string = "RuntimeVisibleAnnotations";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

Test 17: 
String[] stringArray = new String[1];

Test 18: 
String string = "6H2";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2780, (int) "6H2", "6H2", "6H2", "6H2", "6H2");
String string = "6H2";
boolean _boolean = true;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

Test 19: 
String string = "Java";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 1, (int) "Java", "String", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q");
String string = "testAttribute";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
((FieldWriter) string).getSize();

Test 20: 
String string = "helloWorld";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 100, (int) "helloWorld", "", "", (String) null, (Object) null);
int _int = 949;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);

Test 21: 
String string = "myField";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "myField", (int) "myField", "myField", "myField", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
int _int = 4096;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);

Test 22: 
String string = "RuntimeVisibleAnnotations";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2782, (int) "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
String string = "Ljava/lang/annotation/Retention; value=RUNTIME";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);


* Generated after the refinement and before minimization 23 tests with total length 107
* test suite isTestSuite: 23
Test 0: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2795, "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations");
Attribute attribute = new Attribute("'pZ<Q[@C)=KR(2/");
fieldWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 1: 
ClassWriter classWriter = new ClassWriter((-1379));
FieldWriter fieldWriter = new FieldWriter(classWriter, 1222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC");
fieldWriter.visitEnd();
Test 2: 
ClassWriter classWriter = new ClassWriter(2793);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 2793, "StackMap", "StackMap", "6H1*k!UK/u/[?Wz", fieldWriter);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.FieldWriter@8
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false);
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter((-1329));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;");
fieldWriter.getSize();
Test 6: 
ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
fieldWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter(2780);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2780, "6H2", "6H2", "6H2", "6H2");
fieldWriter.visitAnnotation("6H2", true);
fieldWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q");
Attribute attribute = new Attribute("oAyT+D2|7O^Q");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 9: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
ByteVector byteVector = new ByteVector(949);
fieldWriter.put(byteVector);
Test 10: 
ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
ByteVector byteVector = new ByteVector(4096);
fieldWriter.put(byteVector);
Test 11: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), "ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue");
ByteVector byteVector = new ByteVector();
fieldWriter.visitAnnotation("ConstantValue", true);
fieldWriter.put(byteVector);
Test 12: 
ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("", false);
ByteVector byteVector = new ByteVector(2);
fieldWriter.put(byteVector);
Test 13: 
String string = "RntimeInvisibeAnnotations";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2795, (int) "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations");
String string = "'pZ<Q[@C)=KR(2/";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
ByteVector byteVector = null;
((FieldWriter) string).put(byteVector);

Test 14: 
String string = "J6DY*,kiRnC";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 222, (int) "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC", "J6DY*,kiRnC");
((FieldWriter) string).visitEnd();

Test 15: 
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2793, (int) "StackMap", "stackMap", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");

Test 16: 
String string = "RuntimeVisibleAnnotations";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2782, (int) "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
String string = "RuntimeVisibleAnnotations";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

Test 17: 
String[] stringArray = new String[1];

Test 18: 
String string = "6H2";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2780, (int) "6H2", "6H2", "6H2", "6H2", "6H2");
String string = "6H2";
boolean _boolean = true;
((FieldWriter) string).visitAnnotation(string, _boolean);
((FieldWriter) string).getSize();

Test 19: 
String string = "Java";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 1, (int) "Java", "String", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q");
String string = "testAttribute";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
((FieldWriter) string).getSize();

Test 20: 
String string = "helloWorld";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 100, (int) "helloWorld", "", "", (String) null, (Object) null);
int _int = 949;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);

Test 21: 
String string = "myField";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "myField", (int) "myField", "myField", "myField", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
int _int = 4096;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);

Test 22: 
String string = "RuntimeVisibleAnnotations";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 2782, (int) "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
String string = "Ljava/lang/annotation/Retention; value=RUNTIME";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);
int _int = 2;
ByteVector byteVector = new ByteVector(_int);
((FieldWriter) string).put(byteVector);


* Minimizing test suite
* test suite isTestSuite: 13
Test 0: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2795, "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations");
Attribute attribute = new Attribute("'pZ<Q[@C)=KR(2/");
fieldWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 1: 
ClassWriter classWriter = new ClassWriter((-1379));
FieldWriter fieldWriter = new FieldWriter(classWriter, 1222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC");
fieldWriter.visitEnd();
Test 2: 
ClassWriter classWriter = new ClassWriter(2793);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 2793, "StackMap", "StackMap", "6H1*k!UK/u/[?Wz", fieldWriter);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.FieldWriter@8
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter(2780);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2780, "6H2", "6H2", "6H2", "6H2");
fieldWriter.visitAnnotation("6H2", true);
fieldWriter.getSize();
Test 6: 
ClassWriter classWriter = new ClassWriter((-1329));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;");
fieldWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
fieldWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q");
Attribute attribute = new Attribute("oAyT+D2|7O^Q");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 9: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
ByteVector byteVector = new ByteVector(949);
fieldWriter.put(byteVector);
Test 10: 
ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
ByteVector byteVector = new ByteVector(4096);
fieldWriter.put(byteVector);
Test 11: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), "ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue");
ByteVector byteVector = new ByteVector();
fieldWriter.visitAnnotation("ConstantValue", true);
fieldWriter.put(byteVector);
Test 12: 
ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("", false);
ByteVector byteVector = new ByteVector(2);
fieldWriter.put(byteVector);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 85
* Number of covered goals: 85
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 5
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Generated 13 tests with total length 58
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 38%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1379));
FieldWriter fieldWriter = new FieldWriter(arg0, 1222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC");
fieldWriter.visitEnd();

** It was a parseable test case! 
refined test name is: testVisitEndWithValidInput
* Compiling Tests
refined test name is: testFieldWriterVisitEndMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2793);
FieldWriter arg5 = new FieldWriter(arg0, (-1329), "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(arg0, 2793, "StackMap", "StackMap", "6H1*k!UK/u/[?Wz", arg5);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.FieldWriter@8
   //
   verifyException("wheel.asm.ClassWriter", e);
}


** It was a parseable test case! 
refined test name is: testAddFieldWithInvalidName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(arg0, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
int size = fieldWriter.getSize();
assertEquals(8, size);


** It was a parseable test case! 
refined test name is: testGetSizeMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(arg0, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false);
int size = fieldWriter.getSize();
assertEquals(36, size);


** It was a parseable test case! 
refined test name is: testFieldWriterGetSizeWithAnnotations
* Compiling Tests
refined test name is: testWriteRuntimeVisibleAnnotations
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(2780);
FieldWriter fieldWriter = new FieldWriter(arg0, 2780, "6H2", "6H2", "6H2", "6H2");
fieldWriter.visitAnnotation("6H2", true);
int size = fieldWriter.getSize();
assertEquals(36, size);


** It was a parseable test case! 
refined test name is: testFieldWriterAnnotationAndSize
* Compiling Tests
refined test name is: testFieldWriterSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1329));
FieldWriter fieldWriter = new FieldWriter(arg0, (-1329), "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;");
int size = fieldWriter.getSize();
assertEquals(36, size);


** It was a parseable test case! 
refined test name is: testClassWriterWithNoComments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(arg0, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] arg5 = new String[1];
arg5[0] = "/=dB%gg,xmS+&";
arg0.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", arg5);
int size = fieldWriter.getSize();
assertEquals(30, size);


** It was a parseable test case! 
refined test name is: testFieldSizeCalculationshouldBeEqualTo30
* Compiling Tests
refined test name is: testFieldWriterSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:25.693 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:25.736 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:06:25.801 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:25.811 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:06:25.859 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:25.860 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:25.910 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:25.911 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:25.970 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:25.971 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 20:06:26.028 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:26.029 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:26.099 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:26.109 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 3 called: 1 to improve: false
** Write a test suite: 4 called: 2 to improve: false
** Write a test suite: 6 called: 3 to improve: false
[MASTER] 20:06:26.270 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:26.271 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 3 called: 2 to improve: false
** Write a test suite: 6 called: 3 to improve: false
[MASTER] 20:06:26.417 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:26.418 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
[MASTER] 20:06:26.641 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 13
Test 0: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2795, "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations");
Attribute attribute = new Attribute("'pZ<Q[@C)=KR(2/");
fieldWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 1: 
ClassWriter classWriter = new ClassWriter((-1379));
FieldWriter fieldWriter = new FieldWriter(classWriter, 1222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC");
fieldWriter.visitEnd();
Test 2: 
ClassWriter classWriter = new ClassWriter(2793);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 2793, "StackMap", "StackMap", "6H1*k!UK/u/[?Wz", fieldWriter);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.FieldWriter@8
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false);
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter((-1329));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;");
fieldWriter.getSize();
Test 6: 
ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
fieldWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter(2780);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2780, "6H2", "6H2", "6H2", "6H2");
fieldWriter.visitAnnotation("6H2", true);
fieldWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q");
Attribute attribute = new Attribute("oAyT+D2|7O^Q");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 9: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
ByteVector byteVector = new ByteVector(949);
fieldWriter.put(byteVector);
Test 10: 
ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
ByteVector byteVector = new ByteVector(4096);
fieldWriter.put(byteVector);
Test 11: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), "ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue");
ByteVector byteVector = new ByteVector();
fieldWriter.visitAnnotation("ConstantValue", true);
fieldWriter.put(byteVector);
Test 12: 
ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("", false);
ByteVector byteVector = new ByteVector(2);
fieldWriter.put(byteVector);

* Minimizing test suite
[MASTER] 20:06:27.957 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 13
Test 0: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2795, "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations", "RntimeInvisibeAnnotations");
Attribute attribute = new Attribute("'pZ<Q[@C)=KR(2/");
fieldWriter.visitAttribute(attribute);
ByteVector byteVector = classWriter.pool;
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 1: 
ClassWriter classWriter = new ClassWriter((-1379));
FieldWriter fieldWriter = new FieldWriter(classWriter, 1222, "J6DY*,kiRnC", "oAyT+D1E`2|7O6^Q", "J6DY*,kiRnC", "J6DY*,kiRnC");
fieldWriter.visitEnd();
Test 2: 
ClassWriter classWriter = new ClassWriter(2793);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz", "6H1*k!UK/u/[?Wz");
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 2793, "StackMap", "StackMap", "6H1*k!UK/u/[?Wz", fieldWriter);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.FieldWriter@8
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("RuntimeVisibleAnnotations", false);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter(2780);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2780, "6H2", "6H2", "6H2", "6H2");
fieldWriter.visitAnnotation("6H2", true);
fieldWriter.getSize();
Test 6: 
ClassWriter classWriter = new ClassWriter((-1329));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1329), "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;", "h135%OB]BP`m;");
fieldWriter.getSize();
Test 7: 
ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
fieldWriter.getSize();
Test 8: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q", "oAyT+D2|7O^Q");
Attribute attribute = new Attribute("oAyT+D2|7O^Q");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 9: 
ClassWriter classWriter = new ClassWriter(8);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "+fvY }Qp\"", "", (String) null, (Object) null);
ByteVector byteVector = new ByteVector(949);
fieldWriter.put(byteVector);
Test 10: 
ClassWriter classWriter = new ClassWriter((-1));
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), " ooFO+", " ooFO+", " ooFO+", " ooFO+");
String[] stringArray = new String[1];
stringArray[0] = "/=dB%gg,xmS+&";
classWriter.visit(283, (-3281), "%H#g", "/=dB%gg,xmS+&", "uTwHX#u=|] asr", stringArray);
ByteVector byteVector = new ByteVector(4096);
fieldWriter.put(byteVector);
Test 11: 
ClassWriter classWriter = new ClassWriter(2795);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-1345), "ConstantValue", "ConstantValue", "ConstantValue", "ConstantValue");
ByteVector byteVector = new ByteVector();
fieldWriter.visitAnnotation("ConstantValue", true);
fieldWriter.put(byteVector);
Test 12: 
ClassWriter classWriter = new ClassWriter(2782);
FieldWriter fieldWriter = new FieldWriter(classWriter, 2782, "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
fieldWriter.visitAnnotation("", false);
ByteVector byteVector = new ByteVector(2);
fieldWriter.put(byteVector);

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 85
* Number of covered goals: 85
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 5
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Generated 13 tests with total length 58
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 20:06:27.999 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 38%
* Compiling and checking tests
[MASTER] 20:06:29.780 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:30.477 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:30.478 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:30.520 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:30.521 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:30.564 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:30.565 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:30.622 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:30.623 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:30.728 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:30.729 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:30.778 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:30.779 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 20:06:30.820 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:30.821 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
[MASTER] 20:06:30.898 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:30.899 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
[MASTER] 20:06:30.981 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar2060855664124641333.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 20:06:30.982 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar2060855664124641333.jar
* Writing tests to file
[MASTER] 20:06:30.984 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'FieldWriter_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 3 called: 2 to improve: false
** Write a test suite: 6 called: 3 to improve: false
* Writing JUnit test case 'FieldWriter_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
* Done!

* Computation finished
