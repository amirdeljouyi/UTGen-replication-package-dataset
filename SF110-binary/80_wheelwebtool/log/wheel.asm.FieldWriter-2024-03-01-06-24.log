* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: wheel.asm.FieldWriter
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/80_wheelwebtool/evosuite-files/evosuite.properties
* Connecting to master process on port 17611
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:24:19.464 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:24:19.466 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:24:19.467 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:24:19.472 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 06:24:19.472 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 06:24:19.473 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 06:24:19.473 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 06:24:19.474 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 06:24:19.474 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 06:24:19.474 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 06:24:19.476 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 06:24:19.476 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 06:24:19.478 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:24:19.497 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:24:19.498 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class wheel.asm.FieldWriter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 212
* Using seed 1709274257706
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 103 / 212
[Progress:=>                            5%] [Cov:========>                          24%][Progress:=>                            5%] [Cov:======================>            65%][Progress:=>                            6%] [Cov:=========================>         72%][Progress:=>                            6%] [Cov:==========================>        76%][Progress:=>                            6%] [Cov:============================>      81%][Progress:=>                            6%] [Cov:=============================>     83%][Progress:===>                          12%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:=====>                        17%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     83%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:======>                       23%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      24%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      25%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:=======>                      26%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     27%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:========>                     28%] [Cov:=============================>     84%][Progress:=========>                    33%] [Cov:=============================>     84%][Progress:===========>                  38%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:===========>                  39%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 40%] [Cov:=============================>     84%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 41%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    86%][Progress:============>                 42%] [Cov:==============================>    88%][Progress:============>                 42%] [Cov:==============================>    88%][Progress:============>                 42%] [Cov:==============================>    88%][Progress:============>                 43%] [Cov:==============================>    88%][Progress:============>                 43%] [Cov:==============================>    88%][Progress:============>                 43%] [Cov:==============================>    88%][Progress:============>                 43%] [Cov:==============================>    88%][Progress:============>                 43%] [Cov:==============================>    88%][Progress:============>                 43%] [Cov:==============================>    88%][Progress:============>                 43%] [Cov:==============================>    88%][Progress:=============>                44%] [Cov:==============================>    88%][Progress:=============>                44%] [Cov:==============================>    88%][Progress:=============>                45%] [Cov:==============================>    88%][Progress:=============>                45%] [Cov:==============================>    88%][Progress:=============>                45%] [Cov:==============================>    88%][Progress:=============>                45%] [Cov:==============================>    88%][Progress:===============>              51%] [Cov:==============================>    88%][Progress:===============>              51%] [Cov:==============================>    88%][Progress:===============>              51%] [Cov:==============================>    88%][Progress:===============>              51%] [Cov:==============================>    88%][Progress:===============>              51%] [Cov:==============================>    88%][Progress:===============>              52%] [Cov:==============================>    88%][Progress:===============>              52%] [Cov:==============================>    88%][Progress:===============>              52%] [Cov:==============================>    88%][Progress:===============>              52%] [Cov:==============================>    88%][Progress:===============>              53%] [Cov:==============================>    88%][Progress:===============>              53%] [Cov:==============================>    88%][Progress:===============>              53%] [Cov:==============================>    88%][Progress:===============>              53%] [Cov:==============================>    88%][Progress:===============>              53%] [Cov:==============================>    88%][Progress:===============>              53%] [Cov:==============================>    88%][Progress:===============>              53%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:=================>            59%] [Cov:==============================>    88%][Progress:===================>          64%] [Cov:==============================>    88%][Progress:===================>          65%] [Cov:==============================>    88%][Progress:===================>          65%] [Cov:==============================>    88%][Progress:===================>          65%] [Cov:==============================>    88%][Progress:===================>          65%] [Cov:==============================>    88%][Progress:===================>          65%] [Cov:==============================>    88%][Progress:===================>          65%] [Cov:==============================>    88%][Progress:=====================>        70%] [Cov:==============================>    88%][Progress:=====================>        71%] [Cov:==============================>    88%][Progress:=====================>        71%] [Cov:==============================>    88%][Progress:=====================>        71%] [Cov:==============================>    88%][Progress:=====================>        71%] [Cov:==============================>    88%][Progress:=====================>        71%] [Cov:==============================>    88%][Progress:=====================>        71%] [Cov:==============================>    88%][Progress:=====================>        72%] [Cov:==============================>    88%][Progress:=====================>        72%] [Cov:==============================>    88%][Progress:=====================>        72%] [Cov:==============================>    88%][Progress:=====================>        72%] [Cov:==============================>    88%][Progress:=====================>        72%] [Cov:==============================>    88%][Progress:=======================>      77%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:=======================>      78%] [Cov:==============================>    88%][Progress:========================>     83%] [Cov:==============================>    88%][Progress:========================>     83%] [Cov:==============================>    88%][Progress:========================>     83%] [Cov:==============================>    88%][Progress:==========================>   88%] [Cov:==============================>    88%][Progress:==========================>   88%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:==========================>   89%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  90%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  91%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:===========================>  92%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>97%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>98%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:=============================>99%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%][Progress:==============================100%] [Cov:==============================>    88%]
* Search finished after 106s and 166 generations, 95298 statements, best individual has fitness: 3.0
* Generated before the refinement 9 tests with total length 36
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 1, "", "vDwo]^", "vDwo]^", "")
statement is: visitEnd()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.visitEnd()
test data is: ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "", "vDwo]^", "vDwo]^", "");
fieldWriter.visitEnd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "", "Ljava/lang/String;", "helloWorld", "");
        fieldWriter.visitEnd();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "", "Ljava/lang/String;", "helloWorld", ""), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitEnd() target is: fieldWriter method is: visitEnd()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: visitEnd()V
TestCase is: int _int = 1;
String string = "";
String string = "Ljava/lang/String;";
String string = "helloWorld";
String string = "";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "");
((FieldWriter) string).visitEnd();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(183)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@")
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg5, 183, "U DZt`)AQ", "E7D1_M+", "E7D1_M+", arg5)
test data is: ClassWriter classWriter = new ClassWriter(183);
FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "U DZt`)AQ", "E7D1_M+", "E7D1_M+", classWriter);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
        FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "U DZt`)AQ", "E7D1_M+", "E7D1_M+", classWriter);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "U DZt`)AQ", "E7D1_M+", "E7D1_M+", classWriter), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
TestCase is: int _int = 183;
String string = "C6hA?3QA/,oE(zX2o@";
String string = "C6hA?3QA/,oE(zX2o@";
String string = "C6hA?3QA/,oE(zX2o@";
String string = "C6hA?3QA/,oE(zX2o@";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "C6hA?3QA/,oE(zX2o@");
int _int = 183;
String string = "U DZt`)AQ";
String string = "E7D1_M+";
String string = "E7D1_M+";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "C6hA?3QA/,oE(zX2o@");

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(285212676)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP")
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)fieldWriter.visitAnnotation("vrEr}x/RydP", false)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
fieldWriter.visitAnnotation("vrEr}x/RydP", false);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, -894, "test", "test", "test", "test");
        fieldWriter.visitAnnotation("test", false);
        classWriter.toByteArray();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, -894, "test", "test", "test", "test"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAnnotation("test", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAnnotation("test", false) target is: fieldWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor;
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
TestCase is: String string = "test";
String string = "test";
String string = "test";
String string = "test";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) string, (int) string, string, string, "vrEr}x/RydP", "vrEr}x/RydP");
String string = "test";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(285212676)
statement is: org.evosuite.testcase.statements.AssignmentStatement@2921e600 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.version = (-2)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP")
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(285212676);
classWriter.version = (-2);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.version = -2;
        FieldWriter fieldWriter = new FieldWriter(classWriter, 12, "Hello World!", "This is a test string.", "Another test string.", "One more test string.");
        classWriter.toByteArray();
    }
}
statement is: classWriter.version = -2, class spoon.support.reflect.code.CtAssignmentImpl
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 12, "Hello World!", "This is a test string.", "Another test string.", "One more test string."), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
TestCase is: int _int = 12;
String string = "Hello World!";
String string = "This is a test string.";
String string = "Another test string.";
String string = "One more test string.";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "vrEr}x/RydP");

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 1, "vDwo]^", "", (String) null, (Object) null)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "vDwo]^", "", (String) null, (Object) null);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 123456789, "my_field", "", ((String) (null)), ((Object) (null)));
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 123456789, "my_field", "", ((String) (null)), ((Object) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 3
Matched Method is: getSize()I
TestCase is: int _int = 123456789;
String string = "my_field";
String string = "";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, "", (String) null, (Object) null);
((FieldWriter) string).getSize();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(285212676)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP")
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)fieldWriter.visitAnnotation("vrEr}x/RydP", true)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
fieldWriter.visitAnnotation("vrEr}x/RydP", true);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, -894, "A descriptive name for the field", "A more descriptive value for the field", "A third value for the field", "A fourth value for the field");
        fieldWriter.visitAnnotation("A descriptive annotation name", true);
        classWriter.toByteArray();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, -894, "A descriptive name for the field", "A more descriptive value for the field", "A third value for the field", "A fourth value for the field"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAnnotation("A descriptive annotation name", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAnnotation("A descriptive annotation name", true) target is: fieldWriter method is: visitAnnotation(java.lang.String,boolean)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor;
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
TestCase is: String string = "A descriptive name for the field";
String string = "A more descriptive value for the field";
String string = "A third value for the field";
String string = "A fourth value for the field";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) string, (int) string, string, string, "vrEr}x/RydP", "vrEr}x/RydP");
String string = "A descriptive annotation name";
boolean _boolean = true;
((FieldWriter) string).visitAnnotation(string, _boolean);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(285212676)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP")
statement is: wheel.asm.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.Attribute
statement code is: Attribute attribute = new Attribute("vrEr}x/RydP")
statement is: visitAttribute(Lwheel/asm/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.visitAttribute(arg0)
statement is: getSize()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int size = fieldWriter.getSize()
test data is: ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
Attribute attribute = new Attribute("vrEr}x/RydP");
fieldWriter.visitAttribute(attribute);
fieldWriter.getSize();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, -894, "java.util.Date", "today", "java.util.Calendar", "thisMonth");
        Attribute attribute = new Attribute("java.lang.annotation.RetentionPolicy");
        fieldWriter.visitAttribute(attribute);
        fieldWriter.getSize();
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, -894, "java.util.Date", "today", "java.util.Calendar", "thisMonth"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("java.lang.annotation.RetentionPolicy"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAttribute(attribute) target is: fieldWriter method is: visitAttribute(Attribute)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: visitAttribute(Lwheel/asm/Attribute;)V
statement is: fieldWriter.getSize(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.getSize() target is: fieldWriter method is: getSize()
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 4
Matched Method is: getSize()I
TestCase is: String string = "java.util.Date";
String string = "today";
String string = "java.util.Calendar";
String string = "thisMonth";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) string, (int) string, string, string, "vrEr}x/RydP", "vrEr}x/RydP");
String string = "java.lang.annotation.RetentionPolicy";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
((FieldWriter) string).getSize();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 1, "vDwo]^", "", (String) null, (Object) null)
statement is: org.evosuite.testcase.statements.FieldStatement@37a97839 type is: class org.evosuite.testcase.statements.FieldStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = classWriter.pool
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "vDwo]^", "", (String) null, (Object) null);
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "vDwo]^", "hello", ((String) (null)), ((Object) (null)));
        ByteVector byteVector = classWriter.pool;
        fieldWriter.put(byteVector);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "vDwo]^", "hello", ((String) (null)), ((Object) (null))), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = classWriter.pool, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: classWriter.pool is classWriter
CtField is: wheel.asm.ByteVector wheel.asm.ClassWriter.pool ByteVector pool
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put(ByteVector)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 3
Matched Method is: put(Lwheel/asm/ByteVector;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 1;
String string = "vDwo]^";
String string = "hello";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, "", (String) null, (Object) null);
ByteVector byteVector = null;
((FieldWriter) string).put(byteVector);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(183)
statement is: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter fieldWriter = new FieldWriter(arg0, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@")
statement is: org.evosuite.testcase.statements.FieldStatement@f723fde type is: class org.evosuite.testcase.statements.FieldStatement return type class wheel.asm.ByteVector
statement code is: ByteVector byteVector = classWriter.pool
statement is: wheel.asm.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.Attribute
statement code is: Attribute attribute = new Attribute("A:Ci")
statement is: visitAttribute(Lwheel/asm/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.visitAttribute(arg0)
statement is: put(Lwheel/asm/ByteVector;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: fieldWriter.put(arg0)
test data is: ClassWriter classWriter = new ClassWriter(183);
FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
ByteVector byteVector = classWriter.pool;
Attribute attribute = new Attribute("A:Ci");
fieldWriter.visitAttribute(attribute);
fieldWriter.put(byteVector);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
        ByteVector byteVector = classWriter.pool;
        Attribute attribute = new Attribute("A:Ci");
        fieldWriter.visitAttribute(attribute);
        fieldWriter.put(byteVector);
    }
}
statement is: FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: ByteVector byteVector = classWriter.pool, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: classWriter.pool is classWriter
CtField is: wheel.asm.ByteVector wheel.asm.ClassWriter.pool ByteVector pool
statement is: Attribute attribute = new Attribute("A:Ci"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: fieldWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.visitAttribute(attribute) target is: fieldWriter method is: visitAttribute(Attribute)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: visitAttribute(Lwheel/asm/Attribute;)V
statement is: fieldWriter.put(byteVector), class spoon.support.reflect.code.CtInvocationImpl
invocation is: fieldWriter.put(byteVector) target is: fieldWriter method is: put(ByteVector)
source statement: wheel.asm.FieldWriter(Lwheel/asm/ClassWriter;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)V callee: VariableReference: Statement 1, type wheel.asm.FieldWriterindex is: 5
Matched Method is: put(Lwheel/asm/ByteVector;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
TestCase is: int _int = 183;
String string = "C6hA?3QA/,oE(zX2o@";
String string = "C6hA?3QA/,oE(zX2o@";
String string = "C6hA?3QA/,oE(zX2o@";
String string = "C6hA?3QA/,oE(zX2o@";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "C6hA?3QA/,oE(zX2o@");
String string = "A:Ci";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
ByteVector byteVector = null;
((FieldWriter) string).put(byteVector);

* test suite isTestSuite: 18
Test 0: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "", "vDwo]^", "vDwo]^", "");
fieldWriter.visitEnd();
Test 1: 
ClassWriter classWriter = new ClassWriter(183);
FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 183, "U DZt`)AQ", "E7D1_M+", "E7D1_M+", classWriter);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.ClassWriter@5
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 2: 
ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
fieldWriter.visitAnnotation("vrEr}x/RydP", false);
classWriter.toByteArray();
Test 3: 
ClassWriter classWriter = new ClassWriter(285212676);
classWriter.version = (-2);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
classWriter.toByteArray();
Test 4: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "vDwo]^", "", (String) null, (Object) null);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
fieldWriter.visitAnnotation("vrEr}x/RydP", true);
classWriter.toByteArray();
Test 6: 
ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
Attribute attribute = new Attribute("vrEr}x/RydP");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 7: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "vDwo]^", "", (String) null, (Object) null);
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);
Test 8: 
ClassWriter classWriter = new ClassWriter(183);
FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
ByteVector byteVector = classWriter.pool;
Attribute attribute = new Attribute("A:Ci");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 9: 
String string = "";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 1, (int) "", "Ljava/lang/String;", "helloWorld", "", "");
((FieldWriter) string).visitEnd();

Test 10: 
String string = "C6hA?3QA/,oE(zX2o@";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 183, (int) "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
int _int = 183;
String string = "U DZt`)AQ";
String string = "E7D1_M+";
String string = "E7D1_M+";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "C6hA?3QA/,oE(zX2o@");

Test 11: 
String string = "test";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "test", (int) "test", "test", "test", "vrEr}x/RydP", "vrEr}x/RydP");
String string = "test";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);

Test 12: 
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 12, (int) "Hello World!", "This is a test string.", "Another test string.", "One more test string.", "vrEr}x/RydP");

Test 13: 
String string = "my_field";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 123456789, (int) "my_field", "", "", (String) null, (Object) null);
((FieldWriter) string).getSize();

Test 14: 
String string = "A more descriptive value for the field";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "A descriptive name for the field", (int) "A more descriptive value for the field", "A third value for the field", "A fourth value for the field", "vrEr}x/RydP", "vrEr}x/RydP");
String string = "A descriptive annotation name";
boolean _boolean = true;
((FieldWriter) string).visitAnnotation(string, _boolean);

Test 15: 
String string = "today";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "java.util.Date", (int) "today", "java.util.Calendar", "thisMonth", "vrEr}x/RydP", "vrEr}x/RydP");
String string = "java.lang.annotation.RetentionPolicy";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
((FieldWriter) string).getSize();

Test 16: 
String string = "vDwo]^";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 1, (int) "vDwo]^", "hello", "", (String) null, (Object) null);
ByteVector byteVector = null;
((FieldWriter) string).put(byteVector);

Test 17: 
String string = "C6hA?3QA/,oE(zX2o@";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 183, (int) "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
String string = "A:Ci";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
ByteVector byteVector = null;
((FieldWriter) string).put(byteVector);


* Generated after the refinement and before minimization 18 tests with total length 77
* test suite isTestSuite: 18
Test 0: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "", "vDwo]^", "vDwo]^", "");
fieldWriter.visitEnd();
Test 1: 
ClassWriter classWriter = new ClassWriter(183);
FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 183, "U DZt`)AQ", "E7D1_M+", "E7D1_M+", classWriter);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.ClassWriter@5
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 2: 
ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
fieldWriter.visitAnnotation("vrEr}x/RydP", false);
classWriter.toByteArray();
Test 3: 
ClassWriter classWriter = new ClassWriter(285212676);
classWriter.version = (-2);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
classWriter.toByteArray();
Test 4: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "vDwo]^", "", (String) null, (Object) null);
fieldWriter.getSize();
Test 5: 
ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
fieldWriter.visitAnnotation("vrEr}x/RydP", true);
classWriter.toByteArray();
Test 6: 
ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
Attribute attribute = new Attribute("vrEr}x/RydP");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 7: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "vDwo]^", "", (String) null, (Object) null);
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);
Test 8: 
ClassWriter classWriter = new ClassWriter(183);
FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
ByteVector byteVector = classWriter.pool;
Attribute attribute = new Attribute("A:Ci");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 9: 
String string = "";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 1, (int) "", "Ljava/lang/String;", "helloWorld", "", "");
((FieldWriter) string).visitEnd();

Test 10: 
String string = "C6hA?3QA/,oE(zX2o@";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 183, (int) "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
int _int = 183;
String string = "U DZt`)AQ";
String string = "E7D1_M+";
String string = "E7D1_M+";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) _int, (int) string, string, string, string, "C6hA?3QA/,oE(zX2o@");

Test 11: 
String string = "test";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "test", (int) "test", "test", "test", "vrEr}x/RydP", "vrEr}x/RydP");
String string = "test";
boolean _boolean = false;
((FieldWriter) string).visitAnnotation(string, _boolean);

Test 12: 
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 12, (int) "Hello World!", "This is a test string.", "Another test string.", "One more test string.", "vrEr}x/RydP");

Test 13: 
String string = "my_field";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 123456789, (int) "my_field", "", "", (String) null, (Object) null);
((FieldWriter) string).getSize();

Test 14: 
String string = "A more descriptive value for the field";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "A descriptive name for the field", (int) "A more descriptive value for the field", "A third value for the field", "A fourth value for the field", "vrEr}x/RydP", "vrEr}x/RydP");
String string = "A descriptive annotation name";
boolean _boolean = true;
((FieldWriter) string).visitAnnotation(string, _boolean);

Test 15: 
String string = "today";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) "java.util.Date", (int) "today", "java.util.Calendar", "thisMonth", "vrEr}x/RydP", "vrEr}x/RydP");
String string = "java.lang.annotation.RetentionPolicy";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
((FieldWriter) string).getSize();

Test 16: 
String string = "vDwo]^";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 1, (int) "vDwo]^", "hello", "", (String) null, (Object) null);
ByteVector byteVector = null;
((FieldWriter) string).put(byteVector);

Test 17: 
String string = "C6hA?3QA/,oE(zX2o@";
FieldWriter fieldWriter = new FieldWriter((ClassWriter) 183, (int) "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
String string = "A:Ci";
Attribute attribute = new Attribute(string);
((FieldWriter) string).visitAttribute(attribute);
ByteVector byteVector = null;
((FieldWriter) string).put(byteVector);


* Minimizing test suite
* test suite isTestSuite: 10
Test 0: 
ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
Attribute attribute = new Attribute("vrEr}x/RydP");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.getSize();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 1: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "", "vDwo]^", "vDwo]^", "");
fieldWriter.visitEnd();
Test 2: 
ClassWriter classWriter = new ClassWriter(183);
FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
FieldWriter fieldWriter = null;
try {
  fieldWriter = new FieldWriter(classWriter, 183, "U DZt`)AQ", "E7D1_M+", "E7D1_M+", classWriter);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.ClassWriter@5
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "vDwo]^", "", (String) null, (Object) null);
fieldWriter.getSize();
Test 4: 
ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
fieldWriter.visitAnnotation("vrEr}x/RydP", false);
classWriter.toByteArray();
Test 5: 
ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
fieldWriter.visitAnnotation("vrEr}x/RydP", true);
classWriter.toByteArray();
Test 6: 
ClassWriter classWriter = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
classWriter.toByteArray();
Test 7: 
ClassWriter classWriter = new ClassWriter(285212676);
classWriter.version = (-2);
FieldWriter fieldWriter = new FieldWriter(classWriter, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
classWriter.toByteArray();
Test 8: 
ClassWriter classWriter = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(classWriter, 1, "vDwo]^", "", (String) null, (Object) null);
ByteVector byteVector = classWriter.pool;
fieldWriter.put(byteVector);
Test 9: 
ClassWriter classWriter = new ClassWriter(183);
FieldWriter fieldWriter = new FieldWriter(classWriter, 183, "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@", "C6hA?3QA/,oE(zX2o@");
ByteVector byteVector = classWriter.pool;
Attribute attribute = new Attribute("A:Ci");
fieldWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  fieldWriter.put(byteVector);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 85
* Number of covered goals: 85
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 5
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 58
* Number of covered goals: 58
* Generated 10 tests with total length 39
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 35%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(arg0, 1, "", "vDwo]^", "vDwo]^", "");
fieldWriter.visitEnd();

** It was a parseable test case! 
refined test name is: testValidFieldWriterInitialization
* Compiling Tests
refined test name is: testValidFieldWriterInstance
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(0);
FieldWriter fieldWriter = new FieldWriter(arg0, 1, "vDwo]^", "", (String) null, (Object) null);
int size = fieldWriter.getSize();
assertEquals(8, size);


** It was a parseable test case! 
refined test name is: testGetSizeReturnsExpectedValue
* Compiling Tests
refined test name is: testGetSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(arg0, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
fieldWriter.visitAnnotation("vrEr}x/RydP", false);
byte[] byteArray = arg0.toByteArray();
assertEquals(174, byteArray.length);


** It was a parseable test case! 
refined test name is: testGenerateClassFileWithAnnotationAndFieldData
* Compiling Tests
refined test name is: testFieldWriterWithExpectedLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(arg0, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
fieldWriter.visitAnnotation("vrEr}x/RydP", true);
byte[] byteArray = arg0.toByteArray();
assertEquals(172, byteArray.length);


** It was a parseable test case! 
refined test name is: testFieldWriterAnnotationLength
* Compiling Tests
refined test name is: testFieldWriterAnnotatedWithCorrectAnnotation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(285212676);
FieldWriter fieldWriter = new FieldWriter(arg0, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
byte[] byteArray = arg0.toByteArray();
assertEquals(132, byteArray.length);


** It was a parseable test case! 
refined test name is: testAddFieldWriterToClassWriter
* Compiling Tests
refined test name is: testAddFieldWriterToClassWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter arg0 = new ClassWriter(285212676);
arg0.version = (-2);
FieldWriter fieldWriter = new FieldWriter(arg0, (-894), "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP", "vrEr}x/RydP");
byte[] byteArray = arg0.toByteArray();
assertEquals(114, byteArray.length);


** It was a parseable test case! 
refined test name is: testGenerateByteArrayLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:27:30.177 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6487867992994811956.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:27:30.198 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6487867992994811956.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:27:30.267 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6487867992994811956.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:27:30.269 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6487867992994811956.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:27:30.331 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6487867992994811956.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:27:30.332 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6487867992994811956.jar
[MASTER] 06:27:30.395 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6487867992994811956.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:27:30.397 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6487867992994811956.jar
[MASTER] 06:27:30.464 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6487867992994811956.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:27:30.466 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6487867992994811956.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:27:30.532 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6487867992994811956.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:27:30.534 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6487867992994811956.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
[MASTER] 06:27:30.648 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6487867992994811956.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:27:30.650 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6487867992994811956.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 3 called: 2 to improve: false
** Write a test suite: 4 called: 3 to improve: false
** Write a test suite: 5 called: 4 to improve: false
[MASTER] 06:27:30.764 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/tmp/EvoSuite_pathingJar6487867992994811956.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
* Writing tests to file
* Writing JUnit test case 'FieldWriter_ESTest' to evosuite-tests
[MASTER] 06:27:30.766 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar6487867992994811956.jar
** Write a test suite: 1 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 3 called: 2 to improve: false
** Write a test suite: 4 called: 3 to improve: false
** Write a test suite: 5 called: 4 to improve: false
* Done!

* Computation finished
