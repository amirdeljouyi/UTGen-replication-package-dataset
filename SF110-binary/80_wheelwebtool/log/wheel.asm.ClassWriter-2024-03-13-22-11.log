* EvoSuite 1.0.0-SNAPSHOT
* Going to generate test cases for class: wheel.asm.ClassWriter
* Starting Client-0
* Properties loaded from /home/roham/Results-Utestgen/dataset/SF110-new-res/80_wheelwebtool/evosuite-files/evosuite.properties
* Connecting to master process on port 18381
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 22:12:07.122 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 22:12:07.129 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 22:12:07.130 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 22:12:07.141 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 22:12:07.142 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 22:12:07.144 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 22:12:07.144 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 22:12:07.147 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 22:12:07.148 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 22:12:07.149 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 22:12:07.151 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 22:12:07.153 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 22:12:07.156 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 22:12:07.191 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 22:12:07.194 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class wheel.asm.ClassWriter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 778
* Using seed 1710367921118
* Starting evolution
[Progress:>                             0%] [Cov:>                                  0%]* Initial Number of Goals in DynaMOSA = 346 / 778
[Progress:>                             0%] [Cov:====================>              58%][Progress:>                             0%] [Cov:======================>            63%][Progress:>                             1%] [Cov:======================>            65%][Progress:>                             1%] [Cov:=======================>           67%][Progress:>                             1%] [Cov:=======================>           67%][Progress:>                             1%] [Cov:=======================>           67%][Progress:>                             2%] [Cov:=======================>           67%][Progress:>                             2%] [Cov:=======================>           68%][Progress:>                             2%] [Cov:=======================>           68%][Progress:=>                            4%] [Cov:=======================>           68%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          69%][Progress:==>                           7%] [Cov:========================>          69%][Progress:===>                          10%] [Cov:========================>          69%][Progress:===>                          13%] [Cov:========================>          71%][Progress:===>                          13%] [Cov:========================>          71%][Progress:===>                          13%] [Cov:========================>          71%][Progress:===>                          13%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         72%][Progress:====>                         14%] [Cov:=========================>         73%][Progress:====>                         14%] [Cov:=========================>         74%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        76%][Progress:====>                         16%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:==========================>        76%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       78%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        17%] [Cov:===========================>       79%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:=====>                        18%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:======>                       21%] [Cov:============================>      81%][Progress:=======>                      24%] [Cov:============================>      81%][Progress:=======>                      24%] [Cov:============================>      81%][Progress:=======>                      24%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:=======>                      26%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:============================>      82%][Progress:========>                     27%] [Cov:=============================>     83%][Progress:=========>                    30%] [Cov:=============================>     83%][Progress:=========>                    30%] [Cov:=============================>     83%][Progress:=========>                    30%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    32%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:=========>                    33%] [Cov:=============================>     83%][Progress:===========>                  38%] [Cov:=============================>     83%][Progress:===========>                  38%] [Cov:=============================>     83%][Progress:===========>                  38%] [Cov:=============================>     83%][Progress:===========>                  38%] [Cov:=============================>     83%][Progress:===========>                  38%] [Cov:=============================>     83%][Progress:===========>                  38%] [Cov:=============================>     83%][Progress:===========>                  38%] [Cov:=============================>     83%][Progress:===========>                  38%] [Cov:=============================>     83%][Progress:===========>                  38%] [Cov:=============================>     83%][Progress:===========>                  38%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:===========>                  39%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 42%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:============>                 43%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:=============>                46%] [Cov:=============================>     83%][Progress:==============>               47%] [Cov:=============================>     83%][Progress:==============>               47%] [Cov:=============================>     83%][Progress:==============>               47%] [Cov:=============================>     83%][Progress:==============>               49%] [Cov:=============================>     83%][Progress:==============>               49%] [Cov:=============================>     83%][Progress:==============>               49%] [Cov:=============================>     83%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:==============>               49%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              50%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:===============>              52%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:================>             55%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:=================>            58%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           61%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:==================>           62%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:===================>          65%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         67%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:====================>         68%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        70%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:=====================>        73%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       75%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:======================>       76%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      78%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:=======================>      79%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     81%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:========================>     82%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    84%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:=========================>    85%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   88%] [Cov:=============================>     84%][Progress:==========================>   89%] [Cov:=============================>     84%][Progress:==========================>   89%] [Cov:=============================>     84%][Progress:==========================>   89%] [Cov:=============================>     84%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:==========================>   89%] [Cov:=============================>     85%][Progress:===========================>  90%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  92%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:===========================>  93%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:============================> 96%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:=============================>97%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%][Progress:==============================100%] [Cov:=============================>     85%]
* Search finished after 201s and 427 generations, 141185 statements, best individual has fitness: 78.0
* Generated before the refinement 51 tests with total length 162
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("java/lang/Object")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 2)
statement is: newFloat(F)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFloat = classWriter.newFloat(1)
test data is: ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 2);
classWriter.newFloat(1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newFloat(1.0F);// Improved by using a more descriptive example value }}

    }
}
statement is: classWriter.newFloat(1.0F)// Improved by using a more descriptive example value }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFloat(1.0F)// Improved by using a more descriptive example value }}
 target is: classWriter method is: newFloat(float)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1120)
statement is: org.evosuite.testcase.statements.ArrayStatement@75fcc94b type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@b1751411 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@df8296b4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ".5@s{l'Q<\"QFLOKV"
statement is: org.evosuite.testcase.statements.AssignmentStatement@f0e826bd type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ".5@s{l'Q<\"QFLOKV"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(1120, 3088, "", ".5@s{l'Q<\"QFLOKV", "", arg5)
statement is: org.evosuite.testcase.statements.AssignmentStatement@3cd90482 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: classWriter.invalidFrames = true
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(1120);
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = ".5@s{l'Q<\"QFLOKV";
stringArray[2] = ".5@s{l'Q<\"QFLOKV";
classWriter.visit(1120, 3088, "", ".5@s{l'Q<\"QFLOKV", "", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "Hello World!";
        stringArray[1] = "This is a test string.";
        stringArray[2] = "This is another test string.";
        classWriter.visit(1120, 3088, "", stringArray[0], "", stringArray);
        classWriter.invalidFrames = true;
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Hello World!", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Hello World!" Ct is: stringArray[0] = "Hello World!"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fdb0f0c
statement is: stringArray[1] = "This is a test string.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test string." Ct is: stringArray[1] = "This is a test string."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fa054ded
statement is: stringArray[2] = "This is another test string.", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is another test string." Ct is: stringArray[2] = "This is another test string."
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@be30a977
statement is: classWriter.visit(1120, 3088, "", stringArray[0], "", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(1120, 3088, "", stringArray[0], "", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: classWriter.invalidFrames = true, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: String string = "This is a test string."
* this is vulnerable: String string = "This is another test string."
TestCase is: String[] stringArray = new String[3];
String string = "Hello World!";
String string = "This is a test string.";
String string = "This is another test string.";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(635)
statement is: newFloat(F)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFloat = classWriter.newFloat(635)
statement is: newConst(Ljava/lang/Object;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newConst = classWriter.newConst(arg0)
test data is: ClassWriter classWriter = new ClassWriter(635);
Item newFloat = classWriter.newFloat(635);
classWriter.newConst(newFloat);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Item newFloat = classWriter.newFloat(10.5F);
        classWriter.newConst(newFloat);
    }
}
statement is: Item newFloat = classWriter.newFloat(10.5F), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFloat(10.5F) target is: classWriter method is: newFloat(float)
statement is: classWriter.newConst(newFloat), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConst(newFloat) target is: classWriter method is: newConst(Item)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3372))
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit((-994), 1, "AC@@Vm^*G:G)#", (String) null, "", (String[]) null)
test data is: ClassWriter classWriter = new ClassWriter((-3372));
classWriter.visit((-994), 1, "AC@@Vm^*G:G)#", (String) null, "", (String[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visit(48953, 1, "AC@@Vm^*G:G)#", ((String) (null)), "", ((String[]) (null)));
    }
}
statement is: classWriter.visit(48953, 1, "AC@@Vm^*G:G)#", ((String) (null)), "", ((String[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(48953, 1, "AC@@Vm^*G:G)#", ((String) (null)), "", ((String[]) (null))) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(5)
statement is: org.evosuite.testcase.statements.ArrayStatement@cb6d8156 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(1000, 5, "", "${D2M0DJ9Z`l)I", (String) null, arg5)
test data is: ClassWriter classWriter = new ClassWriter(5);
String[] stringArray = new String[1];
classWriter.visit(1000, 5, "", "${D2M0DJ9Z`l)I", (String) null, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "Testing123", "Hello World" };
    }
}
statement is: String[] stringArray = new String[]{ "Testing123", "Hello World" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[]{ "Testing123", "Hello World" } Elements: ["Testing123", "Hello World"]
lengths: [1] []
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(4)
statement is: visitSource(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitSource((String) null, "}S-,d.JkqNAAH4s#")
test data is: ClassWriter classWriter = new ClassWriter(4);
classWriter.visitSource((String) null, "}S-,d.JkqNAAH4s#");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitSource("example", "Hello World");
    }
}
statement is: classWriter.visitSource("example", "Hello World"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitSource("example", "Hello World") target is: classWriter method is: visitSource(java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-375))
statement is: visitSource(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitSource("", (String) null)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter((-375));
classWriter.visitSource("", (String) null);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitSource("", null);
        classWriter.toByteArray();
    }
}
statement is: classWriter.visitSource("", null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitSource("", null) target is: classWriter method is: visitSource(java.lang.String,<unknown>)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(635)
statement is: visitOuterClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitOuterClass("", (String) null, (String) null)
test data is: ClassWriter classWriter = new ClassWriter(635);
classWriter.visitOuterClass("", (String) null, (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int numStudents = 10;
        int[] studentIds = new int[numStudents];
        double[] grades = new double[numStudents];
        String[] names = new String[numStudents];
        char[] initials = new char[numStudents];
        // Fill in the arrays with descriptive values
        for (int i = 0; i < numStudents; i++) {
            studentIds[i] = i + 1;
            grades[i] = 85.0;
            names[i] = "John Doe";
            initials[i] = 'J';
        }
        // Use the improved test data in the test case }}
    }
}
statement is: // Improved test data
int numStudents = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int[] studentIds = new int[numStudents], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: double[] grades = new double[numStudents], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: String[] names = new String[numStudents], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: char[] initials = new char[numStudents], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
statement is: // Fill in the arrays with descriptive values
for (int i = 0; i < numStudents; i++) {
    studentIds[i] = i + 1;
    grades[i] = 85.0;
    names[i] = "John Doe";
    initials[i] = 'J';
}, class spoon.support.reflect.code.CtForImpl
statement is: // Use the improved test data in the test case }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: int _int = 10
TestCase is: int _int = 10;

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(31)
statement is: visitOuterClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitOuterClass("", "SourceFile", (String) null)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(31);
classWriter.visitOuterClass("", "SourceFile", (String) null);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.toByteArray();
    }
}
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2005))
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)classWriter.visitAnnotation("", false)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter((-2005));
classWriter.visitAnnotation("", false);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.toByteArray();
    }
}
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(978)
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(978);
classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true);
        // Improved test data
        classWriter.visitField("filePath", "java/lang/String", "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", true);
        classWriter.toByteArray();
    }
}
statement is: classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true) target is: classWriter method is: visitAnnotation(java.lang.String,boolean)
statement is: // Improved test data
classWriter.visitField("filePath", "java/lang/String", "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
classWriter.visitField("filePath", "java/lang/String", "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.", true) target is: classWriter method is: visitField(java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2539))
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619))
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498))
test data is: ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int x = 10;
        String s = "goodbye";
        double d = 2.718;
        char c = 'a';
        boolean b = false;
    }
}
statement is: int x = 10, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String s = "goodbye", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double d = 2.718, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char c = 'a', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: boolean b = false, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: String string = "goodbye"
* this is vulnerable: double _double = 2.718
* this is vulnerable: char _char = 'a'
* this is vulnerable: boolean _boolean = false
TestCase is: int _int = 10;
String string = "goodbye";
double _double = 2.718;
char _char = 'a';
boolean _boolean = false;

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1)
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass((String) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (String) null, 1)
test data is: ClassWriter classWriter = new ClassWriter(1);
classWriter.visitInnerClass((String) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (String) null, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Descriptive and representative test data
        String className = "com.example.package.subpackage.ClassName";
        int accessFlags = 1;
    }
}
statement is: // Descriptive and representative test data
String className = "com.example.package.subpackage.ClassName", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int accessFlags = 1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "com.example.package.subpackage.ClassName"
* this is vulnerable: int _int = 1
TestCase is: String string = "com.example.package.subpackage.ClassName";
int _int = 1;

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1293)
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass("!Kt#,.Ek!]d", (String) null, "]`ni>", 1)
test data is: ClassWriter classWriter = new ClassWriter(1293);
classWriter.visitInnerClass("!Kt#,.Ek!]d", (String) null, "]`ni>", 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int intValue = -1000;
        double doubleValue = -0.123456789;
        String stringValue = "The quick brown fox jumps over the lazy dog.";
        char charValue = 'A';
    }
}
statement is: int intValue = -1000, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -1000
statement is: double doubleValue = -0.123456789, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -0.123456789
statement is: String stringValue = "The quick brown fox jumps over the lazy dog.", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'A', class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "The quick brown fox jumps over the lazy dog."
* this is vulnerable: char _char = 'A'
TestCase is: String string = "The quick brown fox jumps over the lazy dog.";
char _char = 'A';

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(3716)
statement is: org.evosuite.testcase.statements.ArrayStatement@bf6aedcf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@cbf88d88 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: visitMethod(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lwheel/asm/MethodVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.MethodWriter
statement code is: MethodWriter visitMethod = (MethodWriter)classWriter.visitMethod((-1464), "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", arg4)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(3716);
String[] stringArray = new String[1];
stringArray[0] = "";
classWriter.visitMethod((-1464), "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", stringArray);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[2];
        stringArray[0] = "TestFile";
        stringArray[1] = "TestDir";
        classWriter.visitMethod(-1464, "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", stringArray);
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "TestFile", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TestFile" Ct is: stringArray[0] = "TestFile"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a94bad8
statement is: stringArray[1] = "TestDir", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"TestDir" Ct is: stringArray[1] = "TestDir"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@42de81c6
statement is: classWriter.visitMethod(-1464, "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitMethod(-1464, "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", stringArray) target is: classWriter method is: visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "TestFile"
* this is vulnerable: String string = "TestDir"
TestCase is: String[] stringArray = new String[1];
String string = "TestFile";
String string = "TestDir";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(184)
statement is: visitSource(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitSource("", "")
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(184);
classWriter.visitSource("", "");
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitSource("", "");
        classWriter.toByteArray();
    }
}
statement is: classWriter.visitSource("", ""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitSource("", "") target is: classWriter method is: visitSource(java.lang.String,java.lang.String)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(635)
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(3122, (-1167), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", (String[]) null)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(635);
classWriter.visit(3122, (-1167), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", (String[]) null);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visit(3122, -1167, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", ((String[]) (null)));
        classWriter.toByteArray();
    }
}
statement is: classWriter.visit(3122, -1167, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", ((String[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(3122, -1167, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", ((String[]) (null))) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(635)
statement is: org.evosuite.testcase.statements.ArrayStatement@a7161685 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[8]
statement is: org.evosuite.testcase.statements.AssignmentStatement@194c6b22 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@e482911d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@77d2c631 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@630bb18d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@92fd6061 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@a9fbefc9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@f4e07317 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[6] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@d7786485 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[7] = ""
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(20, (-159), "", "", "", arg5)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(635);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "";
stringArray[6] = "";
stringArray[7] = "";
classWriter.visit(20, (-159), "", "", "", stringArray);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[8];
        stringArray[0] = "Java";
        stringArray[1] = "is";
        stringArray[2] = "a";
        stringArray[3] = "high-level";
        stringArray[4] = "programming";
        stringArray[5] = "language";
        stringArray[6] = "that";
        stringArray[7] = "allows";
        classWriter.visit(20, -159, "", "", "", stringArray);
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[8], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [8] Ct is: String[] stringArray = new String[8] isAssignment: false Array: new String[8] Elements: []
lengths: [8] [8]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "Java", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Java" Ct is: stringArray[0] = "Java"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@39e5cd9
statement is: stringArray[1] = "is", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"is" Ct is: stringArray[1] = "is"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@64159314
statement is: stringArray[2] = "a", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"a" Ct is: stringArray[2] = "a"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1b0f1c72
statement is: stringArray[3] = "high-level", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"high-level" Ct is: stringArray[3] = "high-level"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@dc351c93
statement is: stringArray[4] = "programming", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"programming" Ct is: stringArray[4] = "programming"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a28155da
statement is: stringArray[5] = "language", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"language" Ct is: stringArray[5] = "language"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fd1a10f7
statement is: stringArray[6] = "that", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[6] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"that" Ct is: stringArray[6] = "that"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7708a2ac
statement is: stringArray[7] = "allows", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[7] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"allows" Ct is: stringArray[7] = "allows"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2d9b71b4
statement is: classWriter.visit(20, -159, "", "", "", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(20, -159, "", "", "", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "Java"
* this is vulnerable: String string = "is"
* this is vulnerable: String string = "a"
* this is vulnerable: String string = "high-level"
* this is vulnerable: String string = "programming"
* this is vulnerable: String string = "language"
* this is vulnerable: String string = "that"
* this is vulnerable: String string = "allows"
TestCase is: String[] stringArray = new String[8];
String string = "Java";
String string = "is";
String string = "a";
String string = "high-level";
String string = "programming";
String string = "language";
String string = "that";
String string = "allows";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2539))
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619))
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.toByteArray();
    }
}
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1116))
statement is: wheel.asm.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.Attribute
statement code is: Attribute attribute = new Attribute("`soMrkFg")
statement is: org.evosuite.testcase.statements.ArrayStatement@83f97fe7 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [B
statement code is: byte[] byteArray = new byte[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@c63d05b4 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [B
statement code is: attribute.value = byteArray
statement is: visitAttribute(Lwheel/asm/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitAttribute(arg0)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter((-1116));
Attribute attribute = new Attribute("`soMrkFg");
byte[] byteArray = new byte[6];
attribute.value = byteArray;
classWriter.visitAttribute(attribute);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Attribute attribute = new Attribute("`soMrkFg");
        byte[] byteArray = new byte[6];
        attribute.value = byteArray;
        classWriter.visitAttribute(attribute);
        classWriter.toByteArray();
        // Improved test data:
        ClassWriter classWriter = new ClassWriter(-1116);// The argument -1116 represents the size of the class, which is a positive integer that indicates the size of the bytecode array to be generated.

        Attribute attribute = new Attribute("`soMrkFg");// The string "soMrkFg" is used as the value for the attribute name.

        byte[] byteArray = new byte[6];// This creates an array of 6 bytes.

        attribute.value = byteArray;// Set the value of the attribute to the created byte array.

        classWriter.visitAttribute(attribute);// Add the attribute to the class writer.

        classWriter.toByteArray();// Generate the bytecode and return it as an array of bytes. }}

    }
}
statement is: Attribute attribute = new Attribute("`soMrkFg"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: attribute.value = byteArray, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitAttribute(attribute) target is: classWriter method is: visitAttribute(Attribute)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: // Improved test data:
ClassWriter classWriter = new ClassWriter(-1116)// The argument -1116 represents the size of the class, which is a positive integer that indicates the size of the bytecode array to be generated.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Attribute attribute = new Attribute("`soMrkFg")// The string "soMrkFg" is used as the value for the attribute name.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: byte[] byteArray = new byte[6]// This creates an array of 6 bytes.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: byte[] byteArray = new byte[6] isAssignment: false Array: new byte[6] Elements: []
lengths: [6] [6]
Their type are: class [B byte[]
statement is: attribute.value = byteArray// Set the value of the attribute to the created byte array.
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.visitAttribute(attribute)// Add the attribute to the class writer.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitAttribute(attribute)// Add the attribute to the class writer.
 target is: classWriter method is: visitAttribute(Attribute)
source statement: wheel.asm.ClassWriter(I)V callee: VariableReference: Statement 0, type wheel.asm.ClassWriterindex is: 3
Matched Method is: visitAttribute(Lwheel/asm/Attribute;)V
statement is: classWriter.toByteArray()// Generate the bytecode and return it as an array of bytes. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray()// Generate the bytecode and return it as an array of bytes. }}
 target is: classWriter method is: toByteArray()
source statement: wheel.asm.ClassWriter(I)V callee: VariableReference: Statement 0, type wheel.asm.ClassWriterindex is: 3
Matched Method is: toByteArray()[B
TestCase is: String string = "`soMrkFg";
Attribute attribute = new Attribute(string);
byte[] byteArray = new byte[6];
ClassWriter classWriter = new ClassWriter((-1116));
String string = "`soMrkFg";
Attribute attribute = new Attribute(string);
byte[] byteArray = new byte[6];
((ClassWriter) string).visitAttribute(attribute);
((ClassWriter) string).toByteArray();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(982)
statement is: newFieldItem(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFieldItem = classWriter.newFieldItem("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#")
statement is: newField(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newField = classWriter.newField("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#")
test data is: ClassWriter classWriter = new ClassWriter(982);
classWriter.newFieldItem("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
classWriter.newField("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newFieldItem("myString", "Hello, World!", "AC@@Vm^*`:G)#");
        classWriter.newField("myInt", 42, "AC@@Vm^*`:G)#");
    }
}
statement is: classWriter.newFieldItem("myString", "Hello, World!", "AC@@Vm^*`:G)#"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFieldItem("myString", "Hello, World!", "AC@@Vm^*`:G)#") target is: classWriter method is: newFieldItem(java.lang.String,java.lang.String,java.lang.String)
statement is: classWriter.newField("myInt", 42, "AC@@Vm^*`:G)#"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newField("myInt", 42, "AC@@Vm^*`:G)#") target is: classWriter method is: newField(java.lang.String,int,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-4045))
statement is: newMethodItem(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newMethodItem = classWriter.newMethodItem("org.apache.commons.io.filefilter.NotFileFilter", "InnerClasses", "*#<,", false)
test data is: ClassWriter classWriter = new ClassWriter((-4045));
classWriter.newMethodItem("org.apache.commons.io.filefilter.NotFileFilter", "InnerClasses", "*#<,", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1024)
statement is: newMethod(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newMethod = classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true)
statement is: newMethod(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newMethod = classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true)
test data is: ClassWriter classWriter = new ClassWriter(1024);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
        classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
    }
}
statement is: classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true) target is: classWriter method is: newMethod(java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true) target is: classWriter method is: newMethod(java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(482)
statement is: newInteger(I)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newInteger = classWriter.newInteger(482)
statement is: newInteger(I)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newInteger = classWriter.newInteger(482)
test data is: ClassWriter classWriter = new ClassWriter(482);
classWriter.newInteger(482);
classWriter.newInteger(482);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newInteger(1000);
        classWriter.newInteger(1000);
    }
}
statement is: classWriter.newInteger(1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newInteger(1000) target is: classWriter method is: newInteger(int)
statement is: classWriter.newInteger(1000), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newInteger(1000) target is: classWriter method is: newInteger(int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(641)
statement is: newFloat(F)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFloat = classWriter.newFloat(641)
statement is: newFloat(F)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFloat = classWriter.newFloat(641)
test data is: ClassWriter classWriter = new ClassWriter(641);
classWriter.newFloat(641);
classWriter.newFloat(641);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newFloat(Math.PI);
        classWriter.newDouble(Math.E);
    }
}
statement is: classWriter.newFloat(Math.PI), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFloat(Math.PI) target is: classWriter method is: newFloat(double)
statement is: classWriter.newDouble(Math.E), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newDouble(Math.E) target is: classWriter method is: newDouble(double)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(978)
statement is: newLong(J)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newLong = classWriter.newLong(978)
statement is: newLong(J)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newLong = classWriter.newLong(978)
test data is: ClassWriter classWriter = new ClassWriter(978);
classWriter.newLong(978);
classWriter.newLong(978);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newLong(999);
        classWriter.newLong(999);
    }
}
statement is: classWriter.newLong(999), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newLong(999) target is: classWriter method is: newLong(int)
statement is: classWriter.newLong(999), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newLong(999) target is: classWriter method is: newLong(int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(9)
statement is: newDouble(D)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newDouble = classWriter.newDouble(99)
statement is: newDouble(D)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newDouble = classWriter.newDouble(99)
test data is: ClassWriter classWriter = new ClassWriter(9);
classWriter.newDouble(99);
classWriter.newDouble(99);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newDouble(3.14);
        classWriter.newDouble(2.718);
    }
}
statement is: classWriter.newDouble(3.14), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newDouble(3.14) target is: classWriter method is: newDouble(double)
statement is: classWriter.newDouble(2.718), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newDouble(2.718) target is: classWriter method is: newDouble(double)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(247)
statement is: newConstItem(Ljava/lang/Object;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newConstItem = classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter")
statement is: newConstItem(Ljava/lang/Object;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newConstItem = classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter")
test data is: ClassWriter classWriter = new ClassWriter(247);
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
        classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
    }
}
statement is: classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter") target is: classWriter method is: newConstItem(java.lang.String)
statement is: classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter") target is: classWriter method is: newConstItem(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(4611)
statement is: visitOuterClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitOuterClass("INl", "~rffPKml<=", "~rffPKml<=")
statement is: newNameType(Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newNameType = classWriter.newNameType("~rffPKml<=", "~rffPKml<=")
test data is: ClassWriter classWriter = new ClassWriter(4611);
classWriter.visitOuterClass("INl", "~rffPKml<=", "~rffPKml<=");
classWriter.newNameType("~rffPKml<=", "~rffPKml<=");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newNameType("Person", "Person");
    }
}
statement is: classWriter.newNameType("Person", "Person"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newNameType("Person", "Person") target is: classWriter method is: newNameType(java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(11)
statement is: addType(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addType = classWriter.addType("in")
statement is: addType(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addType = classWriter.addType("in")
test data is: ClassWriter classWriter = new ClassWriter(11);
classWriter.addType("in");
classWriter.addType("in");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.addType("inputFile1");
        classWriter.addType("inputFile2");
    }
}
statement is: classWriter.addType("inputFile1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addType("inputFile1") target is: classWriter method is: addType(java.lang.String)
statement is: classWriter.addType("inputFile2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addType("inputFile2") target is: classWriter method is: addType(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1101)
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType("Lky0-5", 1101)
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType("Lky0-5", 1101)
test data is: ClassWriter classWriter = new ClassWriter(1101);
classWriter.addUninitializedType("Lky0-5", 1101);
classWriter.addUninitializedType("Lky0-5", 1101);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.addUninitializedType("Ljava/lang/String;", 1101);
        classWriter.addUninitializedType("Ljava/lang/Integer;", 1102);
    }
}
statement is: classWriter.addUninitializedType("Ljava/lang/String;", 1101), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addUninitializedType("Ljava/lang/String;", 1101) target is: classWriter method is: addUninitializedType(java.lang.String,int)
statement is: classWriter.addUninitializedType("Ljava/lang/Integer;", 1102), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addUninitializedType("Ljava/lang/Integer;", 1102) target is: classWriter method is: addUninitializedType(java.lang.String,int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-980))
statement is: addType(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addType = classWriter.addType("RuntimeInvisibleAnnotations")
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType("RuntimeInvisibleAnnotations", 1)
test data is: ClassWriter classWriter = new ClassWriter((-980));
classWriter.addType("RuntimeInvisibleAnnotations");
classWriter.addUninitializedType("RuntimeInvisibleAnnotations", 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.addType("MyAnnotation");// Changed the string to a more descriptive example

        classWriter.addUninitializedType("MyAnnotation", 1);// Changed the string to a more descriptive example }}

    }
}
statement is: classWriter.addType("MyAnnotation")// Changed the string to a more descriptive example
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addType("MyAnnotation")// Changed the string to a more descriptive example
 target is: classWriter method is: addType(java.lang.String)
statement is: classWriter.addUninitializedType("MyAnnotation", 1)// Changed the string to a more descriptive example }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addUninitializedType("MyAnnotation", 1)// Changed the string to a more descriptive example }}
 target is: classWriter method is: addUninitializedType(java.lang.String,int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1101)
statement is: org.evosuite.testcase.statements.ArrayStatement@b33d3edb type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Item;
statement code is: Item[] itemArray = new Item[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@8ba5512d type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Lwheel.asm.Item;
statement code is: classWriter.typeTable = itemArray
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType("", 1541)
test data is: ClassWriter classWriter = new ClassWriter(1101);
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
classWriter.addUninitializedType("", 1541);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Item[] itemArray = new Item[1];
        classWriter.typeTable = itemArray;
        classWriter.addUninitializedType("Book", 1541);// Changed the integer value to a more descriptive one, such as "1541" which represents the ISBN number of a book }}

    }
}
statement is: Item[] itemArray = new Item[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: Item[] itemArray = new Item[1] isAssignment: false Array: new Item[1] Elements: []
lengths: [1] [1]
Their type are: class [Lwheel.asm.Item; Item[]
statement is: classWriter.typeTable = itemArray, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.addUninitializedType("Book", 1541)// Changed the integer value to a more descriptive one, such as "1541" which represents the ISBN number of a book }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addUninitializedType("Book", 1541)// Changed the integer value to a more descriptive one, such as "1541" which represents the ISBN number of a book }}
 target is: classWriter method is: addUninitializedType(java.lang.String,int)
TestCase is: Item[] itemArray = new Item[1];

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(19)
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "java/lang/Object")
test data is: ClassWriter classWriter = new ClassWriter(19);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "java/lang/Object");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1101)
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter")
test data is: ClassWriter classWriter = new ClassWriter(1101);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(978)
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.Label")
test data is: ClassWriter classWriter = new ClassWriter(978);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.Label");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-2539))
statement is: visitField(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Lwheel/asm/FieldVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter visitField = (FieldWriter)classWriter.visitField((-2539), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter")
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498))
test data is: ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitField((-2539), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
classWriter.toByteArray();
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.toByteArray();
    }
}
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(978)
statement is: visitEnd()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitEnd()
test data is: ClassWriter classWriter = new ClassWriter(978);
classWriter.visitEnd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitEnd();
    }
}
statement is: classWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitEnd() target is: classWriter method is: visitEnd()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-698))
statement is: newClass(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newClass = classWriter.newClass("")
test data is: ClassWriter classWriter = new ClassWriter((-698));
classWriter.newClass("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitField("", "", null, null);
        classWriter.visitMethod(0, "", "()V", null, null);
        classWriter.visitEnd();
    }
}
statement is: classWriter.visitField("", "", null, null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitField("", "", null, null) target is: classWriter method is: visitField(java.lang.String,java.lang.String,<unknown>,<unknown>)
statement is: classWriter.visitMethod(0, "", "()V", null, null), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitMethod(0, "", "()V", null, null) target is: classWriter method is: visitMethod(int,java.lang.String,java.lang.String,<unknown>,<unknown>)
statement is: classWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitEnd() target is: classWriter method is: visitEnd()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(39)
statement is: org.evosuite.testcase.statements.ArrayStatement@e8bc54bf type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit((-1), 39, "%~", "The size must be non-negative", "Synthetic", arg5)
statement is: newUTF8(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newUTF8 = classWriter.newUTF8("Synthetic")
test data is: ClassWriter classWriter = new ClassWriter(39);
String[] stringArray = new String[0];
classWriter.visit((-1), 39, "%~", "The size must be non-negative", "Synthetic", stringArray);
classWriter.newUTF8("Synthetic");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[]{ "The size must be non-negative", "Synthetic" };
        classWriter.visit(-1, 39, "%~", stringArray[0], stringArray[1]);
        classWriter.newUTF8("Synthetic");
    }
}
statement is: String[] stringArray = new String[]{ "The size must be non-negative", "Synthetic" }, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[]{ "The size must be non-negative", "Synthetic" } Elements: ["The size must be non-negative", "Synthetic"]
lengths: [0] []
statement is: classWriter.visit(-1, 39, "%~", stringArray[0], stringArray[1]), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(-1, 39, "%~", stringArray[0], stringArray[1]) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String)
statement is: classWriter.newUTF8("Synthetic"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newUTF8("Synthetic") target is: classWriter method is: newUTF8(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(4)
statement is: newNameType(Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newNameType = classWriter.newNameType("}S-,d.JkqNAAH4s#", "}S-,d.JkqNAAH4s#")
test data is: ClassWriter classWriter = new ClassWriter(4);
classWriter.newNameType("}S-,d.JkqNAAH4s#", "}S-,d.JkqNAAH4s#");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newNameType("java.lang.String", "java.lang.Integer");
    }
}
statement is: classWriter.newNameType("java.lang.String", "java.lang.Integer"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newNameType("java.lang.String", "java.lang.Integer") target is: classWriter method is: newNameType(java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-698))
statement is: org.evosuite.testcase.statements.AssignmentStatement@af8a04af type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-698)
statement is: newClass(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newClass = classWriter.newClass("")
test data is: ClassWriter classWriter = new ClassWriter((-698));
classWriter.index = (-698);
classWriter.newClass("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = 10;// set the index value to a higher number, such as 10 }}

    }
}
statement is: classWriter.index = 10// set the index value to a higher number, such as 10 }}
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(978)
statement is: newClassItem(Ljava/lang/String;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newClassItem = classWriter.newClassItem("i8=^v3E2s")
test data is: ClassWriter classWriter = new ClassWriter(978);
classWriter.newClassItem("i8=^v3E2s");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3396))
statement is: org.evosuite.testcase.statements.AssignmentStatement@fe4df6f7 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-775)
statement is: newConst(Ljava/lang/Object;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newConst = classWriter.newConst("N+(,N(g6")
test data is: ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newConst("N+(,N(g6");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = -775;
        classWriter.newConst("This is a test string.");
    }
}
statement is: classWriter.index = -775, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.newConst("This is a test string."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConst("This is a test string.") target is: classWriter method is: newConst(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1101)
statement is: valueOf(C)Ljava/lang/Character; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Character
statement code is: Character valueOf = Character.valueOf(',')
statement is: newConst(Ljava/lang/Object;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newConst = classWriter.newConst(arg0)
test data is: ClassWriter classWriter = new ClassWriter(1101);
Character valueOf = Character.valueOf(',');
classWriter.newConst(valueOf);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Character valueOf = Character.valueOf('A');// Changed to a more descriptive character example

        classWriter.newConst(valueOf);
    }
}
statement is: Character valueOf = Character.valueOf('A')// Changed to a more descriptive character example
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Character.valueOf('A') target is: Character method is: valueOf(char)
Matched Method is: valueOf(C)Ljava/lang/Character;
statement is: classWriter.newConst(valueOf), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConst(valueOf) target is: classWriter method is: newConst(java.lang.Character)
TestCase is: char _char = 'A';
Character.valueOf(_char);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-12))
statement is: org.evosuite.testcase.statements.AssignmentStatement@de0ed868 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-12)
statement is: newField(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newField = classWriter.newField("", "m{+)tn{tC", "['n")
test data is: ClassWriter classWriter = new ClassWriter((-12));
classWriter.index = (-12);
classWriter.newField("", "m{+)tn{tC", "['n");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = 0xdeadbeef;
    }
}
statement is: classWriter.index = 0xdeadbeef, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3396))
statement is: org.evosuite.testcase.statements.AssignmentStatement@652c54eb type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-775)
statement is: newMethod(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newMethod = classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true)
test data is: ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = 512;// Changed primitive value to a more descriptive example (512)

        classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true);
    }
}
statement is: classWriter.index = 512// Changed primitive value to a more descriptive example (512)
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true) target is: classWriter method is: newMethod(java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(978)
statement is: org.evosuite.testcase.statements.AssignmentStatement@b71ee0c3 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-170)
statement is: newNameType(Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newNameType = classWriter.newNameType("LocalVariableTable", "LocalVariableTable")
test data is: ClassWriter classWriter = new ClassWriter(978);
classWriter.index = (-170);
classWriter.newNameType("LocalVariableTable", "LocalVariableTable");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = 42;// This value is now more meaningful and representative of the situation being tested.

        classWriter.newNameType("MyLocalVariableTable", "MyLocalVariableTable");// This value is now more descriptive and representative of the situation being tested. }}

    }
}
statement is: classWriter.index = 42// This value is now more meaningful and representative of the situation being tested.
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.newNameType("MyLocalVariableTable", "MyLocalVariableTable")// This value is now more descriptive and representative of the situation being tested. }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newNameType("MyLocalVariableTable", "MyLocalVariableTable")// This value is now more descriptive and representative of the situation being tested. }}
 target is: classWriter method is: newNameType(java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1425)
statement is: org.evosuite.testcase.statements.AssignmentStatement@3f99cd16 type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-1730)
statement is: newUTF8(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newUTF8 = classWriter.newUTF8("")
test data is: ClassWriter classWriter = new ClassWriter(1425);
classWriter.index = (-1730);
classWriter.newUTF8("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = -1730;
        classWriter.newUTF8("A longer and more descriptive string example, such as a sentence or a phrase that describes the situation being tested");
    }
}
statement is: classWriter.index = -1730, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.newUTF8("A longer and more descriptive string example, such as a sentence or a phrase that describes the situation being tested"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newUTF8("A longer and more descriptive string example, such as a sentence or a phrase that describes the situation being tested") target is: classWriter method is: newUTF8(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(978)
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.PrefixFileFilter", "SourceDebugExtension")
test data is: ClassWriter classWriter = new ClassWriter(978);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.PrefixFileFilter", "SourceDebugExtension");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-3396))
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType("N+(,N(g6", 13)
statement is: addType(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addType = classWriter.addType("4y#VYoQ(Z~==")
statement is: getMergedType(II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mergedType = classWriter.getMergedType(2, 2)
test data is: ClassWriter classWriter = new ClassWriter((-3396));
classWriter.addUninitializedType("N+(,N(g6", 13);
classWriter.addType("4y#VYoQ(Z~==");
classWriter.getMergedType(2, 2);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.addUninitializedType("N+(,N(g6", 13);
        classWriter.addType("4y#VYoQ(Z~==");
        classWriter.getMergedType(2, 2);
    }
}
statement is: classWriter.addUninitializedType("N+(,N(g6", 13), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addUninitializedType("N+(,N(g6", 13) target is: classWriter method is: addUninitializedType(java.lang.String,int)
statement is: classWriter.addType("4y#VYoQ(Z~=="), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addType("4y#VYoQ(Z~==") target is: classWriter method is: addType(java.lang.String)
statement is: classWriter.getMergedType(2, 2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.getMergedType(2, 2) target is: classWriter method is: getMergedType(int,int)
* test suite isTestSuite: 61
Test 0: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 2);
classWriter.newFloat(1);
Test 1: 
ClassWriter classWriter = new ClassWriter(1120);
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = ".5@s{l'Q<\"QFLOKV";
stringArray[2] = ".5@s{l'Q<\"QFLOKV";
classWriter.visit(1120, 3088, "", ".5@s{l'Q<\"QFLOKV", "", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 2: 
ClassWriter classWriter = new ClassWriter(635);
Item newFloat = classWriter.newFloat(635);
// Undeclared exception!
try { 
  classWriter.newConst(newFloat);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.Item@6
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter((-3372));
classWriter.visit((-994), 1, "AC@@Vm^*G:G)#", (String) null, "", (String[]) null);
Test 4: 
ClassWriter classWriter = new ClassWriter(5);
String[] stringArray = new String[1];
// Undeclared exception!
try { 
  classWriter.visit(1000, 5, "", "${D2M0DJ9Z`l)I", (String) null, stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.visitSource((String) null, "}S-,d.JkqNAAH4s#");
Test 6: 
ClassWriter classWriter = new ClassWriter((-375));
classWriter.visitSource("", (String) null);
classWriter.toByteArray();
Test 7: 
ClassWriter classWriter = new ClassWriter(635);
classWriter.visitOuterClass("", (String) null, (String) null);
Test 8: 
ClassWriter classWriter = new ClassWriter(31);
classWriter.visitOuterClass("", "SourceFile", (String) null);
classWriter.toByteArray();
Test 9: 
ClassWriter classWriter = new ClassWriter((-2005));
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 10: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true);
classWriter.toByteArray();
Test 11: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));
Test 12: 
ClassWriter classWriter = new ClassWriter(1);
classWriter.visitInnerClass((String) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (String) null, 1);
Test 13: 
ClassWriter classWriter = new ClassWriter(1293);
classWriter.visitInnerClass("!Kt#,.Ek!]d", (String) null, "]`ni>", 1);
Test 14: 
ClassWriter classWriter = new ClassWriter(3716);
String[] stringArray = new String[1];
stringArray[0] = "";
classWriter.visitMethod((-1464), "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", stringArray);
classWriter.toByteArray();
Test 15: 
ClassWriter classWriter = new ClassWriter(184);
classWriter.visitSource("", "");
classWriter.toByteArray();
Test 16: 
ClassWriter classWriter = new ClassWriter(635);
classWriter.visit(3122, (-1167), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", (String[]) null);
classWriter.toByteArray();
Test 17: 
ClassWriter classWriter = new ClassWriter(635);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "";
stringArray[6] = "";
stringArray[7] = "";
classWriter.visit(20, (-159), "", "", "", stringArray);
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.toByteArray();
Test 19: 
ClassWriter classWriter = new ClassWriter((-1116));
Attribute attribute = new Attribute("`soMrkFg");
byte[] byteArray = new byte[6];
attribute.value = byteArray;
classWriter.visitAttribute(attribute);
classWriter.toByteArray();
Test 20: 
ClassWriter classWriter = new ClassWriter(982);
classWriter.newFieldItem("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
classWriter.newField("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
Test 21: 
ClassWriter classWriter = new ClassWriter((-4045));
classWriter.newMethodItem("org.apache.commons.io.filefilter.NotFileFilter", "InnerClasses", "*#<,", false);
Test 22: 
ClassWriter classWriter = new ClassWriter(1024);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
Test 23: 
ClassWriter classWriter = new ClassWriter(482);
classWriter.newInteger(482);
classWriter.newInteger(482);
Test 24: 
ClassWriter classWriter = new ClassWriter(641);
classWriter.newFloat(641);
classWriter.newFloat(641);
Test 25: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.newLong(978);
classWriter.newLong(978);
Test 26: 
ClassWriter classWriter = new ClassWriter(9);
classWriter.newDouble(99);
classWriter.newDouble(99);
Test 27: 
ClassWriter classWriter = new ClassWriter(247);
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
Test 28: 
ClassWriter classWriter = new ClassWriter(4611);
classWriter.visitOuterClass("INl", "~rffPKml<=", "~rffPKml<=");
classWriter.newNameType("~rffPKml<=", "~rffPKml<=");
Test 29: 
ClassWriter classWriter = new ClassWriter(11);
classWriter.addType("in");
classWriter.addType("in");
Test 30: 
ClassWriter classWriter = new ClassWriter(1101);
classWriter.addUninitializedType("Lky0-5", 1101);
classWriter.addUninitializedType("Lky0-5", 1101);
Test 31: 
ClassWriter classWriter = new ClassWriter((-980));
classWriter.addType("RuntimeInvisibleAnnotations");
classWriter.addUninitializedType("RuntimeInvisibleAnnotations", 1);
Test 32: 
ClassWriter classWriter = new ClassWriter(1101);
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
classWriter.addUninitializedType("", 1541);
Test 33: 
ClassWriter classWriter = new ClassWriter(19);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "java/lang/Object");
Test 34: 
ClassWriter classWriter = new ClassWriter(1101);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
Test 35: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.Label");
Test 36: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitField((-2539), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
classWriter.toByteArray();
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));
Test 37: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.visitEnd();
Test 38: 
ClassWriter classWriter = new ClassWriter((-698));
classWriter.newClass("");
Test 39: 
ClassWriter classWriter = new ClassWriter(39);
String[] stringArray = new String[0];
classWriter.visit((-1), 39, "%~", "The size must be non-negative", "Synthetic", stringArray);
classWriter.newUTF8("Synthetic");
Test 40: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.newNameType("}S-,d.JkqNAAH4s#", "}S-,d.JkqNAAH4s#");
Test 41: 
ClassWriter classWriter = new ClassWriter((-698));
classWriter.index = (-698);
classWriter.newClass("");
Test 42: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.newClassItem("i8=^v3E2s");
Test 43: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newConst("N+(,N(g6");
Test 44: 
ClassWriter classWriter = new ClassWriter(1101);
Character valueOf = Character.valueOf(',');
classWriter.newConst(valueOf);
Test 45: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.index = (-12);
classWriter.newField("", "m{+)tn{tC", "['n");
Test 46: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true);
Test 47: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.index = (-170);
classWriter.newNameType("LocalVariableTable", "LocalVariableTable");
Test 48: 
ClassWriter classWriter = new ClassWriter(1425);
classWriter.index = (-1730);
classWriter.newUTF8("");
Test 49: 
ClassWriter classWriter = new ClassWriter(978);
// Undeclared exception!
try { 
  classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.PrefixFileFilter", "SourceDebugExtension");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: Class 'SourceDebugExtension.class' should be in target project, but could not be found!
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 50: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.addUninitializedType("N+(,N(g6", 13);
classWriter.addType("4y#VYoQ(Z~==");
// Undeclared exception!
try { 
  classWriter.getMergedType(2, 2);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: Class '4y#VYoQ(Z~==.class' should be in target project, but could not be found!
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 51: 
String[] stringArray = new String[3];

Test 52: 

Test 53: 

Test 54: 

Test 55: 

Test 56: 
String[] stringArray = new String[1];

Test 57: 
String[] stringArray = new String[8];

Test 58: 
String string = "`soMrkFg";
Attribute attribute = new Attribute("`soMrkFg");
byte[] byteArray = new byte[6];
ClassWriter classWriter = new ClassWriter((-1116));
Attribute attribute = new Attribute("`soMrkFg");
byte[] byteArray = new byte[6];
((ClassWriter)"`soMrkFg").visitAttribute(attribute);
((ClassWriter) string).toByteArray();

Test 59: 
Item[] itemArray = new Item[1];

Test 60: 
Character.valueOf('A');


* Generated after the refinement and before minimization 61 tests with total length 175
* test suite isTestSuite: 61
Test 0: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 2);
classWriter.newFloat(1);
Test 1: 
ClassWriter classWriter = new ClassWriter(1120);
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = ".5@s{l'Q<\"QFLOKV";
stringArray[2] = ".5@s{l'Q<\"QFLOKV";
classWriter.visit(1120, 3088, "", ".5@s{l'Q<\"QFLOKV", "", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 2: 
ClassWriter classWriter = new ClassWriter(635);
Item newFloat = classWriter.newFloat(635);
// Undeclared exception!
try { 
  classWriter.newConst(newFloat);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.Item@6
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter((-3372));
classWriter.visit((-994), 1, "AC@@Vm^*G:G)#", (String) null, "", (String[]) null);
Test 4: 
ClassWriter classWriter = new ClassWriter(5);
String[] stringArray = new String[1];
// Undeclared exception!
try { 
  classWriter.visit(1000, 5, "", "${D2M0DJ9Z`l)I", (String) null, stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.visitSource((String) null, "}S-,d.JkqNAAH4s#");
Test 6: 
ClassWriter classWriter = new ClassWriter((-375));
classWriter.visitSource("", (String) null);
classWriter.toByteArray();
Test 7: 
ClassWriter classWriter = new ClassWriter(635);
classWriter.visitOuterClass("", (String) null, (String) null);
Test 8: 
ClassWriter classWriter = new ClassWriter(31);
classWriter.visitOuterClass("", "SourceFile", (String) null);
classWriter.toByteArray();
Test 9: 
ClassWriter classWriter = new ClassWriter((-2005));
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 10: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true);
classWriter.toByteArray();
Test 11: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));
Test 12: 
ClassWriter classWriter = new ClassWriter(1);
classWriter.visitInnerClass((String) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (String) null, 1);
Test 13: 
ClassWriter classWriter = new ClassWriter(1293);
classWriter.visitInnerClass("!Kt#,.Ek!]d", (String) null, "]`ni>", 1);
Test 14: 
ClassWriter classWriter = new ClassWriter(3716);
String[] stringArray = new String[1];
stringArray[0] = "";
classWriter.visitMethod((-1464), "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", stringArray);
classWriter.toByteArray();
Test 15: 
ClassWriter classWriter = new ClassWriter(184);
classWriter.visitSource("", "");
classWriter.toByteArray();
Test 16: 
ClassWriter classWriter = new ClassWriter(635);
classWriter.visit(3122, (-1167), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", (String[]) null);
classWriter.toByteArray();
Test 17: 
ClassWriter classWriter = new ClassWriter(635);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "";
stringArray[6] = "";
stringArray[7] = "";
classWriter.visit(20, (-159), "", "", "", stringArray);
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.toByteArray();
Test 19: 
ClassWriter classWriter = new ClassWriter((-1116));
Attribute attribute = new Attribute("`soMrkFg");
byte[] byteArray = new byte[6];
attribute.value = byteArray;
classWriter.visitAttribute(attribute);
classWriter.toByteArray();
Test 20: 
ClassWriter classWriter = new ClassWriter(982);
classWriter.newFieldItem("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
classWriter.newField("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
Test 21: 
ClassWriter classWriter = new ClassWriter((-4045));
classWriter.newMethodItem("org.apache.commons.io.filefilter.NotFileFilter", "InnerClasses", "*#<,", false);
Test 22: 
ClassWriter classWriter = new ClassWriter(1024);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
Test 23: 
ClassWriter classWriter = new ClassWriter(482);
classWriter.newInteger(482);
classWriter.newInteger(482);
Test 24: 
ClassWriter classWriter = new ClassWriter(641);
classWriter.newFloat(641);
classWriter.newFloat(641);
Test 25: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.newLong(978);
classWriter.newLong(978);
Test 26: 
ClassWriter classWriter = new ClassWriter(9);
classWriter.newDouble(99);
classWriter.newDouble(99);
Test 27: 
ClassWriter classWriter = new ClassWriter(247);
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
Test 28: 
ClassWriter classWriter = new ClassWriter(4611);
classWriter.visitOuterClass("INl", "~rffPKml<=", "~rffPKml<=");
classWriter.newNameType("~rffPKml<=", "~rffPKml<=");
Test 29: 
ClassWriter classWriter = new ClassWriter(11);
classWriter.addType("in");
classWriter.addType("in");
Test 30: 
ClassWriter classWriter = new ClassWriter(1101);
classWriter.addUninitializedType("Lky0-5", 1101);
classWriter.addUninitializedType("Lky0-5", 1101);
Test 31: 
ClassWriter classWriter = new ClassWriter((-980));
classWriter.addType("RuntimeInvisibleAnnotations");
classWriter.addUninitializedType("RuntimeInvisibleAnnotations", 1);
Test 32: 
ClassWriter classWriter = new ClassWriter(1101);
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
classWriter.addUninitializedType("", 1541);
Test 33: 
ClassWriter classWriter = new ClassWriter(19);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "java/lang/Object");
Test 34: 
ClassWriter classWriter = new ClassWriter(1101);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
Test 35: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.Label");
Test 36: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitField((-2539), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
classWriter.toByteArray();
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));
Test 37: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.visitEnd();
Test 38: 
ClassWriter classWriter = new ClassWriter((-698));
classWriter.newClass("");
Test 39: 
ClassWriter classWriter = new ClassWriter(39);
String[] stringArray = new String[0];
classWriter.visit((-1), 39, "%~", "The size must be non-negative", "Synthetic", stringArray);
classWriter.newUTF8("Synthetic");
Test 40: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.newNameType("}S-,d.JkqNAAH4s#", "}S-,d.JkqNAAH4s#");
Test 41: 
ClassWriter classWriter = new ClassWriter((-698));
classWriter.index = (-698);
classWriter.newClass("");
Test 42: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.newClassItem("i8=^v3E2s");
Test 43: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newConst("N+(,N(g6");
Test 44: 
ClassWriter classWriter = new ClassWriter(1101);
Character valueOf = Character.valueOf(',');
classWriter.newConst(valueOf);
Test 45: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.index = (-12);
classWriter.newField("", "m{+)tn{tC", "['n");
Test 46: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true);
Test 47: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.index = (-170);
classWriter.newNameType("LocalVariableTable", "LocalVariableTable");
Test 48: 
ClassWriter classWriter = new ClassWriter(1425);
classWriter.index = (-1730);
classWriter.newUTF8("");
Test 49: 
ClassWriter classWriter = new ClassWriter(978);
// Undeclared exception!
try { 
  classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.PrefixFileFilter", "SourceDebugExtension");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: Class 'SourceDebugExtension.class' should be in target project, but could not be found!
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 50: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.addUninitializedType("N+(,N(g6", 13);
classWriter.addType("4y#VYoQ(Z~==");
// Undeclared exception!
try { 
  classWriter.getMergedType(2, 2);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: Class '4y#VYoQ(Z~==.class' should be in target project, but could not be found!
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 51: 
String[] stringArray = new String[3];

Test 52: 

Test 53: 

Test 54: 

Test 55: 

Test 56: 
String[] stringArray = new String[1];

Test 57: 
String[] stringArray = new String[8];

Test 58: 
String string = "`soMrkFg";
Attribute attribute = new Attribute("`soMrkFg");
byte[] byteArray = new byte[6];
ClassWriter classWriter = new ClassWriter((-1116));
Attribute attribute = new Attribute("`soMrkFg");
byte[] byteArray = new byte[6];
((ClassWriter)"`soMrkFg").visitAttribute(attribute);
((ClassWriter) string).toByteArray();

Test 59: 
Item[] itemArray = new Item[1];

Test 60: 
Character.valueOf('A');


* Minimizing test suite
* test suite isTestSuite: 53
Test 0: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitField((-2539), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
classWriter.toByteArray();
Test 1: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 2);
classWriter.newFloat(1);
Test 2: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.visitEnd();
Test 3: 
ClassWriter classWriter = new ClassWriter((-3372));
classWriter.visit((-994), 1, "AC@@Vm^*G:G)#", (String) null, "", (String[]) null);
Test 4: 
ClassWriter classWriter = new ClassWriter(5);
String[] stringArray = new String[1];
// Undeclared exception!
try { 
  classWriter.visit(1000, 5, "", "${D2M0DJ9Z`l)I", (String) null, stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
ClassWriter classWriter = new ClassWriter(39);
String[] stringArray = new String[0];
classWriter.visit((-1), 39, "%~", "The size must be non-negative", "Synthetic", stringArray);
classWriter.newUTF8("Synthetic");
Test 6: 
ClassWriter classWriter = new ClassWriter(1120);
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = ".5@s{l'Q<\"QFLOKV";
stringArray[2] = ".5@s{l'Q<\"QFLOKV";
classWriter.visit(1120, 3088, "", ".5@s{l'Q<\"QFLOKV", "", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 7: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.visitSource((String) null, "}S-,d.JkqNAAH4s#");
Test 8: 
ClassWriter classWriter = new ClassWriter((-375));
classWriter.visitSource("", (String) null);
classWriter.toByteArray();
Test 9: 
ClassWriter classWriter = new ClassWriter(635);
classWriter.visitOuterClass("", (String) null, (String) null);
Test 10: 
ClassWriter classWriter = new ClassWriter(31);
classWriter.visitOuterClass("", "SourceFile", (String) null);
classWriter.toByteArray();
Test 11: 
ClassWriter classWriter = new ClassWriter(4611);
classWriter.visitOuterClass("INl", "~rffPKml<=", "~rffPKml<=");
classWriter.newNameType("~rffPKml<=", "~rffPKml<=");
Test 12: 
ClassWriter classWriter = new ClassWriter((-2005));
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 13: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true);
classWriter.toByteArray();
Test 14: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));
Test 15: 
ClassWriter classWriter = new ClassWriter(1);
classWriter.visitInnerClass((String) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (String) null, 1);
Test 16: 
ClassWriter classWriter = new ClassWriter(1293);
classWriter.visitInnerClass("!Kt#,.Ek!]d", (String) null, "]`ni>", 1);
Test 17: 
ClassWriter classWriter = new ClassWriter(3716);
String[] stringArray = new String[1];
stringArray[0] = "";
classWriter.visitMethod((-1464), "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", stringArray);
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter(635);
classWriter.visit(3122, (-1167), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", (String[]) null);
classWriter.toByteArray();
Test 19: 
ClassWriter classWriter = new ClassWriter(184);
classWriter.visitSource("", "");
classWriter.toByteArray();
Test 20: 
ClassWriter classWriter = new ClassWriter(635);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "";
stringArray[6] = "";
stringArray[7] = "";
classWriter.visit(20, (-159), "", "", "", stringArray);
classWriter.toByteArray();
Test 21: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.toByteArray();
Test 22: 
ClassWriter classWriter = new ClassWriter((-1116));
Attribute attribute = new Attribute("`soMrkFg");
byte[] byteArray = new byte[6];
attribute.value = byteArray;
classWriter.visitAttribute(attribute);
classWriter.toByteArray();
Test 23: 
ClassWriter classWriter = new ClassWriter(1120);
classWriter.invalidFrames = true;
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 24: 
ClassWriter classWriter = new ClassWriter(1101);
Character valueOf = Character.valueOf(',');
classWriter.newConst(valueOf);
Test 25: 
ClassWriter classWriter = new ClassWriter(635);
Item newFloat = classWriter.newFloat(635);
// Undeclared exception!
try { 
  classWriter.newConst(newFloat);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.Item@6
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 26: 
ClassWriter classWriter = new ClassWriter(982);
classWriter.newFieldItem("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
classWriter.newField("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
Test 27: 
ClassWriter classWriter = new ClassWriter((-4045));
classWriter.newMethodItem("org.apache.commons.io.filefilter.NotFileFilter", "InnerClasses", "*#<,", false);
Test 28: 
ClassWriter classWriter = new ClassWriter(1024);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
Test 29: 
ClassWriter classWriter = new ClassWriter(482);
classWriter.newInteger(482);
classWriter.newInteger(482);
Test 30: 
ClassWriter classWriter = new ClassWriter(641);
classWriter.newFloat(641);
classWriter.newFloat(641);
Test 31: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.newLong(978);
classWriter.newLong(978);
Test 32: 
ClassWriter classWriter = new ClassWriter(9);
classWriter.newDouble(99);
classWriter.newDouble(99);
Test 33: 
ClassWriter classWriter = new ClassWriter(247);
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
Test 34: 
ClassWriter classWriter = new ClassWriter(11);
classWriter.addType("in");
classWriter.addType("in");
Test 35: 
ClassWriter classWriter = new ClassWriter(1101);
classWriter.addUninitializedType("Lky0-5", 1101);
classWriter.addUninitializedType("Lky0-5", 1101);
Test 36: 
ClassWriter classWriter = new ClassWriter((-980));
classWriter.addType("RuntimeInvisibleAnnotations");
classWriter.addUninitializedType("RuntimeInvisibleAnnotations", 1);
Test 37: 
ClassWriter classWriter = new ClassWriter(1101);
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
classWriter.addUninitializedType("", 1541);
Test 38: 
ClassWriter classWriter = new ClassWriter(19);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "java/lang/Object");
Test 39: 
ClassWriter classWriter = new ClassWriter(1101);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
Test 40: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.Label");
Test 41: 
ClassWriter classWriter = new ClassWriter((-698));
classWriter.newClass("");
Test 42: 
ClassWriter classWriter = new ClassWriter(1425);
classWriter.newUTF8("");
Test 43: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.newNameType("}S-,d.JkqNAAH4s#", "}S-,d.JkqNAAH4s#");
Test 44: 
ClassWriter classWriter = new ClassWriter((-698));
classWriter.index = (-698);
classWriter.newClass("");
Test 45: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.newClassItem("i8=^v3E2s");
Test 46: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newConst("N+(,N(g6");
Test 47: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.index = (-12);
classWriter.newField("", "m{+)tn{tC", "['n");
Test 48: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true);
Test 49: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.index = (-170);
classWriter.newNameType("LocalVariableTable", "LocalVariableTable");
Test 50: 
ClassWriter classWriter = new ClassWriter(1425);
classWriter.index = (-1730);
classWriter.newUTF8("");
Test 51: 
ClassWriter classWriter = new ClassWriter(978);
// Undeclared exception!
try { 
  classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.PrefixFileFilter", "SourceDebugExtension");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: Class 'SourceDebugExtension.class' should be in target project, but could not be found!
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 52: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.addUninitializedType("N+(,N(g6", 13);
classWriter.addType("4y#VYoQ(Z~==");
// Undeclared exception!
try { 
  classWriter.getMergedType(2, 2);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: Class '4y#VYoQ(Z~==.class' should be in target project, but could not be found!
   //
   verifyException("wheel.asm.ClassWriter", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 174
* Number of covered goals: 159
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 345
* Number of covered goals: 325
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 55
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 174
* Number of covered goals: 159
* Generated 53 tests with total length 166
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitField((-2539), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
byte[] byteArray = classWriter.toByteArray();
assertEquals(140, byteArray.length);


** It was a parseable test case! 
refined test name is: testConvertToByteArray
* Compiling Tests
refined test name is: testClassWriterToByteArrayLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader arg0 = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(arg0, 2);
Item newFloat = classWriter.newFloat(1);
assertNotNull(newFloat);


** It was a parseable test case! 
refined test name is: testCreateNewClassWriterWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(978);
classWriter.visitEnd();
assertEquals(2, ClassWriter.COMPUTE_FRAMES);


** It was a parseable test case! 
refined test name is: testComputeFramesIsSetTo2
* Compiling Tests
refined test name is: testComputeFrames
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-3372));
classWriter.visit((-994), 1, "AC@@Vm^*G:G)#", (String) null, "", (String[]) null);
assertEquals(1, ClassWriter.COMPUTE_MAXS);


** It was a parseable test case! 
refined test name is: testComputeMaxsFlag
* Compiling Tests
refined test name is: testComputeMaxsFlag
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(5);
String[] arg5 = new String[1];
// Undeclared exception!
try { 
  classWriter.visit(1000, 5, "", "${D2M0DJ9Z`l)I", (String) null, arg5);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testVisitingClassWithNullOutputThrowsNPE
* Compiling Tests
refined test name is: testVisitThrowsNPEWhenClassOutputIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(39);
String[] arg5 = new String[0];
classWriter.visit((-1), 39, "%~", "The size must be non-negative", "Synthetic", arg5);
int newUTF8 = classWriter.newUTF8("Synthetic");
assertEquals(4, newUTF8);


** It was a parseable test case! 
refined test name is: testNegativeSizeThrowsIllegalArgumentException
* Compiling Tests
refined test name is: testVisitMethodWithNegativeSize
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1120);
String[] arg5 = new String[3];
arg5[0] = "";
arg5[1] = ".5@s{l'Q<\"QFLOKV";
arg5[2] = ".5@s{l'Q<\"QFLOKV";
classWriter.visit(1120, 3088, "", ".5@s{l'Q<\"QFLOKV", "", arg5);
classWriter.invalidFrames = true;
byte[] byteArray = classWriter.toByteArray();
assertEquals(78, byteArray.length);


** It was a parseable test case! 
refined test name is: testClassWriterInvalidFrames
source code formatter error: 44:2: error: class, interface, or enum expected testCode is: /*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 23:22:31 GMT 2024
 */

package wheel.asm;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.ClassWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClassWriter_18_tmp__ESTest extends ClassWriter_18_tmp__ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testClassWriterInvalidFrames() throws Throwable  {
      // Define the name of the class being written.
      String className = "";
      
      // Define the internal name of the class (e.g., a dot-separated path to the class).
      String internalName = ".5@s{l'Q<\"QFLOKV";
      
      // Define the array of strings that represents the class's version number and source.
      String[] arg5 = new String[3];
      arg5[0] = className;
      arg5[1] = internalName;
      arg5[2] = ".5@s{l'Q<\"QFLOKV";
      
      // Set the flag to indicate that the class writer is invalid.
      classWriter.invalidFrames = true;
      
      // Convert the ClassWriter to a byte array.
      byte[] byteArray = classWriter.toByteArray();
      
      // Assert that the length of the byte array is equal to 78.
      assertEquals(78, byteArray.length);}
  }
}

* Compiling Tests
refined test name is: testValidClassWriter
source code formatter error: 44:2: error: class, interface, or enum expected testCode is: /*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 23:24:26 GMT 2024
 */

package wheel.asm;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.ClassWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ClassWriter_19_tmp__ESTest extends ClassWriter_19_tmp__ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValidClassWriter() throws Throwable  {
      // Define the name of the class being written.
      String className = "";
      
      // Define the internal name of the class (e.g., a dot-separated path to the class).
      String internalName = ".5@s{l'Q<\"QFLOKV";
      
      // Define the array of strings that represents the class's version number and source.
      String[] arg5 = new String[3];
      arg5[0] = className;
      arg5[1] = internalName;
      arg5[2] = ".5@s{l'Q<\"QFLOKV";
      
      // Set the flag to indicate that the class writer is invalid.
      classWriter.invalidFrames = true;
      
      // Convert the ClassWriter to a byte array.
      byte[] byteArray = classWriter.toByteArray();
      
      // Assert that the length of the byte array is equal to 78.
      assertEquals(78, byteArray.length);}
  }
}

* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(4);
classWriter.visitSource((String) null, "}S-,d.JkqNAAH4s#");
assertEquals(2, ClassWriter.COMPUTE_FRAMES);


** It was a parseable test case! 
refined test name is: testVisitSourceWithInvalidSignature
* Compiling Tests
refined test name is: testVisitSourceWithInvalidSignature
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-375));
classWriter.visitSource("", (String) null);
byte[] byteArray = classWriter.toByteArray();
assertEquals(48, byteArray.length);


** It was a parseable test case! 
refined test name is: testToByteArrayLengthEquals48
* Compiling Tests
refined test name is: testClassWriterWithSourceFile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(635);
classWriter.visitOuterClass("", (String) null, (String) null);
assertEquals(1, ClassWriter.COMPUTE_MAXS);


** It was a parseable test case! 
refined test name is: testVisitOuterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(31);
classWriter.visitOuterClass("", "SourceFile", (String) null);
byte[] byteArray = classWriter.toByteArray();
assertEquals(58, byteArray.length);


** It was a parseable test case! 
refined test name is: testClassWriterToByteArrayLengthIs58
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(4611);
classWriter.visitOuterClass("INl", "~rffPKml<=", "~rffPKml<=");
int newNameType = classWriter.newNameType("~rffPKml<=", "~rffPKml<=");
assertEquals(4, newNameType);


** It was a parseable test case! 
refined test name is: testNewNameTypeValidInputsReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-2005));
classWriter.visitAnnotation("", false);
byte[] byteArray = classWriter.toByteArray();
assertEquals(69, byteArray.length);


** It was a parseable test case! 
refined test name is: testClassWriterToByteArrayLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(978);
classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true);
byte[] byteArray = classWriter.toByteArray();
assertEquals(114, byteArray.length);


** It was a parseable test case! 
refined test name is: testWriteToFileWithAnnotation
* Compiling Tests
refined test name is: testByteArrayLengthIsCorrect
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));
assertEquals(2, ClassWriter.COMPUTE_FRAMES);


** It was a parseable test case! 
refined test name is: testVisitInnerClass
* Compiling Tests
refined test name is: testInnerClassVisitationAndFrameComputation
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1);
classWriter.visitInnerClass((String) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (String) null, 1);
assertEquals(1, ClassWriter.COMPUTE_MAXS);


** It was a parseable test case! 
refined test name is: testVisitInnerClassWithComputeMaxsSetToOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1293);
classWriter.visitInnerClass("!Kt#,.Ek!]d", (String) null, "]`ni>", 1);
assertEquals(1, ClassWriter.COMPUTE_MAXS);


** It was a parseable test case! 
refined test name is: testComputeMaxs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(3716);
String[] arg4 = new String[1];
arg4[0] = "";
classWriter.visitMethod((-1464), "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", arg4);
byte[] byteArray = classWriter.toByteArray();
assertEquals(166, byteArray.length);


** It was a parseable test case! 
refined test name is: testVisitMethodWithOrFileFilterAndEmptyArgument
* Compiling Tests
refined test name is: testLengthOfToByteArrayAfterVisitMethodCall
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(635);
classWriter.visit(3122, (-1167), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", (String[]) null);
byte[] byteArray = classWriter.toByteArray();
assertEquals(106, byteArray.length);


** It was a parseable test case! 
refined test name is: testClassWriterToByteArrayLength
* Compiling Tests
refined test name is: testToByteArrayShouldHaveCorrectLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(184);
classWriter.visitSource("", "");
byte[] byteArray = classWriter.toByteArray();
assertEquals(77, byteArray.length);


** It was a parseable test case! 
refined test name is: testWriteToByteArray
* Compiling Tests
refined test name is: testWriteToByteArrayReturnsCorrectLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(635);
String[] arg5 = new String[8];
arg5[0] = "";
arg5[1] = "";
arg5[2] = "";
arg5[3] = "";
arg5[4] = "";
arg5[5] = "";
arg5[6] = "";
arg5[7] = "";
classWriter.visit(20, (-159), "", "", "", arg5);
byte[] byteArray = classWriter.toByteArray();
assertEquals(103, byteArray.length);


** It was a parseable test case! 
refined test name is: testClassWriterVisit
* Compiling Tests
refined test name is: testClassWriterVisitWithEmptyNameAndVersion
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
byte[] byteArray = classWriter.toByteArray();
assertEquals(86, byteArray.length);


** It was a parseable test case! 
refined test name is: testGenerateValidByteArrayLength86
* Compiling Tests
refined test name is: testGeneratedByteArrayLength
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1120);
classWriter.invalidFrames = true;
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testToByteArrayUndeclaredException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1101);
Character arg0 = Character.valueOf(',');
int newConst = classWriter.newConst(arg0);
assertEquals(1, newConst);


** It was a parseable test case! 
refined test name is: testNewConstWithCommaCharacter
* Compiling Tests
refined test name is: testNewConstWithCommaArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(635);
Item arg0 = classWriter.newFloat(635);
// Undeclared exception!
try { 
  classWriter.newConst(arg0);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.Item@6
   //
   verifyException("wheel.asm.ClassWriter", e);
}


** It was a parseable test case! 
refined test name is: testNewConstthrowsExceptionOnInvalidArgument
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(982);
classWriter.newFieldItem("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
int newField = classWriter.newField("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
assertEquals(4, newField);


** It was a parseable test case! 
refined test name is: testCreateNewFieldValidParameters
* Compiling Tests
refined test name is: testNewFieldWithValidParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-4045));
Item newMethodItem = classWriter.newMethodItem("org.apache.commons.io.filefilter.NotFileFilter", "InnerClasses", "*#<,", false);
assertNotNull(newMethodItem);


** It was a parseable test case! 
refined test name is: testNotFileFilterInnerClasses
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1024);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
int newMethod = classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
assertEquals(4, newMethod);


** It was a parseable test case! 
refined test name is: testNewMethodWithArgumentsShouldReturnFour
* Compiling Tests
refined test name is: testNewMethodReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1101);
classWriter.addUninitializedType("Lky0-5", 1101);
int addUninitializedType = classWriter.addUninitializedType("Lky0-5", 1101);
assertEquals(1, addUninitializedType);


** It was a parseable test case! 
refined test name is: testAddUninitializedType
* Compiling Tests
refined test name is: testAddUninitializedTypeReturnsValidIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-980));
classWriter.addType("RuntimeInvisibleAnnotations");
int addUninitializedType = classWriter.addUninitializedType("RuntimeInvisibleAnnotations", 1);
assertEquals(2, addUninitializedType);


** It was a parseable test case! 
refined test name is: testAddUninitializedType
* Compiling Tests
refined test name is: testAddUninitializedType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1101);
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
int addUninitializedType = classWriter.addUninitializedType("", 1541);
assertEquals(1, addUninitializedType);


** It was a parseable test case! 
refined test name is: testAddUninitializedTypeWithEmptyName
* Compiling Tests
refined test name is: testAddUninitializedTypeReturnsIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(19);
String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "java/lang/Object");
assertEquals("java/lang/Object", commonSuperClass);


** It was a parseable test case! 
refined test name is: testGetCommonSuperClassForDifferentClasses
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1101);
String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
assertEquals("org.apache.commons.io.filefilter.FileFileFilter", commonSuperClass);


** It was a parseable test case! 
refined test name is: testGetCommonSuperClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(978);
String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.Label");
assertEquals("java/lang/Object", commonSuperClass);


** It was a parseable test case! 
refined test name is: testGetCommonSuperClassWithFileFilterAndLabel
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-698));
int newClass = classWriter.newClass("");
assertEquals(2, newClass);


** It was a parseable test case! 
refined test name is: testNewClassWithValidClassName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1425);
int newUTF8 = classWriter.newUTF8("");
assertEquals(1, newUTF8);


** It was a parseable test case! 
refined test name is: testNewUTF8ReturnsOneWhenCalledWithEmptyString
* Compiling Tests
refined test name is: testNewUTF8WithEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(4);
int newNameType = classWriter.newNameType("}S-,d.JkqNAAH4s#", "}S-,d.JkqNAAH4s#");
assertEquals(2, newNameType);


** It was a parseable test case! 
refined test name is: testNewNameTypeReturnsCorrectValue
[MASTER] 01:58:04.559 [logback-1] WARN  TestSuiteGenerator - JUnit checking timed out
[MASTER] 01:58:06.401 [logback-1] WARN  TimeController - Already entered in phase: INLINING. This will mess up the timing calculations.
* test suite isTestSuite: 51
Test 0: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 2);
classWriter.newFloat(1);
Test 1: 
ClassWriter classWriter = new ClassWriter(1120);
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = ".5@s{l'Q<\"QFLOKV";
stringArray[2] = ".5@s{l'Q<\"QFLOKV";
classWriter.visit(1120, 3088, "", ".5@s{l'Q<\"QFLOKV", "", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 2: 
ClassWriter classWriter = new ClassWriter(635);
Item newFloat = classWriter.newFloat(635);
// Undeclared exception!
try { 
  classWriter.newConst(newFloat);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.Item@6
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 3: 
ClassWriter classWriter = new ClassWriter((-3372));
classWriter.visit((-994), 1, "AC@@Vm^*G:G)#", (String) null, "", (String[]) null);
Test 4: 
ClassWriter classWriter = new ClassWriter(5);
String[] stringArray = new String[1];
// Undeclared exception!
try { 
  classWriter.visit(1000, 5, "", "${D2M0DJ9Z`l)I", (String) null, stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.visitSource((String) null, "}S-,d.JkqNAAH4s#");
Test 6: 
ClassWriter classWriter = new ClassWriter((-375));
classWriter.visitSource("", (String) null);
classWriter.toByteArray();
Test 7: 
ClassWriter classWriter = new ClassWriter(635);
classWriter.visitOuterClass("", (String) null, (String) null);
Test 8: 
ClassWriter classWriter = new ClassWriter(31);
classWriter.visitOuterClass("", "SourceFile", (String) null);
classWriter.toByteArray();
Test 9: 
ClassWriter classWriter = new ClassWriter((-2005));
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 10: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true);
classWriter.toByteArray();
Test 11: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));
Test 12: 
ClassWriter classWriter = new ClassWriter(1);
classWriter.visitInnerClass((String) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (String) null, 1);
Test 13: 
ClassWriter classWriter = new ClassWriter(1293);
classWriter.visitInnerClass("!Kt#,.Ek!]d", (String) null, "]`ni>", 1);
Test 14: 
ClassWriter classWriter = new ClassWriter(3716);
String[] stringArray = new String[1];
stringArray[0] = "";
classWriter.visitMethod((-1464), "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", stringArray);
classWriter.toByteArray();
Test 15: 
ClassWriter classWriter = new ClassWriter(184);
classWriter.visitSource("", "");
classWriter.toByteArray();
Test 16: 
ClassWriter classWriter = new ClassWriter(635);
classWriter.visit(3122, (-1167), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", (String[]) null);
classWriter.toByteArray();
Test 17: 
ClassWriter classWriter = new ClassWriter(635);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "";
stringArray[6] = "";
stringArray[7] = "";
classWriter.visit(20, (-159), "", "", "", stringArray);
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.toByteArray();
Test 19: 
ClassWriter classWriter = new ClassWriter((-1116));
Attribute attribute = new Attribute("`soMrkFg");
byte[] byteArray = new byte[6];
attribute.value = byteArray;
classWriter.visitAttribute(attribute);
classWriter.toByteArray();
Test 20: 
ClassWriter classWriter = new ClassWriter(982);
classWriter.newFieldItem("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
classWriter.newField("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
Test 21: 
ClassWriter classWriter = new ClassWriter((-4045));
classWriter.newMethodItem("org.apache.commons.io.filefilter.NotFileFilter", "InnerClasses", "*#<,", false);
Test 22: 
ClassWriter classWriter = new ClassWriter(1024);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
Test 23: 
ClassWriter classWriter = new ClassWriter(482);
classWriter.newInteger(482);
classWriter.newInteger(482);
Test 24: 
ClassWriter classWriter = new ClassWriter(641);
classWriter.newFloat(641);
classWriter.newFloat(641);
Test 25: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.newLong(978);
classWriter.newLong(978);
Test 26: 
ClassWriter classWriter = new ClassWriter(9);
classWriter.newDouble(99);
classWriter.newDouble(99);
Test 27: 
ClassWriter classWriter = new ClassWriter(247);
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
Test 28: 
ClassWriter classWriter = new ClassWriter(4611);
classWriter.visitOuterClass("INl", "~rffPKml<=", "~rffPKml<=");
classWriter.newNameType("~rffPKml<=", "~rffPKml<=");
Test 29: 
ClassWriter classWriter = new ClassWriter(11);
classWriter.addType("in");
classWriter.addType("in");
Test 30: 
ClassWriter classWriter = new ClassWriter(1101);
classWriter.addUninitializedType("Lky0-5", 1101);
classWriter.addUninitializedType("Lky0-5", 1101);
Test 31: 
ClassWriter classWriter = new ClassWriter((-980));
classWriter.addType("RuntimeInvisibleAnnotations");
classWriter.addUninitializedType("RuntimeInvisibleAnnotations", 1);
Test 32: 
ClassWriter classWriter = new ClassWriter(1101);
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
classWriter.addUninitializedType("", 1541);
Test 33: 
ClassWriter classWriter = new ClassWriter(19);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "java/lang/Object");
Test 34: 
ClassWriter classWriter = new ClassWriter(1101);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
Test 35: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.Label");
Test 36: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitField((-2539), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
classWriter.toByteArray();
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));
Test 37: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.visitEnd();
Test 38: 
ClassWriter classWriter = new ClassWriter((-698));
classWriter.newClass("");
Test 39: 
ClassWriter classWriter = new ClassWriter(39);
String[] stringArray = new String[0];
classWriter.visit((-1), 39, "%~", "The size must be non-negative", "Synthetic", stringArray);
classWriter.newUTF8("Synthetic");
Test 40: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.newNameType("}S-,d.JkqNAAH4s#", "}S-,d.JkqNAAH4s#");
Test 41: 
ClassWriter classWriter = new ClassWriter((-698));
classWriter.index = (-698);
classWriter.newClass("");
Test 42: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.newClassItem("i8=^v3E2s");
Test 43: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newConst("N+(,N(g6");
Test 44: 
ClassWriter classWriter = new ClassWriter(1101);
Character valueOf = Character.valueOf(',');
classWriter.newConst(valueOf);
Test 45: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.index = (-12);
classWriter.newField("", "m{+)tn{tC", "['n");
Test 46: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true);
Test 47: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.index = (-170);
classWriter.newNameType("LocalVariableTable", "LocalVariableTable");
Test 48: 
ClassWriter classWriter = new ClassWriter(1425);
classWriter.index = (-1730);
classWriter.newUTF8("");
Test 49: 
ClassWriter classWriter = new ClassWriter(978);
// Undeclared exception!
try { 
  classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.PrefixFileFilter", "SourceDebugExtension");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: Class 'SourceDebugExtension.class' should be in target project, but could not be found!
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 50: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.addUninitializedType("N+(,N(g6", 13);
classWriter.addType("4y#VYoQ(Z~==");
// Undeclared exception!
try { 
  classWriter.getMergedType(2, 2);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: Class '4y#VYoQ(Z~==.class' should be in target project, but could not be found!
   //
   verifyException("wheel.asm.ClassWriter", e);
}


* Minimizing test suite
[MASTER] 01:58:11.759 [logback-1] WARN  TimeController - Already entered in phase: MINIMIZATION. This will mess up the timing calculations.
* test suite isTestSuite: 53
Test 0: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitField((-2539), "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "wheel.asm.ClassWriter");
classWriter.toByteArray();
Test 1: 
ClassReader classReader = new ClassReader("java/lang/Object");
ClassWriter classWriter = new ClassWriter(classReader, 2);
classWriter.newFloat(1);
Test 2: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.visitEnd();
Test 3: 
ClassWriter classWriter = new ClassWriter((-3372));
classWriter.visit((-994), 1, "AC@@Vm^*G:G)#", (String) null, "", (String[]) null);
Test 4: 
ClassWriter classWriter = new ClassWriter(5);
String[] stringArray = new String[1];
// Undeclared exception!
try { 
  classWriter.visit(1000, 5, "", "${D2M0DJ9Z`l)I", (String) null, stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 5: 
ClassWriter classWriter = new ClassWriter(39);
String[] stringArray = new String[0];
classWriter.visit((-1), 39, "%~", "The size must be non-negative", "Synthetic", stringArray);
classWriter.newUTF8("Synthetic");
Test 6: 
ClassWriter classWriter = new ClassWriter(1120);
String[] stringArray = new String[3];
stringArray[0] = "";
stringArray[1] = ".5@s{l'Q<\"QFLOKV";
stringArray[2] = ".5@s{l'Q<\"QFLOKV";
classWriter.visit(1120, 3088, "", ".5@s{l'Q<\"QFLOKV", "", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 7: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.visitSource((String) null, "}S-,d.JkqNAAH4s#");
Test 8: 
ClassWriter classWriter = new ClassWriter((-375));
classWriter.visitSource("", (String) null);
classWriter.toByteArray();
Test 9: 
ClassWriter classWriter = new ClassWriter(635);
classWriter.visitOuterClass("", (String) null, (String) null);
Test 10: 
ClassWriter classWriter = new ClassWriter(31);
classWriter.visitOuterClass("", "SourceFile", (String) null);
classWriter.toByteArray();
Test 11: 
ClassWriter classWriter = new ClassWriter(4611);
classWriter.visitOuterClass("INl", "~rffPKml<=", "~rffPKml<=");
classWriter.newNameType("~rffPKml<=", "~rffPKml<=");
Test 12: 
ClassWriter classWriter = new ClassWriter((-2005));
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 13: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.visitAnnotation("org.apache.commons.io.filefilter.FileFileFilter", true);
classWriter.toByteArray();
Test 14: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.visitInnerClass("EnclosingMethod", "wheel.asm.ClassWriter", "", (-2498));
Test 15: 
ClassWriter classWriter = new ClassWriter(1);
classWriter.visitInnerClass((String) null, "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", (String) null, 1);
Test 16: 
ClassWriter classWriter = new ClassWriter(1293);
classWriter.visitInnerClass("!Kt#,.Ek!]d", (String) null, "]`ni>", 1);
Test 17: 
ClassWriter classWriter = new ClassWriter(3716);
String[] stringArray = new String[1];
stringArray[0] = "";
classWriter.visitMethod((-1464), "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "", stringArray);
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter(635);
classWriter.visit(3122, (-1167), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "void", (String[]) null);
classWriter.toByteArray();
Test 19: 
ClassWriter classWriter = new ClassWriter(184);
classWriter.visitSource("", "");
classWriter.toByteArray();
Test 20: 
ClassWriter classWriter = new ClassWriter(635);
String[] stringArray = new String[8];
stringArray[0] = "";
stringArray[1] = "";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "";
stringArray[6] = "";
stringArray[7] = "";
classWriter.visit(20, (-159), "", "", "", stringArray);
classWriter.toByteArray();
Test 21: 
ClassWriter classWriter = new ClassWriter((-2539));
classWriter.visitInnerClass("X}3S6:RhL<+", "X}3S6:RhL<+", "F`mO8&r/G;", (-619));
classWriter.toByteArray();
Test 22: 
ClassWriter classWriter = new ClassWriter((-1116));
Attribute attribute = new Attribute("`soMrkFg");
byte[] byteArray = new byte[6];
attribute.value = byteArray;
classWriter.visitAttribute(attribute);
classWriter.toByteArray();
Test 23: 
ClassWriter classWriter = new ClassWriter(1120);
classWriter.invalidFrames = true;
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 24: 
ClassWriter classWriter = new ClassWriter(1101);
Character valueOf = Character.valueOf(',');
classWriter.newConst(valueOf);
Test 25: 
ClassWriter classWriter = new ClassWriter(635);
Item newFloat = classWriter.newFloat(635);
// Undeclared exception!
try { 
  classWriter.newConst(newFloat);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value wheel.asm.Item@6
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 26: 
ClassWriter classWriter = new ClassWriter(982);
classWriter.newFieldItem("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
classWriter.newField("AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#", "AC@@Vm^*`:G)#");
Test 27: 
ClassWriter classWriter = new ClassWriter((-4045));
classWriter.newMethodItem("org.apache.commons.io.filefilter.NotFileFilter", "InnerClasses", "*#<,", false);
Test 28: 
ClassWriter classWriter = new ClassWriter(1024);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
classWriter.newMethod("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", true);
Test 29: 
ClassWriter classWriter = new ClassWriter(482);
classWriter.newInteger(482);
classWriter.newInteger(482);
Test 30: 
ClassWriter classWriter = new ClassWriter(641);
classWriter.newFloat(641);
classWriter.newFloat(641);
Test 31: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.newLong(978);
classWriter.newLong(978);
Test 32: 
ClassWriter classWriter = new ClassWriter(9);
classWriter.newDouble(99);
classWriter.newDouble(99);
Test 33: 
ClassWriter classWriter = new ClassWriter(247);
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
classWriter.newConstItem("org.apache.commons.io.filefilter.SuffixFileFilter");
Test 34: 
ClassWriter classWriter = new ClassWriter(11);
classWriter.addType("in");
classWriter.addType("in");
Test 35: 
ClassWriter classWriter = new ClassWriter(1101);
classWriter.addUninitializedType("Lky0-5", 1101);
classWriter.addUninitializedType("Lky0-5", 1101);
Test 36: 
ClassWriter classWriter = new ClassWriter((-980));
classWriter.addType("RuntimeInvisibleAnnotations");
classWriter.addUninitializedType("RuntimeInvisibleAnnotations", 1);
Test 37: 
ClassWriter classWriter = new ClassWriter(1101);
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
classWriter.addUninitializedType("", 1541);
Test 38: 
ClassWriter classWriter = new ClassWriter(19);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "java/lang/Object");
Test 39: 
ClassWriter classWriter = new ClassWriter(1101);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter");
Test 40: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.Label");
Test 41: 
ClassWriter classWriter = new ClassWriter((-698));
classWriter.newClass("");
Test 42: 
ClassWriter classWriter = new ClassWriter(1425);
classWriter.newUTF8("");
Test 43: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.newNameType("}S-,d.JkqNAAH4s#", "}S-,d.JkqNAAH4s#");
Test 44: 
ClassWriter classWriter = new ClassWriter((-698));
classWriter.index = (-698);
classWriter.newClass("");
Test 45: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.newClassItem("i8=^v3E2s");
Test 46: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newConst("N+(,N(g6");
Test 47: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.index = (-12);
classWriter.newField("", "m{+)tn{tC", "['n");
Test 48: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.index = (-775);
classWriter.newMethod("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "u3HyUw", "u3HyUw", true);
Test 49: 
ClassWriter classWriter = new ClassWriter(978);
classWriter.index = (-170);
classWriter.newNameType("LocalVariableTable", "LocalVariableTable");
Test 50: 
ClassWriter classWriter = new ClassWriter(1425);
classWriter.index = (-1730);
classWriter.newUTF8("");
Test 51: 
ClassWriter classWriter = new ClassWriter(978);
// Undeclared exception!
try { 
  classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.PrefixFileFilter", "SourceDebugExtension");
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: Class 'SourceDebugExtension.class' should be in target project, but could not be found!
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 52: 
ClassWriter classWriter = new ClassWriter((-3396));
classWriter.addUninitializedType("N+(,N(g6", 13);
classWriter.addType("4y#VYoQ(Z~==");
// Undeclared exception!
try { 
  classWriter.getMergedType(2, 2);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: Class '4y#VYoQ(Z~==.class' should be in target project, but could not be found!
   //
   verifyException("wheel.asm.ClassWriter", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 174
* Number of covered goals: 159
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 345
* Number of covered goals: 325
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 49%
* Total number of goals: 55
* Number of covered goals: 27
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 174
* Number of covered goals: 159
* Generated 53 tests with total length 166
* Resulting test suite's coverage: 85% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 01:58:12.100 [logback-1] WARN  TimeController - Already entered in phase: COVERAGE_ANALYSIS. This will mess up the timing calculations.
* Resulting test suite's mutation score: 17%
[MASTER] 01:58:31.323 [logback-1] WARN  TimeController - Already entered in phase: ASSERTION_GENERATION. This will mess up the timing calculations.
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.079 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.124 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.199 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.200 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.250 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.251 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.305 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.306 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.367 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.368 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.537 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.538 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.624 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.626 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.683 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.685 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.731 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.733 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.779 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.780 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.823 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.824 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.870 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.871 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.927 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.928 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:34.986 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:34.987 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.042 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.046 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.111 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.113 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.218 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.219 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.343 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.345 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.414 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.415 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.467 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.470 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.525 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.526 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.581 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.583 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.652 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.654 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.725 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.726 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.812 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.813 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.881 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:35.885 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:35.974 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 01:58:35.975 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.086 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.092 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.153 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.154 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.233 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.235 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.328 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.331 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.383 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
[MASTER] 01:58:36.384 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.431 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.432 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.509 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.509 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.609 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.610 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.668 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.669 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.715 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.716 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.762 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.763 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.818 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.819 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.869 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.872 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.925 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.926 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:36.974 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:36.975 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:37.032 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:37.033 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:37.080 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:37.081 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:37.129 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:37.131 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:58:37.216 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:37.218 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
[MASTER] 01:58:38.363 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:38.364 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
[MASTER] 01:58:39.365 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/tmp/EvoSuite_pathingJar7991659958447300092.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/root/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:58:39.366 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7991659958447300092.jar
* Writing tests to file
[MASTER] 01:58:39.367 [logback-1] WARN  TimeController - Already entered in phase: JUNIT_CHECK. This will mess up the timing calculations.
* Writing JUnit test case 'ClassWriter_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 10 called: 9 to improve: false
** Write a test suite: 15 called: 10 to improve: false
** Write a test suite: 16 called: 11 to improve: false
** Write a test suite: 17 called: 12 to improve: false
** Write a test suite: 18 called: 13 to improve: false
** Write a test suite: 20 called: 14 to improve: false
** Write a test suite: 22 called: 15 to improve: false
** Write a test suite: 24 called: 16 to improve: false
** Write a test suite: 25 called: 17 to improve: false
** Write a test suite: 26 called: 18 to improve: false
** Write a test suite: 27 called: 19 to improve: false
** Write a test suite: 28 called: 20 to improve: false
** Write a test suite: 31 called: 21 to improve: false
** Write a test suite: 32 called: 22 to improve: false
** Write a test suite: 37 called: 23 to improve: false
** Write a test suite: 38 called: 24 to improve: false
** Write a test suite: 39 called: 25 to improve: false
** Write a test suite: 40 called: 26 to improve: false
** Write a test suite: 41 called: 27 to improve: false
** Write a test suite: 42 called: 28 to improve: false
** Write a test suite: 43 called: 29 to improve: false
** Write a test suite: 45 called: 30 to improve: false
* Writing JUnit test case 'ClassWriter_Original_ESTest' to evosuite-tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 1 called: 1 to improve: false
** Write a test suite: 2 called: 2 to improve: false
** Write a test suite: 3 called: 3 to improve: false
** Write a test suite: 4 called: 4 to improve: false
** Write a test suite: 5 called: 5 to improve: false
** Write a test suite: 6 called: 6 to improve: false
** Write a test suite: 7 called: 7 to improve: false
** Write a test suite: 8 called: 8 to improve: false
** Write a test suite: 9 called: 9 to improve: false
** Write a test suite: 10 called: 10 to improve: false
** Write a test suite: 11 called: 11 to improve: false
** Write a test suite: 12 called: 12 to improve: false
** Write a test suite: 13 called: 13 to improve: false
** Write a test suite: 14 called: 14 to improve: false
** Write a test suite: 15 called: 15 to improve: false
** Write a test suite: 16 called: 16 to improve: false
** Write a test suite: 17 called: 17 to improve: false
** Write a test suite: 18 called: 18 to improve: false
** Write a test suite: 19 called: 19 to improve: false
** Write a test suite: 20 called: 20 to improve: false
** Write a test suite: 21 called: 21 to improve: false
** Write a test suite: 22 called: 22 to improve: false
** Write a test suite: 23 called: 23 to improve: false
** Write a test suite: 24 called: 24 to improve: false
** Write a test suite: 25 called: 25 to improve: false
** Write a test suite: 26 called: 26 to improve: false
** Write a test suite: 27 called: 27 to improve: false
** Write a test suite: 28 called: 28 to improve: false
** Write a test suite: 29 called: 29 to improve: false
** Write a test suite: 30 called: 30 to improve: false
** Write a test suite: 31 called: 31 to improve: false
** Write a test suite: 32 called: 32 to improve: false
** Write a test suite: 33 called: 33 to improve: false
** Write a test suite: 34 called: 34 to improve: false
** Write a test suite: 35 called: 35 to improve: false
** Write a test suite: 36 called: 36 to improve: false
** Write a test suite: 37 called: 37 to improve: false
** Write a test suite: 38 called: 38 to improve: false
** Write a test suite: 39 called: 39 to improve: false
** Write a test suite: 40 called: 40 to improve: false
** Write a test suite: 41 called: 41 to improve: false
** Write a test suite: 42 called: 42 to improve: false
** Write a test suite: 43 called: 43 to improve: false
** Write a test suite: 44 called: 44 to improve: false
** Write a test suite: 45 called: 45 to improve: false
* Done!

* Computation finished
