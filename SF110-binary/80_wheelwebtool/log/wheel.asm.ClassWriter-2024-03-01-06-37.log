* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: wheel.asm.ClassWriter
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/80_wheelwebtool/evosuite-files/evosuite.properties
* Connecting to master process on port 2970
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 06:37:38.154 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 06:37:38.160 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 06:37:38.160 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 06:37:38.163 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 06:37:38.164 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 06:37:38.165 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 06:37:38.165 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 06:37:38.166 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 06:37:38.166 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 06:37:38.166 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 06:37:38.167 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 06:37:38.168 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 06:37:38.169 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 06:37:38.183 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 06:37:38.184 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class wheel.asm.ClassWriter
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 778
[Progress:>                             0%] [Cov:>                                  0%]* Using seed 1709275056017
* Starting evolution
* Initial Number of Goals in DynaMOSA = 346 / 778
[Progress:=>                            5%] [Cov:================>                  48%][Progress:=>                            5%] [Cov:=====================>             60%][Progress:=>                            6%] [Cov:=======================>           66%][Progress:=>                            6%] [Cov:=======================>           67%][Progress:=>                            6%] [Cov:=======================>           68%][Progress:=>                            6%] [Cov:=======================>           68%][Progress:==>                           7%] [Cov:=======================>           68%][Progress:==>                           7%] [Cov:========================>          71%][Progress:==>                           7%] [Cov:========================>          71%][Progress:==>                           7%] [Cov:=========================>         72%][Progress:==>                           7%] [Cov:=========================>         73%][Progress:===>                          13%] [Cov:=========================>         73%][Progress:===>                          13%] [Cov:=========================>         73%][Progress:===>                          13%] [Cov:=========================>         73%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:=========================>         74%][Progress:===>                          13%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:====>                         14%] [Cov:==========================>        75%][Progress:====>                         15%] [Cov:==========================>        75%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:====>                         15%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        76%][Progress:======>                       20%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       21%] [Cov:==========================>        77%][Progress:======>                       22%] [Cov:==========================>        77%][Progress:======>                       22%] [Cov:==========================>        77%][Progress:======>                       22%] [Cov:==========================>        77%][Progress:======>                       22%] [Cov:==========================>        77%][Progress:========>                     27%] [Cov:==========================>        77%][Progress:========>                     27%] [Cov:==========================>        77%][Progress:========>                     27%] [Cov:==========================>        77%][Progress:========>                     27%] [Cov:==========================>        77%][Progress:========>                     27%] [Cov:==========================>        77%][Progress:========>                     27%] [Cov:==========================>        77%][Progress:========>                     27%] [Cov:==========================>        77%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     28%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:========>                     29%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:===========>                  39%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:============>                 40%] [Cov:===========================>       79%][Progress:=============>                45%] [Cov:============================>      81%][Progress:===============>              50%] [Cov:============================>      81%][Progress:===============>              50%] [Cov:============================>      81%][Progress:===============>              51%] [Cov:============================>      81%][Progress:===============>              51%] [Cov:============================>      81%][Progress:===============>              51%] [Cov:============================>      81%][Progress:===============>              51%] [Cov:============================>      81%][Progress:===============>              51%] [Cov:============================>      81%][Progress:===============>              51%] [Cov:============================>      81%][Progress:===============>              51%] [Cov:============================>      81%][Progress:===============>              52%] [Cov:============================>      81%][Progress:===============>              52%] [Cov:============================>      81%][Progress:===============>              52%] [Cov:============================>      81%][Progress:=================>            57%] [Cov:============================>      81%][Progress:==================>           62%] [Cov:============================>      81%][Progress:==================>           62%] [Cov:============================>      81%][Progress:==================>           62%] [Cov:============================>      81%][Progress:==================>           62%] [Cov:============================>      81%][Progress:==================>           62%] [Cov:============================>      81%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:==================>           63%] [Cov:============================>      82%][Progress:===================>          64%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:====================>         69%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       74%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:======================>       75%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     80%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     81%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:========================>     82%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   87%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   88%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:==========================>   89%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:===========================>  90%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 95%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:============================>      82%][Progress:============================> 96%] [Cov:=============================>     83%][Progress:============================> 96%] [Cov:=============================>     83%][Progress:============================> 96%] [Cov:=============================>     83%][Progress:==============================100%] [Cov:=============================>     83%]
* Search finished after 102s and 189 generations, 60838 statements, best individual has fitness: 86.0
* Generated before the refinement 47 tests with total length 147
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: newField(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newField = classWriter.newField("java/lang/Object", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter")
test data is: ClassWriter classWriter = new ClassWriter(2);
classWriter.newField("java/lang/Object", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newField("java/lang/Object", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
        // The "java/lang/Object" represents the type of field being added.
        // The "wheel.asm.FieldWriter" represents the name of the field being added.
        // The "wheel.asm.FieldWriter" is a descriptor for the field that indicates its type, such as int or String. }}
    }
}
statement is: classWriter.newField("java/lang/Object", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newField("java/lang/Object", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter") target is: classWriter method is: newField(java.lang.String,java.lang.String,java.lang.String)
statement is: // The "java/lang/Object" represents the type of field being added., class spoon.support.reflect.code.CtCommentImpl
statement is: // The "wheel.asm.FieldWriter" represents the name of the field being added., class spoon.support.reflect.code.CtCommentImpl
statement is: // The "wheel.asm.FieldWriter" is a descriptor for the field that indicates its type, such as int or String. }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-8))
statement is: visitField(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Lwheel/asm/FieldVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter visitField = (FieldWriter)classWriter.visitField((-8), "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable")
statement is: newConst(Ljava/lang/Object;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newConst = classWriter.newConst("java/lang/Throwable")
test data is: ClassWriter classWriter = new ClassWriter((-8));
classWriter.visitField((-8), "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable");
classWriter.newConst("java/lang/Throwable");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitField(42, "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable");
        classWriter.newConst("java/lang/Throwable");
    }
}
statement is: classWriter.visitField(42, "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitField(42, "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable") target is: classWriter method is: visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
statement is: classWriter.newConst("java/lang/Throwable"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConst("java/lang/Throwable") target is: classWriter method is: newConst(java.lang.String)
statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 8)
statement is: newUTF8(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newUTF8 = classWriter.newUTF8("wheel.asm.ClassWriter")
test data is: ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
classWriter.newUTF8("wheel.asm.ClassWriter");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(25)
statement is: org.evosuite.testcase.statements.ArrayStatement@55689405 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[3]
statement is: org.evosuite.testcase.statements.AssignmentStatement@f1b9765a type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "The wildcard array must not be null"
statement is: org.evosuite.testcase.statements.AssignmentStatement@19deaebb type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "sazz(NASdLCta{"
statement is: org.evosuite.testcase.statements.AssignmentStatement@572e5a31 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "The wildcard array must not be null"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(37, 177, "sazz(NASdLCta{", "sazz(NASdLCta{", "The wildcard array must not be null", arg5)
statement is: org.evosuite.testcase.statements.AssignmentStatement@eec64f19 type is: class org.evosuite.testcase.statements.AssignmentStatement return type boolean
statement code is: classWriter.invalidFrames = true
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(25);
String[] stringArray = new String[3];
stringArray[0] = "The wildcard array must not be null";
stringArray[1] = "sazz(NASdLCta{";
stringArray[2] = "The wildcard array must not be null";
classWriter.visit(37, 177, "sazz(NASdLCta{", "sazz(NASdLCta{", "The wildcard array must not be null", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[3];
        stringArray[0] = "The wildcard array must not be null";
        stringArray[1] = "sazz(NASdLCta{";
        stringArray[2] = "The wildcard array must not be null";
    }
}
statement is: String[] stringArray = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[3] isAssignment: false Array: new String[3] Elements: []
lengths: [3] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "The wildcard array must not be null", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The wildcard array must not be null" Ct is: stringArray[0] = "The wildcard array must not be null"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@1c3da70
statement is: stringArray[1] = "sazz(NASdLCta{", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"sazz(NASdLCta{" Ct is: stringArray[1] = "sazz(NASdLCta{"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@daf47eb
statement is: stringArray[2] = "The wildcard array must not be null", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The wildcard array must not be null" Ct is: stringArray[2] = "The wildcard array must not be null"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@ea86186a
* this is vulnerable: String string = "The wildcard array must not be null"
* this is vulnerable: String string = "sazz(NASdLCta{"
* this is vulnerable: String string = "The wildcard array must not be null"
TestCase is: String[] stringArray = new String[3];
String string = "The wildcard array must not be null";
String string = "sazz(NASdLCta{";
String string = "The wildcard array must not be null";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(46)
statement is: newConst(Ljava/lang/Object;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newConst = classWriter.newConst((Object) null)
test data is: ClassWriter classWriter = new ClassWriter(46);
classWriter.newConst((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newConst("This is a descriptive string that represents the value of the variable.");
    }
}
statement is: classWriter.newConst("This is a descriptive string that represents the value of the variable."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConst("This is a descriptive string that represents the value of the variable.") target is: classWriter method is: newConst(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1459))
statement is: org.evosuite.testcase.statements.ArrayStatement@e8f1747d type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[5]
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit((-2694), 20, "", (String) null, ":R[V(QR?/t", arg5)
test data is: ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[5];
classWriter.visit((-2694), 20, "", (String) null, ":R[V(QR?/t", stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[5];
        classWriter.visit(-2694, 20, "", ((String) (null)), "This is a sample class name", stringArray);
    }
}
statement is: String[] stringArray = new String[5], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [5] Ct is: String[] stringArray = new String[5] isAssignment: false Array: new String[5] Elements: []
lengths: [5] [5]
Their type are: class [Ljava.lang.String; String[]
statement is: classWriter.visit(-2694, 20, "", ((String) (null)), "This is a sample class name", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(-2694, 20, "", ((String) (null)), "This is a sample class name", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
TestCase is: String[] stringArray = new String[5];

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(27)
statement is: org.evosuite.testcase.statements.ArrayStatement@4857d089 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(27, 13, "G#wcWg$", "", (String) null, arg5)
test data is: ClassWriter classWriter = new ClassWriter(27);
String[] stringArray = new String[0];
classWriter.visit(27, 13, "G#wcWg$", "", (String) null, stringArray);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[0];
        classWriter.visit(27, 13, "HelloWorld", "", ((String) (null)), stringArray);
    }
}
statement is: String[] stringArray = new String[0], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [0] Ct is: String[] stringArray = new String[0] isAssignment: false Array: new String[0] Elements: []
lengths: [0] [0]
Their type are: class [Ljava.lang.String; String[]
statement is: classWriter.visit(27, 13, "HelloWorld", "", ((String) (null)), stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(27, 13, "HelloWorld", "", ((String) (null)), stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
TestCase is: String[] stringArray = new String[0];

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(24)
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(24, 24, "value ", "Synthetic", "", (String[]) null)
test data is: ClassWriter classWriter = new ClassWriter(24);
classWriter.visit(24, 24, "value ", "Synthetic", "", (String[]) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visit(24, 24, "Hello World!", "Synthetic", "", ((String[]) (null)));
    }
}
statement is: classWriter.visit(24, 24, "Hello World!", "Synthetic", "", ((String[]) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(24, 24, "Hello World!", "Synthetic", "", ((String[]) (null))) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(46)
statement is: visitSource(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitSource((String) null, "java/lang/Object")
test data is: ClassWriter classWriter = new ClassWriter(46);
classWriter.visitSource((String) null, "java/lang/Object");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data }}
    }
}
statement is: // Improved test data }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(23)
statement is: visitSource(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitSource("$$GZ~v>H", "$$GZ~v>H")
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(23);
classWriter.visitSource("$$GZ~v>H", "$$GZ~v>H");
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitSource("A very long and complex source code string", "A very long and complex source code string");
        classWriter.toByteArray();
    }
}
statement is: classWriter.visitSource("A very long and complex source code string", "A very long and complex source code string"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitSource("A very long and complex source code string", "A very long and complex source code string") target is: classWriter method is: visitSource(java.lang.String,java.lang.String)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(5)
statement is: visitSource(Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitSource(".qZ]N", (String) null)
test data is: ClassWriter classWriter = new ClassWriter(5);
classWriter.visitSource(".qZ]N", (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitSource("exampleCode", "com.example");
    }
}
statement is: classWriter.visitSource("exampleCode", "com.example"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitSource("exampleCode", "com.example") target is: classWriter method is: visitSource(java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1459))
statement is: visitOuterClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitOuterClass("D", (String) null, "c[g8E7L>xJt")
test data is: ClassWriter classWriter = new ClassWriter((-1459));
classWriter.visitOuterClass("D", (String) null, "c[g8E7L>xJt");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test with major version number 1
        int majorVersionNumber = 1;
        classWriter.setMajorVersionNumber(majorVersionNumber);
        // Test with major version number 2
        majorVersionNumber = 2;
        classWriter.setMajorVersionNumber(majorVersionNumber);
        // Test with major version number 3
        majorVersionNumber = 3;
        classWriter.setMajorVersionNumber(majorVersionNumber);
        // Test with major version number 4
        majorVersionNumber = 4;
        classWriter.setMajorVersionNumber(majorVersionNumber);
        // Test with major version number 5
        majorVersionNumber = 5;
        classWriter.setMajorVersionNumber(majorVersionNumber);
    }
}
statement is: // Test with major version number 1
int majorVersionNumber = 1, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: classWriter.setMajorVersionNumber(majorVersionNumber), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.setMajorVersionNumber(majorVersionNumber) target is: classWriter method is: setMajorVersionNumber(int)
statement is: // Test with major version number 2
majorVersionNumber = 2, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.setMajorVersionNumber(majorVersionNumber), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.setMajorVersionNumber(majorVersionNumber) target is: classWriter method is: setMajorVersionNumber(int)
statement is: // Test with major version number 3
majorVersionNumber = 3, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.setMajorVersionNumber(majorVersionNumber), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.setMajorVersionNumber(majorVersionNumber) target is: classWriter method is: setMajorVersionNumber(int)
statement is: // Test with major version number 4
majorVersionNumber = 4, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.setMajorVersionNumber(majorVersionNumber), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.setMajorVersionNumber(majorVersionNumber) target is: classWriter method is: setMajorVersionNumber(int)
statement is: // Test with major version number 5
majorVersionNumber = 5, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.setMajorVersionNumber(majorVersionNumber), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.setMajorVersionNumber(majorVersionNumber) target is: classWriter method is: setMajorVersionNumber(int)
* this is vulnerable: int _int = 1
TestCase is: int _int = 1;

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(285212684)
statement is: visitOuterClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitOuterClass("", "", (String) null)
test data is: ClassWriter classWriter = new ClassWriter(285212684);
classWriter.visitOuterClass("", "", (String) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        int primitiveInt = 3;// Changed from a random number to a more descriptive value

        double primitiveDouble = 3.14;// Changed from a random number to a more descriptive value

        String string = "hello world";// Changed from a random string to a more descriptive string

        char charValue = 'a';// Changed from a random character to a more descriptive character }}

    }
}
statement is: // Improved test data
int primitiveInt = 3// Changed from a random number to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double primitiveDouble = 3.14// Changed from a random number to a more descriptive value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String string = "hello world"// Changed from a random string to a more descriptive string
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'a'// Changed from a random character to a more descriptive character }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 3
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "hello world"
* this is vulnerable: char _char = 'a'
TestCase is: int _int = 3;
double _double = 3.14;
String string = "hello world";
char _char = 'a';

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(11)
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)classWriter.visitAnnotation("", false)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(11);
classWriter.visitAnnotation("", false);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitAnnotation("Ljava/lang/annotation/Target;", false);
        classWriter.toByteArray();
    }
}
statement is: classWriter.visitAnnotation("Ljava/lang/annotation/Target;", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitAnnotation("Ljava/lang/annotation/Target;", false) target is: classWriter method is: visitAnnotation(java.lang.String,boolean)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(46)
statement is: visitAnnotation(Ljava/lang/String;Z)Lwheel/asm/AnnotationVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.AnnotationWriter
statement code is: AnnotationWriter visitAnnotation = (AnnotationWriter)classWriter.visitAnnotation("#L", true)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(46);
classWriter.visitAnnotation("#L", true);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitAnnotation("Ljava/lang/Deprecated;", true);
        classWriter.toByteArray();
    }
}
statement is: classWriter.visitAnnotation("Ljava/lang/Deprecated;", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitAnnotation("Ljava/lang/Deprecated;", true) target is: classWriter method is: visitAnnotation(java.lang.String,boolean)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-12))
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass("EnclosingMethod", "[5mVa3cFlX", "[5mVa3cFlX", 22)
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass("EnclosingMethod", "java/lang/Throwable", "java/lang/Throwable", 2317)
test data is: ClassWriter classWriter = new ClassWriter((-12));
classWriter.visitInnerClass("EnclosingMethod", "[5mVa3cFlX", "[5mVa3cFlX", 22);
classWriter.visitInnerClass("EnclosingMethod", "java/lang/Throwable", "java/lang/Throwable", 2317);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        try {
            int a = 10;
            int b = 20;
            if (a > b) {
                System.out.println("The number is greater than the other.");
            } else {
                System.out.println("The numbers are equal or less than the other.");
            }
        } catch (Exception e) {
            System.out.println("An exception occurred: " + e.getMessage());
        }
    }
}
statement is: try {
    int a = 10;
    int b = 20;
    if (a > b) {
        System.out.println("The number is greater than the other.");
    } else {
        System.out.println("The numbers are equal or less than the other.");
    }
} catch (Exception e) {
    System.out.println("An exception occurred: " + e.getMessage());
}, class spoon.support.reflect.code.CtTryImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1286)
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass((String) null, (String) null, (String) null, 21)
test data is: ClassWriter classWriter = new ClassWriter(1286);
classWriter.visitInnerClass((String) null, (String) null, (String) null, 21);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1034)
statement is: visitField(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Lwheel/asm/FieldVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.FieldWriter
statement code is: FieldWriter visitField = (FieldWriter)classWriter.visitField((-809), "<_+I&$D;6L2", "<_+I&$D;6L2", (String) null, (Object) null)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(1034);
classWriter.visitField((-809), "<_+I&$D;6L2", "<_+I&$D;6L2", (String) null, (Object) null);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitField(809, "field1", "field1", ((String) (null)), ((Object) (null)));
        classWriter.toByteArray();
    }
}
statement is: classWriter.visitField(809, "field1", "field1", ((String) (null)), ((Object) (null))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitField(809, "field1", "field1", ((String) (null)), ((Object) (null))) target is: classWriter method is: visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(252)
statement is: org.evosuite.testcase.statements.ArrayStatement@1e176f77 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[4]
statement is: org.evosuite.testcase.statements.AssignmentStatement@40af82 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "E~Eyc9cW$?nq&!kx.["
statement is: org.evosuite.testcase.statements.AssignmentStatement@2917e56e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = ")WZ:\">ut"
statement is: org.evosuite.testcase.statements.AssignmentStatement@c5a92d3f type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = "E~Eyc9cW$?nq&!kx.["
statement is: org.evosuite.testcase.statements.AssignmentStatement@d7133b71 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = "E~Eyc9cW$?nq&!kx.["
statement is: visitMethod(ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Lwheel/asm/MethodVisitor; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.MethodWriter
statement code is: MethodWriter visitMethod = (MethodWriter)classWriter.visitMethod(252, "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", arg4)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(252);
String[] stringArray = new String[4];
stringArray[0] = "E~Eyc9cW$?nq&!kx.[";
stringArray[1] = ")WZ:\">ut";
stringArray[2] = "E~Eyc9cW$?nq&!kx.[";
stringArray[3] = "E~Eyc9cW$?nq&!kx.[";
classWriter.visitMethod(252, "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", stringArray);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[4];
        stringArray[0] = "This is a test";
        stringArray[1] = "Testing the method";
        stringArray[2] = "E~Eyc9cW$?nq&!kx.[";
        stringArray[3] = "The method is working properly";
        classWriter.visitMethod(252, "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", stringArray);
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[4], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [4] Ct is: String[] stringArray = new String[4] isAssignment: false Array: new String[4] Elements: []
lengths: [4] [4]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "This is a test", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"This is a test" Ct is: stringArray[0] = "This is a test"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2c7b8e81
statement is: stringArray[1] = "Testing the method", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Testing the method" Ct is: stringArray[1] = "Testing the method"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@fc8ce987
statement is: stringArray[2] = "E~Eyc9cW$?nq&!kx.[", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"E~Eyc9cW$?nq&!kx.[" Ct is: stringArray[2] = "E~Eyc9cW$?nq&!kx.["
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@d9867069
statement is: stringArray[3] = "The method is working properly", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The method is working properly" Ct is: stringArray[3] = "The method is working properly"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e44e5465
statement is: classWriter.visitMethod(252, "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitMethod(252, "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", stringArray) target is: classWriter method is: visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "This is a test"
* this is vulnerable: String string = "Testing the method"
* this is vulnerable: String string = "E~Eyc9cW$?nq&!kx.["
* this is vulnerable: String string = "The method is working properly"
TestCase is: String[] stringArray = new String[4];
String string = "This is a test";
String string = "Testing the method";
String string = "E~Eyc9cW$?nq&!kx.[";
String string = "The method is working properly";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(25)
statement is: visitOuterClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitOuterClass("2TK", "s2", "2TK")
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(25);
classWriter.visitOuterClass("2TK", "s2", "2TK");
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.toByteArray();
    }
}
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1459))
statement is: org.evosuite.testcase.statements.ArrayStatement@72b8121f type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[0]
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(2, (-1459), "The list of names must not be null", "", "The list of names must not be null", arg5)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[0];
classWriter.visit(2, (-1459), "The list of names must not be null", "", "The list of names must not be null", stringArray);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = "";
        classWriter.visit(2, 0, "The list of names must not be null", "", "The list of names must not be null", stringArray);
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = "", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: classWriter.visit(2, 0, "The list of names must not be null", "", "The list of names must not be null", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(2, 0, "The list of names must not be null", "", "The list of names must not be null", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = ""
TestCase is: String string = "";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1459))
statement is: org.evosuite.testcase.statements.ArrayStatement@15bce10c type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[6]
statement is: org.evosuite.testcase.statements.AssignmentStatement@ef1df86e type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[0] = "The list of names must not be null"
statement is: org.evosuite.testcase.statements.AssignmentStatement@4fca589 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[1] = "The list of names must not be null"
statement is: org.evosuite.testcase.statements.AssignmentStatement@4c85baf8 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[2] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@8869adf9 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[3] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@5f104e6b type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[4] = ""
statement is: org.evosuite.testcase.statements.AssignmentStatement@342bb5eb type is: class org.evosuite.testcase.statements.AssignmentStatement return type class java.lang.String
statement code is: stringArray[5] = "The list of names must not be null"
statement is: visit(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visit(2537, (-1459), "", "The list of names must not be null", "", arg5)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[6];
stringArray[0] = "The list of names must not be null";
stringArray[1] = "The list of names must not be null";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "The list of names must not be null";
classWriter.visit(2537, (-1459), "", "The list of names must not be null", "", stringArray);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String[] stringArray = new String[6];
        stringArray[0] = "The list of names must not be null";
        stringArray[1] = "The list of names must not be empty";
        stringArray[2] = "John Doe";
        stringArray[3] = "Jane Smith";
        stringArray[4] = "Bob Johnson";
        stringArray[5] = "Alice Brown";
        classWriter.visit(2021, 1000, "", "The list of names must not be null", "", stringArray);
        classWriter.toByteArray();
    }
}
statement is: String[] stringArray = new String[6], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [6] Ct is: String[] stringArray = new String[6] isAssignment: false Array: new String[6] Elements: []
lengths: [6] [6]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray[0] = "The list of names must not be null", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The list of names must not be null" Ct is: stringArray[0] = "The list of names must not be null"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@19be944e
statement is: stringArray[1] = "The list of names must not be empty", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"The list of names must not be empty" Ct is: stringArray[1] = "The list of names must not be empty"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@a9aea946
statement is: stringArray[2] = "John Doe", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"John Doe" Ct is: stringArray[2] = "John Doe"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@86028aca
statement is: stringArray[3] = "Jane Smith", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[3] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Jane Smith" Ct is: stringArray[3] = "Jane Smith"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@e9c945e2
statement is: stringArray[4] = "Bob Johnson", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[4] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Bob Johnson" Ct is: stringArray[4] = "Bob Johnson"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@7848524
statement is: stringArray[5] = "Alice Brown", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray[5] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"Alice Brown" Ct is: stringArray[5] = "Alice Brown"
target : stringArray class spoon.support.reflect.code.CtLiteralImpl
TestCase Could not be added: org.evosuite.testcase.statements.AssignmentStatement@2faaec55
statement is: classWriter.visit(2021, 1000, "", "The list of names must not be null", "", stringArray), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visit(2021, 1000, "", "The list of names must not be null", "", stringArray) target is: classWriter method is: visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
* this is vulnerable: String string = "The list of names must not be null"
* this is vulnerable: String string = "The list of names must not be empty"
* this is vulnerable: String string = "John Doe"
* this is vulnerable: String string = "Jane Smith"
* this is vulnerable: String string = "Bob Johnson"
* this is vulnerable: String string = "Alice Brown"
TestCase is: String[] stringArray = new String[6];
String string = "The list of names must not be null";
String string = "The list of names must not be empty";
String string = "John Doe";
String string = "Jane Smith";
String string = "Bob Johnson";
String string = "Alice Brown";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(292552704)
statement is: visitInnerClass(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitInnerClass("", "", "", 292552704)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(292552704);
classWriter.visitInnerClass("", "", "", 292552704);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.toByteArray();
    }
}
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(1483)
statement is: wheel.asm.Attribute(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.Attribute
statement code is: Attribute attribute = new Attribute("|(gcu~`l])8Z\"2Q")
statement is: visitAttribute(Lwheel/asm/Attribute;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitAttribute(arg0)
statement is: toByteArray()[B type is: class org.evosuite.testcase.statements.MethodStatement return type class [B
statement code is: byte[] byteArray = classWriter.toByteArray()
test data is: ClassWriter classWriter = new ClassWriter(1483);
Attribute attribute = new Attribute("|(gcu~`l])8Z\"2Q");
classWriter.visitAttribute(attribute);
classWriter.toByteArray();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Attribute attribute = new Attribute("A descriptive and representative string");
        classWriter.visitAttribute(attribute);
        classWriter.toByteArray();
    }
}
statement is: Attribute attribute = new Attribute("A descriptive and representative string"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classWriter.visitAttribute(attribute), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitAttribute(attribute) target is: classWriter method is: visitAttribute(Attribute)
statement is: classWriter.toByteArray(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.toByteArray() target is: classWriter method is: toByteArray()
TestCase is: String string = "A descriptive and representative string";
Attribute attribute = new Attribute(string);

statement is: wheel.asm.ClassReader(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassReader
statement code is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter")
statement is: wheel.asm.ClassWriter(Lwheel/asm/ClassReader;I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(arg0, 8)
statement is: valueOf(C)Ljava/lang/Character; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Character
statement code is: Character valueOf = Character.valueOf('z')
statement is: newConstItem(Ljava/lang/Object;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newConstItem = classWriter.newConstItem(arg0)
test data is: ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
Character valueOf = Character.valueOf('z');
classWriter.newConstItem(valueOf);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Character valueOf = Character.valueOf('z');
        classWriter.newConstItem(valueOf);
    }
}
statement is: Character valueOf = Character.valueOf('z'), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: Character.valueOf('z') target is: Character method is: valueOf(char)
Matched Method is: valueOf(C)Ljava/lang/Character;
statement is: classWriter.newConstItem(valueOf), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConstItem(valueOf) target is: classWriter method is: newConstItem(java.lang.Character)
TestCase is: char _char = 'z';
Character.valueOf(_char);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(25)
statement is: newFieldItem(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFieldItem = classWriter.newFieldItem("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N")
statement is: newField(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newField = classWriter.newField("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N")
test data is: ClassWriter classWriter = new ClassWriter(25);
classWriter.newFieldItem("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N");
classWriter.newField("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newFieldItem("Employee ID", "123456789", "123456789");
        classWriter.newField("Employee Name", "John Doe", "Jane Smith");
    }
}
statement is: classWriter.newFieldItem("Employee ID", "123456789", "123456789"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFieldItem("Employee ID", "123456789", "123456789") target is: classWriter method is: newFieldItem(java.lang.String,java.lang.String,java.lang.String)
statement is: classWriter.newField("Employee Name", "John Doe", "Jane Smith"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newField("Employee Name", "John Doe", "Jane Smith") target is: classWriter method is: newField(java.lang.String,java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(4)
statement is: newMethod(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newMethod = classWriter.newMethod("T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", false)
test data is: ClassWriter classWriter = new ClassWriter(4);
classWriter.newMethod("T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", false);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newMethod("myMethod", "T\"\"]E+2e@.(\u007f1", "T\"\"]E+2e@.(\u007f1", "T\"\"]E+2e@.(\u007f1", false);
    }
}
statement is: classWriter.newMethod("myMethod", "T\"\"]E+2e@.(\u007f1", "T\"\"]E+2e@.(\u007f1", "T\"\"]E+2e@.(\u007f1", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newMethod("myMethod", "T\"\"]E+2e@.(\u007f1", "T\"\"]E+2e@.(\u007f1", "T\"\"]E+2e@.(\u007f1", false) target is: classWriter method is: newMethod(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1124))
statement is: newMethodItem(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newMethodItem = classWriter.newMethodItem("_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", true)
statement is: newMethodItem(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newMethodItem = classWriter.newMethodItem("_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", true)
test data is: ClassWriter classWriter = new ClassWriter((-1124));
classWriter.newMethodItem("_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", true);
classWriter.newMethodItem("_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", true);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newMethodItem("Method1", "Param1", "ReturnType", true);
        classWriter.newMethodItem("Method2", "Param2", "ReturnType", false);
    }
}
statement is: classWriter.newMethodItem("Method1", "Param1", "ReturnType", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newMethodItem("Method1", "Param1", "ReturnType", true) target is: classWriter method is: newMethodItem(java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: classWriter.newMethodItem("Method2", "Param2", "ReturnType", false), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newMethodItem("Method2", "Param2", "ReturnType", false) target is: classWriter method is: newMethodItem(java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(142)
statement is: newInteger(I)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newInteger = classWriter.newInteger(142)
statement is: newInteger(I)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newInteger = classWriter.newInteger(142)
test data is: ClassWriter classWriter = new ClassWriter(142);
classWriter.newInteger(142);
classWriter.newInteger(142);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newInteger(123);
        classWriter.newInteger(123);
    }
}
statement is: classWriter.newInteger(123), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newInteger(123) target is: classWriter method is: newInteger(int)
statement is: classWriter.newInteger(123), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newInteger(123) target is: classWriter method is: newInteger(int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(41)
statement is: newFloat(F)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFloat = classWriter.newFloat(41)
statement is: newFloat(F)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newFloat = classWriter.newFloat(41)
test data is: ClassWriter classWriter = new ClassWriter(41);
classWriter.newFloat(41);
classWriter.newFloat(41);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newFloat(100.5F);
        classWriter.newFloat(-100.5F);
        classWriter.newFloat(0.0F);
        classWriter.newFloat(10000.9F);
        classWriter.newFloat(-10000.9F);
    }
}
statement is: classWriter.newFloat(100.5F), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFloat(100.5F) target is: classWriter method is: newFloat(float)
statement is: classWriter.newFloat(-100.5F), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFloat(-100.5F) target is: classWriter method is: newFloat(float)
statement is: classWriter.newFloat(0.0F), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFloat(0.0F) target is: classWriter method is: newFloat(float)
statement is: classWriter.newFloat(10000.9F), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFloat(10000.9F) target is: classWriter method is: newFloat(float)
statement is: classWriter.newFloat(-10000.9F), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newFloat(-10000.9F) target is: classWriter method is: newFloat(float)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(43)
statement is: newLong(J)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newLong = classWriter.newLong(43)
statement is: newLong(J)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newLong = classWriter.newLong(43)
test data is: ClassWriter classWriter = new ClassWriter(43);
classWriter.newLong(43);
classWriter.newLong(43);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newLong(1234567890);
        classWriter.newLong(0);
    }
}
statement is: classWriter.newLong(1234567890), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newLong(1234567890) target is: classWriter method is: newLong(int)
statement is: classWriter.newLong(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newLong(0) target is: classWriter method is: newLong(int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1723))
statement is: newDouble(D)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newDouble = classWriter.newDouble((-1723))
statement is: newDouble(D)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newDouble = classWriter.newDouble((-1723))
test data is: ClassWriter classWriter = new ClassWriter((-1723));
classWriter.newDouble((-1723));
classWriter.newDouble((-1723));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newDouble(0);
        classWriter.newDouble(0);
    }
}
statement is: classWriter.newDouble(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newDouble(0) target is: classWriter method is: newDouble(int)
statement is: classWriter.newDouble(0), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newDouble(0) target is: classWriter method is: newDouble(int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(25)
statement is: newNameType(Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newNameType = classWriter.newNameType("$a", "$a")
statement is: newNameType(Ljava/lang/String;Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newNameType = classWriter.newNameType("$a", "$a")
test data is: ClassWriter classWriter = new ClassWriter(25);
classWriter.newNameType("$a", "$a");
classWriter.newNameType("$a", "$a");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newNameType("$a", "$a");
        classWriter.newNameType("$a", "$a");
    }
}
statement is: classWriter.newNameType("$a", "$a"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newNameType("$a", "$a") target is: classWriter method is: newNameType(java.lang.String,java.lang.String)
statement is: classWriter.newNameType("$a", "$a"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newNameType("$a", "$a") target is: classWriter method is: newNameType(java.lang.String,java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2535)
statement is: addType(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addType = classWriter.addType("j/2QlV")
statement is: addType(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addType = classWriter.addType("j/2QlV")
test data is: ClassWriter classWriter = new ClassWriter(2535);
classWriter.addType("j/2QlV");
classWriter.addType("j/2QlV");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.addType("java.lang.String");
    }
}
statement is: classWriter.addType("java.lang.String"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addType("java.lang.String") target is: classWriter method is: addType(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1124))
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType("_'53xV4Fl_0}fZQY$", (-1124))
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType("_'53xV4Fl_0}fZQY$", (-1124))
test data is: ClassWriter classWriter = new ClassWriter((-1124));
classWriter.addUninitializedType("_'53xV4Fl_0}fZQY$", (-1124));
classWriter.addUninitializedType("_'53xV4Fl_0}fZQY$", (-1124));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.addUninitializedType("java.lang.String", -1124);
        classWriter.addUninitializedType("java.lang.Integer", -1124);
    }
}
statement is: classWriter.addUninitializedType("java.lang.String", -1124), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addUninitializedType("java.lang.String", -1124) target is: classWriter method is: addUninitializedType(java.lang.String,int)
statement is: classWriter.addUninitializedType("java.lang.Integer", -1124), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addUninitializedType("java.lang.Integer", -1124) target is: classWriter method is: addUninitializedType(java.lang.String,int)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1459))
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType("", (-1459))
statement is: addType(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addType = classWriter.addType("")
test data is: ClassWriter classWriter = new ClassWriter((-1459));
classWriter.addUninitializedType("", (-1459));
classWriter.addType("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.addUninitializedType("", 1024);
        classWriter.addType("");
    }
}
statement is: classWriter.addUninitializedType("", 1024), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addUninitializedType("", 1024) target is: classWriter method is: addUninitializedType(java.lang.String,int)
statement is: classWriter.addType(""), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addType("") target is: classWriter method is: addType(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-1459))
statement is: org.evosuite.testcase.statements.ArrayStatement@2697a083 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Lwheel.asm.Item;
statement code is: Item[] itemArray = new Item[1]
statement is: org.evosuite.testcase.statements.AssignmentStatement@d17e7df1 type is: class org.evosuite.testcase.statements.AssignmentStatement return type class [Lwheel.asm.Item;
statement code is: classWriter.typeTable = itemArray
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType("", (-1459))
test data is: ClassWriter classWriter = new ClassWriter((-1459));
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
classWriter.addUninitializedType("", (-1459));

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Item[] itemArray = new Item[1];
        classWriter.typeTable = itemArray;
        classWriter.addUninitializedType("", -1459);
    }
}
statement is: Item[] itemArray = new Item[1], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [1] Ct is: Item[] itemArray = new Item[1] isAssignment: false Array: new Item[1] Elements: []
lengths: [1] [1]
Their type are: class [Lwheel.asm.Item; Item[]
statement is: classWriter.typeTable = itemArray, class spoon.support.reflect.code.CtAssignmentImpl
statement is: classWriter.addUninitializedType("", -1459), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.addUninitializedType("", -1459) target is: classWriter method is: addUninitializedType(java.lang.String,int)
TestCase is: Item[] itemArray = new Item[1];

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(2)
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "java/lang/Throwable")
test data is: ClassWriter classWriter = new ClassWriter(2);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "java/lang/Throwable");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Arrange
        ClassWriter classWriter = new ClassWriter(2);
        String classA = "org.apache.commons.io.filefilter.DirectoryFileFilter";
        String classB = "java/lang/Throwable";
        // Act
        String commonSuperClass = classWriter.getCommonSuperClass(classA, classB);
        // Assert }}
    }
}
statement is: // Arrange
ClassWriter classWriter = new ClassWriter(2), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String classA = "org.apache.commons.io.filefilter.DirectoryFileFilter", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String classB = "java/lang/Throwable", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Act
String commonSuperClass = classWriter.getCommonSuperClass(classA, classB), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.getCommonSuperClass(classA, classB) target is: classWriter method is: getCommonSuperClass(java.lang.String,java.lang.String)
source statement: wheel.asm.ClassWriter(I)V callee: VariableReference: Statement 0, type wheel.asm.ClassWriterindex is: 1
Matched Method is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
statement is: // Assert }}, class spoon.support.reflect.code.CtCommentImpl
TestCase is: int _int = 2;
ClassWriter classWriter = new ClassWriter(_int);
String string = "org.apache.commons.io.filefilter.DirectoryFileFilter";
String string = "java/lang/Throwable";
((ClassWriter) _int).getCommonSuperClass(string, string);

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-12))
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("java/lang/Throwable", "java/lang/Throwable")
test data is: ClassWriter classWriter = new ClassWriter((-12));
classWriter.getCommonSuperClass("java/lang/Throwable", "java/lang/Throwable");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        String expectedResult = "java/lang/Object";
        String actualResult = classWriter.getCommonSuperClass("java/lang/Throwable", "java/lang/Throwable");
        assertEquals(expectedResult, actualResult);
    }
}
statement is: String expectedResult = "java/lang/Object", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String actualResult = classWriter.getCommonSuperClass("java/lang/Throwable", "java/lang/Throwable"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.getCommonSuperClass("java/lang/Throwable", "java/lang/Throwable") target is: classWriter method is: getCommonSuperClass(java.lang.String,java.lang.String)
statement is: assertEquals(expectedResult, actualResult), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(expectedResult, actualResult) target is:  method is: assertEquals(java.lang.String,java.lang.String)
* this is vulnerable: String string = "java/lang/Object"
TestCase is: String string = "java/lang/Object";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter((-53))
statement is: getCommonSuperClass(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String commonSuperClass = classWriter.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Object")
test data is: ClassWriter classWriter = new ClassWriter((-53));
classWriter.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Object");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int value1 = -1000;// This is a primitive integer variable with the value of -1000. It can be improved to show a more descriptive value, such as 5 or 234, that better represents the situation being tested.

        String stringValue1 = "abc";// This is a String variable with the value "abc". It can be improved to show a more descriptive value, such as "hello" or "goodbye", that better represents the situation being tested. }}

    }
}
statement is: int value1 = -1000// This is a primitive integer variable with the value of -1000. It can be improved to show a more descriptive value, such as 5 or 234, that better represents the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -1000
statement is: String stringValue1 = "abc"// This is a String variable with the value "abc". It can be improved to show a more descriptive value, such as "hello" or "goodbye", that better represents the situation being tested. }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "abc"
TestCase is: String string = "abc";

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(46)
statement is: visitEnd()V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: classWriter.visitEnd()
test data is: ClassWriter classWriter = new ClassWriter(46);
classWriter.visitEnd();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.visitEnd();
        // Improved test data:
        ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
        classWriter.visitEnd();
    }
}
statement is: classWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitEnd() target is: classWriter method is: visitEnd()
statement is: // Improved test data:
ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: classWriter.visitEnd(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.visitEnd() target is: classWriter method is: visitEnd()
source statement: wheel.asm.ClassWriter(I)V callee: VariableReference: Statement 0, type wheel.asm.ClassWriterindex is: 0
Matched Method is: visitEnd()V
TestCase is: ClassWriter classWriter = new ClassWriter(46);
classWriter.visitEnd();

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(46)
statement is: newClass(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newClass = classWriter.newClass("value ")
test data is: ClassWriter classWriter = new ClassWriter(46);
classWriter.newClass("value ");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data:
        int integerValue = 10;// Instead of using a primitive value, use a descriptive variable name and assign a more meaningful value.

        double doubleValue = 3.14;// Use a more precise value for the double variable.

        String stringValue = "Hello World!";// Use a more descriptive string value that better represents the situation being tested.

        char charValue = 'A';// Use a more specific character value that better represents the situation being tested. }}

    }
}
statement is: // Improved test data:
int integerValue = 10// Instead of using a primitive value, use a descriptive variable name and assign a more meaningful value.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: double doubleValue = 3.14// Use a more precise value for the double variable.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String stringValue = "Hello World!"// Use a more descriptive string value that better represents the situation being tested.
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: char charValue = 'A'// Use a more specific character value that better represents the situation being tested. }}
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: int _int = 10
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "Hello World!"
* this is vulnerable: char _char = 'A'
TestCase is: int _int = 10;
double _double = 3.14;
String string = "Hello World!";
char _char = 'A';

statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: newMethod(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newMethod = classWriter.newMethod("", "", "wheel.asm.Handler", true)
statement is: newUTF8(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newUTF8 = classWriter.newUTF8("wheel.asm.Handler")
test data is: ClassWriter classWriter = new ClassWriter(0);
classWriter.newMethod("", "", "wheel.asm.Handler", true);
classWriter.newUTF8("wheel.asm.Handler");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        classWriter.newMethod("handle", "(Ljava/lang/String;)V", "wheel.asm.Handler", true);
        classWriter.newUTF8("wheel.asm.Handler");
    }
}
statement is: // Improved test data
classWriter.newMethod("handle", "(Ljava/lang/String;)V", "wheel.asm.Handler", true), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
classWriter.newMethod("handle", "(Ljava/lang/String;)V", "wheel.asm.Handler", true) target is: classWriter method is: newMethod(java.lang.String,java.lang.String,java.lang.String,boolean)
statement is: classWriter.newUTF8("wheel.asm.Handler"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newUTF8("wheel.asm.Handler") target is: classWriter method is: newUTF8(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: newConstItem(Ljava/lang/Object;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newConstItem = classWriter.newConstItem("T\"\"]E+2e@.(1")
statement is: newConstItem(Ljava/lang/Object;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newConstItem = classWriter.newConstItem("T\"\"]E+2e@.(1")
test data is: ClassWriter classWriter = new ClassWriter(0);
classWriter.newConstItem("T\"\"]E+2e@.(1");
classWriter.newConstItem("T\"\"]E+2e@.(1");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.newConstItem("The quick brown fox jumps over the lazy dog.");
        classWriter.newConstItem("The quick brown fox jumps over the lazy dog.");
    }
}
statement is: classWriter.newConstItem("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConstItem("The quick brown fox jumps over the lazy dog.") target is: classWriter method is: newConstItem(java.lang.String)
statement is: classWriter.newConstItem("The quick brown fox jumps over the lazy dog."), class spoon.support.reflect.code.CtInvocationImpl
invocation is: classWriter.newConstItem("The quick brown fox jumps over the lazy dog.") target is: classWriter method is: newConstItem(java.lang.String)
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(7)
statement is: org.evosuite.testcase.statements.AssignmentStatement@d4e0ed7d type is: class org.evosuite.testcase.statements.AssignmentStatement return type int
statement code is: classWriter.index = (-2151)
statement is: newClass(Ljava/lang/String;)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int newClass = classWriter.newClass("6M")
test data is: ClassWriter classWriter = new ClassWriter(7);
classWriter.index = (-2151);
classWriter.newClass("6M");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        classWriter.index = 123456;
    }
}
statement is: classWriter.index = 123456, class spoon.support.reflect.code.CtAssignmentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(0)
statement is: newClassItem(Ljava/lang/String;)Lwheel/asm/Item; type is: class org.evosuite.testcase.statements.MethodStatement return type class wheel.asm.Item
statement code is: Item newClassItem = classWriter.newClassItem("")
test data is: ClassWriter classWriter = new ClassWriter(0);
classWriter.newClassItem("");

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data: }}
    }
}
statement is: // Improved test data: }}, class spoon.support.reflect.code.CtCommentImpl
statement is: wheel.asm.ClassWriter(I)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class wheel.asm.ClassWriter
statement code is: ClassWriter classWriter = new ClassWriter(25)
statement is: addUninitializedType(Ljava/lang/String;I)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int addUninitializedType = classWriter.addUninitializedType("iFr5;p:", 25)
statement is: getMergedType(II)I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int mergedType = classWriter.getMergedType(1, 1)
test data is: ClassWriter classWriter = new ClassWriter(25);
classWriter.addUninitializedType("iFr5;p:", 25);
classWriter.getMergedType(1, 1);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        int age = 30;
        String name = "John Doe";
        // Create a new instance of the class with the given age and name
        ClassWriter classWriter = new ClassWriter(age, name);
        // Add a new type to the class with the given name and type
        classWriter.addUninitializedType("iFr5;p:", 25);
        // Get the merged type of the class with the given index }}
    }
}
statement is: int age = 30, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String name = "John Doe", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: // Create a new instance of the class with the given age and name
ClassWriter classWriter = new ClassWriter(age, name), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: // Add a new type to the class with the given name and type
classWriter.addUninitializedType("iFr5;p:", 25), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add a new type to the class with the given name and type
classWriter.addUninitializedType("iFr5;p:", 25) target is: classWriter method is: addUninitializedType(java.lang.String,int)
statement is: // Get the merged type of the class with the given index }}, class spoon.support.reflect.code.CtCommentImpl
* this is vulnerable: int _int = 30
* this is vulnerable: String string = "John Doe"
TestCase is: int _int = 30;
String string = "John Doe";

* test suite isTestSuite: 64
Test 0: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.newField("java/lang/Object", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
Test 1: 
ClassWriter classWriter = new ClassWriter((-8));
classWriter.visitField((-8), "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable");
classWriter.newConst("java/lang/Throwable");
Test 2: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
classWriter.newUTF8("wheel.asm.ClassWriter");
Test 3: 
ClassWriter classWriter = new ClassWriter(25);
String[] stringArray = new String[3];
stringArray[0] = "The wildcard array must not be null";
stringArray[1] = "sazz(NASdLCta{";
stringArray[2] = "The wildcard array must not be null";
classWriter.visit(37, 177, "sazz(NASdLCta{", "sazz(NASdLCta{", "The wildcard array must not be null", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 4: 
ClassWriter classWriter = new ClassWriter(46);
// Undeclared exception!
try { 
  classWriter.newConst((Object) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value null
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 5: 
ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[5];
// Undeclared exception!
try { 
  classWriter.visit((-2694), 20, "", (String) null, ":R[V(QR?/t", stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 6: 
ClassWriter classWriter = new ClassWriter(27);
String[] stringArray = new String[0];
classWriter.visit(27, 13, "G#wcWg$", "", (String) null, stringArray);
Test 7: 
ClassWriter classWriter = new ClassWriter(24);
classWriter.visit(24, 24, "value ", "Synthetic", "", (String[]) null);
Test 8: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitSource((String) null, "java/lang/Object");
Test 9: 
ClassWriter classWriter = new ClassWriter(23);
classWriter.visitSource("$$GZ~v>H", "$$GZ~v>H");
classWriter.toByteArray();
Test 10: 
ClassWriter classWriter = new ClassWriter(5);
classWriter.visitSource(".qZ]N", (String) null);
Test 11: 
ClassWriter classWriter = new ClassWriter((-1459));
classWriter.visitOuterClass("D", (String) null, "c[g8E7L>xJt");
Test 12: 
ClassWriter classWriter = new ClassWriter(285212684);
classWriter.visitOuterClass("", "", (String) null);
Test 13: 
ClassWriter classWriter = new ClassWriter(11);
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 14: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitAnnotation("#L", true);
classWriter.toByteArray();
Test 15: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.visitInnerClass("EnclosingMethod", "[5mVa3cFlX", "[5mVa3cFlX", 22);
classWriter.visitInnerClass("EnclosingMethod", "java/lang/Throwable", "java/lang/Throwable", 2317);
Test 16: 
ClassWriter classWriter = new ClassWriter(1286);
classWriter.visitInnerClass((String) null, (String) null, (String) null, 21);
Test 17: 
ClassWriter classWriter = new ClassWriter(1034);
classWriter.visitField((-809), "<_+I&$D;6L2", "<_+I&$D;6L2", (String) null, (Object) null);
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter(252);
String[] stringArray = new String[4];
stringArray[0] = "E~Eyc9cW$?nq&!kx.[";
stringArray[1] = ")WZ:\">ut";
stringArray[2] = "E~Eyc9cW$?nq&!kx.[";
stringArray[3] = "E~Eyc9cW$?nq&!kx.[";
classWriter.visitMethod(252, "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", stringArray);
classWriter.toByteArray();
Test 19: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.visitOuterClass("2TK", "s2", "2TK");
classWriter.toByteArray();
Test 20: 
ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[0];
classWriter.visit(2, (-1459), "The list of names must not be null", "", "The list of names must not be null", stringArray);
classWriter.toByteArray();
Test 21: 
ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[6];
stringArray[0] = "The list of names must not be null";
stringArray[1] = "The list of names must not be null";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "The list of names must not be null";
classWriter.visit(2537, (-1459), "", "The list of names must not be null", "", stringArray);
classWriter.toByteArray();
Test 22: 
ClassWriter classWriter = new ClassWriter(292552704);
classWriter.visitInnerClass("", "", "", 292552704);
classWriter.toByteArray();
Test 23: 
ClassWriter classWriter = new ClassWriter(1483);
Attribute attribute = new Attribute("|(gcu~`l])8Z\"2Q");
classWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 24: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
Character valueOf = Character.valueOf('z');
classWriter.newConstItem(valueOf);
Test 25: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.newFieldItem("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N");
classWriter.newField("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N");
Test 26: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.newMethod("T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", false);
Test 27: 
ClassWriter classWriter = new ClassWriter((-1124));
classWriter.newMethodItem("_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", true);
classWriter.newMethodItem("_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", true);
Test 28: 
ClassWriter classWriter = new ClassWriter(142);
classWriter.newInteger(142);
classWriter.newInteger(142);
Test 29: 
ClassWriter classWriter = new ClassWriter(41);
classWriter.newFloat(41);
classWriter.newFloat(41);
Test 30: 
ClassWriter classWriter = new ClassWriter(43);
classWriter.newLong(43);
classWriter.newLong(43);
Test 31: 
ClassWriter classWriter = new ClassWriter((-1723));
classWriter.newDouble((-1723));
classWriter.newDouble((-1723));
Test 32: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.newNameType("$a", "$a");
classWriter.newNameType("$a", "$a");
Test 33: 
ClassWriter classWriter = new ClassWriter(2535);
classWriter.addType("j/2QlV");
classWriter.addType("j/2QlV");
Test 34: 
ClassWriter classWriter = new ClassWriter((-1124));
classWriter.addUninitializedType("_'53xV4Fl_0}fZQY$", (-1124));
classWriter.addUninitializedType("_'53xV4Fl_0}fZQY$", (-1124));
Test 35: 
ClassWriter classWriter = new ClassWriter((-1459));
classWriter.addUninitializedType("", (-1459));
classWriter.addType("");
Test 36: 
ClassWriter classWriter = new ClassWriter((-1459));
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
classWriter.addUninitializedType("", (-1459));
Test 37: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "java/lang/Throwable");
Test 38: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.getCommonSuperClass("java/lang/Throwable", "java/lang/Throwable");
Test 39: 
ClassWriter classWriter = new ClassWriter((-53));
classWriter.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Object");
Test 40: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitEnd();
Test 41: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.newClass("value ");
Test 42: 
ClassWriter classWriter = new ClassWriter(0);
classWriter.newMethod("", "", "wheel.asm.Handler", true);
classWriter.newUTF8("wheel.asm.Handler");
Test 43: 
ClassWriter classWriter = new ClassWriter(0);
classWriter.newConstItem("T\"\"]E+2e@.(1");
classWriter.newConstItem("T\"\"]E+2e@.(1");
Test 44: 
ClassWriter classWriter = new ClassWriter(7);
classWriter.index = (-2151);
classWriter.newClass("6M");
Test 45: 
ClassWriter classWriter = new ClassWriter(0);
classWriter.newClassItem("");
Test 46: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.addUninitializedType("iFr5;p:", 25);
// Undeclared exception!
try { 
  classWriter.getMergedType(1, 1);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: iFr5;p:
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 47: 
String[] stringArray = new String[3];

Test 48: 
String[] stringArray = new String[5];

Test 49: 
String[] stringArray = new String[0];

Test 50: 

Test 51: 

Test 52: 
String[] stringArray = new String[4];

Test 53: 

Test 54: 
String[] stringArray = new String[6];

Test 55: 
Attribute attribute = new Attribute("A descriptive and representative string");

Test 56: 
Character.valueOf('z');

Test 57: 
Item[] itemArray = new Item[1];

Test 58: 
ClassWriter classWriter = new ClassWriter(2);
((ClassWriter)2).getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "java/lang/Throwable");

Test 59: 

Test 60: 

Test 61: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitEnd();

Test 62: 

Test 63: 


* Generated after the refinement and before minimization 64 tests with total length 159
* test suite isTestSuite: 64
Test 0: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.newField("java/lang/Object", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
Test 1: 
ClassWriter classWriter = new ClassWriter((-8));
classWriter.visitField((-8), "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable");
classWriter.newConst("java/lang/Throwable");
Test 2: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
classWriter.newUTF8("wheel.asm.ClassWriter");
Test 3: 
ClassWriter classWriter = new ClassWriter(25);
String[] stringArray = new String[3];
stringArray[0] = "The wildcard array must not be null";
stringArray[1] = "sazz(NASdLCta{";
stringArray[2] = "The wildcard array must not be null";
classWriter.visit(37, 177, "sazz(NASdLCta{", "sazz(NASdLCta{", "The wildcard array must not be null", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 4: 
ClassWriter classWriter = new ClassWriter(46);
// Undeclared exception!
try { 
  classWriter.newConst((Object) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value null
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 5: 
ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[5];
// Undeclared exception!
try { 
  classWriter.visit((-2694), 20, "", (String) null, ":R[V(QR?/t", stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 6: 
ClassWriter classWriter = new ClassWriter(27);
String[] stringArray = new String[0];
classWriter.visit(27, 13, "G#wcWg$", "", (String) null, stringArray);
Test 7: 
ClassWriter classWriter = new ClassWriter(24);
classWriter.visit(24, 24, "value ", "Synthetic", "", (String[]) null);
Test 8: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitSource((String) null, "java/lang/Object");
Test 9: 
ClassWriter classWriter = new ClassWriter(23);
classWriter.visitSource("$$GZ~v>H", "$$GZ~v>H");
classWriter.toByteArray();
Test 10: 
ClassWriter classWriter = new ClassWriter(5);
classWriter.visitSource(".qZ]N", (String) null);
Test 11: 
ClassWriter classWriter = new ClassWriter((-1459));
classWriter.visitOuterClass("D", (String) null, "c[g8E7L>xJt");
Test 12: 
ClassWriter classWriter = new ClassWriter(285212684);
classWriter.visitOuterClass("", "", (String) null);
Test 13: 
ClassWriter classWriter = new ClassWriter(11);
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 14: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitAnnotation("#L", true);
classWriter.toByteArray();
Test 15: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.visitInnerClass("EnclosingMethod", "[5mVa3cFlX", "[5mVa3cFlX", 22);
classWriter.visitInnerClass("EnclosingMethod", "java/lang/Throwable", "java/lang/Throwable", 2317);
Test 16: 
ClassWriter classWriter = new ClassWriter(1286);
classWriter.visitInnerClass((String) null, (String) null, (String) null, 21);
Test 17: 
ClassWriter classWriter = new ClassWriter(1034);
classWriter.visitField((-809), "<_+I&$D;6L2", "<_+I&$D;6L2", (String) null, (Object) null);
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter(252);
String[] stringArray = new String[4];
stringArray[0] = "E~Eyc9cW$?nq&!kx.[";
stringArray[1] = ")WZ:\">ut";
stringArray[2] = "E~Eyc9cW$?nq&!kx.[";
stringArray[3] = "E~Eyc9cW$?nq&!kx.[";
classWriter.visitMethod(252, "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", stringArray);
classWriter.toByteArray();
Test 19: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.visitOuterClass("2TK", "s2", "2TK");
classWriter.toByteArray();
Test 20: 
ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[0];
classWriter.visit(2, (-1459), "The list of names must not be null", "", "The list of names must not be null", stringArray);
classWriter.toByteArray();
Test 21: 
ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[6];
stringArray[0] = "The list of names must not be null";
stringArray[1] = "The list of names must not be null";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "The list of names must not be null";
classWriter.visit(2537, (-1459), "", "The list of names must not be null", "", stringArray);
classWriter.toByteArray();
Test 22: 
ClassWriter classWriter = new ClassWriter(292552704);
classWriter.visitInnerClass("", "", "", 292552704);
classWriter.toByteArray();
Test 23: 
ClassWriter classWriter = new ClassWriter(1483);
Attribute attribute = new Attribute("|(gcu~`l])8Z\"2Q");
classWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 24: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
Character valueOf = Character.valueOf('z');
classWriter.newConstItem(valueOf);
Test 25: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.newFieldItem("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N");
classWriter.newField("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N");
Test 26: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.newMethod("T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", false);
Test 27: 
ClassWriter classWriter = new ClassWriter((-1124));
classWriter.newMethodItem("_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", true);
classWriter.newMethodItem("_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", true);
Test 28: 
ClassWriter classWriter = new ClassWriter(142);
classWriter.newInteger(142);
classWriter.newInteger(142);
Test 29: 
ClassWriter classWriter = new ClassWriter(41);
classWriter.newFloat(41);
classWriter.newFloat(41);
Test 30: 
ClassWriter classWriter = new ClassWriter(43);
classWriter.newLong(43);
classWriter.newLong(43);
Test 31: 
ClassWriter classWriter = new ClassWriter((-1723));
classWriter.newDouble((-1723));
classWriter.newDouble((-1723));
Test 32: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.newNameType("$a", "$a");
classWriter.newNameType("$a", "$a");
Test 33: 
ClassWriter classWriter = new ClassWriter(2535);
classWriter.addType("j/2QlV");
classWriter.addType("j/2QlV");
Test 34: 
ClassWriter classWriter = new ClassWriter((-1124));
classWriter.addUninitializedType("_'53xV4Fl_0}fZQY$", (-1124));
classWriter.addUninitializedType("_'53xV4Fl_0}fZQY$", (-1124));
Test 35: 
ClassWriter classWriter = new ClassWriter((-1459));
classWriter.addUninitializedType("", (-1459));
classWriter.addType("");
Test 36: 
ClassWriter classWriter = new ClassWriter((-1459));
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
classWriter.addUninitializedType("", (-1459));
Test 37: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "java/lang/Throwable");
Test 38: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.getCommonSuperClass("java/lang/Throwable", "java/lang/Throwable");
Test 39: 
ClassWriter classWriter = new ClassWriter((-53));
classWriter.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Object");
Test 40: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitEnd();
Test 41: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.newClass("value ");
Test 42: 
ClassWriter classWriter = new ClassWriter(0);
classWriter.newMethod("", "", "wheel.asm.Handler", true);
classWriter.newUTF8("wheel.asm.Handler");
Test 43: 
ClassWriter classWriter = new ClassWriter(0);
classWriter.newConstItem("T\"\"]E+2e@.(1");
classWriter.newConstItem("T\"\"]E+2e@.(1");
Test 44: 
ClassWriter classWriter = new ClassWriter(7);
classWriter.index = (-2151);
classWriter.newClass("6M");
Test 45: 
ClassWriter classWriter = new ClassWriter(0);
classWriter.newClassItem("");
Test 46: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.addUninitializedType("iFr5;p:", 25);
// Undeclared exception!
try { 
  classWriter.getMergedType(1, 1);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: iFr5;p:
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 47: 
String[] stringArray = new String[3];

Test 48: 
String[] stringArray = new String[5];

Test 49: 
String[] stringArray = new String[0];

Test 50: 

Test 51: 

Test 52: 
String[] stringArray = new String[4];

Test 53: 

Test 54: 
String[] stringArray = new String[6];

Test 55: 
Attribute attribute = new Attribute("A descriptive and representative string");

Test 56: 
Character.valueOf('z');

Test 57: 
Item[] itemArray = new Item[1];

Test 58: 
ClassWriter classWriter = new ClassWriter(2);
((ClassWriter)2).getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "java/lang/Throwable");

Test 59: 

Test 60: 

Test 61: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitEnd();

Test 62: 

Test 63: 


* Minimizing test suite
* test suite isTestSuite: 48
Test 0: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.newField("java/lang/Object", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
Test 1: 
ClassWriter classWriter = new ClassWriter(1483);
Attribute attribute = new Attribute("|(gcu~`l])8Z\"2Q");
classWriter.visitAttribute(attribute);
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}

Test 2: 
ClassWriter classWriter = new ClassWriter((-8));
classWriter.visitField((-8), "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable");
classWriter.newConst("java/lang/Throwable");
Test 3: 
ClassReader classReader = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
classWriter.newUTF8("wheel.asm.ClassWriter");
Test 4: 
ClassWriter classWriter = new ClassWriter(4);
classWriter.newMethod("T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", false);
Test 5: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitEnd();
Test 6: 
ClassWriter classWriter = new ClassWriter(46);
// Undeclared exception!
try { 
  classWriter.newConst((Object) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value null
   //
   verifyException("wheel.asm.ClassWriter", e);
}

Test 7: 
ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[5];
// Undeclared exception!
try { 
  classWriter.visit((-2694), 20, "", (String) null, ":R[V(QR?/t", stringArray);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 8: 
ClassWriter classWriter = new ClassWriter(24);
classWriter.visit(24, 24, "value ", "Synthetic", "", (String[]) null);
Test 9: 
ClassWriter classWriter = new ClassWriter(27);
String[] stringArray = new String[0];
classWriter.visit(27, 13, "G#wcWg$", "", (String) null, stringArray);
Test 10: 
ClassWriter classWriter = new ClassWriter(25);
String[] stringArray = new String[3];
stringArray[0] = "The wildcard array must not be null";
stringArray[1] = "sazz(NASdLCta{";
stringArray[2] = "The wildcard array must not be null";
classWriter.visit(37, 177, "sazz(NASdLCta{", "sazz(NASdLCta{", "The wildcard array must not be null", stringArray);
classWriter.invalidFrames = true;
classWriter.toByteArray();
Test 11: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitSource((String) null, "java/lang/Object");
Test 12: 
ClassWriter classWriter = new ClassWriter(5);
classWriter.visitSource(".qZ]N", (String) null);
Test 13: 
ClassWriter classWriter = new ClassWriter((-1459));
classWriter.visitOuterClass("D", (String) null, "c[g8E7L>xJt");
Test 14: 
ClassWriter classWriter = new ClassWriter(285212684);
classWriter.visitOuterClass("", "", (String) null);
Test 15: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.visitOuterClass("2TK", "s2", "2TK");
classWriter.toByteArray();
Test 16: 
ClassWriter classWriter = new ClassWriter(11);
classWriter.visitAnnotation("", false);
classWriter.toByteArray();
Test 17: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.visitAnnotation("#L", true);
classWriter.toByteArray();
Test 18: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.visitInnerClass("EnclosingMethod", "[5mVa3cFlX", "[5mVa3cFlX", 22);
classWriter.visitInnerClass("EnclosingMethod", "java/lang/Throwable", "java/lang/Throwable", 2317);
Test 19: 
ClassWriter classWriter = new ClassWriter(1286);
classWriter.visitInnerClass((String) null, (String) null, (String) null, 21);
Test 20: 
ClassWriter classWriter = new ClassWriter(1034);
classWriter.visitField((-809), "<_+I&$D;6L2", "<_+I&$D;6L2", (String) null, (Object) null);
classWriter.toByteArray();
Test 21: 
ClassWriter classWriter = new ClassWriter(252);
String[] stringArray = new String[4];
stringArray[0] = "E~Eyc9cW$?nq&!kx.[";
stringArray[1] = ")WZ:\">ut";
stringArray[2] = "E~Eyc9cW$?nq&!kx.[";
stringArray[3] = "E~Eyc9cW$?nq&!kx.[";
classWriter.visitMethod(252, "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", stringArray);
classWriter.toByteArray();
Test 22: 
ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[0];
classWriter.visit(2, (-1459), "The list of names must not be null", "", "The list of names must not be null", stringArray);
classWriter.toByteArray();
Test 23: 
ClassWriter classWriter = new ClassWriter(23);
classWriter.visitSource("$$GZ~v>H", "$$GZ~v>H");
classWriter.toByteArray();
Test 24: 
ClassWriter classWriter = new ClassWriter((-1459));
String[] stringArray = new String[6];
stringArray[0] = "The list of names must not be null";
stringArray[1] = "The list of names must not be null";
stringArray[2] = "";
stringArray[3] = "";
stringArray[4] = "";
stringArray[5] = "The list of names must not be null";
classWriter.visit(2537, (-1459), "", "The list of names must not be null", "", stringArray);
classWriter.toByteArray();
Test 25: 
ClassWriter classWriter = new ClassWriter(292552704);
classWriter.visitInnerClass("", "", "", 292552704);
classWriter.toByteArray();
Test 26: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.invalidFrames = true;
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}

Test 27: 
ClassReader classReader = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
ClassWriter classWriter = new ClassWriter(classReader, 8);
Character valueOf = Character.valueOf('z');
classWriter.newConstItem(valueOf);
Test 28: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.newFieldItem("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N");
classWriter.newField("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N");
Test 29: 
ClassWriter classWriter = new ClassWriter((-1124));
classWriter.newMethodItem("_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", true);
classWriter.newMethodItem("_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", "_'53xV4Fl_0}fZQY$", true);
Test 30: 
ClassWriter classWriter = new ClassWriter(142);
classWriter.newInteger(142);
classWriter.newInteger(142);
Test 31: 
ClassWriter classWriter = new ClassWriter(41);
classWriter.newFloat(41);
classWriter.newFloat(41);
Test 32: 
ClassWriter classWriter = new ClassWriter(43);
classWriter.newLong(43);
classWriter.newLong(43);
Test 33: 
ClassWriter classWriter = new ClassWriter((-1723));
classWriter.newDouble((-1723));
classWriter.newDouble((-1723));
Test 34: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.newNameType("$a", "$a");
classWriter.newNameType("$a", "$a");
Test 35: 
ClassWriter classWriter = new ClassWriter(2535);
classWriter.addType("j/2QlV");
classWriter.addType("j/2QlV");
Test 36: 
ClassWriter classWriter = new ClassWriter((-1124));
classWriter.addUninitializedType("_'53xV4Fl_0}fZQY$", (-1124));
classWriter.addUninitializedType("_'53xV4Fl_0}fZQY$", (-1124));
Test 37: 
ClassWriter classWriter = new ClassWriter((-1459));
classWriter.addUninitializedType("", (-1459));
classWriter.addType("");
Test 38: 
ClassWriter classWriter = new ClassWriter((-1459));
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
classWriter.addUninitializedType("", (-1459));
Test 39: 
ClassWriter classWriter = new ClassWriter((-53));
classWriter.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Object");
Test 40: 
ClassWriter classWriter = new ClassWriter((-12));
classWriter.getCommonSuperClass("java/lang/Throwable", "java/lang/Throwable");
Test 41: 
ClassWriter classWriter = new ClassWriter(2);
classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "java/lang/Throwable");
Test 42: 
ClassWriter classWriter = new ClassWriter(46);
classWriter.newClass("value ");
Test 43: 
ClassWriter classWriter = new ClassWriter(0);
classWriter.newMethod("", "", "wheel.asm.Handler", true);
classWriter.newUTF8("wheel.asm.Handler");
Test 44: 
ClassWriter classWriter = new ClassWriter(0);
classWriter.newConstItem("T\"\"]E+2e@.(1");
classWriter.newConstItem("T\"\"]E+2e@.(1");
Test 45: 
ClassWriter classWriter = new ClassWriter(7);
classWriter.index = (-2151);
classWriter.newClass("6M");
Test 46: 
ClassWriter classWriter = new ClassWriter(0);
classWriter.newClassItem("");
Test 47: 
ClassWriter classWriter = new ClassWriter(25);
classWriter.addUninitializedType("iFr5;p:", 25);
// Undeclared exception!
try { 
  classWriter.getMergedType(1, 1);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: iFr5;p:
   //
   verifyException("wheel.asm.ClassWriter", e);
}


* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 91%
* Total number of goals: 174
* Number of covered goals: 158
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 345
* Number of covered goals: 324
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 40%
* Total number of goals: 55
* Number of covered goals: 22
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 174
* Number of covered goals: 158
* Generated 48 tests with total length 150
* Resulting test suite's coverage: 83% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(2);
int newField = classWriter.newField("java/lang/Object", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
assertEquals(5, newField);


** It was a parseable test case! 
refined test name is: testNewFieldReturnsCorrectValue
* Compiling Tests
refined test name is: testNewFieldCreationWithValidParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1483);
Attribute arg0 = new Attribute("|(gcu~`l])8Z\"2Q");
classWriter.visitAttribute(arg0);
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
   verifyException("wheel.asm.Attribute", e);
}


** It was a parseable test case! 
refined test name is: testVisitAttributeWithNullNameThrowsNPE
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-8));
classWriter.visitField((-8), "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable", "java/lang/Throwable");
int newConst = classWriter.newConst("java/lang/Throwable");
assertEquals(2, newConst);


** It was a parseable test case! 
refined test name is: testNewConstant
* Compiling Tests
refined test name is: testNewConstWithThrowableType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassReader arg0 = new ClassReader("wheel.asm.ClassWriter");
ClassWriter classWriter = new ClassWriter(arg0, 8);
int newUTF8 = classWriter.newUTF8("wheel.asm.ClassWriter");
assertEquals(640, newUTF8);


** It was a parseable test case! 
refined test name is: testNewUTF8
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(4);
int newMethod = classWriter.newMethod("T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", "T\"\"]E+2e@.(1", false);
assertEquals(4, newMethod);


** It was a parseable test case! 
refined test name is: testNewMethodAddedToClassWriter
* Compiling Tests
refined test name is: testAddNewMethodToClassWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(46);
classWriter.visitEnd();
assertEquals(1, ClassWriter.COMPUTE_MAXS);


** It was a parseable test case! 
refined test name is: testConstructorAndComputeMaxs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(46);
// Undeclared exception!
try { 
  classWriter.newConst((Object) null);
  fail("Expecting exception: IllegalArgumentException");

} catch(IllegalArgumentException e) {
   //
   // value null
   //
   verifyException("wheel.asm.ClassWriter", e);
}


** It was a parseable test case! 
refined test name is: testAddingNullToConstantPoolThrowsException
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-1459));
String[] arg5 = new String[5];
// Undeclared exception!
try { 
  classWriter.visit((-2694), 20, "", (String) null, ":R[V(QR?/t", arg5);
  fail("Expecting exception: NullPointerException");

} catch(NullPointerException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testVisitThrowsNPEWithInvalidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(24);
classWriter.visit(24, 24, "value ", "Synthetic", "", (String[]) null);
assertEquals(2, ClassWriter.COMPUTE_FRAMES);


** It was a parseable test case! 
refined test name is: testClassWriterVisitMethod
* Compiling Tests
refined test name is: testClassWriterVisit
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(27);
String[] arg5 = new String[0];
classWriter.visit(27, 13, "G#wcWg$", "", (String) null, arg5);
assertEquals(0, arg5.length);


** It was a parseable test case! 
refined test name is: testVisitWithoutComments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(25);
String[] arg5 = new String[3];
arg5[0] = "The wildcard array must not be null";
arg5[1] = "sazz(NASdLCta{";
arg5[2] = "The wildcard array must not be null";
classWriter.visit(37, 177, "sazz(NASdLCta{", "sazz(NASdLCta{", "The wildcard array must not be null", arg5);
classWriter.invalidFrames = true;
byte[] byteArray = classWriter.toByteArray();
assertEquals(111, byteArray.length);


** It was a parseable test case! 
refined test name is: testVisitMethodWithStringArrayArgument
* Compiling Tests
refined test name is: testClassWriterVisitInvalidFrames
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(46);
classWriter.visitSource((String) null, "java/lang/Object");
assertEquals(1, ClassWriter.COMPUTE_MAXS);


** It was a parseable test case! 
refined test name is: testVisitSourceWithValidSourceName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(5);
classWriter.visitSource(".qZ]N", (String) null);
assertEquals(2, ClassWriter.COMPUTE_FRAMES);


** It was a parseable test case! 
refined test name is: testClassWriterProperties
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-1459));
classWriter.visitOuterClass("D", (String) null, "c[g8E7L>xJt");
assertEquals(1, ClassWriter.COMPUTE_MAXS);


** It was a parseable test case! 
refined test name is: testCreateOuterClass
* Compiling Tests
refined test name is: testOuterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(285212684);
classWriter.visitOuterClass("", "", (String) null);
assertEquals(1, ClassWriter.COMPUTE_MAXS);


** It was a parseable test case! 
refined test name is: testClassWriterVisitOuterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(25);
classWriter.visitOuterClass("2TK", "s2", "2TK");
byte[] byteArray = classWriter.toByteArray();
assertEquals(71, byteArray.length);


** It was a parseable test case! 
refined test name is: testVisitOuterClass
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(11);
classWriter.visitAnnotation("", false);
byte[] byteArray = classWriter.toByteArray();
assertEquals(69, byteArray.length);


** It was a parseable test case! 
refined test name is: testVisitAnnotationAddsAnnotationToClassWriter
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(46);
classWriter.visitAnnotation("#L", true);
byte[] byteArray = classWriter.toByteArray();
assertEquals(69, byteArray.length);


** It was a parseable test case! 
refined test name is: testVisitAnnotationReturnsCorrectLengthOfByteArray
* Compiling Tests
refined test name is: testVisitAnnotationReturnsCorrectLengthOfByteArray
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-12));
classWriter.visitInnerClass("EnclosingMethod", "[5mVa3cFlX", "[5mVa3cFlX", 22);
classWriter.visitInnerClass("EnclosingMethod", "java/lang/Throwable", "java/lang/Throwable", 2317);
assertEquals(2, ClassWriter.COMPUTE_FRAMES);


** It was a parseable test case! 
refined test name is: testVisitInnerClassWithNameAndDescriptor
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1286);
classWriter.visitInnerClass((String) null, (String) null, (String) null, 21);
assertEquals(1, ClassWriter.COMPUTE_MAXS);


** It was a parseable test case! 
refined test name is: testVisitInnerClassWithComputeMaxsFlagSetToTrue
* Compiling Tests
refined test name is: testVisitInnerClassWithComputeMaxsFlag
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(1034);
classWriter.visitField((-809), "<_+I&$D;6L2", "<_+I&$D;6L2", (String) null, (Object) null);
byte[] byteArray = classWriter.toByteArray();
assertEquals(83, byteArray.length);


** It was a parseable test case! 
refined test name is: testFieldLength
* Compiling Tests
refined test name is: testConvertClassWriterToByteArrayLengthIsCorrect
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(252);
String[] arg4 = new String[4];
arg4[0] = "E~Eyc9cW$?nq&!kx.[";
arg4[1] = ")WZ:\">ut";
arg4[2] = "E~Eyc9cW$?nq&!kx.[";
arg4[3] = "E~Eyc9cW$?nq&!kx.[";
classWriter.visitMethod(252, "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", "E~Eyc9cW$?nq&!kx.[", arg4);
byte[] byteArray = classWriter.toByteArray();
assertEquals(119, byteArray.length);


** It was a parseable test case! 
refined test name is: testVisitMethodReturnsCorrectLengthOfByteArray
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-1459));
String[] arg5 = new String[0];
classWriter.visit(2, (-1459), "The list of names must not be null", "", "The list of names must not be null", arg5);
byte[] byteArray = classWriter.toByteArray();
assertEquals(124, byteArray.length);


** It was a parseable test case! 
refined test name is: testConstructorThrowsExceptionForNullNames
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(23);
classWriter.visitSource("$$GZ~v>H", "$$GZ~v>H");
byte[] byteArray = classWriter.toByteArray();
assertEquals(93, byteArray.length);


** It was a parseable test case! 
refined test name is: testVisitSource
* Compiling Tests
refined test name is: testVisitSourceWithSpecificNameAndSignature
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-1459));
String[] arg5 = new String[6];
arg5[0] = "The list of names must not be null";
arg5[1] = "The list of names must not be null";
arg5[2] = "";
arg5[3] = "";
arg5[4] = "";
arg5[5] = "The list of names must not be null";
classWriter.visit(2537, (-1459), "", "The list of names must not be null", "", arg5);
byte[] byteArray = classWriter.toByteArray();
assertEquals(121, byteArray.length);


** It was a parseable test case! 
refined test name is: testWriteToByteArray
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(292552704);
classWriter.visitInnerClass("", "", "", 292552704);
byte[] byteArray = classWriter.toByteArray();
assertEquals(61, byteArray.length);


** It was a parseable test case! 
refined test name is: testClassWriterVisitInnerClass
* Compiling Tests
refined test name is: testVisitInnerClassSetsCorrectValues
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(25);
classWriter.invalidFrames = true;
// Undeclared exception!
try { 
  classWriter.toByteArray();
  fail("Expecting exception: ArrayIndexOutOfBoundsException");

} catch(ArrayIndexOutOfBoundsException e) {
   //
   // no message in exception (getMessage() returned null)
   //
}


** It was a parseable test case! 
refined test name is: testInvalidFramesInit
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(25);
classWriter.newFieldItem("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N");
int newField = classWriter.newField("#J/bsI%+SL,:N", "#J/bsI%+SL,:N", "#J/bsI%+SL,:N");
assertEquals(4, newField);


** It was a parseable test case! 
refined test name is: testNewFieldIndex
* Compiling Tests
refined test name is: testNewFieldItemAndGetNewFieldIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(25);
classWriter.newNameType("$a", "$a");
int newNameType = classWriter.newNameType("$a", "$a");
assertEquals(2, newNameType);


** It was a parseable test case! 
refined test name is: testCreateNewNameTypeWithSameNameAndGetId
* Compiling Tests
refined test name is: testNewNameTypeReturnsCorrectId
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(2535);
classWriter.addType("j/2QlV");
int addType = classWriter.addType("j/2QlV");
assertEquals(1, addType);


** It was a parseable test case! 
refined test name is: testAddingTypeWithValidClassName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-1459));
int addUninitializedType = classWriter.addUninitializedType("", (-1459));
assertEquals(1, addUninitializedType);

int addType = classWriter.addType("");
assertEquals(2, addType);


** It was a parseable test case! 
refined test name is: testAddTypesToConstantPool
* Compiling Tests
refined test name is: testAddUninitializedTypeAndType
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-1459));
Item[] itemArray = new Item[1];
classWriter.typeTable = itemArray;
int addUninitializedType = classWriter.addUninitializedType("", (-1459));
assertEquals(1, addUninitializedType);


** It was a parseable test case! 
refined test name is: testAddUninitializedTypeInvalidClassNameAndFlags
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-53));
String commonSuperClass = classWriter.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/Object");
assertNotNull(commonSuperClass);
assertEquals("java/lang/Object", commonSuperClass);


** It was a parseable test case! 
refined test name is: testGetCommonSuperClassWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter((-12));
String commonSuperClass = classWriter.getCommonSuperClass("java/lang/Throwable", "java/lang/Throwable");
assertEquals("java/lang/Throwable", commonSuperClass);


** It was a parseable test case! 
refined test name is: testGetCommonSuperClassSameClassReturnsSelf
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(2);
String commonSuperClass = classWriter.getCommonSuperClass("org.apache.commons.io.filefilter.DirectoryFileFilter", "java/lang/Throwable");
assertEquals("java/lang/Object", commonSuperClass);


** It was a parseable test case! 
refined test name is: testGetCommonSuperclassWithDifferentClasses
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(46);
int newClass = classWriter.newClass("value ");
assertEquals(2, newClass);


** It was a parseable test case! 
refined test name is: testNewClassShouldReturnExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(0);
int newMethod = classWriter.newMethod("", "", "wheel.asm.Handler", true);
assertEquals(5, newMethod);

int newUTF8 = classWriter.newUTF8("wheel.asm.Handler");
assertEquals(3, newUTF8);


** It was a parseable test case! 
refined test name is: testMethodIndexForNewHandlerMethod
* Compiling Tests
refined test name is: testNewMethodReturnsCorrectIndex
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(7);
classWriter.index = (-2151);
int newClass = classWriter.newClass("6M");
assertEquals((-2150), newClass);


** It was a parseable test case! 
refined test name is: testNewClassWithValidInput
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(0);
Item newClassItem = classWriter.newClassItem("");
assertNotNull(newClassItem);


** It was a parseable test case! 
refined test name is: testNewClassItemCreationWithNoComments
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: ClassWriter classWriter = new ClassWriter(25);
classWriter.addUninitializedType("iFr5;p:", 25);
// Undeclared exception!
try { 
  classWriter.getMergedType(1, 1);
  fail("Expecting exception: RuntimeException");

} catch(RuntimeException e) {
   //
   // java.lang.ClassNotFoundException: iFr5;p:
   //
   verifyException("wheel.asm.ClassWriter", e);
}


** It was a parseable test case! 
refined test name is: testGetMergedTypethrowsRuntimeException
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:48.758 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:48.787 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:48.878 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:48.880 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:48.963 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:48.966 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:49.190 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:49.192 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:49.284 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:49.286 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:49.367 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:49.370 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:49.460 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:49.462 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:49.558 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:49.561 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:49.647 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:49.648 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:49.733 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:49.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:49.821 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:49.823 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:49.908 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:49.910 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.005 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:50.007 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:50.097 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:50.099 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.186 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:50.187 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.258 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:50.259 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.319 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:50.320 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.378 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:50.379 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.438 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:50.440 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.497 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:50.502 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.567 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:50.568 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.640 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:50.641 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.707 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:50.708 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:50.843 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:50.853 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:51.002 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:51.004 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:51.083 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:51.085 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:51.155 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:51.156 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:51.227 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.229 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:51.291 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:51.293 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
[MASTER] 06:51:51.345 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.347 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:51.406 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.407 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:51.455 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.456 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:51.504 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.505 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:51.556 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.557 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:51.606 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.607 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:51.655 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.656 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 06:51:51.705 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.707 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:51.757 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.758 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:51.808 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.810 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 06:51:51.873 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:51.875 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
** Write a test suite: 2 called: 1 to improve: false
** Write a test suite: 4 called: 2 to improve: false
** Write a test suite: 8 called: 3 to improve: false
** Write a test suite: 10 called: 4 to improve: false
** Write a test suite: 13 called: 5 to improve: false
** Write a test suite: 17 called: 6 to improve: false
** Write a test suite: 19 called: 7 to improve: false
** Write a test suite: 20 called: 8 to improve: false
** Write a test suite: 23 called: 9 to improve: false
** Write a test suite: 25 called: 10 to improve: false
** Write a test suite: 27 called: 11 to improve: false
** Write a test suite: 28 called: 12 to improve: false
** Write a test suite: 30 called: 13 to improve: false
** Write a test suite: 36 called: 14 to improve: false
[MASTER] 06:51:52.510 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:52.512 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 3 called: 0 to improve: false
** Write a test suite: 9 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
** Write a test suite: 12 called: 3 to improve: false
** Write a test suite: 14 called: 4 to improve: false
** Write a test suite: 16 called: 5 to improve: false
** Write a test suite: 19 called: 6 to improve: false
** Write a test suite: 20 called: 7 to improve: false
** Write a test suite: 22 called: 8 to improve: false
** Write a test suite: 26 called: 9 to improve: false
** Write a test suite: 29 called: 10 to improve: false
** Write a test suite: 31 called: 11 to improve: false
** Write a test suite: 35 called: 12 to improve: false
** Write a test suite: 37 called: 13 to improve: false
** Write a test suite: 39 called: 14 to improve: false
[MASTER] 06:51:53.158 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar7318668786679103335.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 06:51:53.160 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar7318668786679103335.jar
* Writing tests to file
* Writing JUnit test case 'ClassWriter_ESTest' to evosuite-tests
** Write a test suite: 3 called: 0 to improve: false
** Write a test suite: 9 called: 1 to improve: false
** Write a test suite: 11 called: 2 to improve: false
** Write a test suite: 12 called: 3 to improve: false
** Write a test suite: 14 called: 4 to improve: false
** Write a test suite: 16 called: 5 to improve: false
** Write a test suite: 19 called: 6 to improve: false
** Write a test suite: 20 called: 7 to improve: false
** Write a test suite: 22 called: 8 to improve: false
** Write a test suite: 26 called: 9 to improve: false
** Write a test suite: 29 called: 10 to improve: false
** Write a test suite: 31 called: 11 to improve: false
** Write a test suite: 35 called: 12 to improve: false
** Write a test suite: 37 called: 13 to improve: false
** Write a test suite: 39 called: 14 to improve: false
* Done!

* Computation finished
