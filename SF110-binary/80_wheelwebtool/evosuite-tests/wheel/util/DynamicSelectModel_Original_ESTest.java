/*
 * This file was automatically generated by UTestGen and EvoSuite
 * Wed Mar 13 18:58:27 GMT 2024
 */

package wheel.util;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Timeout;
import java.util.concurrent.TimeUnit;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.mvel.util.FastList;
import wheel.ErrorPage;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DynamicSelectModel_Original_ESTest extends DynamicSelectModel_Original_ESTest_scaffolding {

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetValue() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      DynamicSelectModel collection = dynamicSelectModel.collection("[] from ");
      Object arg0 = new Object();
      DynamicSelectModel empty = collection.empty(arg0);
      empty.value("[] from ");
      String value = empty.getValue(0);
      assertNotNull(value);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOptionCountReturningZero() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      DynamicSelectModel collection = dynamicSelectModel.collection("[]rfBom ");
      int optionCount = collection.getOptionCount();
      assertEquals(0, optionCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetOptionCountReturningPositive() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      DynamicSelectModel collection = dynamicSelectModel.collection("[] from ");
      Object arg0 = new Object();
      DynamicSelectModel empty = collection.empty(arg0);
      int optionCount = empty.getOptionCount();
      assertEquals(1, optionCount);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValidateThrowsRuntimeException() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        dynamicSelectModel.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetLabel() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      DynamicSelectModel collection = dynamicSelectModel.collection("[] from ");
      Object arg0 = new Object();
      DynamicSelectModel empty = collection.empty(arg0);
      collection.getObjects();
      DynamicSelectModel enumeration = empty.enumeration("f:w}EE#n}*iC");
      String label = enumeration.getLabel(0);
      assertNotNull(label);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testValidate() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      DynamicSelectModel enumeration = dynamicSelectModel.enumeration("RETURN");
      dynamicSelectModel.validate();
      assertSame(dynamicSelectModel, enumeration);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCollection() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      dynamicSelectModel.collection("");
      // Undeclared exception!
      try { 
        dynamicSelectModel.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testCollectionWithNonEmptyString() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      dynamicSelectModel.collection("org.mvel.ASTNode");
      // Undeclared exception!
      try { 
        dynamicSelectModel.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression org.mvel.ASTNode evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTranslateValue() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      DynamicSelectModel collection = dynamicSelectModel.collection("[]rfBom ");
      Object arg0 = new Object();
      DynamicSelectModel empty = collection.empty(arg0);
      collection.value("[]rfBom ");
      DynamicSelectModel value = empty.value("[]rfBom ");
      value.translateValue("org.mvel.util.FastList@0000000042");
      ElExpression elExpression = new ElExpression("org.mvel.util.FastList@0000000042");
      Object translateValue = empty.translateValue("org.mvel.util.FastList@0000000042");
      assertSame(translateValue, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testTranslator() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      DynamicSelectModel collection = dynamicSelectModel.collection("[]rfBom ");
      Object arg0 = new Object();
      DynamicSelectModel empty = collection.empty(arg0);
      DynamicSelectModel value = collection.value("[]rfBom ");
      DynamicSelectModel translator = value.translator("[]rfBom ");
      translator.translateValue("org.mvel.util.FastList@0000000042");
      ElExpression elExpression = new ElExpression("org.mvel.util.FastList@0000000042");
      FastList translateValue = (FastList)empty.translateValue("org.mvel.util.FastList@0000000042");
      assertEquals(0, translateValue.size());
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetTopLevelComponent() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      ErrorPage arg0 = new ErrorPage();
      dynamicSelectModel.setTopLevelComponent(arg0);
      StandaloneComponent topLevelComponent = dynamicSelectModel.getTopLevelComponent();
      assertSame(topLevelComponent, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testLabel() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      dynamicSelectModel.label("org.mvel.conversion.IntegerCH");
      DynamicSelectModel collection = dynamicSelectModel.collection("org.mvel.conversion.IntegerCH");
      // Undeclared exception!
      try { 
        collection.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Value attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testFailsToCreateDynamicSelectModelTaking3ArgumentsThrowsRuntimeException() throws Throwable  {
      ElExpression arg2 = new ElExpression("org.mvel.util.FastList@0000000042");
      DynamicSelectModel dynamicSelectModel = null;
      try {
        dynamicSelectModel = new DynamicSelectModel(arg2, arg2, arg2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetTopLevelComponentReturningNull() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      StandaloneComponent topLevelComponent = dynamicSelectModel.getTopLevelComponent();
      assertNull(topLevelComponent);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testSetComponent() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      ErrorPage arg0 = new ErrorPage();
      dynamicSelectModel.setComponent(arg0);
      Component component = dynamicSelectModel.getComponent();
      assertSame(component, arg0);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testReset() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      dynamicSelectModel.reset();
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetComponentReturningNull() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      Component component = dynamicSelectModel.getComponent();
      assertNull(component);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testEnumeration() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      DynamicSelectModel enumeration = dynamicSelectModel.enumeration("wheel.Asset$AssetType");
      Collection objects = enumeration.getObjects();
      assertNotNull(objects);
  }

  @Test
  @Timeout(value = 4000 , unit = TimeUnit.MILLISECONDS)
  public void testGetObjectsThrowsRuntimeException() throws Throwable  {
      DynamicSelectModel dynamicSelectModel = new DynamicSelectModel();
      DynamicSelectModel collection = dynamicSelectModel.collection("");
      // Undeclared exception!
      try { 
        collection.getObjects();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression  evaluated to null. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }
}
