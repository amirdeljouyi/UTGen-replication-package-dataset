* EvoSuite 1.2.1-SNAPSHOT
* Going to generate test cases for class: de.huxhorn.lilith.data.access.AccessEvent
* Starting Client-0
* Properties loaded from /home/ubuntu/UTestGen/Evaluation/getting_results/dataset/SF110/43_lilith/evosuite-files/evosuite.properties
* Connecting to master process on port 20213
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:30:03.115 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:30:03.121 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:30:03.124 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 01:30:03.158 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 01:30:03.160 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 01:30:03.162 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 01:30:03.164 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 01:30:03.168 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 01:30:03.169 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 01:30:03.171 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 01:30:03.182 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 01:30:03.186 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 01:30:03.251 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:30:03.267 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:30:03.268 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class de.huxhorn.lilith.data.access.AccessEvent
* Test criteria:
  - Branch Coverage
  - Line Coverage
  - Method-Output Coverage
  - Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 447
* Using seed 1709256600978
[Progress:>                             0%] [Cov:>                                  0%]* Starting evolution
* Initial Number of Goals in DynaMOSA = 179 / 447
[Progress:>                             1%] [Cov:======================>            64%][Progress:>                             2%] [Cov:==========================>        77%][Progress:>                             2%] [Cov:===========================>       78%][Progress:>                             2%] [Cov:===========================>       79%][Progress:>                             3%] [Cov:============================>      80%][Progress:>                             3%] [Cov:============================>      80%][Progress:>                             3%] [Cov:============================>      81%][Progress:>                             3%] [Cov:============================>      82%][Progress:>                             3%] [Cov:=============================>     83%][Progress:=>                            4%] [Cov:=============================>     84%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    86%][Progress:=>                            4%] [Cov:==============================>    87%][Progress:=>                            4%] [Cov:===============================>   89%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            4%] [Cov:===============================>   90%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:===============================>   91%][Progress:=>                            5%] [Cov:================================>  92%][Progress:=>                            5%] [Cov:================================>  92%][Progress:=>                            5%] [Cov:================================>  93%][Progress:=>                            5%] [Cov:================================>  93%][Progress:=>                            5%] [Cov:================================>  93%][Progress:=>                            5%] [Cov:================================>  93%][Progress:=>                            6%] [Cov:================================>  93%][Progress:=>                            6%] [Cov:================================>  93%][Progress:=>                            6%] [Cov:================================>  93%][Progress:=>                            6%] [Cov:================================>  93%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:=>                            6%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           7%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:================================>  94%][Progress:==>                           8%] [Cov:=================================> 95%][Progress:==>                           8%] [Cov:=================================> 95%][Progress:==>                           8%] [Cov:=================================> 95%][Progress:==>                           8%] [Cov:=================================> 95%][Progress:==>                           8%] [Cov:=================================> 95%][Progress:==>                           8%] [Cov:=================================> 95%][Progress:==>                           8%] [Cov:=================================> 95%][Progress:==>                           9%] [Cov:=================================> 95%][Progress:==>                           9%] [Cov:=================================> 95%][Progress:==>                           9%] [Cov:=================================> 95%][Progress:==>                           9%] [Cov:=================================> 95%][Progress:==>                           9%] [Cov:=================================> 95%][Progress:==>                           9%] [Cov:=================================> 95%][Progress:==>                           9%] [Cov:=================================> 95%][Progress:==>                           9%] [Cov:=================================> 95%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:==>                           9%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          10%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 96%][Progress:===>                          11%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          12%] [Cov:=================================> 97%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:===>                          13%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         14%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         15%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:====>                         16%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        17%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        18%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:=====>                        19%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       20%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       21%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       22%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:======>                       23%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      24%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      25%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:=======>                      26%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     27%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     28%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:========>                     29%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    30%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    31%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    32%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:=========>                    33%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   34%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   35%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:==========>                   36%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  37%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  38%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:===========>                  39%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 40%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 41%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 42%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:============>                 43%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                44%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                45%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:=============>                46%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               47%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               48%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:==============>               49%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              50%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              51%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              52%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:===============>              53%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             54%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             55%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:================>             56%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            57%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            58%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][MASTER] 01:31:03.339 [logback-1] WARN  TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:=================>            59%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           60%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           61%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           62%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:==================>           63%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          64%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          65%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:===================>          66%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         67%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         68%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:====================>         69%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        70%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        71%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        72%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:=====================>        73%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       74%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       75%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:======================>       76%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      77%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      78%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:=======================>      79%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     80%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     81%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     82%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:========================>     83%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    84%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    85%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:=========================>    86%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   87%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   88%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:==========================>   89%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  90%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  91%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  92%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:===========================>  93%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 94%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 95%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:============================> 96%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>97%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>98%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:=============================>99%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%][Progress:==============================100%] [Cov:==================================>98%]
* Search finished after 102s and 2300 generations, 454262 statements, best individual has fitness: 5.0
* Generated before the refinement 97 tests with total length 353
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setStatusCode(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setStatusCode(660)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(660);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setStatusCode(401);
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setStatusCode(401), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setStatusCode(401) target is: accessEvent method is: setStatusCode(int)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setStatusCode(I)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
int _int = 401;
accessEvent.setStatusCode(_int);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRemoteUser()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteUser = accessEvent.getRemoteUser()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteUser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("John Doe", "192.168.0.1");
        accessEvent.getRemoteUser();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("John Doe", "192.168.0.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getRemoteUser(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRemoteUser() target is: accessEvent method is: getRemoteUser()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: toString()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String string = accessEvent.toString()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.toString();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private int id;

    private String name;

    private double score;

    public  AccessEvent(int id, String name, double score) {
        this.id = id;
        this.name = name;
        this.score = score;
    }

    public String toString() {
        return (((((("AccessEvent{" + "id=") + id) + ", name='") + name) + '\'') + ", score=") + score;
    }
}
statement is: this.id = id, class spoon.support.reflect.code.CtAssignmentImpl
statement is: this.name = name, class spoon.support.reflect.code.CtAssignmentImpl
statement is: this.score = score, class spoon.support.reflect.code.CtAssignmentImpl
statement is: return (((((("AccessEvent{" + "id=") + id) + ", name='") + name) + '\'') + ", score=") + score, class spoon.support.reflect.code.CtReturnImpl
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRequestParameters()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String[]>
statement code is: Map<String, String[]> requestParameters = accessEvent.getRequestParameters()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(5678, "GET", "/users/" + RandomStringUtils.randomAlphanumeric(10));
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(5678, "GET", "/users/" + RandomStringUtils.randomAlphanumeric(10)), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getLocalPort()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int localPort = accessEvent.getLocalPort()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getLocalPort();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(1000, "127.0.0.1", 8080, true);
        accessEvent.getLocalPort();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(1000, "127.0.0.1", 8080, true), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getLocalPort(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getLocalPort() target is: accessEvent method is: getLocalPort()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: org.evosuite.testcase.statements.FieldStatement@33d940e1 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> map = ZoneId.SHORT_IDS
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setResponseHeaders(map);
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        Map<String, String> map = ZoneId.SHORT_IDS;
        accessEvent.setResponseHeaders(map);
        accessEvent.setRemoteAddress("84.23.160.56");
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteAddress("84.23.160.56");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Map<String, String> map = ZoneId.SHORT_IDS, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ZoneId.SHORT_IDS is ZoneId
CtField is: public static final java.util.Map java.time.ZoneId.SHORT_IDS Map SHORT_IDS
statement is: accessEvent.setResponseHeaders(map), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResponseHeaders(map) target is: accessEvent method is: setResponseHeaders(Map)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: accessEvent.setRemoteAddress("84.23.160.56"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteAddress("84.23.160.56") target is: accessEvent method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteAddress("84.23.160.56"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteAddress("84.23.160.56") target is: accessEvent method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 5
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 5
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = null;
accessEvent.setResponseHeaders(map);
String string = "84.23.160.56";
accessEvent.setRemoteAddress(string);
AccessEvent accessEvent = new AccessEvent();
String string = "84.23.160.56";
accessEvent.setRemoteAddress(string);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long((-630L))
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-630L));
accessEvent.setTimeStamp(long);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        Long = new Long(-630L);
        accessEvent.setTimeStamp(long.class);
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setTimeStamp(new Long(1000));
        assertFalse(accessEvent.equals(accessEvent));
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Long = new Long(-630L), class spoon.support.reflect.code.CtAssignmentImpl
statement is: accessEvent.setTimeStamp(long.class), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(long.class) target is: accessEvent method is: setTimeStamp(java.lang.Class)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setTimeStamp(new Long(1000)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(new Long(1000)) target is: accessEvent method is: setTimeStamp(java.lang.Long)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
statement is: assertFalse(accessEvent.equals(accessEvent)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(accessEvent.equals(accessEvent)) target is:  method is: assertFalse(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
Long long = null;
accessEvent.setTimeStamp(long);
AccessEvent accessEvent = new AccessEvent();
int _int = 1000;
Long long = new Long(_int);
accessEvent.setTimeStamp(long);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getServerName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String serverName = accessEvent.getServerName()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getServerName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("example.com", 80, "GET", "/path?query=value");
        String serverName = accessEvent.getServerName();
        assertEquals(serverName, "www.example.com");// Using a more descriptive value for the server name }}

    }
}
statement is: AccessEvent accessEvent = new AccessEvent("example.com", 80, "GET", "/path?query=value"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String serverName = accessEvent.getServerName(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getServerName() target is: accessEvent method is: getServerName()
statement is: assertEquals(serverName, "www.example.com")// Using a more descriptive value for the server name }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(serverName, "www.example.com")// Using a more descriptive value for the server name }}
 target is:  method is: assertEquals(java.lang.String,java.lang.String)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setLocalPort(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLocalPort((-1909907106))
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((-1909907106));
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setLocalPort(-1909907106);
        // Improve the test data by changing the primitive values and Strings to more illustrative examples
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setLocalPort(-1909907106), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLocalPort(-1909907106) target is: accessEvent method is: setLocalPort(int)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setLocalPort(I)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improve the test data by changing the primitive values and Strings to more illustrative examples
accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improve the test data by changing the primitive values and Strings to more illustrative examples
accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
int _int = null;
accessEvent.setLocalPort(_int);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getProtocol()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String protocol = accessEvent.getProtocol()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getProtocol();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        AccessEvent accessEvent = new AccessEvent(1234, "John Doe", 100);
        assertEquals("HTTPS", accessEvent.getProtocol());
    }
}
statement is: // Improved test data
AccessEvent accessEvent = new AccessEvent(1234, "John Doe", 100), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertEquals("HTTPS", accessEvent.getProtocol()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals("HTTPS", accessEvent.getProtocol()) target is:  method is: assertEquals(java.lang.String,<unknown>)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: org.evosuite.testcase.statements.FieldStatement@33d940e1 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> map = ZoneId.SHORT_IDS
statement is: setRequestHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestHeaders(arg0)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("10.0.0.1", "80", "GET", "/index.html", "HTTP/1.1");
        Map<String, String> map = ZoneId.SHORT_IDS;
        accessEvent.setRequestHeaders(map);
        AccessEvent accessEvent2 = new AccessEvent("10.0.0.1", "80", "GET", "/index.html", "HTTP/1.1");
        accessEvent.equals(accessEvent2);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("10.0.0.1", "80", "GET", "/index.html", "HTTP/1.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Map<String, String> map = ZoneId.SHORT_IDS, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ZoneId.SHORT_IDS is ZoneId
CtField is: public static final java.util.Map java.time.ZoneId.SHORT_IDS Map SHORT_IDS
statement is: accessEvent.setRequestHeaders(map), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestHeaders(map) target is: accessEvent method is: setRequestHeaders(Map)
statement is: AccessEvent accessEvent2 = new AccessEvent("10.0.0.1", "80", "GET", "/index.html", "HTTP/1.1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent2) target is: accessEvent method is: equals(AccessEvent)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRequestHeaders()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> requestHeaders = accessEvent.getRequestHeaders()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestHeaders();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestHeader("Authorization", "Basic YWRtaW46cGFzcw==");
        accessEvent.setRequestMethod("GET");
        accessEvent.setRequestPath("/api/users/123");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestHeader("Authorization", "Basic YWRtaW46cGFzcw=="), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestHeader("Authorization", "Basic YWRtaW46cGFzcw==") target is: accessEvent method is: setRequestHeader(java.lang.String,java.lang.String)
statement is: accessEvent.setRequestMethod("GET"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestMethod("GET") target is: accessEvent method is: setRequestMethod(java.lang.String)
statement is: accessEvent.setRequestPath("/api/users/123"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestPath("/api/users/123") target is: accessEvent method is: setRequestPath(java.lang.String)
TestCase is: AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRequestURL()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String requestURL = accessEvent.getRequestURL()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestURL();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("http://example.com", "GET", 200, "OK");
        accessEvent.setRequestURL("https://www.example.com/page");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("http://example.com", "GET", 200, "OK"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURL("https://www.example.com/page"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://www.example.com/page") target is: accessEvent method is: setRequestURL(java.lang.String)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRemoteHost()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteHost = accessEvent.getRemoteHost()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteHost();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("10.10.10.10", "Jane Smith", 80, false);
        String remoteHost = accessEvent.getRemoteHost();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("10.10.10.10", "Jane Smith", 80, false), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String remoteHost = accessEvent.getRemoteHost(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRemoteHost() target is: accessEvent method is: getRemoteHost()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol("<")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol("<")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setProtocol("HTTPS");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setProtocol("SSH");
        assertNotEquals(accessEvent1, accessEvent2);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setProtocol("HTTPS"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setProtocol("HTTPS") target is: accessEvent1 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setProtocol("SSH"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setProtocol("SSH") target is: accessEvent2 method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: assertNotEquals(accessEvent1, accessEvent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotEquals(accessEvent1, accessEvent2) target is:  method is: assertNotEquals(<unknown>,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "HTTPS";
accessEvent.setProtocol(string);
AccessEvent accessEvent = new AccessEvent();
String string = "SSH";
accessEvent.setProtocol(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getStatusCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int statusCode = accessEvent.getStatusCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getStatusCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setStatusCode(404);
        accessEvent.setMessage("Record not found");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setStatusCode(404), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setStatusCode(404) target is: accessEvent method is: setStatusCode(int)
statement is: accessEvent.setMessage("Record not found"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMessage("Record not found") target is: accessEvent method is: setMessage(java.lang.String)
TestCase is: AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getResponseHeaders()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> responseHeaders = accessEvent.getResponseHeaders()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getResponseHeaders();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(200, "OK", "text/html", 200);
        accessEvent.getResponseHeaders();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(200, "OK", "text/html", 200), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getResponseHeaders(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getResponseHeaders() target is: accessEvent method is: getResponseHeaders()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("@7yd(Cm*m{")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent("GET", "/api/v1/users?id=1234567890");
        AccessEvent accessEvent2 = new AccessEvent("POST", "/api/v1/users");
        AccessEvent accessEvent3 = new AccessEvent("PUT", "/api/v1/users?id=9876543210");
        assertTrue(accessEvent1.equals(accessEvent1));
        assertFalse(accessEvent1.equals(accessEvent2));
        assertFalse(accessEvent1.equals(accessEvent3));
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent("GET", "/api/v1/users?id=1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AccessEvent accessEvent2 = new AccessEvent("POST", "/api/v1/users"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AccessEvent accessEvent3 = new AccessEvent("PUT", "/api/v1/users?id=9876543210"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertTrue(accessEvent1.equals(accessEvent1)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(accessEvent1.equals(accessEvent1)) target is:  method is: assertTrue(<unknown>)
statement is: assertFalse(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(accessEvent1.equals(accessEvent2)) target is:  method is: assertFalse(<unknown>)
statement is: assertFalse(accessEvent1.equals(accessEvent3)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(accessEvent1.equals(accessEvent3)) target is:  method is: assertFalse(<unknown>)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getLoggerContext()Lde/huxhorn/lilith/data/access/LoggerContext; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = accessEvent.getLoggerContext()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getLoggerContext();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setLoggerContext("com.example.logger");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setLoggerContext("com.example.logger"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLoggerContext("com.example.logger") target is: accessEvent method is: setLoggerContext(java.lang.String)
TestCase is: AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("@7yd(Cm*m{")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("@7yd(Cm*m{")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteUser("John Doe");
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteUser("Jane Doe");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteUser("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteUser("John Doe") target is: accessEvent method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteUser("Jane Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteUser("Jane Doe") target is: accessEvent method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "John Doe";
accessEvent.setRemoteUser(string);
AccessEvent accessEvent = new AccessEvent();
String string = "Jane Doe";
accessEvent.setRemoteUser(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("=^C~76:wAbYsUY\f#")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("=^C~76:wAbYsUY\f#")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setServerName("192.168.0.1");
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setServerName("192.168.0.2");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setServerName("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setServerName("192.168.0.1") target is: accessEvent method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setServerName("192.168.0.2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setServerName("192.168.0.2") target is: accessEvent method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setServerName(string);
AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.2";
accessEvent.setServerName(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRemoteAddress()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteAddress = accessEvent.getRemoteAddress()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteAddress();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("192.168.0.1", 80, "GET", "/index.html");
        accessEvent.getRemoteAddress();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("192.168.0.1", 80, "GET", "/index.html"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getRemoteAddress(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRemoteAddress() target is: accessEvent method is: getRemoteAddress()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getTimeStamp()Ljava/lang/Long; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Long
statement code is: Long timeStamp = accessEvent.getTimeStamp()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getTimeStamp();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.getTimeStamp();
        // Improved test data
        accessEvent.setTimeStamp(1564739200);// timestamp for a specific date (e.g., July 1, 2019)

        accessEvent.setUserId("user123");// a specific user ID

        accessEvent.setResourceName("documents/resume.pdf");// a specific resource name

        accessEvent.setAccessType(READ);// a specific access type (e.g., read) }}

    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.getTimeStamp(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getTimeStamp() target is: accessEvent method is: getTimeStamp()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getTimeStamp()Ljava/lang/Long;
statement is: // Improved test data
accessEvent.setTimeStamp(1564739200)// timestamp for a specific date (e.g., July 1, 2019)
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data
accessEvent.setTimeStamp(1564739200)// timestamp for a specific date (e.g., July 1, 2019)
 target is: accessEvent method is: setTimeStamp(int)
statement is: accessEvent.setUserId("user123")// a specific user ID
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setUserId("user123")// a specific user ID
 target is: accessEvent method is: setUserId(java.lang.String)
statement is: accessEvent.setResourceName("documents/resume.pdf")// a specific resource name
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResourceName("documents/resume.pdf")// a specific resource name
 target is: accessEvent method is: setResourceName(java.lang.String)
statement is: accessEvent.setAccessType(READ)// a specific access type (e.g., read) }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setAccessType(READ)// a specific access type (e.g., read) }}
 target is: accessEvent method is: setAccessType()
TestCase is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getTimeStamp();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getMethod()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String method = accessEvent.getMethod()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getMethod();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent(new Object(), "GET", "https://www.example.com", 200, null);
        String expectedMethod = "GET";
        String expectedUrl = "https://www.example.com";
        int expectedStatusCode = 200;
        String expectedResponseBody = null;
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(new Object(), "GET", "https://www.example.com", 200, null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String expectedMethod = "GET", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedUrl = "https://www.example.com", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: int expectedStatusCode = 200, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String expectedResponseBody = null, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
* this is vulnerable: String string = "GET"
* this is vulnerable: String string = "https://www.example.com"
* this is vulnerable: int _int = 200
TestCase is: String string = "GET";
String string = "https://www.example.com";
int _int = 200;

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: getRequestURI()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String requestURI = accessEvent.getRequestURI()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestURI();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("GET", "/user/12345", "HTTP/1.1", Map.of("Accept-Encoding", "gzip"), Map.of("Authorization", "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=="));
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("GET", "/user/12345", "HTTP/1.1", Map.of("Accept-Encoding", "gzip"), Map.of("Authorization", "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==")), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the AccessEvent class
        AccessEvent event1 = new AccessEvent();
        event1.setRemoteAddress("192.168.0.1");// more descriptive IP address

        event1.equals(event1);// self-comparison is always true

        AccessEvent event2 = new AccessEvent();
        event2.setRemoteAddress("192.168.1.1");// another IP address in the same subnet

        event1.equals(event2);// false, as they are not the same object

        AccessEvent event3 = new AccessEvent();
        event3.setRemoteAddress("10.0.0.1");// an entirely different IP address

        event1.equals(event3);// false, as they are in different subnets }}

    }
}
statement is: // Improved test data for the AccessEvent class
AccessEvent event1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: event1.setRemoteAddress("192.168.0.1")// more descriptive IP address
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: event1.setRemoteAddress("192.168.0.1")// more descriptive IP address
 target is: event1 method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: event1.equals(event1)// self-comparison is always true
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: event1.equals(event1)// self-comparison is always true
 target is: event1 method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
statement is: AccessEvent event2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: event2.setRemoteAddress("192.168.1.1")// another IP address in the same subnet
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: event2.setRemoteAddress("192.168.1.1")// another IP address in the same subnet
 target is: event2 method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 4
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: event1.equals(event2)// false, as they are not the same object
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: event1.equals(event2)// false, as they are not the same object
 target is: event1 method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 4
Matched Method is: equals(Ljava/lang/Object;)Z
statement is: AccessEvent event3 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: event3.setRemoteAddress("10.0.0.1")// an entirely different IP address
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: event3.setRemoteAddress("10.0.0.1")// an entirely different IP address
 target is: event3 method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 8
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: event1.equals(event3)// false, as they are in different subnets }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: event1.equals(event3)// false, as they are in different subnets }}
 target is: event1 method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 8
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteAddress(string);
accessEvent.equals(accessEvent);
AccessEvent accessEvent = new AccessEvent();
String string = "192.168.1.1";
accessEvent.setRemoteAddress(string);
accessEvent.equals(accessEvent);
AccessEvent accessEvent = new AccessEvent();
String string = "10.0.0.1";
accessEvent.setRemoteAddress(string);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod("ab;Lr,9}:-b5f0txSG")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setMethod("GET /api/users?page=1&size=20");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.equals(accessEvent1);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setMethod("GET /api/users?page=1&size=20"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setMethod("GET /api/users?page=1&size=20") target is: accessEvent1 method is: setMethod(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setMethod(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.equals(accessEvent1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.equals(accessEvent1) target is: accessEvent2 method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "GET /api/users?page=1&size=20";
accessEvent.setMethod(string);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = arg0.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("John Doe", "johndoe@example.com", 2021, "123 Main St.", "Anytown", "USA", "61611");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("John Doe", "johndoe@example.com", 2021, "123 Main St.", "Anytown", "USA", "61611"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals((Object) null)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.equals((Object) null);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.equals(((Object) ("Some String")));
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(((Object) ("Some String"))), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(((Object) ("Some String"))) target is: accessEvent method is: equals(java.lang.Object)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "Some String";
accessEvent.equals(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Object()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Object
statement code is: Object object = new Object()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
Object object = new Object();
accessEvent.equals(object);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("Read", 12345, "user1");
        Object object = new Object();
        boolean isEqual = accessEvent.equals(object);
        // Check if the two objects are equal or not
        System.out.println(isEqual);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("Read", 12345, "user1"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Object object = new Object(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: boolean isEqual = accessEvent.equals(object), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(object) target is: accessEvent method is: equals(java.lang.Object)
statement is: // Check if the two objects are equal or not
System.out.println(isEqual), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Check if the two objects are equal or not
System.out.println(isEqual) target is: System.out method is: println(boolean)
TestCase is: Object object = new Object();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.LoggerContext()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = new LoggerContext()
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private String action;

    private String resource;

    private LoggerContext loggerContext;

    public void setAction(String action) {
        this.action = action;
    }

    public void setResource(String resource) {
        this.resource = resource;
    }

    public void setLoggerContext(LoggerContext loggerContext) {
        this.loggerContext = loggerContext;
    }

    public boolean equals(Object obj) {
        if (obj instanceof AccessEvent) {
            AccessEvent other = ((AccessEvent) (obj));
            return this.action.equals(other.getAction()) && this.resource.equals(other.getResource());
        } else {
            return false;
        }
    }
}
statement is: if (obj instanceof AccessEvent) {
    AccessEvent other = ((AccessEvent) (obj));
    return this.action.equals(other.getAction()) && this.resource.equals(other.getResource());
} else {
    return false;
}, class spoon.support.reflect.code.CtIfImpl
statement is: this.action = action, class spoon.support.reflect.code.CtAssignmentImpl
statement is: this.loggerContext = loggerContext, class spoon.support.reflect.code.CtAssignmentImpl
statement is: this.resource = resource, class spoon.support.reflect.code.CtAssignmentImpl
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.LoggerContext()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = new LoggerContext()
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setLoggerContext(new LoggerContext());
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setLoggerContext(new LoggerContext());
        assertTrue(accessEvent1.equals(accessEvent2));
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setLoggerContext(new LoggerContext()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setLoggerContext(new LoggerContext()) target is: accessEvent1 method is: setLoggerContext(LoggerContext)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setLoggerContext(new LoggerContext()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setLoggerContext(new LoggerContext()) target is: accessEvent2 method is: setLoggerContext(LoggerContext)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V
statement is: assertTrue(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(accessEvent1.equals(accessEvent2)) target is:  method is: assertTrue(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.LoggerContext()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = new LoggerContext()
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("User", "Admin", "192.168.0.1", 1234, LoggerContext.getInstance());
        AccessEvent otherAccessEvent = new AccessEvent("User", "Admin", "192.168.0.2", 5678, LoggerContext.getInstance());
        assertFalse(accessEvent.equals(otherAccessEvent));
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("User", "Admin", "192.168.0.1", 1234, LoggerContext.getInstance()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AccessEvent otherAccessEvent = new AccessEvent("User", "Admin", "192.168.0.2", 5678, LoggerContext.getInstance()), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: assertFalse(accessEvent.equals(otherAccessEvent)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(accessEvent.equals(otherAccessEvent)) target is:  method is: assertFalse(<unknown>)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod("ab;Lr,9}:-b5f0txSG")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod("ab;Lr,9}:-b5f0txSG")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setMethod("read_data_from_file");
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setMethod("read_data_from_database");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setMethod("read_data_from_file"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMethod("read_data_from_file") target is: accessEvent method is: setMethod(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setMethod(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setMethod("read_data_from_database"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMethod("read_data_from_database") target is: accessEvent method is: setMethod(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setMethod(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "read_data_from_file";
accessEvent.setMethod(string);
AccessEvent accessEvent = new AccessEvent();
String string = "read_data_from_database";
accessEvent.setMethod(string);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod("6$=^q.u`]:3`-)48-1")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("6$=^q.u`]:3`-)48-1");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setMethod("GET /user/{id}");// more descriptive and representative of the situation being tested

        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setMethod("GET /user/{id}")// more descriptive and representative of the situation being tested
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMethod("GET /user/{id}")// more descriptive and representative of the situation being tested
 target is: accessEvent method is: setMethod(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setMethod(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "GET /user/{id}";
accessEvent.setMethod(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol("<")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent1.setProtocol("<");
        accessEvent2.setProtocol(">");
        assertFalse(accessEvent1.equals(accessEvent2));
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setProtocol("<"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setProtocol("<") target is: accessEvent1 method is: setProtocol(java.lang.String)
statement is: accessEvent2.setProtocol(">"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setProtocol(">") target is: accessEvent2 method is: setProtocol(java.lang.String)
statement is: assertFalse(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(accessEvent1.equals(accessEvent2)) target is:  method is: assertFalse(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol("<")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Test data for the AccessEvent class
        new AccessEvent("HTTP/1.0", "example.com", new AccessEvent("HTTP/2.0", "example.com"), new AccessEvent("FTP", "ftp.example.com"), new AccessEvent("SFTP", "sftp.example.com"));
    }
}
statement is: // Test data for the AccessEvent class
new AccessEvent("HTTP/1.0", "example.com", new AccessEvent("HTTP/2.0", "example.com"), new AccessEvent("FTP", "ftp.example.com"), new AccessEvent("SFTP", "sftp.example.com")), class spoon.support.reflect.code.CtConstructorCallImpl
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setRemoteAddress("192.168.0.1");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setRemoteAddress("192.168.0.1");
        assertEquals(accessEvent1, accessEvent2);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setRemoteAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setRemoteAddress("192.168.0.1") target is: accessEvent1 method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setRemoteAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setRemoteAddress("192.168.0.1") target is: accessEvent2 method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: assertEquals(accessEvent1, accessEvent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(accessEvent1, accessEvent2) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteAddress(string);
AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteAddress(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("y!>eC")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("y!>eC");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteAddress("192.168.0.1");
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteAddress("192.168.0.1") target is: accessEvent method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteAddress(string);
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("QrU#);,5k->")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setRemoteHost("192.168.0.1");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setRemoteHost("172.16.254.1");
        assertFalse(accessEvent1.equals(accessEvent2));
    }
}
statement is: // Improved test data
AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setRemoteHost("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setRemoteHost("192.168.0.1") target is: accessEvent1 method is: setRemoteHost(java.lang.String)
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setRemoteHost("172.16.254.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setRemoteHost("172.16.254.1") target is: accessEvent2 method is: setRemoteHost(java.lang.String)
statement is: assertFalse(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(accessEvent1.equals(accessEvent2)) target is:  method is: assertFalse(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("QrU#);,5k->")
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("QrU#);,5k->")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteHost("192.168.0.1");
        accessEvent.equals(new AccessEvent());
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteHost("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.0.1") target is: accessEvent method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: accessEvent.equals(new AccessEvent()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(new AccessEvent()) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteHost(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteHost("192.168.0.1");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteHost("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.0.1") target is: accessEvent method is: setRemoteHost(java.lang.String)
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("@7yd(Cm*m{")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setRemoteUser("Administrator");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setRemoteUser("Manager");
        assertNotEquals(accessEvent1, accessEvent2);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setRemoteUser("Administrator"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setRemoteUser("Administrator") target is: accessEvent1 method is: setRemoteUser(java.lang.String)
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setRemoteUser("Manager"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setRemoteUser("Manager") target is: accessEvent2 method is: setRemoteUser(java.lang.String)
statement is: assertNotEquals(accessEvent1, accessEvent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotEquals(accessEvent1, accessEvent2) target is:  method is: assertNotEquals(<unknown>,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteUser("John Doe");
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteUser("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteUser("John Doe") target is: accessEvent method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "John Doe";
accessEvent.setRemoteUser(string);
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: org.evosuite.testcase.statements.FieldStatement@33d940e1 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> map = ZoneId.SHORT_IDS
statement is: setRequestHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestHeaders(arg0)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestHeaders(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestHeaders(map);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setRequestHeaders(new HashMap<String, String>() {
            {
                put("header1", "value1");
                put("header2", "value2");
            }
        });
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setRequestHeaders(new HashMap<String, String>() {
            {
                put("header1", "value1");
                put("header2", "value2");
            }
        });
        assertTrue(accessEvent1.equals(accessEvent2));
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setRequestHeaders(new HashMap<String, String>() {
    {
        put("header1", "value1");
        put("header2", "value2");
    }
}), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setRequestHeaders(new HashMap<String, String>() {
    {
        put("header1", "value1");
        put("header2", "value2");
    }
}) target is: accessEvent1 method is: setRequestHeaders(DummyClass$1)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestHeaders(Ljava/util/Map;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setRequestHeaders(new HashMap<String, String>() {
    {
        put("header1", "value1");
        put("header2", "value2");
    }
}), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setRequestHeaders(new HashMap<String, String>() {
    {
        put("header1", "value1");
        put("header2", "value2");
    }
}) target is: accessEvent2 method is: setRequestHeaders(DummyClass$2)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setRequestHeaders(Ljava/util/Map;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: assertTrue(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(accessEvent1.equals(accessEvent2)) target is:  method is: assertTrue(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = null;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = null;
accessEvent.setRequestHeaders(map);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: org.evosuite.testcase.statements.FieldStatement@33d940e1 type is: class org.evosuite.testcase.statements.FieldStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> map = ZoneId.SHORT_IDS
statement is: setRequestHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestHeaders(arg0)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("Test", "1234567890");
        Map<String, String> map = ZoneId.SHORT_IDS;
        accessEvent.setRequestHeaders(map);
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("Test", "1234567890"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Map<String, String> map = ZoneId.SHORT_IDS, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtFieldReadImpl
Field is: ZoneId.SHORT_IDS is ZoneId
CtField is: public static final java.util.Map java.time.ZoneId.SHORT_IDS Map SHORT_IDS
statement is: accessEvent.setRequestHeaders(map), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestHeaders(map) target is: accessEvent method is: setRequestHeaders(Map)
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("@7yd(Cm*m{")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("@7yd(Cm*m{")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setRequestURI("https://www.example.com/login?param1=value1&param2=value2");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setRequestURI("https://www.example.com/login?param1=value1&param2=value2");
        assertTrue(accessEvent1.equals(accessEvent2));
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setRequestURI("https://www.example.com/login?param1=value1&param2=value2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setRequestURI("https://www.example.com/login?param1=value1&param2=value2") target is: accessEvent1 method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setRequestURI("https://www.example.com/login?param1=value1&param2=value2"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setRequestURI("https://www.example.com/login?param1=value1&param2=value2") target is: accessEvent2 method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 3
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: assertTrue(accessEvent1.equals(accessEvent2)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertTrue(accessEvent1.equals(accessEvent2)) target is:  method is: assertTrue(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/login?param1=value1&param2=value2";
accessEvent.setRequestURI(string);
AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/login?param1=value1&param2=value2";
accessEvent.setRequestURI(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("@7Zd(Cm m{")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7Zd(Cm m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setRequestURI("https://www.example.com/path/to/resource");
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.equals(accessEvent1);
    }
}
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setRequestURI("https://www.example.com/path/to/resource"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setRequestURI("https://www.example.com/path/to/resource") target is: accessEvent1 method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.equals(accessEvent1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.equals(accessEvent1) target is: accessEvent2 method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/path/to/resource";
accessEvent.setRequestURI(string);
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("7,qARlPk")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("7,qARlPk");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURL("https://www.example.com/path/to/file?query=value");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURL("https://www.example.com/path/to/file?query=value"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://www.example.com/path/to/file?query=value") target is: accessEvent method is: setRequestURL(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURL(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/path/to/file?query=value";
accessEvent.setRequestURL(string);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("7,qARlPk")
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("7,qARlPk")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("7,qARlPk");
accessEvent.setRequestURL("7,qARlPk");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURL("https://example.com/page");
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURL("https://example.com/page"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://example.com/page") target is: accessEvent method is: setRequestURL(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURL(Ljava/lang/String;)V
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: equals(Ljava/lang/Object;)Z
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://example.com/page";
accessEvent.setRequestURL(string);
accessEvent.equals(accessEvent);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("")
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURL("https://www.example.com/index.html");
        AccessEvent otherAccessEvent = new AccessEvent();
        otherAccessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURL("https://www.example.com/index.html"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://www.example.com/index.html") target is: accessEvent method is: setRequestURL(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURL(Ljava/lang/String;)V
statement is: AccessEvent otherAccessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: otherAccessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: otherAccessEvent.equals(accessEvent) target is: otherAccessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/index.html";
accessEvent.setRequestURL(string);
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String>
statement code is: HashMap<String, String> hashMap = new HashMap<String, String>()
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.setResponseHeaders(hashMap);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String> hashMap = new HashMap<String, String>();
        accessEvent.setResponseHeaders(hashMap);
        accessEvent.setResponseHeaders(hashMap);
        // Add more descriptive test data for the response headers
        accessEvent.setResponseHeaders(new HashMap<String, String>() {
            {
                put("Content-Type", "application/json");
                put("Content-Length", "1024");
            }
        });
        // Add more representative test cases for the equals method
        assertTrue(accessEvent.equals(new AccessEvent()));
        assertFalse(accessEvent.equals(null));
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String> hashMap = new HashMap<String, String>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setResponseHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResponseHeaders(hashMap) target is: accessEvent method is: setResponseHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
statement is: accessEvent.setResponseHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResponseHeaders(hashMap) target is: accessEvent method is: setResponseHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
statement is: // Add more descriptive test data for the response headers
accessEvent.setResponseHeaders(new HashMap<String, String>() {
    {
        put("Content-Type", "application/json");
        put("Content-Length", "1024");
    }
}), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add more descriptive test data for the response headers
accessEvent.setResponseHeaders(new HashMap<String, String>() {
    {
        put("Content-Type", "application/json");
        put("Content-Length", "1024");
    }
}) target is: accessEvent method is: setResponseHeaders(DummyClass$1)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
statement is: // Add more representative test cases for the equals method
assertTrue(accessEvent.equals(new AccessEvent())), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Add more representative test cases for the equals method
assertTrue(accessEvent.equals(new AccessEvent())) target is:  method is: assertTrue(<unknown>)
statement is: assertFalse(accessEvent.equals(null)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertFalse(accessEvent.equals(null)) target is:  method is: assertFalse(<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.setResponseHeaders(hashMap);
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String>
statement code is: HashMap<String, String> hashMap = new HashMap<String, String>()
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("Content-Type", "application/json");
        accessEvent.setResponseHeaders(hashMap);
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String> hashMap = new HashMap<String, String>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashMap.put("Content-Type", "application/json"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put("Content-Type", "application/json") target is: hashMap method is: put(java.lang.String,java.lang.String)
statement is: accessEvent.setResponseHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResponseHeaders(hashMap) target is: accessEvent method is: setResponseHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("=^C~76:wAbYsUY\f#")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setServerName("my-server-name");
        accessEvent.equals(accessEvent);
    }
}
statement is: // Improved test data
AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setServerName("my-server-name"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setServerName("my-server-name") target is: accessEvent method is: setServerName(java.lang.String)
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("")
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setServerName("production");
        accessEvent.setRequestId(123456789);
        accessEvent.setTimestamp(LocalDateTime.of(2022, 3, 14, 10, 30));
        accessEvent.equals(accessEvent);
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setServerName("production"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setServerName("production") target is: accessEvent method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: accessEvent.setRequestId(123456789), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestId(123456789) target is: accessEvent method is: setRequestId(int)
statement is: accessEvent.setTimestamp(LocalDateTime.of(2022, 3, 14, 10, 30)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimestamp(LocalDateTime.of(2022, 3, 14, 10, 30)) target is: accessEvent method is: setTimestamp()
statement is: accessEvent.equals(accessEvent), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(accessEvent) target is: accessEvent method is: equals(AccessEvent)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "production";
accessEvent.setServerName(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long((-630L))
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-630L));
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        Long timestamp1 = new Long("2022-02-24T15:29:47");
        Long timestamp2 = new Long("2022-02-25T15:29:47");
        AccessEvent accessEvent1 = new AccessEvent();
        accessEvent1.setTimeStamp(timestamp1);
        AccessEvent accessEvent2 = new AccessEvent();
        accessEvent2.setTimeStamp(timestamp2);
        assertNotEquals(accessEvent1, accessEvent2);
    }
}
statement is: Long timestamp1 = new Long("2022-02-24T15:29:47"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Long timestamp2 = new Long("2022-02-25T15:29:47"), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: AccessEvent accessEvent1 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent1.setTimeStamp(timestamp1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent1.setTimeStamp(timestamp1) target is: accessEvent1 method is: setTimeStamp(java.lang.Long)
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent2.setTimeStamp(timestamp2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setTimeStamp(timestamp2) target is: accessEvent2 method is: setTimeStamp(java.lang.Long)
statement is: assertNotEquals(accessEvent1, accessEvent2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertNotEquals(accessEvent1, accessEvent2) target is:  method is: assertNotEquals(<unknown>,<unknown>)
TestCase is: String string = "2022-02-24T15:29:47";
Long long = new Long((long) string);
String string = "2022-02-25T15:29:47";
Long long = new Long((long) string);
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long(0L)
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: equals(Ljava/lang/Object;)Z type is: class org.evosuite.testcase.statements.MethodStatement return type boolean
statement code is: boolean equals = accessEvent.equals(arg0)
test data is: AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(0L);
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        accessEvent.setTimeStamp(new Long(1597734862000L));
        accessEvent.equals(new AccessEvent("UserA", "PageA"));
        accessEvent.setTimeStamp(new Long(1597734862000L + 1000L));
        accessEvent.equals(new AccessEvent("UserB", "PageB"));
    }
}
statement is: accessEvent.setTimeStamp(new Long(1597734862000L)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(new Long(1597734862000L)) target is: accessEvent method is: setTimeStamp(java.lang.Long)
statement is: accessEvent.equals(new AccessEvent("UserA", "PageA")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(new AccessEvent("UserA", "PageA")) target is: accessEvent method is: equals(AccessEvent)
statement is: accessEvent.setTimeStamp(new Long(1597734862000L + 1000L)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(new Long(1597734862000L + 1000L)) target is: accessEvent method is: setTimeStamp(java.lang.Long)
statement is: accessEvent.equals(new AccessEvent("UserB", "PageB")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.equals(new AccessEvent("UserB", "PageB")) target is: accessEvent method is: equals(AccessEvent)
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long((-1L))
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-1L));
accessEvent.setTimeStamp(long);
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the AccessEvent class
        AccessEvent accessEvent = new AccessEvent();
        Long = new Long("2022-03-28 14:30:00");
        String string = "Test User";
        accessEvent.setTimeStamp(long.class);
        accessEvent.setName(string);
        accessEvent.hashCode();
    }
}
statement is: // Improved test data for the AccessEvent class
AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Long = new Long("2022-03-28 14:30:00"), class spoon.support.reflect.code.CtAssignmentImpl
statement is: String string = "Test User", class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: accessEvent.setTimeStamp(long.class), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(long.class) target is: accessEvent method is: setTimeStamp(java.lang.Class)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: accessEvent.setName(string), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setName(string) target is: accessEvent method is: setName(java.lang.String)
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
* this is vulnerable: String string = "Test User"
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "Test User";
Long long = null;
accessEvent.setTimeStamp(long);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.LoggerContext()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = new LoggerContext()
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
    }

    private Logger logger = Logger.getLogger(AccessEvent.class);

    private Level level = Level.INFO;

    private String message = "This is an informational message";

    private Throwable throwable = new NullPointerException("This is a test exception");

    public  AccessEvent() {
        logger.log(level, message, throwable);
    }

    public void setLoggerContext(LoggerContext loggerContext) {
        this.loggerContext = loggerContext;
    }

    public Level getLevel() {
        return level;
    }

    public void setLevel(Level level) {
        this.level = level;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public Throwable getThrowable() {
        return throwable;
    }

    public void setThrowable(Throwable throwable) {
        this.throwable = throwable;
    }
}
statement is: logger.log(level, message, throwable), class spoon.support.reflect.code.CtInvocationImpl
invocation is: logger.log(level, message, throwable) target is: logger method is: log(Level,java.lang.String,java.lang.Throwable)
statement is: return level, class spoon.support.reflect.code.CtReturnImpl
statement is: return message, class spoon.support.reflect.code.CtReturnImpl
statement is: return throwable, class spoon.support.reflect.code.CtReturnImpl
statement is: this.level = level, class spoon.support.reflect.code.CtAssignmentImpl
statement is: this.loggerContext = loggerContext, class spoon.support.reflect.code.CtAssignmentImpl
statement is: this.message = message, class spoon.support.reflect.code.CtAssignmentImpl
statement is: this.throwable = throwable, class spoon.support.reflect.code.CtAssignmentImpl
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURI("/user/profile/1234");
        accessEvent.hashCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURI("/user/profile/1234"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURI("/user/profile/1234") target is: accessEvent method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "/user/profile/1234";
accessEvent.setRequestURI(string);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("gF0Ec%vr(Zh|kx")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("gF0Ec%vr(Zh|kx");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURL("https://www.example.com/path/to/resource?query=string");
        accessEvent.hashCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURL("https://www.example.com/path/to/resource?query=string"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://www.example.com/path/to/resource?query=string") target is: accessEvent method is: setRequestURL(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURL(Ljava/lang/String;)V
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/path/to/resource?query=string";
accessEvent.setRequestURL(string);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("h3_+(302")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("h3_+(302");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteHost("192.168.1.1");
        accessEvent.hashCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteHost("192.168.1.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.1.1") target is: accessEvent method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.1.1";
accessEvent.setRemoteHost(string);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser(", birthTime=")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser(", birthTime=");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteUser("John Doe");
        accessEvent.setBirthTime(1987, 6, 20);
        accessEvent.hashCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteUser("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteUser("John Doe") target is: accessEvent method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: accessEvent.setBirthTime(1987, 6, 20), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setBirthTime(1987, 6, 20) target is: accessEvent method is: setBirthTime(int,int,int)
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "John Doe";
accessEvent.setRemoteUser(string);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol("")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setProtocol("https");
        accessEvent.hashCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setProtocol("https"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setProtocol("https") target is: accessEvent method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https";
accessEvent.setProtocol(string);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod(")[J%-v%)K&*y',{R=K")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod(")[J%-v%)K&*y',{R=K");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setMethod("HTTP GET method");
        accessEvent.getHashCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setMethod("HTTP GET method"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMethod("HTTP GET method") target is: accessEvent method is: setMethod(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setMethod(Ljava/lang/String;)V
statement is: accessEvent.getHashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getHashCode() target is: accessEvent method is: getHashCode()
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "HTTP GET method";
accessEvent.setMethod(string);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("h3_+(302")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("h3_+(302");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setServerName("https://www.example.com");
        accessEvent.hashCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setServerName("https://www.example.com"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setServerName("https://www.example.com") target is: accessEvent method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com";
accessEvent.setServerName(string);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("/iYy%;#bwzP=")
statement is: hashCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int hashCode = accessEvent.hashCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("/iYy%;#bwzP=");
accessEvent.hashCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for AccessEvent
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteAddress("192.168.0.1");// Improved remote address value to make it more descriptive and representative of the situation being tested

        accessEvent.hashCode();
    }
}
statement is: // Improved test data for AccessEvent
AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteAddress("192.168.0.1")// Improved remote address value to make it more descriptive and representative of the situation being tested
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteAddress("192.168.0.1")// Improved remote address value to make it more descriptive and representative of the situation being tested
 target is: accessEvent method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: accessEvent.hashCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.hashCode() target is: accessEvent method is: hashCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: hashCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteAddress(string);
accessEvent.hashCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setLocalPort(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLocalPort((-1))
statement is: getLocalPort()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int localPort = accessEvent.getLocalPort()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((-1));
accessEvent.getLocalPort();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setLocalPort(80);// Changed to a more descriptive value, such as 80 for HTTP

        accessEvent.getLocalPort();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setLocalPort(80)// Changed to a more descriptive value, such as 80 for HTTP
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLocalPort(80)// Changed to a more descriptive value, such as 80 for HTTP
 target is: accessEvent method is: setLocalPort(int)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setLocalPort(I)V
statement is: accessEvent.getLocalPort(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getLocalPort() target is: accessEvent method is: getLocalPort()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getLocalPort()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
int _int = 80;
accessEvent.setLocalPort(_int);
accessEvent.getLocalPort();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setLocalPort(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLocalPort(4267)
statement is: getLocalPort()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int localPort = accessEvent.getLocalPort()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort(4267);
accessEvent.getLocalPort();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setLocalPort(80);// Changed from 4267 to 80 to make it more descriptive and representative of a typical local port number used in a web application.

        accessEvent.getLocalPort();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setLocalPort(80)// Changed from 4267 to 80 to make it more descriptive and representative of a typical local port number used in a web application.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLocalPort(80)// Changed from 4267 to 80 to make it more descriptive and representative of a typical local port number used in a web application.
 target is: accessEvent method is: setLocalPort(int)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setLocalPort(I)V
statement is: accessEvent.getLocalPort(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getLocalPort() target is: accessEvent method is: getLocalPort()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getLocalPort()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
int _int = 80;
accessEvent.setLocalPort(_int);
accessEvent.getLocalPort();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: de.huxhorn.lilith.data.access.LoggerContext()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = new LoggerContext()
statement is: setLoggerContext(Lde/huxhorn/lilith/data/access/LoggerContext;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setLoggerContext(arg0)
statement is: getLoggerContext()Lde/huxhorn/lilith/data/access/LoggerContext; type is: class org.evosuite.testcase.statements.MethodStatement return type class de.huxhorn.lilith.data.access.LoggerContext
statement code is: LoggerContext loggerContext = accessEvent.getLoggerContext()
test data is: AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.getLoggerContext();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent("INFO", "User logged in successfully.", null, null);
        LoggerContext loggerContext = new LoggerContext("DEBUG", "System startup completed.", null);
        accessEvent.setLoggerContext(loggerContext);
        accessEvent.getLoggerContext();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent("INFO", "User logged in successfully.", null, null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: LoggerContext loggerContext = new LoggerContext("DEBUG", "System startup completed.", null), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setLoggerContext(loggerContext), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setLoggerContext(loggerContext) target is: accessEvent method is: setLoggerContext(LoggerContext)
statement is: accessEvent.getLoggerContext(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getLoggerContext() target is: accessEvent method is: getLoggerContext()
statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod("")
statement is: getMethod()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String method = accessEvent.getMethod()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("");
accessEvent.getMethod();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data for the AccessEvent class
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setMethod("GET");// Changed from an empty string to a more descriptive value

        accessEvent.getMethod();
    }
}
statement is: // Improved test data for the AccessEvent class
AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setMethod("GET")// Changed from an empty string to a more descriptive value
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMethod("GET")// Changed from an empty string to a more descriptive value
 target is: accessEvent method is: setMethod(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setMethod(Ljava/lang/String;)V
statement is: accessEvent.getMethod(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getMethod() target is: accessEvent method is: getMethod()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getMethod()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "GET";
accessEvent.setMethod(string);
accessEvent.getMethod();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setMethod(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setMethod(", birthTime=")
statement is: getMethod()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String method = accessEvent.getMethod()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod(", birthTime=");
accessEvent.getMethod();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setMethod("POST");
        accessEvent.getMethod();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setMethod("POST"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setMethod("POST") target is: accessEvent method is: setMethod(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setMethod(Ljava/lang/String;)V
statement is: accessEvent.getMethod(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getMethod() target is: accessEvent method is: getMethod()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getMethod()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "POST";
accessEvent.setMethod(string);
accessEvent.getMethod();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol("")
statement is: getProtocol()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String protocol = accessEvent.getProtocol()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("");
accessEvent.getProtocol();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setProtocol("HTTPS");
        accessEvent.getProtocol();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setProtocol("HTTPS"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setProtocol("HTTPS") target is: accessEvent method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: accessEvent.getProtocol(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getProtocol() target is: accessEvent method is: getProtocol()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getProtocol()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "HTTPS";
accessEvent.setProtocol(string);
accessEvent.getProtocol();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setProtocol(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setProtocol(", birthTime=")
statement is: getProtocol()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String protocol = accessEvent.getProtocol()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol(", birthTime=");
accessEvent.getProtocol();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setProtocol("HTTP/1.1");
        accessEvent.getProtocol();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setProtocol("HTTP/1.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setProtocol("HTTP/1.1") target is: accessEvent method is: setProtocol(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setProtocol(Ljava/lang/String;)V
statement is: accessEvent.getProtocol(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getProtocol() target is: accessEvent method is: getProtocol()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getProtocol()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "HTTP/1.1";
accessEvent.setProtocol(string);
accessEvent.getProtocol();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress("")
statement is: getRemoteAddress()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteAddress = accessEvent.getRemoteAddress()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("");
accessEvent.getRemoteAddress();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteAddress("192.168.0.1");
        String remoteAddress = accessEvent.getRemoteAddress();
        assertEquals(remoteAddress, "192.168.0.1");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteAddress("192.168.0.1") target is: accessEvent method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: String remoteAddress = accessEvent.getRemoteAddress(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRemoteAddress() target is: accessEvent method is: getRemoteAddress()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRemoteAddress()Ljava/lang/String;
statement is: assertEquals(remoteAddress, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(remoteAddress, "192.168.0.1") target is:  method is: assertEquals(java.lang.String,java.lang.String)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteAddress(string);
accessEvent.getRemoteAddress();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteAddress(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteAddress(", birthTime=")
statement is: getRemoteAddress()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteAddress = accessEvent.getRemoteAddress()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress(", birthTime=");
accessEvent.getRemoteAddress();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteAddress("192.168.0.1");
        accessEvent.getRemoteAddress();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteAddress("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteAddress("192.168.0.1") target is: accessEvent method is: setRemoteAddress(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteAddress(Ljava/lang/String;)V
statement is: accessEvent.getRemoteAddress(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRemoteAddress() target is: accessEvent method is: getRemoteAddress()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRemoteAddress()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteAddress(string);
accessEvent.getRemoteAddress();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost("")
statement is: getRemoteHost()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteHost = accessEvent.getRemoteHost()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("");
accessEvent.getRemoteHost();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteHost("192.168.0.1");// This value represents a remote host that is part of a company's internal network.

        String remoteHost = accessEvent.getRemoteHost();
        assertEquals(remoteHost, "192.168.0.1");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteHost("192.168.0.1")// This value represents a remote host that is part of a company's internal network.
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.0.1")// This value represents a remote host that is part of a company's internal network.
 target is: accessEvent method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: String remoteHost = accessEvent.getRemoteHost(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRemoteHost() target is: accessEvent method is: getRemoteHost()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRemoteHost()Ljava/lang/String;
statement is: assertEquals(remoteHost, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(remoteHost, "192.168.0.1") target is:  method is: assertEquals(java.lang.String,java.lang.String)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteHost(string);
accessEvent.getRemoteHost();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteHost(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteHost(")[J%-v%)K&*y',{R=K")
statement is: getRemoteHost()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteHost = accessEvent.getRemoteHost()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost(")[J%-v%)K&*y',{R=K");
accessEvent.getRemoteHost();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteHost("192.168.0.1");
        String remoteHost = accessEvent.getRemoteHost();
        assertEquals(remoteHost, "192.168.0.1");
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteHost("192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteHost("192.168.0.1") target is: accessEvent method is: setRemoteHost(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteHost(Ljava/lang/String;)V
statement is: String remoteHost = accessEvent.getRemoteHost(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRemoteHost() target is: accessEvent method is: getRemoteHost()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRemoteHost()Ljava/lang/String;
statement is: assertEquals(remoteHost, "192.168.0.1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(remoteHost, "192.168.0.1") target is:  method is: assertEquals(java.lang.String,java.lang.String)
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "192.168.0.1";
accessEvent.setRemoteHost(string);
accessEvent.getRemoteHost();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("")
statement is: getRemoteUser()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteUser = accessEvent.getRemoteUser()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("");
accessEvent.getRemoteUser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteUser("John Doe");
        accessEvent.getRemoteUser();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteUser("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteUser("John Doe") target is: accessEvent method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: accessEvent.getRemoteUser(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRemoteUser() target is: accessEvent method is: getRemoteUser()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRemoteUser()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "John Doe";
accessEvent.setRemoteUser(string);
accessEvent.getRemoteUser();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRemoteUser(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRemoteUser("]")
statement is: getRemoteUser()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String remoteUser = accessEvent.getRemoteUser()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("]");
accessEvent.getRemoteUser();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRemoteUser("John Doe");
        accessEvent.getRemoteUser();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRemoteUser("John Doe"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRemoteUser("John Doe") target is: accessEvent method is: setRemoteUser(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRemoteUser(Ljava/lang/String;)V
statement is: accessEvent.getRemoteUser(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRemoteUser() target is: accessEvent method is: getRemoteUser()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRemoteUser()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "John Doe";
accessEvent.setRemoteUser(string);
accessEvent.getRemoteUser();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String>
statement code is: HashMap<String, String> hashMap = new HashMap<String, String>()
statement is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String put = hashMap.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime=")
statement is: setRequestHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestHeaders(arg0)
statement is: getRequestHeaders()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> requestHeaders = accessEvent.getRequestHeaders()
test data is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime=");
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime=");
        accessEvent.setRequestHeaders(hashMap);
        accessEvent.getRequestHeaders();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String> hashMap = new HashMap<String, String>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashMap.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime="), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime=") target is: hashMap method is: put(java.lang.String,java.lang.String)
source statement: java.util.HashMap()V callee: VariableReference: Statement 1, type java.util.HashMap<java.lang.String, java.lang.String>index is: 1
Matched Method is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
statement is: accessEvent.setRequestHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestHeaders(hashMap) target is: accessEvent method is: setRequestHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestHeaders(Ljava/util/Map;)V
statement is: accessEvent.getRequestHeaders(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRequestHeaders() target is: accessEvent method is: getRequestHeaders()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRequestHeaders()Ljava/util/Map;
TestCase is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
String string = "AccessEvent[loggerContext=null, timeStamp=null]";
String string = ", birthTime=";
hashMap.put(string, string);
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String>
statement code is: HashMap<String, String> hashMap = new HashMap<String, String>()
statement is: setRequestHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestHeaders(arg0)
statement is: getRequestHeaders()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> requestHeaders = accessEvent.getRequestHeaders()
test data is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("Content-Type", "application/json");
        accessEvent.setRequestHeaders(hashMap);
        assertEquals(hashMap, accessEvent.getRequestHeaders());
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String> hashMap = new HashMap<String, String>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashMap.put("Content-Type", "application/json"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put("Content-Type", "application/json") target is: hashMap method is: put(java.lang.String,java.lang.String)
statement is: accessEvent.setRequestHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestHeaders(hashMap) target is: accessEvent method is: setRequestHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestHeaders(Ljava/util/Map;)V
statement is: assertEquals(hashMap, accessEvent.getRequestHeaders()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(hashMap, accessEvent.getRequestHeaders()) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setRequestHeaders(hashMap);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String[]>
statement code is: HashMap<String, String[]> hashMap = new HashMap<String, String[]>()
statement is: org.evosuite.testcase.statements.ArrayStatement@f32d2974 type is: class org.evosuite.testcase.statements.ArrayStatement return type class [Ljava.lang.String;
statement code is: String[] stringArray = new String[1]
statement is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class [Ljava.lang.String;
statement code is: String[] put = hashMap.put("", arg1)
statement is: setRequestParameters(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestParameters(arg0)
statement is: getRequestParameters()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String[]>
statement code is: Map<String, String[]> requestParameters = accessEvent.getRequestParameters()
test data is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
String[] stringArray = new String[1];
hashMap.put("", stringArray);
accessEvent.setRequestParameters(hashMap);
accessEvent.getRequestParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
        String[] stringArray1 = new String[2];
        stringArray1[0] = "user1";
        stringArray1[1] = "password1";
        hashMap.put("credentials", stringArray1);
        AccessEvent accessEvent2 = new AccessEvent();
        HashMap<String, String[]> hashMap2 = new HashMap<String, String[]>();
        String[] stringArray2 = new String[3];
        stringArray2[0] = "user2";
        stringArray2[1] = "password2";
        stringArray2[2] = "extraParameter";
        hashMap2.put("credentials", stringArray2);
        accessEvent.setRequestParameters(hashMap);
        assertEquals(hashMap, accessEvent.getRequestParameters());
        accessEvent2.setRequestParameters(hashMap2);
        assertEquals(hashMap2, accessEvent2.getRequestParameters());
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String[]> hashMap = new HashMap<String, String[]>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray1 = new String[2], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [2] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[2] Elements: []
lengths: [1] [2]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray1[0] = "user1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray1[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"user1" Ct is: stringArray1[0] = "user1"
target : stringArray1 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray1[1] = "password1", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray1[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"password1" Ct is: stringArray1[1] = "password1"
target : stringArray1 class spoon.support.reflect.code.CtLiteralImpl
statement is: hashMap.put("credentials", stringArray1), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put("credentials", stringArray1) target is: hashMap method is: put(java.lang.String,java.lang.String[])
source statement: java.util.HashMap()V callee: VariableReference: Statement 1, type java.util.HashMap<java.lang.String, java.lang.String[]>index is: 1
Matched Method is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
statement is: AccessEvent accessEvent2 = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String[]> hashMap2 = new HashMap<String, String[]>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: String[] stringArray2 = new String[3], class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtNewArrayImpl
Dimension: [3] Ct is: String[] stringArray = new String[1] isAssignment: false Array: new String[3] Elements: []
lengths: [1] [3]
Their type are: class [Ljava.lang.String; String[]
statement is: stringArray2[0] = "user2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[0] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"user2" Ct is: stringArray2[0] = "user2"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray2[1] = "password2", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[1] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"password2" Ct is: stringArray2[1] = "password2"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: stringArray2[2] = "extraParameter", class spoon.support.reflect.code.CtAssignmentImpl
Assigned : stringArray2[2] Assigned Type class spoon.support.reflect.code.CtArrayWriteImpl String Assignment:"extraParameter" Ct is: stringArray2[2] = "extraParameter"
target : stringArray2 class spoon.support.reflect.code.CtLiteralImpl
statement is: hashMap2.put("credentials", stringArray2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap2.put("credentials", stringArray2) target is: hashMap2 method is: put(java.lang.String,java.lang.String[])
source statement: java.util.HashMap()V callee: VariableReference: Statement 1, type java.util.HashMap<java.lang.String, java.lang.String[]>index is: 6
Matched Method is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
statement is: accessEvent.setRequestParameters(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestParameters(hashMap) target is: accessEvent method is: setRequestParameters(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 5
Matched Method is: setRequestParameters(Ljava/util/Map;)V
statement is: assertEquals(hashMap, accessEvent.getRequestParameters()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(hashMap, accessEvent.getRequestParameters()) target is:  method is: assertEquals(<unknown>,<unknown>)
statement is: accessEvent2.setRequestParameters(hashMap2), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent2.setRequestParameters(hashMap2) target is: accessEvent2 method is: setRequestParameters(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 5
Matched Method is: setRequestParameters(Ljava/util/Map;)V
statement is: assertEquals(hashMap2, accessEvent2.getRequestParameters()), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(hashMap2, accessEvent2.getRequestParameters()) target is:  method is: assertEquals(<unknown>,<unknown>)
TestCase is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
String[] stringArray = new String[1];
String string = "credentials";
hashMap.put(string, stringArray);
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
String[] stringArray = new String[1];
String string = "credentials";
hashMap.put(string, stringArray);
accessEvent.setRequestParameters(hashMap);
accessEvent.setRequestParameters(hashMap);

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String[]>
statement code is: HashMap<String, String[]> hashMap = new HashMap<String, String[]>()
statement is: setRequestParameters(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestParameters(arg0)
statement is: getRequestParameters()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String[]>
statement code is: Map<String, String[]> requestParameters = accessEvent.getRequestParameters()
test data is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
accessEvent.setRequestParameters(hashMap);
accessEvent.getRequestParameters();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
        accessEvent.setRequestParameters(hashMap);
        // Set more descriptive values for the request parameters
        int someInteger = -1;// Instead of using 0 as the default value

        double someDouble = 3.14;// Instead of using 0.0 as the default value

        String someString = "abc";// Instead of using an empty String

        accessEvent.getRequestParameters();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String[]> hashMap = new HashMap<String, String[]>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestParameters(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestParameters(hashMap) target is: accessEvent method is: setRequestParameters(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestParameters(Ljava/util/Map;)V
statement is: // Set more descriptive values for the request parameters
int someInteger = -1// Instead of using 0 as the default value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtUnaryOperatorImpl
IT HAS NOT BEEN SUPPORTED YET: -1
statement is: double someDouble = 3.14// Instead of using 0.0 as the default value
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: String someString = "abc"// Instead of using an empty String
, class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtLiteralImpl
statement is: accessEvent.getRequestParameters(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRequestParameters() target is: accessEvent method is: getRequestParameters()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRequestParameters()Ljava/util/Map;
* this is vulnerable: double _double = 3.14
* this is vulnerable: String string = "abc"
TestCase is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
accessEvent.setRequestParameters(hashMap);
double _double = 3.14;
String string = "abc";
accessEvent.getRequestParameters();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("")
statement is: getRequestURI()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String requestURI = accessEvent.getRequestURI()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("");
accessEvent.getRequestURI();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURI("/api/users/123456789");
        accessEvent.getRequestURI();// returns "/api/users/123456789" }}

    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURI("/api/users/123456789"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURI("/api/users/123456789") target is: accessEvent method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: accessEvent.getRequestURI()// returns "/api/users/123456789" }}
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRequestURI()// returns "/api/users/123456789" }}
 target is: accessEvent method is: getRequestURI()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRequestURI()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "/api/users/123456789";
accessEvent.setRequestURI(string);
accessEvent.getRequestURI();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURI(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURI("iYPdb]-Z^Ldkd?x")
statement is: getRequestURI()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String requestURI = accessEvent.getRequestURI()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("iYPdb]-Z^Ldkd?x");
accessEvent.getRequestURI();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURI("https://www.example.com/path/to/resource?query=string&another=query");
        accessEvent.getRequestURI();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURI("https://www.example.com/path/to/resource?query=string&another=query"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURI("https://www.example.com/path/to/resource?query=string&another=query") target is: accessEvent method is: setRequestURI(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURI(Ljava/lang/String;)V
statement is: accessEvent.getRequestURI(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRequestURI() target is: accessEvent method is: getRequestURI()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRequestURI()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/path/to/resource?query=string&another=query";
accessEvent.setRequestURI(string);
accessEvent.getRequestURI();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("")
statement is: getRequestURL()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String requestURL = accessEvent.getRequestURL()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("");
accessEvent.getRequestURL();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURL("https://www.example.com/login");
        accessEvent.getRequestURL();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURL("https://www.example.com/login"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://www.example.com/login") target is: accessEvent method is: setRequestURL(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURL(Ljava/lang/String;)V
statement is: accessEvent.getRequestURL(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRequestURL() target is: accessEvent method is: getRequestURL()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRequestURL()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/login";
accessEvent.setRequestURL(string);
accessEvent.getRequestURL();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setRequestURL(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setRequestURL("R*R-.c)nJ^]")
statement is: getRequestURL()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String requestURL = accessEvent.getRequestURL()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("R*R-.c)nJ^]");
accessEvent.getRequestURL();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setRequestURL("https://www.example.com/path/to/file.html");
        accessEvent.getRequestURL();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setRequestURL("https://www.example.com/path/to/file.html"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setRequestURL("https://www.example.com/path/to/file.html") target is: accessEvent method is: setRequestURL(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setRequestURL(Ljava/lang/String;)V
statement is: accessEvent.getRequestURL(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getRequestURL() target is: accessEvent method is: getRequestURL()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getRequestURL()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "https://www.example.com/path/to/file.html";
accessEvent.setRequestURL(string);
accessEvent.getRequestURL();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String>
statement code is: HashMap<String, String> hashMap = new HashMap<String, String>()
statement is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String put = hashMap.put("*Tlkuf;KD$~P", "*Tlkuf;KD$~P")
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: getResponseHeaders()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> responseHeaders = accessEvent.getResponseHeaders()
test data is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("*Tlkuf;KD$~P", "*Tlkuf;KD$~P");
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("HTTP/1.1 200 OK", "HTTP/1.1 200 OK");
        accessEvent.setResponseHeaders(hashMap);
        accessEvent.getResponseHeaders();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String> hashMap = new HashMap<String, String>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashMap.put("HTTP/1.1 200 OK", "HTTP/1.1 200 OK"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put("HTTP/1.1 200 OK", "HTTP/1.1 200 OK") target is: hashMap method is: put(java.lang.String,java.lang.String)
source statement: java.util.HashMap()V callee: VariableReference: Statement 1, type java.util.HashMap<java.lang.String, java.lang.String>index is: 1
Matched Method is: put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
statement is: accessEvent.setResponseHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResponseHeaders(hashMap) target is: accessEvent method is: setResponseHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
statement is: accessEvent.getResponseHeaders(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getResponseHeaders() target is: accessEvent method is: getResponseHeaders()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getResponseHeaders()Ljava/util/Map;
TestCase is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
String string = "HTTP/1.1 200 OK";
String string = "HTTP/1.1 200 OK";
hashMap.put(string, string);
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.util.HashMap()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type java.util.HashMap<java.lang.String, java.lang.String>
statement code is: HashMap<String, String> hashMap = new HashMap<String, String>()
statement is: setResponseHeaders(Ljava/util/Map;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setResponseHeaders(arg0)
statement is: getResponseHeaders()Ljava/util/Map; type is: class org.evosuite.testcase.statements.MethodStatement return type java.util.Map<java.lang.String, java.lang.String>
statement code is: Map<String, String> responseHeaders = accessEvent.getResponseHeaders()
test data is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("Content-Type", "application/json");
        accessEvent.setResponseHeaders(hashMap);
        accessEvent.getResponseHeaders();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: HashMap<String, String> hashMap = new HashMap<String, String>(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: hashMap.put("Content-Type", "application/json"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: hashMap.put("Content-Type", "application/json") target is: hashMap method is: put(java.lang.String,java.lang.String)
statement is: accessEvent.setResponseHeaders(hashMap), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setResponseHeaders(hashMap) target is: accessEvent method is: setResponseHeaders(HashMap)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setResponseHeaders(Ljava/util/Map;)V
statement is: accessEvent.getResponseHeaders(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getResponseHeaders() target is: accessEvent method is: getResponseHeaders()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getResponseHeaders()Ljava/util/Map;
TestCase is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("")
statement is: getServerName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String serverName = accessEvent.getServerName()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
accessEvent.getServerName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setServerName("Production Server 1");
        accessEvent.getServerName();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setServerName("Production Server 1"), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setServerName("Production Server 1") target is: accessEvent method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: accessEvent.getServerName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getServerName() target is: accessEvent method is: getServerName()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getServerName()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "Production Server 1";
accessEvent.setServerName(string);
accessEvent.getServerName();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setServerName(Ljava/lang/String;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setServerName("rVMRdpG:eRn<*(Db")
statement is: getServerName()Ljava/lang/String; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.String
statement code is: String serverName = accessEvent.getServerName()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("rVMRdpG:eRn<*(Db");
accessEvent.getServerName();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setServerName("example.com");// replace "rVMRdpG:eRn<*(Db" with a more descriptive server name

        accessEvent.getServerName();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setServerName("example.com")// replace "rVMRdpG:eRn<*(Db" with a more descriptive server name
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setServerName("example.com")// replace "rVMRdpG:eRn<*(Db" with a more descriptive server name
 target is: accessEvent method is: setServerName(java.lang.String)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setServerName(Ljava/lang/String;)V
statement is: accessEvent.getServerName(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getServerName() target is: accessEvent method is: getServerName()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getServerName()Ljava/lang/String;
TestCase is: AccessEvent accessEvent = new AccessEvent();
String string = "example.com";
accessEvent.setServerName(string);
accessEvent.getServerName();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setStatusCode(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setStatusCode((-12))
statement is: getStatusCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int statusCode = accessEvent.getStatusCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode((-12));
accessEvent.getStatusCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setStatusCode(403);
        accessEvent.getStatusCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setStatusCode(403), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setStatusCode(403) target is: accessEvent method is: setStatusCode(int)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setStatusCode(I)V
statement is: accessEvent.getStatusCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getStatusCode() target is: accessEvent method is: getStatusCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getStatusCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
int _int = 403;
accessEvent.setStatusCode(_int);
accessEvent.getStatusCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: setStatusCode(I)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setStatusCode(1195)
statement is: getStatusCode()I type is: class org.evosuite.testcase.statements.MethodStatement return type int
statement code is: int statusCode = accessEvent.getStatusCode()
test data is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(1195);
accessEvent.getStatusCode();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setStatusCode(403);
        accessEvent.getStatusCode();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setStatusCode(403), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setStatusCode(403) target is: accessEvent method is: setStatusCode(int)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setStatusCode(I)V
statement is: accessEvent.getStatusCode(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getStatusCode() target is: accessEvent method is: getStatusCode()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getStatusCode()I
TestCase is: AccessEvent accessEvent = new AccessEvent();
int _int = 403;
accessEvent.setStatusCode(_int);
accessEvent.getStatusCode();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long((-1L))
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: getTimeStamp()Ljava/lang/Long; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Long
statement code is: Long timeStamp = accessEvent.getTimeStamp()
test data is: AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-1L));
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        Long = new Long(-1L);
        accessEvent.setTimeStamp(long.class);
        // Improved test data: use more descriptive and representative values for the time stamp
        accessEvent.setTimeStamp(new Long("2023-02-28T14:59:59.00Z"));
        accessEvent.getTimeStamp();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Long = new Long(-1L), class spoon.support.reflect.code.CtAssignmentImpl
statement is: accessEvent.setTimeStamp(long.class), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(long.class) target is: accessEvent method is: setTimeStamp(java.lang.Class)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: // Improved test data: use more descriptive and representative values for the time stamp
accessEvent.setTimeStamp(new Long("2023-02-28T14:59:59.00Z")), class spoon.support.reflect.code.CtInvocationImpl
invocation is: // Improved test data: use more descriptive and representative values for the time stamp
accessEvent.setTimeStamp(new Long("2023-02-28T14:59:59.00Z")) target is: accessEvent method is: setTimeStamp(java.lang.Long)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
statement is: accessEvent.getTimeStamp(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getTimeStamp() target is: accessEvent method is: getTimeStamp()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getTimeStamp()Ljava/lang/Long;
TestCase is: AccessEvent accessEvent = new AccessEvent();
Long long = null;
accessEvent.setTimeStamp(long);
String string = "2023-02-28T14:59:59.00Z";
Long long = new Long((long) string);
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long(963L)
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: getTimeStamp()Ljava/lang/Long; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Long
statement code is: Long timeStamp = accessEvent.getTimeStamp()
test data is: AccessEvent accessEvent = new AccessEvent();
Long long = new Long(963L);
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        AccessEvent accessEvent = new AccessEvent();
        Long = new Long(1572609843L + ((long) (Math.random() * 1000)));// current time + random variation up to 1 second

        accessEvent.setTimeStamp(long.class);
        accessEvent.getTimeStamp();
    }
}
statement is: AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: Long = new Long(1572609843L + ((long) (Math.random() * 1000)))// current time + random variation up to 1 second
, class spoon.support.reflect.code.CtAssignmentImpl
statement is: accessEvent.setTimeStamp(long.class), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(long.class) target is: accessEvent method is: setTimeStamp(java.lang.Class)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
i 0 Parameters size() 0 Num of Method Parameters: 1
statement is: accessEvent.getTimeStamp(), class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.getTimeStamp() target is: accessEvent method is: getTimeStamp()
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: getTimeStamp()Ljava/lang/Long;
TestCase is: AccessEvent accessEvent = new AccessEvent();
Long long = null;
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();

statement is: de.huxhorn.lilith.data.access.AccessEvent()V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class de.huxhorn.lilith.data.access.AccessEvent
statement code is: AccessEvent accessEvent = new AccessEvent()
statement is: java.lang.Long(J)V type is: class org.evosuite.testcase.statements.ConstructorStatement return type class java.lang.Long
statement code is: Long long = new Long(0L)
statement is: setTimeStamp(Ljava/lang/Long;)V type is: class org.evosuite.testcase.statements.MethodStatement return type void
statement code is: accessEvent.setTimeStamp(arg0)
statement is: getTimeStamp()Ljava/lang/Long; type is: class org.evosuite.testcase.statements.MethodStatement return type class java.lang.Long
statement code is: Long timeStamp = accessEvent.getTimeStamp()
test data is: AccessEvent accessEvent = new AccessEvent();
Long long = new Long(0L);
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();

** It was a parseable test case! 
Improved test data is: class DummyClass {
    public static void main() {
        // Improved test data
        AccessEvent accessEvent = new AccessEvent();
        accessEvent.setTimeStamp(new Long(1567480960L));// 2019-08-30T00:00:00Z

        assertEquals(accessEvent.getTimeStamp(), new Long(1567480960L));
    }
}
statement is: // Improved test data
AccessEvent accessEvent = new AccessEvent(), class spoon.support.reflect.code.CtLocalVariableImpl
class spoon.support.reflect.code.CtConstructorCallImpl
statement is: accessEvent.setTimeStamp(new Long(1567480960L))// 2019-08-30T00:00:00Z
, class spoon.support.reflect.code.CtInvocationImpl
invocation is: accessEvent.setTimeStamp(new Long(1567480960L))// 2019-08-30T00:00:00Z
 target is: accessEvent method is: setTimeStamp(java.lang.Long)
source statement: de.huxhorn.lilith.data.access.AccessEvent()V callee: VariableReference: Statement 0, type de.huxhorn.lilith.data.access.AccessEventindex is: 0
Matched Method is: setTimeStamp(Ljava/lang/Long;)V
statement is: assertEquals(accessEvent.getTimeStamp(), new Long(1567480960L)), class spoon.support.reflect.code.CtInvocationImpl
invocation is: assertEquals(accessEvent.getTimeStamp(), new Long(1567480960L)) target is:  method is: assertEquals(<unknown>,java.lang.Long)
TestCase is: AccessEvent accessEvent = new AccessEvent();
long _long = 1567480960L;
Long long = new Long(_long);
accessEvent.setTimeStamp(long);

* test suite isTestSuite: 174
Test 0: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(660);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 1: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteUser();
Test 2: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.toString();
Test 3: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestParameters();
Test 4: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getLocalPort();
Test 5: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setResponseHeaders(map);
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
accessEvent.equals(accessEvent);
Test 6: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-630L));
accessEvent.setTimeStamp(long);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);
Test 7: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getServerName();
Test 8: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((-1909907106));
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 9: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getProtocol();
Test 10: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 11: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestHeaders();
Test 12: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestURL();
Test 13: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteHost();
Test 14: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
accessEvent.equals(accessEvent);
Test 15: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getStatusCode();
Test 16: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getResponseHeaders();
Test 17: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 18: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getLoggerContext();
Test 19: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
accessEvent.equals(accessEvent);
Test 20: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
accessEvent.equals(accessEvent);
Test 21: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteAddress();
Test 22: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getTimeStamp();
Test 23: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getMethod();
Test 24: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestURI();
Test 25: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 26: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 27: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 28: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals((Object) null);
Test 29: 
AccessEvent accessEvent = new AccessEvent();
Object object = new Object();
accessEvent.equals(object);
Test 30: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);
Test 31: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);
Test 32: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);
Test 33: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
accessEvent.equals(accessEvent);
Test 34: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("6$=^q.u`]:3`-)48-1");
accessEvent.equals(accessEvent);
Test 35: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
accessEvent.equals(accessEvent);
Test 36: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 37: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
accessEvent.equals(accessEvent);
Test 38: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("y!>eC");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 39: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.equals(accessEvent);
Test 40: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.equals(accessEvent);
Test 41: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("");
accessEvent.equals(accessEvent);
Test 42: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
accessEvent.equals(accessEvent);
Test 43: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 44: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestHeaders(map);
accessEvent.equals(accessEvent);
Test 45: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 46: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
accessEvent.equals(accessEvent);
Test 47: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7Zd(Cm m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 48: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("7,qARlPk");
accessEvent.equals(accessEvent);
Test 49: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("7,qARlPk");
accessEvent.setRequestURL("7,qARlPk");
accessEvent.equals(accessEvent);
Test 50: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 51: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.setResponseHeaders(hashMap);
accessEvent.equals(accessEvent);
Test 52: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 53: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
accessEvent.equals(accessEvent);
Test 54: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
accessEvent.equals(accessEvent);
Test 55: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-630L));
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);
Test 56: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(0L);
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);
Test 57: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-1L));
accessEvent.setTimeStamp(long);
accessEvent.hashCode();
Test 58: 
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.hashCode();
Test 59: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("");
accessEvent.hashCode();
Test 60: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("gF0Ec%vr(Zh|kx");
accessEvent.hashCode();
Test 61: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("h3_+(302");
accessEvent.hashCode();
Test 62: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser(", birthTime=");
accessEvent.hashCode();
Test 63: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("");
accessEvent.hashCode();
Test 64: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod(")[J%-v%)K&*y',{R=K");
accessEvent.hashCode();
Test 65: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("h3_+(302");
accessEvent.hashCode();
Test 66: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("/iYy%;#bwzP=");
accessEvent.hashCode();
Test 67: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((-1));
accessEvent.getLocalPort();
Test 68: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort(4267);
accessEvent.getLocalPort();
Test 69: 
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.getLoggerContext();
Test 70: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("");
accessEvent.getMethod();
Test 71: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod(", birthTime=");
accessEvent.getMethod();
Test 72: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("");
accessEvent.getProtocol();
Test 73: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol(", birthTime=");
accessEvent.getProtocol();
Test 74: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("");
accessEvent.getRemoteAddress();
Test 75: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress(", birthTime=");
accessEvent.getRemoteAddress();
Test 76: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("");
accessEvent.getRemoteHost();
Test 77: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost(")[J%-v%)K&*y',{R=K");
accessEvent.getRemoteHost();
Test 78: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("");
accessEvent.getRemoteUser();
Test 79: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("]");
accessEvent.getRemoteUser();
Test 80: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime=");
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();
Test 81: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();
Test 82: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
String[] stringArray = new String[1];
hashMap.put("", stringArray);
accessEvent.setRequestParameters(hashMap);
accessEvent.getRequestParameters();
Test 83: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
accessEvent.setRequestParameters(hashMap);
accessEvent.getRequestParameters();
Test 84: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("");
accessEvent.getRequestURI();
Test 85: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("iYPdb]-Z^Ldkd?x");
accessEvent.getRequestURI();
Test 86: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("");
accessEvent.getRequestURL();
Test 87: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("R*R-.c)nJ^]");
accessEvent.getRequestURL();
Test 88: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("*Tlkuf;KD$~P", "*Tlkuf;KD$~P");
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();
Test 89: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();
Test 90: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
accessEvent.getServerName();
Test 91: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("rVMRdpG:eRn<*(Db");
accessEvent.getServerName();
Test 92: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode((-12));
accessEvent.getStatusCode();
Test 93: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(1195);
accessEvent.getStatusCode();
Test 94: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-1L));
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();
Test 95: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(963L);
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();
Test 96: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(0L);
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();
Test 97: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(401);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

Test 98: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setResponseHeaders((Map<String, String>) null);
accessEvent.setRemoteAddress("84.23.160.56");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("84.23.160.56");
accessEvent.equals(accessEvent);

Test 99: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp((Long) null);
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(1000);
accessEvent.setTimeStamp(long);

Test 100: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((int) (Integer) null);

Test 101: 
AccessEvent accessEvent = new AccessEvent();

Test 102: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("HTTPS");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("SSH");

Test 103: 
AccessEvent accessEvent = new AccessEvent();

Test 104: 
AccessEvent accessEvent = new AccessEvent();

Test 105: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("Jane Doe");

Test 106: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("192.168.0.1");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("192.168.0.2");

Test 107: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getTimeStamp();

Test 108: 

Test 109: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.equals(accessEvent);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.1.1");
accessEvent.equals(accessEvent);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("10.0.0.1");
accessEvent.equals(accessEvent);

Test 110: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("GET /api/users?page=1&size=20");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

Test 111: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals("Some String");

Test 112: 
Object object = new Object();

Test 113: 
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);

Test 114: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("read_data_from_file");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("read_data_from_database");
accessEvent.equals(accessEvent);

Test 115: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("GET /user/{id}");

Test 116: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

Test 117: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");

Test 118: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
AccessEvent accessEvent = new AccessEvent();

Test 119: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

Test 120: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.0.1");

Test 121: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

Test 122: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

Test 123: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
AccessEvent accessEvent = new AccessEvent();

Test 124: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestHeaders((Map<String, String>) null);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestHeaders((Map<String, String>) null);

Test 125: 
AccessEvent accessEvent = new AccessEvent();

Test 126: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("https://www.example.com/login?param1=value1&param2=value2");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("https://www.example.com/login?param1=value1&param2=value2");

Test 127: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("https://www.example.com/path/to/resource");
AccessEvent accessEvent = new AccessEvent();

Test 128: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/path/to/file?query=value");
accessEvent.equals(accessEvent);

Test 129: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://example.com/page");
accessEvent.equals(accessEvent);

Test 130: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/index.html");
AccessEvent accessEvent = new AccessEvent();

Test 131: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.setResponseHeaders(hashMap);
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);

Test 132: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
AccessEvent accessEvent = new AccessEvent();

Test 133: 
AccessEvent accessEvent = new AccessEvent();

Test 134: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("production");

Test 135: 
Long long = new Long((long) "2022-02-24T15:29:47");
String string = "2022-02-25T15:29:47";
Long long = new Long((long) string);
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

Test 136: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp((Long) null);
accessEvent.hashCode();

Test 137: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("/user/profile/1234");
accessEvent.hashCode();

Test 138: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/path/to/resource?query=string");
accessEvent.hashCode();

Test 139: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.1.1");
accessEvent.hashCode();

Test 140: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
accessEvent.hashCode();

Test 141: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("https");
accessEvent.hashCode();

Test 142: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("HTTP GET method");

Test 143: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("https://www.example.com");
accessEvent.hashCode();

Test 144: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.hashCode();

Test 145: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort(80);
accessEvent.getLocalPort();

Test 146: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort(80);
accessEvent.getLocalPort();

Test 147: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("GET");
accessEvent.getMethod();

Test 148: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("POST");
accessEvent.getMethod();

Test 149: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("HTTPS");
accessEvent.getProtocol();

Test 150: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("HTTP/1.1");
accessEvent.getProtocol();

Test 151: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.getRemoteAddress();

Test 152: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.getRemoteAddress();

Test 153: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.0.1");
accessEvent.getRemoteHost();

Test 154: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.0.1");
accessEvent.getRemoteHost();

Test 155: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
accessEvent.getRemoteUser();

Test 156: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
accessEvent.getRemoteUser();

Test 157: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime=");
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();

Test 158: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setRequestHeaders(hashMap);

Test 159: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
String[] stringArray = new String[1];
hashMap.put("credentials", stringArray);
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
String[] stringArray = new String[1];
hashMap.put("credentials", stringArray);
accessEvent.setRequestParameters(hashMap);
accessEvent.setRequestParameters(hashMap);

Test 160: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
accessEvent.setRequestParameters(hashMap);
accessEvent.getRequestParameters();

Test 161: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("/api/users/123456789");
accessEvent.getRequestURI();

Test 162: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("https://www.example.com/path/to/resource?query=string&another=query");
accessEvent.getRequestURI();

Test 163: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/login");
accessEvent.getRequestURL();

Test 164: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/path/to/file.html");
accessEvent.getRequestURL();

Test 165: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("HTTP/1.1 200 OK", "HTTP/1.1 200 OK");
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();

Test 166: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();

Test 167: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("Production Server 1");
accessEvent.getServerName();

Test 168: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("example.com");
accessEvent.getServerName();

Test 169: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(403);
accessEvent.getStatusCode();

Test 170: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(403);
accessEvent.getStatusCode();

Test 171: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp((Long) null);
Long long = new Long((long) "2023-02-28T14:59:59.00Z");
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();

Test 172: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp((Long) null);
accessEvent.getTimeStamp();

Test 173: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(1567480960L);
accessEvent.setTimeStamp(long);


* Generated after the refinement and before minimization 174 tests with total length 603
* test suite isTestSuite: 174
Test 0: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(660);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 1: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteUser();
Test 2: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.toString();
Test 3: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestParameters();
Test 4: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getLocalPort();
Test 5: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setResponseHeaders(map);
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
accessEvent.equals(accessEvent);
Test 6: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-630L));
accessEvent.setTimeStamp(long);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);
Test 7: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getServerName();
Test 8: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((-1909907106));
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 9: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getProtocol();
Test 10: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 11: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestHeaders();
Test 12: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestURL();
Test 13: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteHost();
Test 14: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
accessEvent.equals(accessEvent);
Test 15: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getStatusCode();
Test 16: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getResponseHeaders();
Test 17: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 18: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getLoggerContext();
Test 19: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
accessEvent.equals(accessEvent);
Test 20: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
accessEvent.equals(accessEvent);
Test 21: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteAddress();
Test 22: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getTimeStamp();
Test 23: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getMethod();
Test 24: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestURI();
Test 25: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 26: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 27: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 28: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals((Object) null);
Test 29: 
AccessEvent accessEvent = new AccessEvent();
Object object = new Object();
accessEvent.equals(object);
Test 30: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);
Test 31: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);
Test 32: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);
Test 33: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
accessEvent.equals(accessEvent);
Test 34: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("6$=^q.u`]:3`-)48-1");
accessEvent.equals(accessEvent);
Test 35: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
accessEvent.equals(accessEvent);
Test 36: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 37: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
accessEvent.equals(accessEvent);
Test 38: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("y!>eC");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 39: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.equals(accessEvent);
Test 40: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.equals(accessEvent);
Test 41: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("");
accessEvent.equals(accessEvent);
Test 42: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
accessEvent.equals(accessEvent);
Test 43: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 44: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestHeaders(map);
accessEvent.equals(accessEvent);
Test 45: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 46: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
accessEvent.equals(accessEvent);
Test 47: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7Zd(Cm m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 48: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("7,qARlPk");
accessEvent.equals(accessEvent);
Test 49: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("7,qARlPk");
accessEvent.setRequestURL("7,qARlPk");
accessEvent.equals(accessEvent);
Test 50: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 51: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.setResponseHeaders(hashMap);
accessEvent.equals(accessEvent);
Test 52: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 53: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
accessEvent.equals(accessEvent);
Test 54: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
accessEvent.equals(accessEvent);
Test 55: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-630L));
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);
Test 56: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(0L);
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);
Test 57: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-1L));
accessEvent.setTimeStamp(long);
accessEvent.hashCode();
Test 58: 
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.hashCode();
Test 59: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("");
accessEvent.hashCode();
Test 60: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("gF0Ec%vr(Zh|kx");
accessEvent.hashCode();
Test 61: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("h3_+(302");
accessEvent.hashCode();
Test 62: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser(", birthTime=");
accessEvent.hashCode();
Test 63: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("");
accessEvent.hashCode();
Test 64: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod(")[J%-v%)K&*y',{R=K");
accessEvent.hashCode();
Test 65: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("h3_+(302");
accessEvent.hashCode();
Test 66: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("/iYy%;#bwzP=");
accessEvent.hashCode();
Test 67: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((-1));
accessEvent.getLocalPort();
Test 68: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort(4267);
accessEvent.getLocalPort();
Test 69: 
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.getLoggerContext();
Test 70: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("");
accessEvent.getMethod();
Test 71: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod(", birthTime=");
accessEvent.getMethod();
Test 72: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("");
accessEvent.getProtocol();
Test 73: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol(", birthTime=");
accessEvent.getProtocol();
Test 74: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("");
accessEvent.getRemoteAddress();
Test 75: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress(", birthTime=");
accessEvent.getRemoteAddress();
Test 76: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("");
accessEvent.getRemoteHost();
Test 77: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost(")[J%-v%)K&*y',{R=K");
accessEvent.getRemoteHost();
Test 78: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("");
accessEvent.getRemoteUser();
Test 79: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("]");
accessEvent.getRemoteUser();
Test 80: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime=");
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();
Test 81: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();
Test 82: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
String[] stringArray = new String[1];
hashMap.put("", stringArray);
accessEvent.setRequestParameters(hashMap);
accessEvent.getRequestParameters();
Test 83: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
accessEvent.setRequestParameters(hashMap);
accessEvent.getRequestParameters();
Test 84: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("");
accessEvent.getRequestURI();
Test 85: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("iYPdb]-Z^Ldkd?x");
accessEvent.getRequestURI();
Test 86: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("");
accessEvent.getRequestURL();
Test 87: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("R*R-.c)nJ^]");
accessEvent.getRequestURL();
Test 88: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("*Tlkuf;KD$~P", "*Tlkuf;KD$~P");
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();
Test 89: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();
Test 90: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
accessEvent.getServerName();
Test 91: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("rVMRdpG:eRn<*(Db");
accessEvent.getServerName();
Test 92: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode((-12));
accessEvent.getStatusCode();
Test 93: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(1195);
accessEvent.getStatusCode();
Test 94: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-1L));
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();
Test 95: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(963L);
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();
Test 96: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(0L);
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();
Test 97: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(401);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

Test 98: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setResponseHeaders((Map<String, String>) null);
accessEvent.setRemoteAddress("84.23.160.56");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("84.23.160.56");
accessEvent.equals(accessEvent);

Test 99: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp((Long) null);
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(1000);
accessEvent.setTimeStamp(long);

Test 100: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((int) (Integer) null);

Test 101: 
AccessEvent accessEvent = new AccessEvent();

Test 102: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("HTTPS");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("SSH");

Test 103: 
AccessEvent accessEvent = new AccessEvent();

Test 104: 
AccessEvent accessEvent = new AccessEvent();

Test 105: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("Jane Doe");

Test 106: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("192.168.0.1");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("192.168.0.2");

Test 107: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getTimeStamp();

Test 108: 

Test 109: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.equals(accessEvent);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.1.1");
accessEvent.equals(accessEvent);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("10.0.0.1");
accessEvent.equals(accessEvent);

Test 110: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("GET /api/users?page=1&size=20");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

Test 111: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals("Some String");

Test 112: 
Object object = new Object();

Test 113: 
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);

Test 114: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("read_data_from_file");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("read_data_from_database");
accessEvent.equals(accessEvent);

Test 115: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("GET /user/{id}");

Test 116: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

Test 117: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");

Test 118: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
AccessEvent accessEvent = new AccessEvent();

Test 119: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

Test 120: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.0.1");

Test 121: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);

Test 122: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

Test 123: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
AccessEvent accessEvent = new AccessEvent();

Test 124: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestHeaders((Map<String, String>) null);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestHeaders((Map<String, String>) null);

Test 125: 
AccessEvent accessEvent = new AccessEvent();

Test 126: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("https://www.example.com/login?param1=value1&param2=value2");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("https://www.example.com/login?param1=value1&param2=value2");

Test 127: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("https://www.example.com/path/to/resource");
AccessEvent accessEvent = new AccessEvent();

Test 128: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/path/to/file?query=value");
accessEvent.equals(accessEvent);

Test 129: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://example.com/page");
accessEvent.equals(accessEvent);

Test 130: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/index.html");
AccessEvent accessEvent = new AccessEvent();

Test 131: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.setResponseHeaders(hashMap);
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);

Test 132: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
AccessEvent accessEvent = new AccessEvent();

Test 133: 
AccessEvent accessEvent = new AccessEvent();

Test 134: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("production");

Test 135: 
Long long = new Long((long) "2022-02-24T15:29:47");
String string = "2022-02-25T15:29:47";
Long long = new Long((long) string);
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();

Test 136: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp((Long) null);
accessEvent.hashCode();

Test 137: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("/user/profile/1234");
accessEvent.hashCode();

Test 138: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/path/to/resource?query=string");
accessEvent.hashCode();

Test 139: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.1.1");
accessEvent.hashCode();

Test 140: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
accessEvent.hashCode();

Test 141: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("https");
accessEvent.hashCode();

Test 142: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("HTTP GET method");

Test 143: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("https://www.example.com");
accessEvent.hashCode();

Test 144: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.hashCode();

Test 145: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort(80);
accessEvent.getLocalPort();

Test 146: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort(80);
accessEvent.getLocalPort();

Test 147: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("GET");
accessEvent.getMethod();

Test 148: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("POST");
accessEvent.getMethod();

Test 149: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("HTTPS");
accessEvent.getProtocol();

Test 150: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("HTTP/1.1");
accessEvent.getProtocol();

Test 151: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.getRemoteAddress();

Test 152: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.getRemoteAddress();

Test 153: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.0.1");
accessEvent.getRemoteHost();

Test 154: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.0.1");
accessEvent.getRemoteHost();

Test 155: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
accessEvent.getRemoteUser();

Test 156: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
accessEvent.getRemoteUser();

Test 157: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime=");
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();

Test 158: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setRequestHeaders(hashMap);

Test 159: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
String[] stringArray = new String[1];
hashMap.put("credentials", stringArray);
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
String[] stringArray = new String[1];
hashMap.put("credentials", stringArray);
accessEvent.setRequestParameters(hashMap);
accessEvent.setRequestParameters(hashMap);

Test 160: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
accessEvent.setRequestParameters(hashMap);
accessEvent.getRequestParameters();

Test 161: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("/api/users/123456789");
accessEvent.getRequestURI();

Test 162: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("https://www.example.com/path/to/resource?query=string&another=query");
accessEvent.getRequestURI();

Test 163: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/login");
accessEvent.getRequestURL();

Test 164: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/path/to/file.html");
accessEvent.getRequestURL();

Test 165: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("HTTP/1.1 200 OK", "HTTP/1.1 200 OK");
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();

Test 166: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();

Test 167: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("Production Server 1");
accessEvent.getServerName();

Test 168: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("example.com");
accessEvent.getServerName();

Test 169: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(403);
accessEvent.getStatusCode();

Test 170: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(403);
accessEvent.getStatusCode();

Test 171: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp((Long) null);
Long long = new Long((long) "2023-02-28T14:59:59.00Z");
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();

Test 172: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp((Long) null);
accessEvent.getTimeStamp();

Test 173: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(1567480960L);
accessEvent.setTimeStamp(long);


* Minimizing test suite
* test suite isTestSuite: 96
Test 0: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(403);
accessEvent.getStatusCode();
Test 1: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteUser();
Test 2: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.toString();
Test 3: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.0.1");
accessEvent.getRemoteHost();
Test 4: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestParameters();
Test 5: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getLocalPort();
Test 6: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 7: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
accessEvent.setRequestParameters(hashMap);
accessEvent.getRequestParameters();
Test 8: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getServerName();
Test 9: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort(80);
accessEvent.getLocalPort();
Test 10: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getProtocol();
Test 11: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();
Test 12: 
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.hashCode();
Test 13: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestHeaders();
Test 14: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestURL();
Test 15: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteHost();
Test 16: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("HTTP/1.1");
accessEvent.getProtocol();
Test 17: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getStatusCode();
Test 18: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getResponseHeaders();
Test 19: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("/api/users/123456789");
accessEvent.getRequestURI();
Test 20: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getLoggerContext();
Test 21: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
accessEvent.hashCode();
Test 22: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("Production Server 1");
accessEvent.getServerName();
Test 23: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRemoteAddress();
Test 24: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getTimeStamp();
Test 25: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getMethod();
Test 26: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.getRequestURI();
Test 27: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.hashCode();
Test 28: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("GET");
accessEvent.getMethod();
Test 29: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 30: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals((Object) null);
Test 31: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals("Some String");
Test 32: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((-1909907106));
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 33: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(401);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 34: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);
Test 35: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);
Test 36: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.equals(accessEvent);
Test 37: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("read_data_from_file");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 38: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
accessEvent.equals(accessEvent);
Test 39: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("6$=^q.u`]:3`-)48-1");
accessEvent.equals(accessEvent);
Test 40: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
accessEvent.equals(accessEvent);
Test 41: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
accessEvent.equals(accessEvent);
Test 42: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("<");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 43: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("84.23.160.56");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 44: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("y!>eC");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 45: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.equals(accessEvent);
Test 46: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.setRemoteHost("QrU#);,5k->");
accessEvent.equals(accessEvent);
Test 47: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("");
accessEvent.equals(accessEvent);
Test 48: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
accessEvent.equals(accessEvent);
Test 49: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("@7yd(Cm*m{");
accessEvent.equals(accessEvent);
Test 50: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 51: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 52: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestHeaders(map);
accessEvent.equals(accessEvent);
Test 53: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setRequestHeaders(map);
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 54: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 55: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
accessEvent.equals(accessEvent);
Test 56: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7Zd(Cm m{");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 57: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("7,qARlPk");
accessEvent.equals(accessEvent);
Test 58: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("7,qARlPk");
accessEvent.setRequestURL("7,qARlPk");
accessEvent.equals(accessEvent);
Test 59: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("");
AccessEvent accessEvent = new AccessEvent();
accessEvent.equals(accessEvent);
Test 60: 
AccessEvent accessEvent = new AccessEvent();
Map<String, String> map = ZoneId.SHORT_IDS;
accessEvent.setResponseHeaders(map);
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("=^C~76:wAb-sXUY\f#");
accessEvent.equals(accessEvent);
Test 61: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.setResponseHeaders(hashMap);
accessEvent.equals(accessEvent);
Test 62: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
accessEvent.equals(accessEvent);
Test 63: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("=^C~76:wAbYsUY\f#");
accessEvent.equals(accessEvent);
Test 64: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
accessEvent.equals(accessEvent);
Test 65: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-630L));
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);
Test 66: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-630L));
accessEvent.setTimeStamp(long);
AccessEvent accessEvent = new AccessEvent();
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);
Test 67: 
AccessEvent accessEvent = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(0L);
accessEvent.setTimeStamp(long);
accessEvent.equals(accessEvent);
Test 68: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-1L));
accessEvent.setTimeStamp(long);
accessEvent.hashCode();
Test 69: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("/user/profile/1234");
accessEvent.hashCode();
Test 70: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/path/to/resource?query=string");
accessEvent.hashCode();
Test 71: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.1.1");
accessEvent.hashCode();
Test 72: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("https");
accessEvent.hashCode();
Test 73: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod(")[J%-v%)K&*y',{R=K");
accessEvent.hashCode();
Test 74: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("https://www.example.com");
accessEvent.hashCode();
Test 75: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((-1));
accessEvent.getLocalPort();
Test 76: 
AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = new LoggerContext();
accessEvent.setLoggerContext(loggerContext);
accessEvent.getLoggerContext();
Test 77: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("");
accessEvent.getMethod();
Test 78: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("");
accessEvent.getProtocol();
Test 79: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("");
accessEvent.getRemoteAddress();
Test 80: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.getRemoteAddress();
Test 81: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("");
accessEvent.getRemoteHost();
Test 82: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("");
accessEvent.getRemoteUser();
Test 83: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
accessEvent.getRemoteUser();
Test 84: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime=");
accessEvent.setRequestHeaders(hashMap);
accessEvent.getRequestHeaders();
Test 85: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> hashMap = new HashMap<String, String[]>();
String[] stringArray = new String[1];
hashMap.put("", stringArray);
accessEvent.setRequestParameters(hashMap);
accessEvent.getRequestParameters();
Test 86: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("");
accessEvent.getRequestURI();
Test 87: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("");
accessEvent.getRequestURL();
Test 88: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/login");
accessEvent.getRequestURL();
Test 89: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
hashMap.put("HTTP/1.1 200 OK", "HTTP/1.1 200 OK");
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();
Test 90: 
AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> hashMap = new HashMap<String, String>();
accessEvent.setResponseHeaders(hashMap);
accessEvent.getResponseHeaders();
Test 91: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
accessEvent.getServerName();
Test 92: 
AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode((-12));
accessEvent.getStatusCode();
Test 93: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long((-1L));
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();
Test 94: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(963L);
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();
Test 95: 
AccessEvent accessEvent = new AccessEvent();
Long long = new Long(0L);
accessEvent.setTimeStamp(long);
accessEvent.getTimeStamp();

* Going to analyze the coverage criteria
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 134
* Number of covered goals: 134
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 86
* Number of covered goals: 86
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 92%
* Total number of goals: 59
* Number of covered goals: 54
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 34
* Number of covered goals: 34
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 134
* Number of covered goals: 134
* Generated 96 tests with total length 347
* Resulting test suite's coverage: 98% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 52%
* Compiling and checking tests
Going to execute: removeTestsThatDoNotCompile
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(403);
int statusCode = accessEvent.getStatusCode();
assertEquals(403, statusCode);


** It was a parseable test case! 
refined test name is: testGetStatusCodeShouldReturnExpectedValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
String remoteUser = accessEvent.getRemoteUser();
assertNull(remoteUser);


** It was a parseable test case! 
refined test name is: testThatRemoteUserIsNullWhenNoUserIsLoggedIn
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
String string = accessEvent.toString();
assertEquals("AccessEvent[loggerContext=null, timeStamp=null]", string);


** It was a parseable test case! 
refined test name is: testToStringMethodReturnsExpectedString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.0.1");
String remoteHost = accessEvent.getRemoteHost();
assertEquals("192.168.0.1", remoteHost);


** It was a parseable test case! 
refined test name is: testGetRemoteHost
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
Map<String, String[]> requestParameters = accessEvent.getRequestParameters();
assertNull(requestParameters);


** It was a parseable test case! 
refined test name is: testGetRequestParametersreturnsNullWhenNoParams
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
int localPort = accessEvent.getLocalPort();
assertEquals(0, localPort);


** It was a parseable test case! 
refined test name is: testGetLocalPort
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> arg0 = new HashMap<String, String[]>();
accessEvent.setRequestParameters(arg0);
Map<String, String[]> requestParameters = accessEvent.getRequestParameters();
assertEquals(0, requestParameters.size());


** It was a parseable test case! 
refined test name is: testGetRequestParametersForEmptyAccessEvent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
String serverName = accessEvent.getServerName();
assertNull(serverName);


** It was a parseable test case! 
refined test name is: testGetServerNameWhenNotSet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort(80);
int localPort = accessEvent.getLocalPort();
assertEquals(80, localPort);


** It was a parseable test case! 
refined test name is: testGetLocalPort
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
String protocol = accessEvent.getProtocol();
assertNull(protocol);


** It was a parseable test case! 
refined test name is: testGetProtocolReturnsNullWhenProtocolIsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> arg0 = new HashMap<String, String>();
accessEvent.setRequestHeaders(arg0);
Map<String, String> requestHeaders = accessEvent.getRequestHeaders();
assertEquals(0, requestHeaders.size());


** It was a parseable test case! 
refined test name is: testSetRequestHeadersWithEmptyMap
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
LoggerContext arg0 = new LoggerContext();
accessEvent.setLoggerContext(arg0);
accessEvent.hashCode();

** It was a parseable test case! 
refined test name is: testHashCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> requestHeaders = accessEvent.getRequestHeaders();
assertNull(requestHeaders);


** It was a parseable test case! 
refined test name is: testAccessEventRequestHeadersAreNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
String requestURL = accessEvent.getRequestURL();
assertNull(requestURL);


** It was a parseable test case! 
refined test name is: testGetRequestURLReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
String remoteHost = accessEvent.getRemoteHost();
assertNull(remoteHost);


** It was a parseable test case! 
refined test name is: testGetRemoteHostReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("HTTP/1.1");
String protocol = accessEvent.getProtocol();
assertEquals("HTTP/1.1", protocol);


** It was a parseable test case! 
refined test name is: testSetAndGetProtocol
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
int statusCode = accessEvent.getStatusCode();
assertEquals(0, statusCode);


** It was a parseable test case! 
refined test name is: testGetStatusCodeValidInputReturnsZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
Map<String, String> responseHeaders = accessEvent.getResponseHeaders();
assertNull(responseHeaders);


** It was a parseable test case! 
refined test name is: testGetResponseHeadersReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("/api/users/123456789");
String requestURI = accessEvent.getRequestURI();
assertEquals("/api/users/123456789", requestURI);


** It was a parseable test case! 
refined test name is: testGetRequestURICorrectURI
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
LoggerContext loggerContext = accessEvent.getLoggerContext();
assertNull(loggerContext);


** It was a parseable test case! 
refined test name is: testGetLoggerContextReturnsNull
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
accessEvent.hashCode();

** It was a parseable test case! 
refined test name is: testHashCodeReturnsNonZeroValueForRemoteUser
* Compiling Tests
refined test name is: testHashCodeReturnsNonZeroValueForRemoteUser
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("Production Server 1");
String serverName = accessEvent.getServerName();
assertEquals("Production Server 1", serverName);


** It was a parseable test case! 
refined test name is: testGetServerNameShouldReturnExpectedServerName
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
String remoteAddress = accessEvent.getRemoteAddress();
assertNull(remoteAddress);


** It was a parseable test case! 
refined test name is: testGetRemoteAddress
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
Long timeStamp = accessEvent.getTimeStamp();
assertNull(timeStamp);


** It was a parseable test case! 
refined test name is: testGetTimestampreturnsNullWhenNotSet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
String method = accessEvent.getMethod();
assertNull(method);


** It was a parseable test case! 
refined test name is: testGetMethodReturnsNullWhenMethodIsNotSet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
String requestURI = accessEvent.getRequestURI();
assertNull(requestURI);


** It was a parseable test case! 
refined test name is: testGetRequestURINullWhenNotSet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
accessEvent.hashCode();

** It was a parseable test case! 
refined test name is: testHashCodeForRemoteAddress
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("GET");
String method = accessEvent.getMethod();
assertEquals("GET", method);


** It was a parseable test case! 
refined test name is: testGetMethodReturnsCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
boolean equals = arg0.equals(arg0);
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualsSelf
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
boolean equals = accessEvent.equals((Object) null);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithNullObject
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
boolean equals = accessEvent.equals("Some String");
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWhenComparedToString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
arg0.setLocalPort((-1909907106));
AccessEvent accessEvent = new AccessEvent();
boolean equals = accessEvent.equals(arg0);
assertEquals((-1909907106), arg0.getLocalPort());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsMethodWithDifferentLocalPorts
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode(401);
AccessEvent arg0 = new AccessEvent();
boolean equals = accessEvent.equals(arg0);
assertEquals(401, accessEvent.getStatusCode());
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualAccessEventsWithDifferentStatusCodes
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("read_data_from_file");
AccessEvent arg0 = new AccessEvent();
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithDifferentMethods
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("ab;Lr,9}:-b5f0txSG");
AccessEvent arg0 = new AccessEvent();
assertFalse(arg0.equals((Object)accessEvent));

arg0.setMethod("ab;Lr,9}:-b5f0txSG");
boolean equals = accessEvent.equals(arg0);
assertTrue(arg0.equals((Object)accessEvent));
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualsMethodDifferentMethodsReturnsFalse
* Compiling Tests
refined test name is: testEqualsMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
assertTrue(accessEvent.equals((Object)arg0));

arg0.setMethod("6$=^q.u`]:3`-)48-1");
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsMethod
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
assertTrue(accessEvent.equals((Object)arg0));

accessEvent.setProtocol("<");
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithDifferentProtocols
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
arg0.setProtocol("<");
AccessEvent accessEvent = new AccessEvent();
assertFalse(accessEvent.equals((Object)arg0));

accessEvent.setProtocol("<");
boolean equals = accessEvent.equals(arg0);
assertTrue(accessEvent.equals((Object)arg0));
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualsdifferentProtocols
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
arg0.setProtocol("<");
AccessEvent accessEvent = new AccessEvent();
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualswithDifferentProtocolsreturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("84.23.160.56");
AccessEvent arg0 = new AccessEvent();
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testNotEqualWhenDifferentRemoteAddresses
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
arg0.setRemoteAddress("y!>eC");
AccessEvent accessEvent = new AccessEvent();
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualswithDifferentRemoteAddressesreturnsFalse
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
assertTrue(accessEvent.equals((Object)arg0));

accessEvent.setRemoteHost("QrU#);,5k->");
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsSameRemoteHostReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
arg0.setRemoteHost("QrU#);,5k->");
assertFalse(arg0.equals((Object)accessEvent));

accessEvent.setRemoteHost("QrU#);,5k->");
boolean equals = accessEvent.equals(arg0);
assertTrue(arg0.equals((Object)accessEvent));
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualsSameRemoteHostReturnsTrue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
AccessEvent arg0 = new AccessEvent();
assertTrue(arg0.equals((Object)accessEvent));

arg0.setRemoteHost("");
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualswithDifferentRemoteHosts
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
assertTrue(accessEvent.equals((Object)arg0));

accessEvent.setRemoteUser("@7yd(Cm*m{");
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testAccessEventEquals
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
arg0.setRemoteUser("@7yd(Cm*m{");
AccessEvent accessEvent = new AccessEvent();
assertFalse(accessEvent.equals((Object)arg0));

accessEvent.setRemoteUser("@7yd(Cm*m{");
boolean equals = accessEvent.equals(arg0);
assertTrue(accessEvent.equals((Object)arg0));
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualssameRemoteUser
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
arg0.setRemoteUser("");
AccessEvent accessEvent = new AccessEvent();
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsForDifferentRemoteUsers
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
AccessEvent arg0 = new AccessEvent();
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testAccessEventEqualsWhenRequestURIDifferent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("@7yd(Cm*m{");
AccessEvent arg0 = new AccessEvent();
assertFalse(arg0.equals((Object)accessEvent));

arg0.setRequestURI("@7yd(Cm*m{");
boolean equals = accessEvent.equals(arg0);
assertTrue(arg0.equals((Object)accessEvent));
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualsMethodWithDifferentValuesForRequestURI
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
arg0.setRequestURI("@7Zd(Cm m{");
AccessEvent accessEvent = new AccessEvent();
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsDifferentObjectsSameRequestURI
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
AccessEvent arg0 = new AccessEvent();
assertTrue(arg0.equals((Object)accessEvent));

accessEvent.setRequestURL("7,qARlPk");
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsShouldReturnTrueForEqualObjects
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
AccessEvent arg0 = new AccessEvent();
arg0.setRequestURL("7,qARlPk");
assertFalse(arg0.equals((Object)accessEvent));

accessEvent.setRequestURL("7,qARlPk");
boolean equals = accessEvent.equals(arg0);
assertTrue(arg0.equals((Object)accessEvent));
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testNotEqualDifferentRequestURLs
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
arg0.setRequestURL("");
AccessEvent accessEvent = new AccessEvent();
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsShouldReturnFalseForDifferentObjects
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
assertTrue(accessEvent.equals((Object)arg0));

accessEvent.setServerName("=^C~76:wAbYsUY\f#");
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testEqualsAccessEvent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
arg0.setServerName("=^C~76:wAbYsUY\f#");
AccessEvent accessEvent = new AccessEvent();
assertFalse(accessEvent.equals((Object)arg0));

accessEvent.setServerName("=^C~76:wAbYsUY\f#");
boolean equals = accessEvent.equals(arg0);
assertTrue(accessEvent.equals((Object)arg0));
assertTrue(equals);


** It was a parseable test case! 
refined test name is: testEqualsWithDifferentServerNames
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent arg0 = new AccessEvent();
AccessEvent accessEvent = new AccessEvent();
assertTrue(accessEvent.equals((Object)arg0));

arg0.setServerName("");
boolean equals = accessEvent.equals(arg0);
assertFalse(equals);


** It was a parseable test case! 
refined test name is: testUnequalInstances
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
Long arg0 = new Long((-1L));
accessEvent.setTimeStamp(arg0);
accessEvent.hashCode();

** It was a parseable test case! 
refined test name is: testHashCodeReturnsNonZeroForNegativeTimestamp
* Compiling Tests
refined test name is: testHashCodereturnsNonZeroForNegativeTimestamp
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("/user/profile/1234");
accessEvent.hashCode();

** It was a parseable test case! 
refined test name is: testHashCode
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/path/to/resource?query=string");
accessEvent.hashCode();

** It was a parseable test case! 
refined test name is: testHashCodeIsUniqueForEachAccessEvent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("192.168.1.1");
accessEvent.hashCode();

** It was a parseable test case! 
refined test name is: testAccessEventHashCodeWithRemoteHostSet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("https");
accessEvent.hashCode();

** It was a parseable test case! 
refined test name is: testHashCodeWithProtocolSetReturnsNonZeroValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod(")[J%-v%)K&*y',{R=K");
accessEvent.hashCode();

** It was a parseable test case! 
refined test name is: testHashCodeNonZero
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("https://www.example.com");
accessEvent.hashCode();

** It was a parseable test case! 
refined test name is: testHashCodepositiveInteger
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setLocalPort((-1));
int localPort = accessEvent.getLocalPort();
assertEquals((-1), localPort);


** It was a parseable test case! 
refined test name is: testSetLocalPortNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
LoggerContext arg0 = new LoggerContext();
accessEvent.setLoggerContext(arg0);
LoggerContext loggerContext = accessEvent.getLoggerContext();
assertNull(loggerContext.getName());


** It was a parseable test case! 
refined test name is: testGetLoggerContext
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setMethod("");
String method = accessEvent.getMethod();
assertEquals("", method);


** It was a parseable test case! 
refined test name is: testGetMethodForAccessEvent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setProtocol("");
String protocol = accessEvent.getProtocol();
assertEquals("", protocol);


** It was a parseable test case! 
refined test name is: testGetEmptyStringFromAccessEventWithNoProtocolSet
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("");
String remoteAddress = accessEvent.getRemoteAddress();
assertEquals("", remoteAddress);


** It was a parseable test case! 
refined test name is: testGetRemoteAddressWithEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteAddress("192.168.0.1");
String remoteAddress = accessEvent.getRemoteAddress();
assertEquals("192.168.0.1", remoteAddress);


** It was a parseable test case! 
refined test name is: testGetRemoteAddress
* Compiling Tests
refined test name is: testGetRemoteAddress
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteHost("");
String remoteHost = accessEvent.getRemoteHost();
assertEquals("", remoteHost);


** It was a parseable test case! 
refined test name is: testGetRemoteHostReturnsEmptyStringWhenHostIsUnset
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("");
String remoteUser = accessEvent.getRemoteUser();
assertEquals("", remoteUser);


** It was a parseable test case! 
refined test name is: testGetRemoteUserWithEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRemoteUser("John Doe");
String remoteUser = accessEvent.getRemoteUser();
assertEquals("John Doe", remoteUser);


** It was a parseable test case! 
refined test name is: testGetRemoteUserFromAccessEvent
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> arg0 = new HashMap<String, String>();
arg0.put("AccessEvent[loggerContext=null, timeStamp=null]", ", birthTime=");
accessEvent.setRequestHeaders(arg0);
Map<String, String> requestHeaders = accessEvent.getRequestHeaders();
assertEquals(1, requestHeaders.size());


** It was a parseable test case! 
refined test name is: testSetRequestHeaders
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String[]> arg0 = new HashMap<String, String[]>();
String[] arg1 = new String[1];
arg0.put("", arg1);
accessEvent.setRequestParameters(arg0);
Map<String, String[]> requestParameters = accessEvent.getRequestParameters();
assertEquals(1, requestParameters.size());


** It was a parseable test case! 
refined test name is: testGetRequestParameters
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURI("");
String requestURI = accessEvent.getRequestURI();
assertEquals("", requestURI);


** It was a parseable test case! 
refined test name is: testSetRequestURIIsEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("");
String requestURL = accessEvent.getRequestURL();
assertEquals("", requestURL);


** It was a parseable test case! 
refined test name is: testGetRequestURL
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setRequestURL("https://www.example.com/login");
String requestURL = accessEvent.getRequestURL();
assertEquals("https://www.example.com/login", requestURL);


** It was a parseable test case! 
refined test name is: testGetRequestURLValidInputReturnsCorrectURL
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> arg0 = new HashMap<String, String>();
arg0.put("HTTP/1.1 200 OK", "HTTP/1.1 200 OK");
accessEvent.setResponseHeaders(arg0);
Map<String, String> responseHeaders = accessEvent.getResponseHeaders();
assertFalse(responseHeaders.isEmpty());


** It was a parseable test case! 
refined test name is: testGetResponseHeadersShouldNotBeEmpty
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
HashMap<String, String> arg0 = new HashMap<String, String>();
accessEvent.setResponseHeaders(arg0);
Map<String, String> responseHeaders = accessEvent.getResponseHeaders();
assertEquals(0, responseHeaders.size());


** It was a parseable test case! 
refined test name is: testSetResponseHeadersWithEmptyMap
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setServerName("");
String serverName = accessEvent.getServerName();
assertEquals("", serverName);


** It was a parseable test case! 
refined test name is: testGetServerNameReturnsEmptyString
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
accessEvent.setStatusCode((-12));
int statusCode = accessEvent.getStatusCode();
assertEquals((-12), statusCode);


** It was a parseable test case! 
refined test name is: testGetStatusCodeInitializedWithNegativeValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
Long arg0 = new Long((-1L));
accessEvent.setTimeStamp(arg0);
Long timeStamp = accessEvent.getTimeStamp();
assertEquals((-1L), (long)timeStamp);


** It was a parseable test case! 
refined test name is: testSetTimeStampToMinusOne
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
Long arg0 = new Long(963L);
accessEvent.setTimeStamp(arg0);
Long timeStamp = accessEvent.getTimeStamp();
assertEquals(963L, (long)timeStamp);


** It was a parseable test case! 
refined test name is: testGetTimeStampShouldReturnCorrectValue
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: true
** Improve Understandability: ** Test Code is: AccessEvent accessEvent = new AccessEvent();
Long arg0 = new Long(0L);
accessEvent.setTimeStamp(arg0);
Long timeStamp = accessEvent.getTimeStamp();
assertEquals(0L, (long)timeStamp);


** It was a parseable test case! 
refined test name is: testSetAndGetTimeStamp
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:31.829 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:31.844 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:31.920 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:31.921 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:31.996 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:31.997 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:32.075 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:32.076 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:32.155 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:32.157 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:32.235 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:32.237 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:32.314 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:32.316 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:32.392 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:32.394 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:32.476 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:32.477 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:32.553 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:32.555 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
[MASTER] 01:45:32.640 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:32.643 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
[MASTER] 01:45:32.786 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:32.788 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
[MASTER] 01:45:32.908 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:32.910 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
[MASTER] 01:45:33.021 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:33.023 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:33.136 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:33.138 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:33.269 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:33.271 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:33.401 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:33.404 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:33.536 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:33.538 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:33.665 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:33.667 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:33.812 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:33.817 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:45:33.979 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:33.982 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:34.129 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:34.132 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:34.273 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:34.276 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:34.422 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:34.425 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:34.569 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:34.572 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:34.715 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:34.718 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:34.852 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:34.854 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:34.955 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:34.957 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:35.065 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:35.067 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:35.180 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:35.182 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
[MASTER] 01:45:35.342 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:35.345 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:35.497 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:35.500 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:35.617 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:35.619 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:35.731 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:35.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:45:35.899 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:35.903 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
[MASTER] 01:45:36.057 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:36.060 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:36.218 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:36.222 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:36.374 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:36.375 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:36.482 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:36.484 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:36.591 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:36.595 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:36.702 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:36.704 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:36.819 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:36.821 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:36.938 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:36.941 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:37.044 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:37.046 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:37.151 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:37.153 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:37.245 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:37.247 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:37.345 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:37.347 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:37.462 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:37.464 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:37.599 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:37.602 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:37.773 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:37.776 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:37.939 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:37.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:38.100 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:38.103 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:38.261 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:38.264 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:38.425 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:38.428 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:38.594 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:38.597 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:39.012 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:39.020 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:45:39.403 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:39.411 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:39.917 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:39.920 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:40.345 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:40.354 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:41.041 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:41.048 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:41.427 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:41.430 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:41.791 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:41.798 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:42.262 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:42.269 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:42.517 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:42.525 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:43.033 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:43.039 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:43.555 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:43.563 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:43.994 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:43.997 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:44.365 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:44.368 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 0 called: 0 to improve: false
[MASTER] 01:45:44.790 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:44.797 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:45.274 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:45.278 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:45.775 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:45.783 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:46.232 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:46.235 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:46.388 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:46.391 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:46.814 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:46.822 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:46.980 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:46.987 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:47.314 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:47.318 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:47.720 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:47.728 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:48.168 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:48.176 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:48.523 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:48.527 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:48.840 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:48.848 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:49.111 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:49.114 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:49.581 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:49.584 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:49.740 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:49.742 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:49.880 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
[MASTER] 01:45:49.883 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
** Write a test suite: 20 called: 0 to improve: false
** Write a test suite: 34 called: 1 to improve: false
** Write a test suite: 56 called: 2 to improve: false
** Write a test suite: 68 called: 3 to improve: false
[MASTER] 01:45:51.095 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:51.098 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
Going to execute: handleTestsThatAreUnstable
* Compiling Tests
** Write a test suite: 15 called: 0 to improve: false
** Write a test suite: 27 called: 1 to improve: false
** Write a test suite: 49 called: 2 to improve: false
** Write a test suite: 63 called: 3 to improve: false
[MASTER] 01:45:52.487 [logback-1] WARN  AgentLoader - Failed to find EvoSuite jar in current classloader. URLs of classloader:
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/localedata.jar
file:/tmp/EvoSuite_pathingJar8386898092216049082.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunjce_provider.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/../lib/tools.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunpkcs11.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jaccess.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/sunec.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/zipfs.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/jfxrt.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/dnsns.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/cldrdata.jar
file:/home/ubuntu/.sdkman/candidates/java/8.0.333.fx-librca/jre/lib/ext/nashorn.jar
[MASTER] 01:45:52.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named initializationError -> class java.lang.RuntimeException: Cannot find either the compilation target folder nor the EvoSuite jar in classpath: /tmp/EvoSuite_pathingJar8386898092216049082.jar
* Writing tests to file
* Writing JUnit test case 'AccessEvent_ESTest' to evosuite-tests
** Write a test suite: 15 called: 0 to improve: false
** Write a test suite: 27 called: 1 to improve: false
** Write a test suite: 49 called: 2 to improve: false
** Write a test suite: 63 called: 3 to improve: false
* Done!

* Computation finished
